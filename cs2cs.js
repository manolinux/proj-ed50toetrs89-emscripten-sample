
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '/var/www/html/cs2cs/cs2cs.data';
    var REMOTE_PACKAGE_BASE = 'cs2cs.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'usr', true, true);
Module['FS_createPath']('/usr', 'local', true, true);
Module['FS_createPath']('/usr/local', 'share', true, true);
Module['FS_createPath']('/usr/local/share', 'proj', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_/var/www/html/cs2cs/cs2cs.data');

    };
    Module['addRunDependency']('datafile_/var/www/html/cs2cs/cs2cs.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 23, "filename": "/usr/data"}, {"audio": 0, "start": 23, "crunched": 0, "end": 648513, "filename": "/usr/local/share/proj/epsg"}, {"audio": 0, "start": 648513, "crunched": 0, "end": 648774, "filename": "/usr/local/share/proj/proj_def.dat"}, {"audio": 0, "start": 648774, "crunched": 0, "end": 1316326, "filename": "/usr/local/share/proj/PENR2009.gsb"}], "remote_package_size": 1316326, "package_uuid": "fe54034b-5dcf-4318-838b-30fd2b699177"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 25952;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([47,221,36,6,129,149,237,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,192,62,58,117,229,147,63,0,0,0,0,0,0,0,0,241,155,194,74,5,21,231,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,99,102,85,58,14,130,191,234,176,194,45,31,73,121,191,49,148,19,237,42,164,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,229,36,148,190,16,170,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,170,238,145,205,85,179,63,0,0,0,0,0,0,0,0,183,49,44,53,49,211,239,63,0,0,0,0,0,0,0,0,193,33,175,98,76,85,117,63,55,60,24,12,9,115,102,191,252,152,197,122,89,201,125,63,201,153,220,222,36,188,115,63,11,61,7,59,106,241,142,191,220,248,110,78,128,188,200,191,22,24,178,186,213,115,176,63,161,83,235,88,0,174,193,191,75,122,115,19,16,238,214,63,28,255,79,15,27,118,210,191,132,139,203,167,125,233,239,63,0,0,0,0,0,0,0,0,176,10,47,28,99,130,117,63,4,226,117,253,130,221,112,191,83,248,34,144,1,143,126,63,131,192,202,161,69,182,115,63,217,107,139,124,168,126,143,191,241,63,67,73,146,49,201,191,56,85,173,59,204,77,176,63,190,32,216,167,210,5,194,191,196,56,201,160,36,110,215,63,129,127,165,78,155,204,210,191,5,236,180,127,175,114,239,63,0,0,0,0,0,0,0,0,224,198,28,186,143,146,149,63,55,96,161,32,194,9,118,63,32,66,92,57,123,103,186,191,23,48,220,20,234,68,173,191,173,10,30,240,10,142,160,191,8,133,82,197,158,135,160,191,135,90,137,47,201,183,169,63,25,175,212,14,218,6,191,63,178,218,252,191,234,200,153,63,178,80,198,83,234,237,182,63,16,203,102,14,73,45,84,191,139,227,27,101,88,32,194,191,117,228,237,173,237,146,125,63,187,244,138,2,216,219,192,191,192,76,202,147,90,222,147,191,26,102,13,131,158,114,179,63,95,16,236,83,233,130,149,191,138,138,221,227,241,89,181,63,64,137,207,157,96,127,239,63,0,0,0,0,0,0,0,0,170,78,98,107,17,172,149,63,236,173,55,32,248,206,110,63,10,134,206,198,165,133,186,191,86,114,95,24,250,113,173,191,171,150,116,148,131,217,160,191,179,103,42,31,221,99,160,191,157,97,15,146,170,146,169,63,9,137,180,141,63,81,191,63,252,54,196,120,205,171,154,63,47,25,199,72,246,8,183,63,148,234,76,235,128,53,72,63,79,99,49,160,205,96,194,191,189,175,37,63,61,17,127,63,254,114,119,231,154,19,193,191,86,210,47,182,181,42,150,191,190,104,143,23,210,225,179,63,53,171,136,228,117,14,151,191,149,215,165,161,161,218,181,63,17,185,191,71,52,122,228,63,128,99,124,13,130,100,193,191,188,181,172,248,15,52,176,63,13,58,223,87,254,223,153,191,86,124,232,39,65,36,136,63,101,154,159,209,12,152,118,191,29,54,54,224,152,10,102,63,124,211,244,217,1,215,85,191,220,17,78,11,94,244,69,63,128,159,113,225,64,72,54,191,52,33,135,179,100,47,232,63,0,0,0,0,0,0,0,0,163,102,74,22,240,229,207,63,10,26,180,9,144,158,107,63,63,186,95,165,133,66,89,191,37,122,215,168,160,5,165,63,161,15,249,219,92,4,186,191,202,4,54,198,210,176,145,63,132,170,102,16,254,9,209,191,187,247,137,102,18,51,215,191,235,99,244,146,181,252,229,191,148,131,126,75,165,164,242,191,119,127,108,53,211,0,249,63,53,208,50,138,226,151,224,63,175,86,22,26,194,16,161,191,255,130,147,35,83,244,186,191,130,177,25,59,60,223,162,191,235,253,70,59,110,248,125,63,7,240,22,72,80,252,136,63,193,255,86,178,99,35,112,63,148,246,6,95,152,76,85,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,240,156,118,47,27,4,192,171,1,21,123,216,99,237,63,224,240,156,118,47,27,244,191,171,1,21,123,216,99,237,63,0,0,0,0,0,0,0,0,171,1,21,123,216,99,237,63,224,240,156,118,47,27,244,63,171,1,21,123,216,99,237,63,224,240,156,118,47,27,4,64,171,1,21,123,216,99,237,63,224,240,156,118,47,27,4,192,9,226,237,170,170,39,200,63,224,240,156,118,47,27,244,191,9,226,237,170,170,39,200,63,0,0,0,0,0,0,0,0,9,226,237,170,170,39,200,63,224,240,156,118,47,27,244,63,9,226,237,170,170,39,200,63,224,240,156,118,47,27,4,64,9,226,237,170,170,39,200,63,80,105,235,49,199,40,254,191,9,226,237,170,170,39,200,191,224,240,156,118,47,27,228,191,9,226,237,170,170,39,200,191,224,240,156,118,47,27,228,63,9,226,237,170,170,39,200,191,80,105,235,49,199,40,254,63,9,226,237,170,170,39,200,191,24,45,68,84,251,33,9,64,9,226,237,170,170,39,200,191,80,105,235,49,199,40,254,191,171,1,21,123,216,99,237,191,224,240,156,118,47,27,228,191,171,1,21,123,216,99,237,191,224,240,156,118,47,27,228,63,171,1,21,123,216,99,237,191,80,105,235,49,199,40,254,63,171,1,21,123,216,99,237,191,24,45,68,84,251,33,9,64,171,1,21,123,216,99,237,191,8,212,81,196,216,204,55,64,165,58,244,72,201,19,79,64,0,0,0,0,0,0,78,64,0,0,0,0,0,0,14,64,186,73,12,2,43,135,240,63,96,229,208,34,219,249,238,63,92,143,194,245,40,92,20,64,31,133,235,81,184,30,243,63,0,0,0,0,0,0,240,63,147,147,162,248,165,19,52,64,96,86,73,224,102,216,75,64,0,0,0,0,0,0,75,64,51,51,51,51,51,51,5,64,123,20,174,71,225,122,240,63,219,249,126,106,188,116,239,63,184,30,133,235,81,184,12,64,168,198,75,55,137,65,242,63,59,223,79,141,151,110,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,237,101,153,77,176,66,64,0,0,0,0,0,0,66,64,0,0,0,0,0,0,62,64,133,235,81,184,30,69,49,64,207,247,83,227,165,155,242,63,133,235,81,184,30,133,235,63,72,225,122,20,174,71,42,64,242,210,77,98,16,88,249,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,24,45,68,84,251,33,249,63,24,45,68,84,251,33,9,64,135,91,97,5,103,172,221,63,80,105,235,49,199,40,254,191,135,91,97,5,103,172,221,63,224,240,156,118,47,27,228,191,135,91,97,5,103,172,221,63,224,240,156,118,47,27,228,63,135,91,97,5,103,172,221,63,80,105,235,49,199,40,254,63,135,91,97,5,103,172,221,63,224,240,156,118,47,27,4,192,135,91,97,5,103,172,221,191,224,240,156,118,47,27,244,191,135,91,97,5,103,172,221,191,0,0,0,0,0,0,0,0,135,91,97,5,103,172,221,191,224,240,156,118,47,27,244,63,135,91,97,5,103,172,221,191,224,240,156,118,47,27,4,64,135,91,97,5,103,172,221,191,0,0,0,0,0,0,0,0,24,45,68,84,251,33,249,191,0,0,0,0,0,0,0,0,91,218,155,226,105,192,230,63,57,157,82,162,70,223,145,63,163,150,207,87,75,16,51,63,157,143,255,178,165,85,212,62,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,26,45,68,84,251,33,9,192,24,45,68,84,251,33,233,63,210,33,51,127,124,217,2,192,29,45,68,84,251,33,249,63,24,45,68,84,251,33,249,191,33,45,68,84,251,33,233,63,24,45,68,84,251,33,233,191,29,45,68,84,251,33,249,63,0,0,0,0,0,0,0,0,33,45,68,84,251,33,233,63,24,45,68,84,251,33,233,63,29,45,68,84,251,33,249,63,24,45,68,84,251,33,249,63,33,45,68,84,251,33,233,63,210,33,51,127,124,217,2,64,29,45,68,84,251,33,249,63,26,45,68,84,251,33,9,64,24,45,68,84,251,33,233,63,26,45,68,84,251,33,9,64,24,45,68,84,251,33,233,191,210,33,51,127,124,217,2,64,29,45,68,84,251,33,249,191,24,45,68,84,251,33,249,63,33,45,68,84,251,33,233,191,24,45,68,84,251,33,233,63,29,45,68,84,251,33,249,191,0,0,0,0,0,0,0,0,33,45,68,84,251,33,233,191,24,45,68,84,251,33,233,191,29,45,68,84,251,33,249,191,24,45,68,84,251,33,249,191,33,45,68,84,251,33,233,191,210,33,51,127,124,217,2,192,29,45,68,84,251,33,249,191,26,45,68,84,251,33,9,192,24,45,68,84,251,33,233,191,0,0,0,0,0,0,240,127,0,0,0,0,0,0,240,127,0,0,0,0,0,64,88,64,0,0,0,0,128,83,205,64,0,0,0,0,0,0,145,64,0,0,0,0,0,128,99,64,0,0,0,0,160,254,229,64,0,0,0,0,0,0,108,192,0,0,0,0,0,176,178,192,0,0,0,0,0,148,152,64,0,0,0,0,160,254,229,64,0,0,0,0,0,208,196,192,0,0,0,0,0,160,203,64,0,0,0,0,0,224,177,192,0,0,0,0,0,208,138,192,0,0,0,0,160,254,229,64,0,0,0,0,0,0,80,64,0,0,0,0,0,128,131,64,0,0,0,0,0,224,177,192,0,0,0,0,0,208,186,64,0,0,0,0,0,118,167,192,0,0,0,0,128,83,205,64,0,0,0,0,0,0,89,64,0,0,0,0,0,0,106,64,0,0,0,0,0,224,129,64,0,0,0,0,0,208,170,64,0,0,0,0,0,118,199,192,0,0,0,0,128,83,221,64,0,0,0,0,160,254,229,64,0,0,0,0,0,0,240,63,0,0,0,0,128,152,193,64,0,0,0,0,0,0,167,192,0,0,0,0,0,64,125,64,0,0,0,0,248,126,0,65,0,0,0,0,0,160,182,64,0,0,0,0,0,64,144,64,0,0,0,0,0,28,148,192,0,0,0,0,248,126,0,65,0,0,0,0,0,64,183,64,0,0,0,0,0,192,198,192,0,0,0,0,0,224,193,64,0,0,0,0,0,28,164,192,0,0,0,0,248,126,0,65,0,0,0,0,0,0,80,192,0,0,0,0,0,128,131,192,0,0,0,0,0,224,177,64,0,0,0,0,0,208,186,192,0,0,0,0,0,118,167,64,0,0,0,0,248,126,0,65,0,0,0,0,0,0,32,64,0,0,0,0,128,242,196,64,0,0,0,0,0,0,157,64,0,0,0,0,0,64,141,192,0,0,0,0,72,126,11,65,0,0,0,0,0,128,192,192,0,0,0,0,0,128,179,64,0,0,0,0,0,224,145,192,0,0,0,0,72,126,11,65,0,0,0,0,0,128,150,192,0,0,0,0,0,64,176,64,0,0,0,0,0,224,177,192,0,0,0,0,0,208,154,64,0,0,0,0,72,126,11,65,0,0,0,0,0,0,97,192,0,0,0,0,224,202,238,64,0,0,0,0,0,0,144,64,0,0,0,0,0,0,106,192,0,0,0,0,16,169,249,64,0,0,0,0,0,0,172,64,0,0,0,0,0,0,170,192,0,0,0,0,0,224,145,64,0,0,0,0,204,62,19,65,0,0,0,0,0,0,96,192,0,0,0,0,248,126,0,65,0,0,0,0,0,0,164,192,0,0,0,0,0,0,138,64,0,0,0,0,116,190,24,65,0,0,0,0,0,0,96,64,0,0,0,0,176,49,248,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,96,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,96,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,8,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,80,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,32,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,16,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,112,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,8,64,0,0,0,0,0,0,96,64,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,192,0,0,0,0,0,0,8,64,0,0,0,0,0,0,80,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,64,0,0,0,0,0,0,64,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,128,64,0,0,0,0,0,0,36,192,0,0,0,0,0,0,34,64,0,0,0,0,0,0,120,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,34,192,0,0,0,0,0,0,20,64,0,0,0,0,0,0,104,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,128,64,0,0,0,0,0,0,44,192,0,0,0,0,0,0,28,64,0,0,0,0,0,0,128,64,0,0,0,0,0,0,53,64,0,0,0,0,0,0,164,64,0,0,0,0,0,0,8,192,0,0,0,0,0,0,96,64,0,0,0,0,0,0,0,192,0,0,0,0,0,0,8,192,0,0,0,0,0,0,80,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,8,192,0,0,0,0,0,0,240,191,0,0,0,0,0,0,48,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,192,0,0,0,0,0,0,32,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,48,64,0,0,0,0,0,0,64,64,0,0,0,0,0,128,65,64,0,0,0,0,0,0,80,64,0,0,0,0,0,0,120,64,0,0,0,0,0,0,160,64,0,0,0,0,0,0,46,64,0,0,0,0,0,0,84,64,0,0,0,0,0,0,136,64,0,0,0,0,0,0,28,64,0,0,0,0,0,128,65,64,0,0,0,0,0,0,128,64,0,0,0,0,0,128,79,64,0,0,0,0,0,0,148,64,0,0,0,0,0,64,83,64,0,0,0,0,0,0,160,64,0,0,0,0,0,0,38,192,0,0,0,0,0,0,60,192,0,0,0,0,0,0,104,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,64,0,0,0,0,0,160,105,64,0,0,0,0,0,0,123,192,0,0,0,0,0,0,136,64,0,0,0,0,0,0,152,64,0,0,0,0,0,74,175,64,0,0,0,0,0,128,178,192,0,0,0,0,0,0,174,64,0,0,0,0,0,0,200,64,0,0,0,0,0,32,108,192,0,0,0,0,0,0,93,64,0,0,0,0,0,0,120,64,0,0,0,0,0,5,188,192,0,0,0,0,0,14,165,64,0,0,0,0,0,0,190,64,0,0,0,0,0,22,171,64,0,0,0,0,0,0,190,64,0,0,0,0,32,152,226,64,0,0,0,0,0,0,238,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,24,64,0,0,0,0,0,0,48,192,0,0,0,0,0,0,64,64,0,0,0,0,0,0,34,192,0,0,0,0,0,0,80,64,0,0,0,0,0,0,96,192,0,0,0,0,0,0,160,64,0,0,0,0,0,0,34,64,0,0,0,0,0,0,48,192,0,0,0,0,0,0,136,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,20,192,0,0,0,0,0,0,128,64,0,0,0,0,0,0,28,192,0,0,0,0,0,0,148,64,0,0,0,0,0,0,28,192,0,0,0,0,0,0,160,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,16,64,0,0,0,0,0,0,80,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,64,144,35,0,0,198,35,0,0,218,35,0,0,5,36,0,0,44,36,0,0,80,36,0,0,120,36,0,0,159,36,0,0,199,36,0,0,236,36,0,0,35,37,0,0,69,37,0,0,93,37,0,0,130,37,0,0,181,37,0,0,235,37,0,0,27,38,0,0,82,38,0,0,134,38,0,0,181,38,0,0,230,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,154,39,0,0,251,39,0,0,31,40,0,0,99,40,0,0,136,40,0,0,189,40,0,0,226,40,0,0,8,41,0,0,49,41,0,0,91,41,0,0,134,41,0,0,183,41,0,0,233,41,0,0,15,42,0,0,37,42,0,0,67,42,0,0,113,42,0,0,181,42,0,0,217,42,0,0,16,43,0,0,75,43,0,0,125,43,0,0,165,43,0,0,194,43,0,0,23,44,0,0,195,44,0,0,238,44,0,0,32,45,0,0,76,45,0,0,92,45,0,0,126,45,0,0,180,45,0,0,197,45,0,0,57,46,0,0,96,46,0,0,130,46,0,0,166,46,0,0,199,46,0,0,42,47,0,0,99,47,0,0,134,47,0,0,162,47,0,0,191,47,0,0,228,47,0,0,5,49,0,0,55,49,0,0,137,49,0,0,167,49,0,0,205,49,0,0,244,49,0,0,26,50,0,0,56,50,0,0,123,50,0,0,180,50,0,0,241,50,0,0,63,51,0,0,101,51,0,0,123,51,0,0,150,51,0,0,194,51,0,0,240,51,0,0,6,52,0,0,28,52,0,0,51,52,0,0,77,52,0,0,99,52,0,0,122,52,0,0,144,52,0,0,165,52,0,0,183,52,0,0,215,52,0,0,6,53,0,0,104,53,0,0,149,53,0,0,171,53,0,0,220,53,0,0,12,54,0,0,41,54,0,0,82,54,0,0,125,54,0,0,146,54,0,0,196,54,0,0,244,54,0,0,34,55,0,0,57,55,0,0,80,55,0,0,102,55,0,0,120,55,0,0,145,55,0,0,173,55,0,0,197,55,0,0,221,55,0,0,246,55,0,0,15,56,0,0,42,56,0,0,66,56,0,0,91,56,0,0,115,56,0,0,140,56,0,0,184,56,0,0,0,0,128,63,232,191,204,35,235,13,150,184,140,186,80,54,64,164,127,63,143,213,252,185,230,217,208,183,96,161,178,181,137,210,126,63,123,217,89,186,152,40,60,184,202,110,132,181,164,112,125,63,159,108,177,186,131,60,122,184,104,206,118,54,118,113,123,63,54,120,219,186,203,215,150,182,187,17,192,182,135,22,121,63,222,208,12,187,25,126,189,184,230,240,160,50,143,194,117,63,197,240,71,187,61,231,188,184,13,89,221,53,202,84,113,63,215,221,122,187,101,6,137,184,59,132,47,182,250,237,107,63,97,69,153,187,151,76,219,184,117,122,161,54,93,109,101,63,165,181,175,187,23,211,7,184,116,88,182,182,178,46,94,63,19,173,199,187,134,220,238,184,81,32,95,54,143,194,85,63,191,211,228,187,82,69,134,184,229,249,122,53,13,113,76,63,88,130,247,187,15,184,81,184,250,18,123,53,179,123,66,63,35,204,2,188,145,223,22,184,217,193,24,182,43,246,55,63,236,124,11,188,166,10,147,184,219,202,16,183,214,86,44,63,155,148,33,188,101,67,81,185,26,10,161,55,132,13,31,63,66,176,42,188,65,95,185,56,147,101,209,54,179,123,18,63,154,137,20,188,65,215,62,57,147,101,209,54,66,62,8,63,188,25,222,187,123,127,144,57,147,101,209,54,255,255,191,162,95,41,75,60,86,51,179,33,66,225,185,174,182,243,125,61,95,41,75,60,82,67,174,176,147,89,232,47,182,243,253,61,95,41,75,60,60,67,174,49,130,187,220,176,201,118,62,62,243,40,75,60,1,95,163,178,238,53,206,49,182,243,125,62,53,42,75,60,207,122,152,51,31,106,192,178,82,184,158,62,4,38,75,60,233,68,142,180,209,134,179,51,201,118,190,62,136,53,75,60,50,189,132,53,33,128,167,180,63,53,222,62,126,252,74,60,178,177,119,182,75,223,233,180,127,217,253,62,253,216,73,60,230,140,43,183,82,128,185,180,27,158,14,63,71,191,71,60,165,64,129,183,135,78,28,181,9,27,30,63,165,129,68,60,105,133,202,183,50,4,13,181,82,73,45,63,226,231,63,60,175,79,6,184,21,159,10,181,191,14,60,63,140,6,58,60,255,204,38,184,188,125,35,181,26,81,74,63,203,194,50,60,124,30,77,184,12,148,140,181,158,239,87,63,27,118,41,60,234,129,135,184,182,237,192,176,248,194,100,63,148,223,30,60,48,141,135,184,22,101,15,183,133,124,112,63,224,199,9,60,93,53,74,185,199,72,141,182,177,225,121,63,9,6,202,59,189,55,134,185,199,72,141,182,0,0,128,63,38,148,87,59,204,84,167,185,199,72,141,182,206,56,0,0,84,57,0,0,105,57,0,0,130,57,0,0,160,57,0,0,212,57,0,0,11,58,0,0,56,58,0,0,98,58,0,0,121,58,0,0,154,58,0,0,193,58,0,0,240,58,0,0,12,59,0,0,40,59,0,0,68,59,0,0,90,59,0,0,103,59,0,0,213,59,0,0,219,59,0,0,231,59,0,0,242,59,0,0,253,59,0,0,3,60,0,0,231,59,0,0,15,60,0,0,20,77,0,0,219,59,0,0,41,60,0,0,58,60,0,0,79,60,0,0,85,60,0,0,231,59,0,0,97,60,0,0,165,79,0,0,106,60,0,0,120,60,0,0,170,79,0,0,134,60,0,0,141,60,0,0,154,60,0,0,164,60,0,0,184,60,0,0,190,60,0,0,154,60,0,0,203,60,0,0,234,78,0,0,228,60,0,0,242,60,0,0,0,61,0,0,14,61,0,0,21,61,0,0,34,61,0,0,43,61,0,0,70,61,0,0,78,61,0,0,154,60,0,0,90,61,0,0,122,61,0,0,78,61,0,0,128,61,0,0,146,61,0,0,240,77,0,0,164,61,0,0,178,61,0,0,193,61,0,0,205,61,0,0,214,61,0,0,178,61,0,0,228,61,0,0,151,77,0,0,250,61,0,0,6,62,0,0,18,62,0,0,30,62,0,0,37,62,0,0,51,62,0,0,63,62,0,0,53,78,0,0,80,62,0,0,92,62,0,0,113,62,0,0,132,62,0,0,136,62,0,0,148,62,0,0,158,62,0,0,190,62,0,0,197,62,0,0,208,62,0,0,217,62,0,0,241,62,0,0,249,62,0,0,6,63,0,0,18,63,0,0,31,63,0,0,39,63,0,0,53,63,0,0,65,63,0,0,78,63,0,0,86,63,0,0,53,63,0,0,100,63,0,0,113,63,0,0,121,63,0,0,53,63,0,0,135,63,0,0,148,63,0,0,156,63,0,0,53,63,0,0,170,63,0,0,183,63,0,0,191,63,0,0,53,63,0,0,205,63,0,0,231,63,0,0,239,63,0,0,250,63,0,0,3,64,0,0,32,64,0,0,41,64,0,0,250,63,0,0,52,64,0,0,74,64,0,0,82,64,0,0,250,63,0,0,93,64,0,0,106,64,0,0,114,64,0,0,250,63,0,0,125,64,0,0,138,64,0,0,144,64,0,0,156,64,0,0,164,64,0,0,58,79,0,0,170,64,0,0,156,64,0,0,182,64,0,0,211,64,0,0,217,64,0,0,250,63,0,0,229,64,0,0,246,64,0,0,252,64,0,0,7,65,0,0,17,65,0,0,28,65,0,0,34,65,0,0,231,59,0,0,45,65,0,0,56,65,0,0,62,65,0,0,73,65,0,0,81,65,0,0,97,65,0,0,106,65,0,0,118,65,0,0,130,65,0,0,153,65,0,0,161,65,0,0,172,65,0,0,183,65,0,0,205,65,0,0,212,65,0,0,224,65,0,0,239,65,0,0,254,65,0,0,6,66,0,0,18,66,0,0,33,66,0,0,41,66,0,0,47,66,0,0,250,63,0,0,59,66,0,0,66,66,0,0,72,66,0,0,154,60,0,0,84,66,0,0,91,66,0,0,97,66,0,0,109,66,0,0,119,66,0,0,220,76,0,0,219,59,0,0,126,66,0,0,143,66,0,0,150,66,0,0,157,66,0,0,169,66,0,0,181,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,67,0,0,166,67,0,0,1,0,0,0,140,16,0,0,170,67,0,0,2,0,0,0,80,16,0,0,165,79,0,0,3,0,0,0,112,17,0,0,175,67,0,0,4,0,0,0,116,17,0,0,182,67,0,0,5,0,0,0,104,16,0,0,187,67,0,0,6,0,0,0,132,17,0,0,193,67,0,0,7,0,0,0,124,17,0,0,200,67,0,0,8,0,0,0,128,17,0,0,206,67,0,0,9,0,0,0,148,16,0,0,211,67,0,0,10,0,0,0,212,17,0,0,217,67,0,0,11,0,0,0,152,16,0,0,223,67,0,0,12,0,0,0,208,31,0,0,231,67,0,0,13,0,0,0,44,17,0,0,236,67,0,0,14,0,0,0,48,17,0,0,239,67,0,0,15,0,0,0,52,17,0,0,243,67,0,0,16,0,0,0,140,17,0,0,249,67,0,0,17,0,0,0,216,17,0,0,255,67,0,0,18,0,0,0,220,17,0,0,6,68,0,0,19,0,0,0,224,17,0,0,12,68,0,0,20,0,0,0,228,17,0,0,18,68,0,0,21,0,0,0,232,17,0,0,23,68,0,0,22,0,0,0,236,17,0,0,28,68,0,0,23,0,0,0,240,17,0,0,33,68,0,0,24,0,0,0,0,18,0,0,38,68,0,0,25,0,0,0,4,18,0,0,43,68,0,0,26,0,0,0,28,18,0,0,48,68,0,0,27,0,0,0,56,17,0,0,52,68,0,0,28,0,0,0,156,16,0,0,57,68,0,0,29,0,0,0,12,17,0,0,63,68,0,0,30,0,0,0,204,17,0,0,70,68,0,0,31,0,0,0,8,18,0,0,76,68,0,0,32,0,0,0,236,20,0,0,81,68,0,0,33,0,0,0,12,18,0,0,88,68,0,0,34,0,0,0,60,17,0,0,93,68,0,0,35,0,0,0,40,21,0,0,101,68,0,0,36,0,0,0,200,17,0,0,106,68,0,0,37,0,0,0,16,18,0,0,112,68,0,0,38,0,0,0,36,18,0,0,120,68,0,0,39,0,0,0,84,16,0,0,125,68,0,0,40,0,0,0,40,18,0,0,131,68,0,0,41,0,0,0,100,16,0,0,136,68,0,0,42,0,0,0,108,16,0,0,141,68,0,0,43,0,0,0,144,17,0,0,148,68,0,0,44,0,0,0,48,18,0,0,155,68,0,0,45,0,0,0,192,31,0,0,163,68,0,0,46,0,0,0,196,31,0,0,172,68,0,0,47,0,0,0,44,18,0,0,176,68,0,0,48,0,0,0,248,16,0,0,182,68,0,0,49,0,0,0,160,16,0,0,187,68,0,0,50,0,0,0,240,20,0,0,192,68,0,0,51,0,0,0,244,17,0,0,197,68,0,0,52,0,0,0,252,16,0,0,204,68,0,0,53,0,0,0,64,17,0,0,210,68,0,0,54,0,0,0,88,16,0,0,215,68,0,0,55,0,0,0,148,17,0,0,222,68,0,0,56,0,0,0,152,17,0,0,227,68,0,0,57,0,0,0,156,17,0,0,232,68,0,0,58,0,0,0,36,21,0,0,239,68,0,0,59,0,0,0,32,21,0,0,246,68,0,0,60,0,0,0,24,21,0,0,254,68,0,0,61,0,0,0,28,21,0,0,6,69,0,0,62,0,0,0,0,17,0,0,10,69,0,0,63,0,0,0,196,17,0,0,15,69,0,0,64,0,0,0,144,16,0,0,20,69,0,0,65,0,0,0,96,16,0,0,27,69,0,0,66,0,0,0,52,18,0,0,33,69,0,0,67,0,0,0,68,17,0,0,38,69,0,0,68,0,0,0,248,20,0,0,44,69,0,0,69,0,0,0,56,18,0,0,52,69,0,0,70,0,0,0,60,18,0,0,59,69,0,0,71,0,0,0,64,18,0,0,66,69,0,0,72,0,0,0,32,18,0,0,73,69,0,0,73,0,0,0,76,17,0,0,78,69,0,0,74,0,0,0,92,16,0,0,85,69,0,0,75,0,0,0,80,17,0,0,90,69,0,0,76,0,0,0,72,17,0,0,98,69,0,0,77,0,0,0,68,18,0,0,103,69,0,0,78,0,0,0,20,17,0,0,109,69,0,0,79,0,0,0,24,17,0,0,115,69,0,0,80,0,0,0,28,17,0,0,121,69,0,0,81,0,0,0,200,31,0,0,130,69,0,0,82,0,0,0,204,31,0,0,140,69,0,0,83,0,0,0,80,18,0,0,145,69,0,0,84,0,0,0,84,18,0,0,152,69,0,0,85,0,0,0,160,17,0,0,158,69,0,0,86,0,0,0,112,16,0,0,164,69,0,0,87,0,0,0,120,16,0,0,169,69,0,0,88,0,0,0,164,17,0,0,177,69,0,0,89,0,0,0,84,17,0,0,182,69,0,0,90,0,0,0,168,17,0,0,186,69,0,0,91,0,0,0,88,17,0,0,192,69,0,0,92,0,0,0,136,17,0,0,198,69,0,0,93,0,0,0,124,16,0,0,204,69,0,0,94,0,0,0,32,17,0,0,211,69,0,0,95,0,0,0,88,18,0,0,221,69,0,0,96,0,0,0,4,17,0,0,226,69,0,0,97,0,0,0,252,17,0,0,232,69,0,0,98,0,0,0,92,18,0,0,238,69,0,0,99,0,0,0,96,18,0,0,244,69,0,0,100,0,0,0,100,18,0,0,251,69,0,0,101,0,0,0,104,18,0,0,2,70,0,0,102,0,0,0,112,18,0,0,8,70,0,0,103,0,0,0,116,18,0,0,15,70,0,0,104,0,0,0,120,18,0,0,21,70,0,0,105,0,0,0,124,18,0,0,28,70,0,0,106,0,0,0,244,20,0,0,36,70,0,0,107,0,0,0,128,18,0,0,40,70,0,0,108,0,0,0,132,18,0,0,46,70,0,0,109,0,0,0,40,17,0,0,52,70,0,0,110,0,0,0,8,17,0,0,58,70,0,0,111,0,0,0,232,20,0,0,62,70,0,0,112,0,0,0,24,18,0,0,67,70,0,0,113,0,0,0,92,17,0,0,74,70,0,0,114,0,0,0,128,16,0,0,80,70,0,0,115,0,0,0,136,16,0,0,87,70,0,0,116,0,0,0,20,18,0,0,95,70,0,0,117,0,0,0,96,17,0,0,99,70,0,0,118,0,0,0,100,17,0,0,104,70,0,0,119,0,0,0,104,17,0,0,110,70,0,0,120,0,0,0,16,17,0,0,117,70,0,0,121,0,0,0,108,17,0,0,123,70,0,0,122,0,0,0,172,17,0,0,129,70,0,0,123,0,0,0,116,16,0,0,135,70,0,0,124,0,0,0,132,16,0,0,139,70,0,0,125,0,0,0,252,20,0,0,144,70,0,0,126,0,0,0,0,21,0,0,151,70,0,0,127,0,0,0,208,17,0,0,155,70,0,0,128,0,0,0,176,17,0,0,161,70,0,0,129,0,0,0,180,17,0,0,168,70,0,0,130,0,0,0,184,17,0,0,175,70,0,0,131,0,0,0,188,17,0,0,182,70,0,0,132,0,0,0,36,17,0,0,188,70,0,0,133,0,0,0,4,21,0,0,193,70,0,0,134,0,0,0,8,21,0,0,198,70,0,0,135,0,0,0,12,21,0,0,203,70,0,0,136,0,0,0,72,18,0,0,208,70,0,0,137,0,0,0,76,18,0,0,213,70,0,0,138,0,0,0,248,17,0,0,218,70,0,0,139,0,0,0,192,17,0,0,223,70,0,0,140,0,0,0,108,18,0,0,229,70,0,0,141,0,0,0,16,21,0,0,235,70,0,0,142,0,0,0,20,21,0,0,241,70,0,0,143,0,0,0,120,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,71,0,0,131,71,0,0,134,71,0,0,140,71,0,0,150,71,0,0,152,71,0,0,155,71,0,0,161,71,0,0,164,71,0,0,169,71,0,0,179,71,0,0,182,71,0,0,188,71,0,0,199,71,0,0,202,71,0,0,209,71,0,0,220,71,0,0,224,71,0,0,231,71,0,0,3,72,0,0,6,72,0,0,13,72,0,0,32,72,0,0,35,72,0,0,42,72,0,0,61,72,0,0,64,72,0,0,71,72,0,0,90,72,0,0,93,72,0,0,102,72,0,0,129,72,0,0,134,72,0,0,141,72,0,0,162,72,0,0,165,72,0,0,173,72,0,0,193,72,0,0,198,72,0,0,207,72,0,0,226,72,0,0,232,72,0,0,241,72,0,0,6,73,0,0,12,73,0,0,30,73,0,0,51,73,0,0,57,73,0,0,75,73,0,0,96,73,0,0,102,73,0,0,120,73,0,0,142,73,0,0,148,73,0,0,166,73,0,0,195,73,0,0,202,73,0,0,213,73,0,0,225,73,0,0,232,73,0,0,243,73,0,0,255,73,0,0,6,74,0,0,18,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,74,0,0,57,74,0,0,137,74,0,0,164,74,0,0,193,74,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,1,0,0,0,220,76,0,0,226,76,0,0,220,76,0,0,92,101,0,0,240,76,0,0,247,76,0,0,20,77,0,0,26,77,0,0,63,77,0,0,226,76,0,0,20,77,0,0,69,77,0,0,95,77,0,0,101,77,0,0,151,77,0,0,158,77,0,0,184,77,0,0,192,77,0,0,240,77,0,0,247,77,0,0,19,78,0,0,28,78,0,0,53,78,0,0,63,78,0,0,85,78,0,0,99,78,0,0,240,77,0,0,155,78,0,0,169,78,0,0,175,78,0,0,234,78,0,0,243,78,0,0,0,79,0,0,7,79,0,0,58,79,0,0,63,79,0,0,95,79,0,0,102,79,0,0,165,79,0,0,170,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,79,0,0,190,79,0,0,194,79,0,0,201,79,0,0,215,79,0,0,221,79,0,0,235,79,0,0,242,79,0,0,255,79,0,0,6,80,0,0,19,80,0,0,24,80,0,0,36,80,0,0,41,80,0,0,53,80,0,0,61,80,0,0,76,80,0,0,82,80,0,0,90,80,0,0,99,80,0,0,111,80,0,0,121,80,0,0,133,80,0,0,140,80,0,0,155,80,0,0,160,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,0,0,0,151,0,0,0,84,97,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,33,0,0,80,34,0,0,5,0,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,0,0,151,0,0,0,92,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,94,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,92,101,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,65,122,105,109,117,116,104,97,108,32,69,113,117,105,100,105,115,116,97,110,116,10,9,65,122,105,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,48,32,103,117,97,109,0,98,103,117,97,109,0,71,110,111,109,111,110,105,99,10,9,65,122,105,44,32,83,112,104,46,0,76,97,109,98,101,114,116,32,65,122,105,109,117,116,104,97,108,32,69,113,117,97,108,32,65,114,101,97,10,9,65,122,105,44,32,83,112,104,38,69,108,108,0,77,105,108,108,101,114,32,79,98,108,97,116,101,100,32,83,116,101,114,101,111,103,114,97,112,104,105,99,10,9,65,122,105,40,109,111,100,41,0,76,101,101,32,79,98,108,97,116,101,100,32,83,116,101,114,101,111,103,114,97,112,104,105,99,10,9,65,122,105,40,109,111,100,41,0,77,111,100,46,32,83,116,101,114,101,111,103,114,97,112,104,105,99,32,111,102,32,52,56,32,85,46,83,46,10,9,65,122,105,40,109,111,100,41,0,77,111,100,46,32,83,116,101,114,101,111,103,114,97,112,104,105,99,32,111,102,32,65,108,97,115,107,97,10,9,65,122,105,40,109,111,100,41,0,77,111,100,46,32,83,116,101,114,101,111,103,114,97,112,104,105,99,32,111,102,32,53,48,32,85,46,83,46,10,9,65,122,105,40,109,111,100,41,0,78,101,97,114,45,115,105,100,101,100,32,112,101,114,115,112,101,99,116,105,118,101,10,9,65,122,105,44,32,83,112,104,10,9,104,61,0,84,105,108,116,101,100,32,112,101,114,115,112,101,99,116,105,118,101,10,9,65,122,105,44,32,83,112,104,10,9,116,105,108,116,61,32,97,122,105,61,32,104,61,0,100,116,105,108,116,0,100,97,122,105,0,78,101,119,32,90,101,97,108,97,110,100,32,77,97,112,32,71,114,105,100,10,9,102,105,120,101,100,32,69,97,114,116,104,0,79,114,116,104,111,103,114,97,112,104,105,99,10,9,65,122,105,44,32,83,112,104,46,0,83,116,101,114,101,111,103,114,97,112,104,105,99,10,9,65,122,105,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,116,115,61,0,85,110,105,118,101,114,115,97,108,32,80,111,108,97,114,32,83,116,101,114,101,111,103,114,97,112,104,105,99,10,9,65,122,105,44,32,83,112,104,38,69,108,108,10,9,115,111,117,116,104,0,79,98,108,105,113,117,101,32,83,116,101,114,101,111,103,114,97,112,104,105,99,32,65,108,116,101,114,110,97,116,105,118,101,10,9,65,122,105,109,117,116,104,97,108,44,32,83,112,104,38,69,108,108,0,65,108,98,101,114,115,32,69,113,117,97,108,32,65,114,101,97,10,9,67,111,110,105,99,32,83,112,104,38,69,108,108,10,9,108,97,116,95,49,61,32,108,97,116,95,50,61,0,76,97,109,98,101,114,116,32,69,113,117,97,108,32,65,114,101,97,32,67,111,110,105,99,10,9,67,111,110,105,99,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,49,61,32,115,111,117,116,104,0,66,105,112,111,108,97,114,32,99,111,110,105,99,32,111,102,32,119,101,115,116,101,114,110,32,104,101,109,105,115,112,104,101,114,101,10,9,67,111,110,105,99,32,83,112,104,46,0,98,110,115,0,66,111,110,110,101,32,40,87,101,114,110,101,114,32,108,97,116,95,49,61,57,48,41,10,9,67,111,110,105,99,32,83,112,104,38,69,108,108,10,9,108,97,116,95,49,61,0,69,113,117,105,100,105,115,116,97,110,116,32,67,111,110,105,99,10,9,67,111,110,105,99,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,49,61,32,108,97,116,95,50,61,0,73,99,111,115,97,104,101,100,114,97,108,32,83,110,121,100,101,114,32,69,113,117,97,108,32,65,114,101,97,10,9,83,112,104,0,115,111,114,105,101,110,116,0,112,111,108,101,0,116,97,122,105,0,116,97,112,101,114,116,117,114,101,0,105,97,112,101,114,116,117,114,101,0,116,114,101,115,111,108,117,116,105,111,110,0,105,114,101,115,111,108,117,116,105,111,110,0,115,109,111,100,101,0,112,108,97,110,101,0,100,105,0,100,100,0,104,101,120,0,116,114,101,115,99,97,108,101,0,105,109,112,111,115,115,105,98,108,101,32,116,114,97,110,115,102,111,114,109,58,32,37,102,32,37,102,32,105,115,32,110,111,116,32,111,110,32,97,110,121,32,116,114,105,97,110,103,108,101,10,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,77,97,112,32,111,102,32,116,104,101,32,87,111,114,108,100,32,80,111,108,121,99,111,110,105,99,10,9,77,111,100,46,32,80,111,108,121,99,111,110,105,99,44,32,69,108,108,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,32,91,108,111,110,95,49,61,93,0,116,108,111,110,95,49,0,75,114,111,118,97,107,10,9,80,67,121,108,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([44,32,69,108,108,112,115,46,0,116,108,111,110,95,48,0,116,99,122,101,99,104,0,76,97,109,98,101,114,116,32,67,111,110,102,111,114,109,97,108,32,67,111,110,105,99,10,9,67,111,110,105,99,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,32,111,114,32,108,97,116,95,48,0,80,111,108,121,99,111,110,105,99,32,40,65,109,101,114,105,99,97,110,41,10,9,67,111,110,105,99,44,32,83,112,104,38,69,108,108,0,82,101,99,116,97,110,103,117,108,97,114,32,80,111,108,121,99,111,110,105,99,10,9,67,111,110,105,99,44,32,83,112,104,46,44,32,110,111,32,105,110,118,46,10,9,108,97,116,95,116,115,61,0,69,117,108,101,114,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,84,105,115,115,111,116,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,77,117,114,100,111,99,104,32,73,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,77,117,114,100,111,99,104,32,73,73,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,77,117,114,100,111,99,104,32,73,73,73,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,80,101,114,115,112,101,99,116,105,118,101,32,67,111,110,105,99,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,86,105,116,107,111,118,115,107,121,32,73,10,9,67,111,110,105,99,44,32,83,112,104,10,9,108,97,116,95,49,61,32,97,110,100,32,108,97,116,95,50,61,0,116,108,97,116,95,50,0,82,111,117,115,115,105,108,104,101,32,83,116,101,114,101,111,103,114,97,112,104,105,99,10,9,65,122,105,46,44,32,69,108,108,112,115,46,0,67,97,115,115,105,110,105,10,9,67,121,108,44,32,83,112,104,38,69,108,108,0,67,101,110,116,114,97,108,32,67,121,108,105,110,100,114,105,99,97,108,10,9,67,121,108,44,32,83,112,104,0,69,113,117,97,108,32,65,114,101,97,32,67,121,108,105,110,100,114,105,99,97,108,10,9,67,121,108,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,116,115,61,0,69,113,117,105,100,105,115,116,97,110,116,32,67,121,108,105,110,100,114,105,99,97,108,32,40,80,108,97,116,101,32,67,97,114,101,101,41,10,9,67,121,108,44,32,83,112,104,10,9,108,97,116,95,116,115,61,91,44,32,108,97,116,95,48,61,48,93,0,71,97,108,108,32,40,71,97,108,108,32,83,116,101,114,101,111,103,114,97,112,104,105,99,41,10,9,67,121,108,44,32,83,112,104,0,76,97,98,111,114,100,101,10,9,67,121,108,44,32,83,112,104,10,9,83,112,101,99,105,97,108,32,102,111,114,32,77,97,100,97,103,97,115,99,97,114,0,98,110,111,95,114,111,116,0,114,97,122,105,0,83,112,97,99,101,32,111,98,108,105,113,117,101,32,102,111,114,32,76,65,78,68,83,65,84,10,9,67,121,108,44,32,83,112,104,38,69,108,108,10,9,108,115,97,116,61,32,112,97,116,104,61,0,105,108,115,97,116,0,83,112,97,99,101,32,111,98,108,105,113,117,101,32,102,111,114,32,77,73,83,82,10,9,67,121,108,44,32,83,112,104,38,69,108,108,10,9,112,97,116,104,61,0,105,112,97,116,104,0,77,101,114,99,97,116,111,114,10,9,67,121,108,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,116,115,61,0,116,108,97,116,95,116,115,0,77,105,108,108,101,114,32,67,121,108,105,110,100,114,105,99,97,108,10,9,67,121,108,44,32,83,112,104,0,79,98,108,105,113,117,101,32,67,121,108,105,110,100,114,105,99,97,108,32,69,113,117,97,108,32,65,114,101,97,10,9,67,121,108,44,32,83,112,104,108,111,110,99,61,32,97,108,112,104,97,61,32,111,114,10,9,108,97,116,95,49,61,32,108,97,116,95,50,61,32,108,111,110,95,49,61,32,108,111,110,95,50,61,0,79,98,108,105,113,117,101,32,77,101,114,99,97,116,111,114,10,9,67,121,108,44,32,83,112,104,38,69,108,108,32,110,111,95,114,111,116,10,9,97,108,112,104,97,61,32,91,103,97,109,109,97,61,93,32,91,110,111,95,111,102,102,93,32,108,111,110,99,61,32,111,114,10,9,32,108,111,110,95,49,61,32,108,97,116,95,49,61,32,108,111,110,95,50,61,32,108,97,116,95,50,61,0,116,110,111,95,114,111,116,0,116,97,108,112,104,97,0,116,103,97,109,109,97,0,114,103,97,109,109,97,0,114,108,111,110,99,0,116,110,111,95,111,102,102,0,116,110,111,95,117,111,102,102,0,115,110,111,95,117,111,102,102,0,115,110,111,95,111,102,102,0,83,119,105,115,115,46,32,79,98,108,46,32,77,101,114,99,97,116,111,114,10,9,67,121,108,44,32,69,108,108,10,9,70,111,114,32,67,72,49,57,48,51,0,84,114,97,110,115,118,101,114,115,101,32,67,101,110,116,114,97,108,32,67,121,108,105,110,100,114,105,99,97,108,10,9,67,121,108,44,32,83,112,104,44,32,110,111,32,105,110,118,46,0,84,114,97,110,115,118,101,114,115,101,32,67,121,108,105,110,100,114,105,99,97,108,32,69,113,117,97,108,32,65,114,101,97,10,9,67,121,108,44,32,83,112,104,0,84,105,109,101,115,10,9,67,121,108,44,32,83,112,104,0,84,114,97,110,115,118,101,114,115,101,32,77,101,114,99,97,116,111,114,10,9,67,121,108,44,32,83,112,104,38,69,108,108,0,65,105,114,121,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,10,9,110,111,95,99,117,116,32,108,97,116,95,98,61,0,98,110,111,95,99,117,116,0,114,108,97,116,95,98,0,65,105,116,111,102,102,10,9,77,105,115,99,32,83,112,104,0,87,105,110,107,101,108,32,84,114,105,112,101,108,10,9,77,105,115,99,32,83,112,104,10,9,108,97,116,95,49,0,87,97,114,110,105,110,103,58,32,65,99,99,117,114,97,99,121,32,111,102,32,49,101,45,49,50,32,110,111,116,32,114,101,97,99,104,101,100,46,32,76,97,115,116,32,105,110,99,114,101,109,101,110,116,115,58,32,100,108,97,116,61,37,101,32,97,110,100,32,100,108,111,110,61,37,101,10,0,116,108,97,116,95,49,0,65,117,103,117,115,116,32,69,112,105,99,121,99,108,111,105,100,97,108,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,66,97,99,111,110,32,71,108,111,98,117,108,97,114,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,65,112,105,97,110,32,71,108,111,98,117,108,97,114,32,73,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,79,114,116,101,108,105,117,115,32,79,118,97,108,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,67,104,97,109,98,101,114,108,105,110,32,84,114,105,109,101,116,114,105,99,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,10,9,108,97,116,95,49,61,32,108,111,110,95,49,61,32,108,97,116,95,50,61,32,108,111,110,95,50,61,32,108,97,116,95,51,61,32,108,111,110,95,51,61,0,114,108,97,116,95,37,100,0,114,108,111,110,95,37,100,0,72,97,109,109,101,114,32,38,32,69,99,107,101,114,116,45,71,114,101,105,102,101,110,100,111,114,102,102,10,9,77,105,115,99,32,83,112,104,44,32,10,9,87,61,32,77,61,0,116,87,0,116,77,0,100,77,0,76,97,103,114,97,110,103,101,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,10,9,87,61,0,100,87,0,76,97,114,114,105,118,101,101,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,76,97,115,107,111,119,115,107,105,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,78,105,99,111,108,111,115,105,32,71,108,111,98,117,108,97,114,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,71,101,110,101,114,97,108,32,79,98,108,105,113,117,101,32,84,114,97,110,115,102,111,114,109,97,116,105,111,110,10,9,77,105,115,99,32,83,112,104,10,9,111,95,112,114,111,106,61,32,112,108,117,115,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,112,114,111,106,101,99,116,105,111,110,10,9,111,95,108,97,116,95,112,61,32,111,95,108,111,110,95,112,61,32,40,110,101,119,32,112,111,108,101,41,32,111,114,10,9,111,95,97,108,112,104,97,61,32,111,95,108,111,110,95,99,61,32,111,95,108,97,116,95,99,61,32,111,114,10,9,111,95,108,111,110,95,49,61,32,111,95,108,97,116,95,49,61,32,111,95,108,111,110,95,50,61,32,111,95,108,97,116,95,50,61,0,115,111,95,112,114,111,106,0,116,111,95,97,108,112,104,97,0,114,111,95,108,111,110,95,99,0,114,111,95,108,97,116,95,99,0,114,111,95,97,108,112,104,97,0,116,111,95,108,97,116,95,112,0,114,111,95,108,111,110,95,112,0,114,111,95,108,97,116,95,112,0,114,111,95,108,111,110,95,49,0,114,111,95,108,97,116,95,49,0,114,111,95,108,111,110,95,50,0,114,111,95,108,97,116,95,50,0,79,98,108,97,116,101,100,32,69,113,117,97,108,32,65,114,101,97,10,9,77,105,115,99,32,83,112,104,10,9,110,61,32,109,61,32,116,104,101,116,97,61,0,114,116,104,101,116,97,0,84,119,111,32,80,111,105,110,116,32,69,113,117,105,100,105,115,116,97,110,116,10,9,77,105,115,99,32,83,112,104,10,9,108,97,116,95,49,61,32,108,111,110,95,49,61,32,108,97,116,95,50,61,32,108,111,110,95,50,61,0,114,108,111,110,95,49,0,114,108,97,116,95,50,0,114,108,111,110,95,50,0,118,97,110,32,100,101,114,32,71,114,105,110,116,101,110,32,40,73,41,10,9,77,105,115,99,32,83,112,104,0,118,97,110,32,100,101,114,32,71,114,105,110,116,101,110,32,73,73,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,118,97,110,32,100,101,114,32,71,114,105,110,116,101,110,32,73,73,73,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,118,97,110,32,100,101,114,32,71,114,105,110,116,101,110,32,73,86,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,87,97,103,110,101,114,32,86,73,73,10,9,77,105,115,99,32,83,112,104,44,32,110,111,32,105,110,118,46,0,76,97,109,98,101,114,116,32,67,111,110,102,111,114,109,97,108,32,67,111,110,105,99,32,65,108,116,101,114,110,97,116,105,118,101,10,9,67,111,110,105,99,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,48,61,0,116,108,97,116,95,48,0,71,101,111,115,116,97,116,105,111,110,97,114,121,32,83,97,116,101,108,108,105,116,101,32,86,105,101,119,10,9,65,122,105,44,32,83,112,104,38,69,108,108,10,9,104,61,0,100,104,0,115,115,119,101,101,112,0,69,120,116,101,110,100,101,100,32,84,114,97,110,115,118,101,114,115,101,32,77,101,114,99,97,116,111,114,10,9,67,121,108,44,32,83,112,104,10,9,108,97,116,95,116,115,61,40,48,41,10,108,97,116,95,48,61,40,48,41,0,85,110,105,118,101,114,115,97,108,32,84,114,97,110,115,118,101,114,115,101,32,77,101,114,99,97,116,111,114,32,40,85,84,77,41,10,9,67,121,108,44,32,83,112,104,10,9,122,111,110,101,61,32,115,111,117,116,104,0,98,115,111,117,116,104,0,116,122,111,110,101,0,105,122,111,110,101,0,66,111,103,103,115,32,69,117,109,111,114,112,104,105,99,10,9,80,67,121,108,46,44,32,110,111,32,105,110,118,46,44,32,83,112,104,46,0,67,111,108,108,105,103,110,111,110,10,9,80,67,121,108,44,32,83,112,104,46,0,67,111,109,112,97,99,116,32,77,105,108,108,101,114,10,9,67,121,108,46,44,32,83,112,104,46,0,67,114,97,115,116,101,114,32,80,97,114,97,98,111,108,105,99,32,40,80,117,116,110,105,110,115,32,80,52,41,10,9,80,67,121,108,46,44,32,83,112,104,46,0,68,101,110,111,121,101,114,32,83,101,109,105,45,69,108,108,105,112,116,105,99,97,108,10,9,80,67,121,108,46,44,32,110,111,32,105,110,118,46,44,32,83,112,104,46,0,69,99,107,101,114,116,32,73,10,9,80,67,121,108,46,44,32,83,112,104,46,0,69,99,107,101,114,116,32,73,73,10,9,80,67,121,108,46,32,83,112,104,46,0,69,99,107,101,114,116,32,73,73,73,10,9,80,67,121,108,44,32,83,112,104,46,0,75,97,118,114,97,105,115,107,121,32,86,73,73,10,9,80,67,121,108,44,32,83,112,104,46,0,87,97,103,110,101,114,32,86,73,10,9,80,67,121,108,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,49,10,9,80,67,121,108,44,32,83,112,104,46,0,69,99,107,101,114,116,32,73,86,10,9,80,67,121,108,44,32,83,112,104,46,0,69,99,107,101,114,116,32,86,10,9,80,67,121,108,44,32,83,112,104,46,0,70,97,104,101,121,10,9,80,99,121,108,44,32,83,112,104,46,0,70,111,117,99,97,117,116,32,83,105,110,117,115,111,105,100,97,108,10,9,80,67,121,108,46,44,32,83,112,104,46,0,71,105,110,115,98,117,114,103,32,86,73,73,73,32,40,84,115,78,73,73,71,65,105,75,41,10,9,80,67,121,108,44,32,83,112,104,46,44,32,110,111,32,105,110,118,46,0,71,97,117,115,115,45,83,99,104,114,101,105,98,101,114,32,84,114,97,110,115,118,101,114,115,101,32,77,101,114,99,97,116,111,114,32,40,97,107,97,32,71,97,117,115,115,45,76,97,98,111,114,100,101,32,82,101,117,110,105,111,110,41,10,9,67,121,108,44,32,83,112,104,38,69,108,108,10,9,108,97,116,95,48,61,32,108,111,110,95,48,61,32,107,95,48,61,0,83,105,110,117,115,111,105,100,97,108,32,40,83,97,110,115,111,110,45,70,108,97,109,115,116,101,101,100,41,10,9,80,67,121,108,44,32,83,112,104,38,69,108,108,0,69,99,107,101,114,116,32,86,73,10,9,80,67,121,108,44,32,83,112,104,46,0,77,99,66,114,121,100,101,45,84,104,111,109,97,115,32,70,108,97,116,45,80,111,108,97,114,32,83,105,110,117,115,111,105,100,97,108,10,9,80,67,121,108,44,32,83,112,104,46,0,71,101,110,101,114,97,108,32,83,105,110,117,115,111,105,100,97,108,32,83,101,114,105,101,115,10,9,80,67,121,108,44,32,83,112,104,46,10,9,109,61,32,110,61,0,116,109,0,71,111,111,100,101,32,72,111,109,111,108,111,115,105,110,101,10,9,80,67,121,108,44,32,83,112,104,46,0,73,110,116,101,114,114,117,112,116,101,100,32,71,111,111,100,101,32,72,111,109,111,108,111,115,105,110,101,10,9,80,67,121,108,44,32,83,112,104,46,0,72,97,116,97,110,111,32,65,115,121,109,109,101,116,114,105,99,97,108,32,69,113,117,97,108,32,65,114,101,97,10,9,80,67,121,108,44,32,83,112,104,46,0,76,111,120,105,109,117,116,104,97,108,10,9,80,67,121,108,32,83,112,104,0,77,99,66,114,121,100,101,45,84,104,111,109,97,115,32,70,108,97,116,45,80,111,108,101,32,83,105,110,101,32,40,78,111,46,32,50,41,10,9,67,121,108,46,44,32,83,112,104,46,0,77,99,66,114,105,100,101,45,84,104,111,109,97,115,32,70,108,97,116,45,80,111,108,97,114,32,80,97,114,97,98,111,108,105,99,10,9,67,121,108,46,44,32,83,112,104,46,0,77,99,66,114,121,100,101,45,84,104,111,109,97,115,32,70,108,97,116,45,80,111,108,97,114,32,81,117,97,114,116,105,99,10,9,67,121,108,46,44,32,83,112,104,46,0,77,111,108,108,119,101,105,100,101,10,9,80,67,121,108,46,44,32,83,112,104,46,0,87,97,103,110,101,114,32,73,86,10,9,80,67,121,108,46,44,32,83,112,104,46,0,87,97,103,110,101,114,32,86,10,9,80,67,121,108,46,44,32,83,112,104,46,0,78,101,108,108,10,9,80,67,121,108,46,44,32,83,112,104,46,0,78,101,108,108,45,72,97,109,109,101,114,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,97,116,116,101,114,115,111,110,32,67,121,108,105,110,100,114,105,99,97,108,10,9,67,121,108,46,0,80,117,116,110,105,110,115,32,80,50,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,51,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,51,39,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,52,39,10,9,80,67,121,108,46,44,32,83,112,104,46,0,87,101,114,101,110,115,107,105,111,108,100,32,73,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,53,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,53,39,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,54,10,9,80,67,121,108,46,44,32,83,112,104,46,0,80,117,116,110,105,110,115,32,80,54,39,10,9,80,67,121,108,46,44,32,83,112,104,46,0,81,117,97,100,114,105,108,97,116,101,114,97,108,105,122,101,100,32,83,112,104,101,114,105,99,97,108,32,67,117,98,101,10,9,65,122,105,44,32,83,112,104,46,0,82,111,98,105,110,115,111,110,10,9,80,67,121,108,46,44,32,83,112,104,46,0,83,112,104,101,114,105,99,97,108,32,67,114,111,115,115,45,116,114,97,99,107,32,72,101,105,103,104,116,10,9,77,105,115,99,10,9,112,108,97,116,95,48,32,61,32,44,112,108,111,110,95,48,32,61,32,44,32,112,104,100,103,95,48,32,61,32,44,91,104,95,48,32,61,32,93,0,116,112,108,97,116,95,48,0,114,112,108,97,116,95,48,0,116,112,108,111,110,95,48,0,114,112,108,111,110,95,48,0,116,112,104,100,103,95,48,0,114,112,104,100,103,95,48,0,116,104,95,48,0,100,104,95,48,0,70,111,117,99,97,117,116,10,9,80,67,121,108,46,44,32,83,112,104,46,0,75,97,118,114,97,105,115,107,121,32,86,10,9,80,67,121,108,46,44,32,83,112,104,46,0,81,117,97,114,116,105,99,32,65,117,116,104,97,108,105,99,10,9,80,67,121,108,46,44,32,83,112,104,46,0,77,99,66,114,121,100,101,45,84,104,111,109,97,115,32,70,108,97,116,45,80,111,108,97,114,32,83,105,110,101,32,40,78,111,46,32,49,41,10,9,80,67,121,108,46,44,32,83,112,104,46,0,85,114,109,97,101,118,32,86,10,9,80,67,121,108,46,44,32,83,112,104,46,44,32,110,111,32,105,110,118,46,10,9,110,61,32,113,61,32,97,108,112,104,97,61,0,100,113,0,114,97,108,112,104,97,0,85,114,109,97,101,118,32,70,108,97,116,45,80,111,108,97,114,32,83,105,110,117,115,111,105,100,97,108,10,9,80,67,121,108,44,32,83,112,104,46,10,9,110,61,0,87,97,103,110,101,114,32,73,32,40,75,97,118,114,97,105,115,107,121,32,86,73,41,10,9,80,67,121,108,44,32,83,112,104,46,0,116,110,0,100,110,0,87,97,103,110,101,114,32,73,73,10,9,80,67,121,108,46,44,32,83,112,104,46,0,87,97,103,110,101,114,32,73,73,73,10,9,80,67,121,108,46,44,32,83,112,104,46,10,9,108,97,116,95,116,115,61,0,87,105,110,107,101,108,32,73,10,9,80,67,121,108,46,44,32,83,112,104,46,10,9,108,97,116,95,116,115,61,0,114,108,97,116,95,116,115,0,87,105,110,107,101,108,32,73,73,10,9,80,67,121,108,46,44,32,83,112,104,46,44,32,110,111,32,105,110,118,46,10,9,108,97,116,95,49,61,0,114,108,97,116,95,49,0,76,97,116,47,108,111,110,103,32,40,71,101,111,100,101,116,105,99,32,97,108,105,97,115,41,10,9,0,76,97,116,47,108,111,110,103,32,40,71,101,111,100,101,116,105,99,32,97,108,105,97,115,41,10,9,0,76,97,116,47,108,111,110,103,32,40,71,101,111,100,101,116,105,99,32,97,108,105,97,115,41,10,9,0,76,97,116,47,108,111,110,103,32,40,71,101,111,100,101,116,105,99,41,10,9,0,71,101,111,99,101,110,116,114,105,99,10,9,0,78,110,69,101,83,115,87,119,0,116,82,0,100,82,0,115,101,108,108,112,115,0,100,97,0,116,101,115,0,100,101,115,0,116,101,0,100,101,0,100,114,102,0,100,102,0,100,98,0,98,82,95,65,0,98,82,95,86,0,98,82,95,97,0,98,82,95,103,0,98,82,95,104,0,116,82,95,108,97,116,95,97,0,116,82,95,108,97,116,95,103,0,114,82,95,108,97,116,95,97,0,114,82,95,108,97,116,95,103,0,77,69,82,73,84,0,97,61,54,51,55,56,49,51,55,46,48,0,114,102,61,50,57,56,46,50,53,55,0,77,69,82,73,84,32,49,57,56,51,0,83,71,83,56,53,0,97,61,54,51,55,56,49,51,54,46,48,0,83,111,118,105,101,116,32,71,101,111,100,101,116,105,99,32,83,121,115,116,101,109,32,56,53,0,114,102,61,50,57,56,46,50,53,55,50,50,50,49,48,49,0,71,82,83,32,49,57,56,48,40,73,85,71,71,44,32,49,57,56,48,41,0,73,65,85,55,54,0,97,61,54,51,55,56,49,52,48,46,48,0,73,65,85,32,49,57,55,54,0,97,61,54,51,55,55,53,54,51,46,51,57,54,0,98,61,54,51,53,54,50,53,54,46,57,49,48,0,65,80,76,52,46,57,0,97,61,54,51,55,56,49,51,55,46,48,46,0,114,102,61,50,57,56,46,50,53,0,65,112,112,108,46,32,80,104,121,115,105,99,115,46,32,49,57,54,53,0,78,87,76,57,68,0,97,61,54,51,55,56,49,52,53,46,48,46,0,78,97,118,97,108,32,87,101,97,112,111,110,115,32,76,97,98,46,44,32,49,57,54,53,0,97,61,54,51,55,55,51,52,48,46,49,56,57,0,98,61,54,51,53,54,48,51,52,46,52,52,54,0,77,111,100,105,102,105,101,100,32,65,105,114,121,0,97,110,100,114,97,101,0,97,61,54,51,55,55,49,48,52,46,52,51,0,114,102,61,51,48,48,46,48,0,65,110,100,114,97,101,32,49,56,55,54,32,40,68,101,110,46,44,32,73,99,108,110,100,46,41,0,97,117,115,116,95,83,65,0,97,61,54,51,55,56,49,54,48,46,48,0,65,117,115,116,114,97,108,105,97,110,32,78,97,116,108,32,38,32,83,46,32,65,109,101,114,46,32,49,57,54,57,0,71,82,83,54,55,0,114,102,61,50,57,56,46,50,52,55,49,54,55,52,50,55,48,0,71,82,83,32,54,55,40,73,85,71,71,32,49,57,54,55,41,0,97,61,54,51,55,55,51,57,55,46,49,53,53,0,114,102,61,50,57,57,46,49,53,50,56,49,50,56,0,66,101,115,115,101,108,32,49,56,52,49,0,98,101,115,115,95,110,97,109,0,97,61,54,51,55,55,52,56,51,46,56,54,53,0,66,101,115,115,101,108,32,49,56,52,49,32,40,78,97,109,105,98,105,97,41,0,97,61,54,51,55,56,50,48,54,46,52,0,98,61,54,51,53,54,53,56,51,46,56,0,67,108,97,114,107,101,32,49,56,54,54,0,99,108,114,107,56,48,0,97,61,54,51,55,56,50,52,57,46,49,52,53,0,114,102,61,50,57,51,46,52,54,54,51,0,67,108,97,114,107,101,32,49,56,56,48,32,109,111,100,46,0,97,61,54,51,55,56,50,52,57,46,50,0,114,102,61,50,57,51,46,52,54,54,48,50,49,50,57,51,54,50,54,57,0,67,108,97,114,107,101,32,49,56,56,48,32,40,73,71,78,41,46,0,67,80,77,0,97,61,54,51,55,53,55,51,56,46,55,0,114,102,61,51,51,52,46,50,57,0,67,111,109,109,46,32,100,101,115,32,80,111,105,100,115,32,101,116,32,77,101,115,117,114,101,115,32,49,55,57,57,0,100,101,108,109,98,114,0,97,61,54,51,55,54,52,50,56,46,0,114,102,61,51,49,49,46,53,0,68,101,108,97,109,98,114,101,32,49,56,49,48,32,40,66,101,108,103,105,117,109,41,0,101,110,103,101,108,105,115,0,97,61,54,51,55,56,49,51,54,46,48,53,0,114,102,61,50,57,56,46,50,53,54,54,0,69,110,103,101,108,105,115,32,49,57,56,53,0,101,118,114,115,116,51,48,0,97,61,54,51,55,55,50,55,54,46,51,52,53,0,114,102,61,51,48,48,46,56,48,49,55,0,69,118,101,114,101,115,116,32,49,56,51,48,0,101,118,114,115,116,52,56,0,97,61,54,51,55,55,51,48,52,46,48,54,51,0,69,118,101,114,101,115,116,32,49,57,52,56,0,101,118,114,115,116,53,54,0,97,61,54,51,55,55,51,48,49,46,50,52,51,0,69,118,101,114,101,115,116,32,49,57,53,54,0,101,118,114,115,116,54,57,0,97,61,54,51,55,55,50,57,53,46,54,54,52,0,69,118,101,114,101,115,116,32,49,57,54,57,0,101,118,114,115,116,83,83,0,97,61,54,51,55,55,50,57,56,46,53,53,54,0,69,118,101,114,101,115,116,32,40,83,97,98,97,104,32,38,32,83,97,114,97,119,97,107,41,0,102,115,99,104,114,54,48,0,97,61,54,51,55,56,49,54,54,46,0,114,102,61,50,57,56,46,51,0,70,105,115,99,104,101,114,32,40,77,101,114,99,117,114,121,32,68,97,116,117,109,41,32,49,57,54,48,0,102,115,99,104,114,54,48,109,0,97,61,54,51,55,56,49,53,53,46,0,77,111,100,105,102,105,101,100,32,70,105,115,99,104,101,114,32,49,57,54,48,0,102,115,99,104,114,54,56,0,97,61,54,51,55,56,49,53,48,46,0,70,105,115,99,104,101,114,32,49,57,54,56,0,104,101,108,109,101,114,116,0,97,61,54,51,55,56,50,48,48,46,0,72,101,108,109,101,114,116,32,49,57,48,54,0,104,111,117,103,104,0,97,61,54,51,55,56,50,55,48,46,48,0,114,102,61,50,57,55,46,0,72,111,117,103,104,0,97,61,54,51,55,56,51,56,56,46,48,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,49,57,48,57,32,40,72,97,121,102,111,114,100,41,0,107,114,97,115,115,0,97,61,54,51,55,56,50,52,53,46,48,0,75,114,97,115,115,111,118,115,107,121,44,32,49,57,52,50,0,107,97,117,108,97,0,97,61,54,51,55,56,49,54,51,46,0,114,102,61,50,57,56,46,50,52,0,75,97,117,108,97,32,49,57,54,49,0,108,101,114,99,104,0,97,61,54,51,55,56,49,51,57,46,0,76,101,114,99,104,32,49,57,55,57,0,109,112,114,116,115,0,97,61,54,51,57,55,51,48,48,46,0,114,102,61,49,57,49,46,0,77,97,117,112,101,114,116,105,117,115,32,49,55,51,56,0,110,101,119,95,105,110,116,108,0,97,61,54,51,55,56,49,53,55,46,53,0,98,61,54,51,53,54,55,55,50,46,50,0,78,101,119,32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,49,57,54,55,0,112,108,101,115,115,105,115,0,97,61,54,51,55,54,53,50,51,46,0,98,61,54,51,53,53,56,54,51,46,0,80,108,101,115,115,105,115,32,49,56,49,55,32,40,70,114,97,110,99,101,41,0,83,69,97,115,105,97,0,97,61,54,51,55,56,49,53,53,46,48,0,98,61,54,51,53,54,55,55,51,46,51,50,48,53,0,83,111,117,116,104,101,97,115,116,32,65,115,105,97,0,119,97,108,98,101,99,107,0,97,61,54,51,55,54,56,57,54,46,48,0,98,61,54,51,53,53,56,51,52,46,56,52,54,55,0,87,97,108,98,101,99,107,0,87,71,83,54,48,0,97,61,54,51,55,56,49,54,53,46,48,0,87,71,83,32,54,48,0,87,71,83,54,54,0,97,61,54,51,55,56,49,52,53,46,48,0,87,71,83,32,54,54,0,87,71,83,55,50,0,97,61,54,51,55,56,49,51,53,46,48,0,114,102,61,50,57,56,46,50,54,0,87,71,83,32,55,50,0,114,102,61,50,57,56,46,50,53,55,50,50,51,53,54,51,0,87,71,83,32,56,52,0,115,112,104,101,114,101,0,97,61,54,51,55,48,57,57,55,46,48,0,98,61,54,51,55,48,57,57,55,46,48,0,78,111,114,109,97,108,32,83,112,104,101,114,101,32,40,114,61,54,51,55,48,57,57,55,41,0,116,105,110,105,116,0,115,105,110,105,116,0,115,112,114,111,106,0,98,110,111,95,100,101,102,115,0,98,103,101,111,99,0,98,111,118,101,114,0,116,103,101,111,105,100,103,114,105,100,115,0,116,108,111,110,95,119,114,97,112,0,114,108,111,110,95,119,114,97,112,0,115,97,120,105,115,0,114,108,111,110,95,48,0,114,108,97,116,95,48,0,100,120,95,48,0,100,121,95,48,0,116,107,95,48,0,100,107,95,48,0,116,107,0,100,107,0,115,117,110,105,116,115,0,115,116,111,95,109,101,116,101,114,0,115,118,117,110,105,116,115,0,115,118,116,111,95,109,101,116,101,114,0,115,112,109,0,101,119,110,115,117,100,0,112,114,111,106,95,100,101,102,46,100,97,116,0,114,116,0,103,101,110,101,114,97,108,0,116,100,97,116,117,109,0,116,101,108,108,112,115,0,116,97,0,116,98,0,116,114,102,0,116,102,0,97,101,97,0,97,101,113,100,0,97,105,116,111,102,102,0,97,108,115,107,0,97,112,105,97,110,0,97,117,103,117,115,116,0,98,97,99,111,110,0,98,105,112,99,0,98,111,103,103,115,0,98,111,110,110,101,0,99,97,108,99,111,102,105,0,99,97,115,115,0,99,99,0,99,101,97,0,99,104,97,109,98,0,99,111,108,108,103,0,99,111,109,105,108,108,0,99,114,97,115,116,0,100,101,110,111,121,0,101,99,107,49,0,101,99,107,50,0,101,99,107,51,0,101,99,107,52,0,101,99,107,53,0,101,99,107,54,0,101,113,99,0,101,113,100,99,0,101,117,108,101,114,0,101,116,109,101,114,99,0,102,97,104,101,121,0,102,111,117,99,0,102,111,117,99,95,115,0,103,97,108,108,0,103,101,111,99,101,110,116,0,103,101,111,115,0,103,105,110,115,56,0,103,110,95,115,105,110,117,0,103,110,111,109,0,103,111,111,100,101,0,103,115,52,56,0,103,115,53,48,0,104,97,109,109,101,114,0,104,97,116,97,110,111,0,104,101,97,108,112,105,120,0,114,104,101,97,108,112,105,120,0,105,103,104,0,105,109,119,95,112,0,105,115,101,97,0,107,97,118,53,0,107,97,118,55,0,107,114,111,118,97,107,0,108,97,98,114,100,0,108,97,101,97,0,108,97,103,114,110,103,0,108,97,114,114,0,108,97,115,107,0,108,111,110,108,97,116,0,108,97,116,108,111,110,0,108,97,116,108,111,110,103,0,108,111,110,103,108,97,116,0,108,99,99,0,108,99,99,97,0,108,101,97,99,0,108,101,101,95,111,115,0,108,111,120,105,109,0,108,115,97,116,0,109,98,116,95,115,0,109,98,116,95,102,112,115,0,109,98,116,102,112,112,0,109,98,116,102,112,113,0,109,98,116,102,112,115,0,109,101,114,99,0,109,105,108,95,111,115,0,109,105,108,108,0,109,105,115,114,115,111,109,0,109,111,108,108,0,109,117,114,100,49,0,109,117,114,100,50,0,109,117,114,100,51,0,110,97,116,101,97,114,116,104,0,110,97,116,101,97,114,116,104,50,0,110,101,108,108,0,110,101,108,108,95,104,0,110,105,99,111,108,0,110,115,112,101,114,0,110,122,109,103,0,111,98,95,116,114,97,110,0,111,99,101,97,0,111,101,97,0,111,109,101,114,99,0,111,114,116,101,108,0,111,114,116,104,111,0,112,99,111,110,105,99,0,112,97,116,116,101,114,115,111,110,0,112,111,108,121,0,112,117,116,112,49,0,112,117,116,112,50,0,112,117,116,112,51,0,112,117,116,112,51,112,0,112,117,116,112,52,112,0,112,117,116,112,53,0,112,117,116,112,53,112,0,112,117,116,112,54,0,112,117,116,112,54,112,0,113,117,97,95,97,117,116,0,113,115,99,0,114,111,98,105,110,0,114,111,117,115,115,0,114,112,111,108,121,0,115,99,104,0,115,105,110,117,0,115,111,109,101,114,99,0,115,116,101,114,101,0,115,116,101,114,101,97,0,103,115,116,109,101,114,99,0,116,99,99,0,116,99,101,97,0,116,105,109,101,115,0,116,105,115,115,111,116,0,116,109,101,114,99,0,116,112,101,113,100,0,116,112,101,114,115,0,117,112,115,0,117,114,109,53,0,117,114,109,102,112,115,0,117,116,109,0,118,97,110,100,103,0,118,97,110,100,103,50,0,118,97,110,100,103,51,0,118,97,110,100,103,52,0,118,105,116,107,49,0,119,97,103,49,0,119,97,103,50,0,119,97,103,51,0,119,97,103,52,0,119,97,103,53,0,119,97,103,54,0,119,97,103,55,0,119,101,114,101,110,0,119,105,110,107,49,0,119,105,110,107,50,0,119,105,110,116,114,105,0,47,0,72,79,77,69,0,46,46,0,80,82,79,74,95,76,73,66,0,37,115,37,99,37,115,0,102,97,105,108,101,100,0,115,117,99,99,101,101,100,101,100,0,112,106,95,111,112,101,110,95,108,105,98,40,37,115,41,58,32,99,97,108,108,32,102,111,112,101,110,40,37,115,41,32,45,32,37,115,10,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,112,114,111,106,0,105,110,118,97,108,105,100,32,114,101,113,117,101,115,116,32,116,111,32,112,106,95,112,97,114,97,109,44,32,102,97,116,97,108,10,0,107,109,0,49,48,48,48,46,0,75,105,108,111,109,101,116,101,114,0,109,0,49,46,0,77,101,116,101,114,0,100,109,0,49,47,49,48,0,68,101,99,105,109,101,116,101,114,0,99,109,0,49,47,49,48,48,0,67,101,110,116,105,109,101,116,101,114,0,109,109,0,49,47,49,48,48,48,0,77,105,108,108,105,109,101,116,101,114,0,107,109,105,0,49,56,53,50,46,48,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,78,97,117,116,105,99,97,108,32,77,105,108,101,0,105,110,0,48,46,48,50,53,52,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,73,110,99,104,0,102,116,0,48,46,51,48,52,56,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,70,111,111,116,0,121,100,0,48,46,57,49,52,52,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,89,97,114,100,0,109,105,0,49,54,48,57,46,51,52,52,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,83,116,97,116,117,116,101,32,77,105,108,101,0,102,97,116,104,0,49,46,56,50,56,56,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,70,97,116,104,111,109,0,99,104,0,50,48,46,49,49,54,56,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,67,104,97,105,110,0,108,105,110,107,0,48,46,50,48,49,49,54,56,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,76,105,110,107,0,117,115,45,105,110,0,49,46,47,51,57,46,51,55,0,85,46,83,46,32,83,117,114,118,101,121,111,114,39,115,32,73,110,99,104,0,117,115,45,102,116,0,48,46,51,48,52,56,48,48,54,48,57,54,48,49,50,49,57,0,85,46,83,46,32,83,117,114,118,101,121,111,114,39,115,32,70,111,111,116,0,117,115,45,121,100,0,48,46,57,49,52,52,48,49,56,50,56,56,48,51,54,53,56,0,85,46,83,46,32,83,117,114,118,101,121,111,114,39,115,32,89,97,114,100,0,117,115,45,99,104,0,50,48,46,49,49,54,56,52,48,50,51,51,54,56,48,52,55,0,85,46,83,46,32,83,117,114,118,101,121,111,114,39,115,32,67,104,97,105,110,0,117,115,45,109,105,0,49,54,48,57,46,51,52,55,50,49,56,54,57,52,52,51,55,0,85,46,83,46,32,83,117,114,118,101,121,111,114,39,115,32,83,116,97,116,117,116,101,32,77,105,108,101,0,105,110,100,45,121,100,0,48,46,57,49,52,51,57,53,50,51,0,73,110,100,105,97,110,32,89,97,114,100,0,105,110,100,45,102,116,0,48,46,51,48,52,55,57,56,52,49,0,73,110,100,105,97,110,32,70,111,111,116,0,105,110,100,45,99,104,0,50,48,46,49,49,54,54,57,53,48,54,0,73,110,100,105,97,110,32,67,104,97,105,110,0,37,115,10,0,72,69,65,76,80,105,120,10,9,83,112,104,46,44,32,69,108,108,112,115,46,0,114,72,69,65,76,80,105,120,10,9,83,112,104,46,44,32,69,108,108,112,115,46,10,9,110,111,114,116,104,95,115,113,117,97,114,101,61,32,115,111,117,116,104,95,115,113,117,97,114,101,61,0,105,110,111,114,116,104,95,115,113,117,97,114,101,0,105,115,111,117,116,104,95,115,113,117,97,114,101,0,78,97,116,117,114,97,108,32,69,97,114,116,104,10,9,80,67,121,108,46,44,32,83,112,104,46,0,78,97,116,117,114,97,108,32,69,97,114,116,104,32,50,10,9,80,67,121,108,46,44,32,83,112,104,46,0,67,97,108,32,67,111,111,112,32,79,99,101,97,110,32,70,105,115,104,32,73,110,118,101,115,116,32,76,105,110,101,115,47,83,116,97,116,105,111,110,115,10,9,67,121,108,44,32,83,112,104,38,69,108,108,0,114,0,83,104,111,114,116,32,108,105,110,101,32,105,110,32,103,114,105,100,32,99,97,116,97,108,111,103,46,0,103,105,45,62,99,104,105,108,100,32,61,61,32,78,85,76,76,0,112,106,95,103,114,105,100,99,97,116,97,108,111,103,46,99,0,112,106,95,103,99,95,97,112,112,108,121,95,103,114,105,100,115,104,105,102,116,0,73,110,118,101,114,115,101,32,103,114,105,100,32,115,104,105,102,116,32,105,116,101,114,97,116,105,111,110,32,102,97,105,108,101,100,44,32,112,114,101,115,117,109,97,98,108,121,32,97,116,32,103,114,105,100,32,101,100,103,101,46,10,85,115,105,110,103,32,102,105,114,115,116,32,97,112,112,114,111,120,105,109,97,116,105,111,110,46,10,0,73,110,118,101,114,115,101,32,103,114,105,100,32,115,104,105,102,116,32,105,116,101,114,97,116,111,114,32,102,97,105,108,101,100,32,116,111,32,99,111,110,118,101,114,103,101,46,10,0,99,116,97,98,108,101,32,108,111,97,100,105,110,103,32,102,97,105,108,101,100,32,111,110,32,102,114,101,97,100,40,41,32,45,32,98,105,110,97,114,121,32,105,110,99,111,109,112,97,116,105,98,108,101,63,10,0,80,82,79,74,95,68,69,66,85,71,0,99,116,97,98,108,101,50,32,108,111,97,100,105,110,103,32,102,97,105,108,101,100,32,111,110,32,102,114,101,97,100,40,41,32,45,32,98,105,110,97,114,121,32,105,110,99,111,109,112,97,116,105,98,108,101,63,10,0,99,116,97,98,108,101,50,32,45,32,119,114,111,110,103,32,104,101,97,100,101,114,33,0,112,106,95,97,112,112,108,121,95,103,114,105,100,115,104,105,102,116,40,41,58,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,97,32,103,114,105,100,32,115,104,105,102,116,32,116,97,98,108,101,32,102,111,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,116,105,111,110,32,40,37,46,55,102,100,87,44,37,46,55,102,100,78,41,0,87,71,83,56,52,0,116,111,119,103,115,56,52,61,48,44,48,44,48,0,71,71,82,83,56,55,0,116,111,119,103,115,56,52,61,45,49,57,57,46,56,55,44,55,52,46,55,57,44,50,52,54,46,54,50,0,71,82,83,56,48,0,71,114,101,101,107,95,71,101,111,100,101,116,105,99,95,82,101,102,101,114,101,110,99,101,95,83,121,115,116,101,109,95,49,57,56,55,0,78,65,68,56,51,0,78,111,114,116,104,95,65,109,101,114,105,99,97,110,95,68,97,116,117,109,95,49,57,56,51,0,78,65,68,50,55,0,110,97,100,103,114,105,100,115,61,64,99,111,110,117,115,44,64,97,108,97,115,107,97,44,64,110,116,118,50,95,48,46,103,115,98,44,64,110,116,118,49,95,99,97,110,46,100,97,116,0,99,108,114,107,54,54,0,78,111,114,116,104,95,65,109,101,114,105,99,97,110,95,68,97,116,117,109,95,49,57,50,55,0,112,111,116,115,100,97,109,0,116,111,119,103,115,56,52,61,53,57,56,46,49,44,55,51,46,55,44,52,49,56,46,50,44,48,46,50,48,50,44,48,46,48,52,53,44,45,50,46,52,53,53,44,54,46,55,0,98,101,115,115,101,108,0,80,111,116,115,100,97,109,32,82,97,117,101,110,98,101,114,103,32,49,57,53,48,32,68,72,68,78,0,99,97,114,116,104,97,103,101,0,116,111,119,103,115,56,52,61,45,50,54,51,46,48,44,54,46,48,44,52,51,49,46,48,0,99,108,114,107,56,48,105,103,110,0,67,97,114,116,104,97,103,101,32,49,57,51,52,32,84,117,110,105,115,105,97,0,104,101,114,109,97,110,110,115,107,111,103,101,108,0,116,111,119,103,115,56,52,61,53,55,55,46,51,50,54,44,57,48,46,49,50,57,44,52,54,51,46,57,49,57,44,53,46,49,51,55,44,49,46,52,55,52,44,53,46,50,57,55,44,50,46,52,50,51,50,0,72,101,114,109,97,110,110,115,107,111,103,101,108,0,105,114,101,54,53,0,116,111,119,103,115,56,52,61,52,56,50,46,53,51,48,44,45,49,51,48,46,53,57,54,44,53,54,52,46,53,53,55,44,45,49,46,48,52,50,44,45,48,46,50,49,52,44,45,48,46,54,51,49,44,56,46,49,53,0,109,111,100,95,97,105,114,121,0,73,114,101,108,97,110,100,32,49,57,54,53,0,110,122,103,100,52,57,0,116,111,119,103,115,56,52,61,53,57,46,52,55,44,45,53,46,48,52,44,49,56,55,46,52,52,44,48,46,52,55,44,45,48,46,49,44,49,46,48,50,52,44,45,52,46,53,57,57,51,0,105,110,116,108,0,78,101,119,32,90,101,97,108,97,110,100,32,71,101,111,100,101,116,105,99,32,68,97,116,117,109,32,49,57,52,57,0,79,83,71,66,51,54,0,116,111,119,103,115,56,52,61,52,52,54,46,52,52,56,44,45,49,50,53,46,49,53,55,44,53,52,50,46,48,54,48,44,48,46,49,53,48,50,44,48,46,50,52,55,48,44,48,46,56,52,50,49,44,45,50,48,46,52,56,57,52,0,97,105,114,121,0,65,105,114,121,32,49,56,51,48,0,103,114,101,101,110,119,105,99,104,0,48,100,69,0,108,105,115,98,111,110,0,57,100,48,55,39,53,52,46,56,54,50,34,87,0,112,97,114,105,115,0,50,100,50,48,39,49,52,46,48,50,53,34,69,0,98,111,103,111,116,97,0,55,52,100,48,52,39,53,49,46,51,34,87,0,109,97,100,114,105,100,0,51,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([52,49,39,49,54,46,53,56,34,87,0,114,111,109,101,0,49,50,100,50,55,39,56,46,52,34,69,0,98,101,114,110,0,55,100,50,54,39,50,50,46,53,34,69,0,106,97,107,97,114,116,97,0,49,48,54,100,52,56,39,50,55,46,55,57,34,69,0,102,101,114,114,111,0,49,55,100,52,48,39,87,0,98,114,117,115,115,101,108,115,0,52,100,50,50,39,52,46,55,49,34,69,0,115,116,111,99,107,104,111,108,109,0,49,56,100,51,39,50,57,46,56,34,69,0,97,116,104,101,110,115,0,50,51,100,52,50,39,53,56,46,56,49,53,34,69,0,111,115,108,111,0,49,48,100,52,51,39,50,50,46,53,34,69,0,115,100,97,116,117,109,0,101,108,108,112,115,61,0,115,99,97,116,97,108,111,103,0,115,100,97,116,101,0,115,116,111,119,103,115,56,52,0,101,110,117,0,112,106,95,116,114,97,110,115,102,111,114,109,40,41,58,32,115,111,117,114,99,101,32,112,114,111,106,101,99,116,105,111,110,32,110,111,116,32,105,110,118,101,114,116,97,98,108,101,0,115,103,101,111,105,100,103,114,105,100,115,0,115,110,97,100,103,114,105,100,115,0,99,116,97,98,108,101,0,114,98,0,99,116,97,98,108,101,50,0,110,116,118,49,0,110,116,118,50,0,78,84,118,50,32,45,32,108,111,97,100,105,110,103,32,103,114,105,100,32,37,115,0,103,116,120,0,109,105,115,115,105,110,103,0,72,69,65,68,69,82,0,87,32,71,82,73,68,0,84,79,32,32,32,32,32,32,78,65,68,56,51,32,32,32,0,78,85,77,95,79,82,69,67,0,71,83,95,84,89,80,69,0,71,84,88,0,67,84,65,66,76,69,32,86,50,0,67,116,97,98,108,101,50,32,37,115,32,37,100,120,37,100,58,32,76,76,61,40,37,46,57,103,44,37,46,57,103,41,32,85,82,61,40,37,46,57,103,44,37,46,57,103,41,10,0,67,84,65,66,76,69,32,99,116,32,105,115,32,78,85,76,76,46,0,67,116,97,98,108,101,32,37,115,32,37,100,120,37,100,58,32,76,76,61,40,37,46,57,103,44,37,46,57,103,41,32,85,82,61,40,37,46,57,103,44,37,46,57,103,41,10,0,103,116,120,32,102,105,108,101,32,104,101,97,100,101,114,32,104,97,115,32,105,110,118,97,108,105,100,32,101,120,116,101,110,116,115,44,32,99,111,114,114,117,112,116,63,0,71,84,88,32,86,101,114,116,105,99,97,108,32,71,114,105,100,32,83,104,105,102,116,32,70,105,108,101,0,84,104,105,115,32,71,84,88,32,115,112,97,110,115,32,116,104,101,32,100,97,116,101,108,105,110,101,33,32,32,84,104,105,115,32,119,105,108,108,32,99,97,117,115,101,32,112,114,111,98,108,101,109,115,46,0,71,84,88,32,37,100,120,37,100,58,32,76,76,61,40,37,46,57,103,44,37,46,57,103,41,32,85,82,61,40,37,46,57,103,44,37,46,57,103,41,0,83,85,66,95,78,65,77,69,0,78,84,118,50,32,37,115,32,37,100,120,37,100,58,32,76,76,61,40,37,46,57,103,44,37,46,57,103,41,32,85,82,61,40,37,46,57,103,44,37,46,57,103,41,10,0,71,83,95,67,79,85,78,84,40,37,100,41,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,101,120,112,101,99,116,101,100,32,99,101,108,108,115,32,40,37,100,120,37,100,61,37,100,41,10,0,78,79,78,69,0,112,106,95,103,114,105,100,105,110,102,111,95,105,110,105,116,95,110,116,118,50,40,41,58,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,112,97,114,101,110,116,32,37,56,46,56,115,32,102,111,114,32,37,115,46,10,0,78,84,118,49,32,103,114,105,100,32,115,104,105,102,116,32,102,105,108,101,32,104,97,115,32,119,114,111,110,103,32,114,101,99,111,114,100,32,99,111,117,110,116,44,32,99,111,114,114,117,112,116,63,0,78,84,118,49,32,71,114,105,100,32,83,104,105,102,116,32,70,105,108,101,0,78,84,118,49,32,37,100,120,37,100,58,32,76,76,61,40,37,46,57,103,44,37,46,57,103,41,32,85,82,61,40,37,46,57,103,44,37,46,57,103,41,0,70,65,76,83,69,0,112,106,95,103,114,105,100,108,105,115,116,46,99,0,112,106,95,103,114,105,100,108,105,115,116,95,109,101,114,103,101,95,103,114,105,100,102,105,108,101,0,112,106,95,97,112,112,108,121,95,103,114,105,100,115,104,105,102,116,40,41,58,32,117,115,101,100,32,37,115,0,112,106,95,97,112,112,108,121,95,118,103,114,105,100,115,104,105,102,116,40,41,58,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,97,32,103,114,105,100,32,115,104,105,102,116,32,116,97,98,108,101,32,102,111,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,116,105,111,110,32,40,37,46,55,102,100,87,44,37,46,55,102,100,78,41,0,46,46,46,0,32,32,32,116,114,105,101,100,58,32,37,115,0,44,37,115,0,37,115,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  function _pthread_mutexattr_settype() {}

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  function _pthread_mutex_init() {}

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_mutexattr_init() {}

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_llvm_pow_f64": _llvm_pow_f64, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_mutexattr_init": _pthread_mutexattr_init, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall140": ___syscall140, "_pthread_mutex_init": _pthread_mutex_init, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vi=env.invoke_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __exit=env.__exit;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall140=env.___syscall140;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _pj_aeqd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_aeqd($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 154;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9104;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_aeqd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,480)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new($9)|0);
  $1 = $10;
  $175 = $1;
  STACKTOP = sp;return ($175|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 72|0);
 $16 = $2;
 $17 = ((($16)) + 56|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $2;
 $20 = ((($19)) + 72|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $2;
 $23 = ((($22)) + 104|0);
 $24 = +HEAPF64[$23>>3];
 $25 = (+Math_sqrt((+$24)));
 $26 = 1.0 + $25;
 $27 = $21 / $26;
 _geod_init($15,$18,$27);
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = $2;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _pj_param($4,$29,$32,17187);
 $33 = +HEAPF64[$4>>3];
 $34 = $2;
 $35 = ((($34)) + 128|0);
 HEAPF64[$35>>3] = $33;
 $36 = $2;
 $37 = ((($36)) + 128|0);
 $38 = +HEAPF64[$37>>3];
 $39 = (+Math_abs((+$38)));
 $40 = $39 - 1.5707963267948966;
 $41 = (+Math_abs((+$40)));
 $42 = $41 < 1.0E-10;
 $43 = $2;
 $44 = ((($43)) + 128|0);
 $45 = +HEAPF64[$44>>3];
 do {
  if ($42) {
   $46 = $45 < 0.0;
   $47 = $46 ? 1 : 0;
   $48 = $3;
   $49 = ((($48)) + 64|0);
   HEAP32[$49>>2] = $47;
   $50 = $2;
   $51 = ((($50)) + 128|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $52 < 0.0;
   $54 = $53 ? -1.0 : 1.0;
   $55 = $3;
   HEAPF64[$55>>3] = $54;
   $56 = $3;
   $57 = ((($56)) + 8|0);
   HEAPF64[$57>>3] = 0.0;
  } else {
   $58 = (+Math_abs((+$45)));
   $59 = $58 < 1.0E-10;
   $60 = $3;
   $61 = ((($60)) + 64|0);
   if ($59) {
    HEAP32[$61>>2] = 2;
    $62 = $3;
    HEAPF64[$62>>3] = 0.0;
    $63 = $3;
    $64 = ((($63)) + 8|0);
    HEAPF64[$64>>3] = 1.0;
    break;
   } else {
    HEAP32[$61>>2] = 3;
    $65 = $2;
    $66 = ((($65)) + 128|0);
    $67 = +HEAPF64[$66>>3];
    $68 = (+Math_sin((+$67)));
    $69 = $3;
    HEAPF64[$69>>3] = $68;
    $70 = $2;
    $71 = ((($70)) + 128|0);
    $72 = +HEAPF64[$71>>3];
    $73 = (+Math_cos((+$72)));
    $74 = $3;
    $75 = ((($74)) + 8|0);
    HEAPF64[$75>>3] = $73;
    break;
   }
  }
 } while(0);
 $76 = $2;
 $77 = ((($76)) + 72|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $78 != 0.0;
 $80 = $2;
 do {
  if ($79) {
   $84 = ((($80)) + 72|0);
   $85 = +HEAPF64[$84>>3];
   $86 = (_pj_enfn($85)|0);
   $87 = $3;
   $88 = ((($87)) + 16|0);
   HEAP32[$88>>2] = $86;
   $89 = ($86|0)!=(0|0);
   $90 = $2;
   if (!($89)) {
    _freeup($90);
    $1 = 0;
    $175 = $1;
    STACKTOP = sp;return ($175|0);
   }
   $91 = HEAP32[$90>>2]|0;
   $92 = $2;
   $93 = ((($92)) + 32|0);
   $94 = HEAP32[$93>>2]|0;
   _pj_param($5,$91,$94,9152);
   $95 = HEAP32[$5>>2]|0;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = $2;
    $98 = ((($97)) + 128|0);
    $99 = +HEAPF64[$98>>3];
    $100 = $3;
    $101 = +HEAPF64[$100>>3];
    $102 = $3;
    $103 = ((($102)) + 8|0);
    $104 = +HEAPF64[$103>>3];
    $105 = $3;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (+_pj_mlfn($99,$101,$104,$107));
    $109 = $3;
    $110 = ((($109)) + 24|0);
    HEAPF64[$110>>3] = $108;
    $111 = $2;
    $112 = ((($111)) + 8|0);
    HEAP32[$112>>2] = 157;
    $113 = $2;
    $114 = ((($113)) + 4|0);
    HEAP32[$114>>2] = 158;
    break;
   }
   $115 = $3;
   $116 = ((($115)) + 64|0);
   $117 = HEAP32[$116>>2]|0;
   switch ($117|0) {
   case 0:  {
    $118 = $3;
    $119 = ((($118)) + 16|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (+_pj_mlfn(1.5707963267948966,1.0,0.0,$120));
    $122 = $3;
    $123 = ((($122)) + 40|0);
    HEAPF64[$123>>3] = $121;
    break;
   }
   case 1:  {
    $124 = $3;
    $125 = ((($124)) + 16|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (+_pj_mlfn(-1.5707963267948966,-1.0,0.0,$126));
    $128 = $3;
    $129 = ((($128)) + 40|0);
    HEAPF64[$129>>3] = $127;
    break;
   }
   case 3: case 2:  {
    $130 = $2;
    $131 = ((($130)) + 8|0);
    HEAP32[$131>>2] = 159;
    $132 = $2;
    $133 = ((($132)) + 4|0);
    HEAP32[$133>>2] = 160;
    $134 = $2;
    $135 = ((($134)) + 72|0);
    $136 = +HEAPF64[$135>>3];
    $137 = $3;
    $138 = +HEAPF64[$137>>3];
    $139 = $136 * $138;
    $140 = $3;
    $141 = +HEAPF64[$140>>3];
    $142 = $139 * $141;
    $143 = 1.0 - $142;
    $144 = (+Math_sqrt((+$143)));
    $145 = 1.0 / $144;
    $146 = $3;
    $147 = ((($146)) + 32|0);
    HEAPF64[$147>>3] = $145;
    $148 = $3;
    $149 = +HEAPF64[$148>>3];
    $150 = $2;
    $151 = ((($150)) + 88|0);
    $152 = +HEAPF64[$151>>3];
    $153 = $2;
    $154 = ((($153)) + 104|0);
    $155 = +HEAPF64[$154>>3];
    $156 = (+Math_sqrt((+$155)));
    $157 = $152 / $156;
    $158 = $3;
    $159 = ((($158)) + 48|0);
    HEAPF64[$159>>3] = $157;
    $160 = $149 * $157;
    $161 = $3;
    $162 = ((($161)) + 56|0);
    HEAPF64[$162>>3] = $160;
    $163 = $3;
    $164 = ((($163)) + 8|0);
    $165 = +HEAPF64[$164>>3];
    $166 = $3;
    $167 = ((($166)) + 48|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $168 * $165;
    HEAPF64[$167>>3] = $169;
    break;
   }
   default: {
   }
   }
   $170 = $2;
   $171 = ((($170)) + 8|0);
   HEAP32[$171>>2] = 159;
   $172 = $2;
   $173 = ((($172)) + 4|0);
   HEAP32[$173>>2] = 160;
  } else {
   $81 = ((($80)) + 8|0);
   HEAP32[$81>>2] = 155;
   $82 = $2;
   $83 = ((($82)) + 4|0);
   HEAP32[$83>>2] = 156;
  }
 } while(0);
 $174 = $2;
 $1 = $174;
 $175 = $1;
 STACKTOP = sp;return ($175|0);
}
function _freeup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 416|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  (_pj_dealloc($20)|0);
 }
 $21 = $2;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 (_pj_dealloc($23)|0);
 $24 = $2;
 $25 = (_pj_dealloc($24)|0);
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _s_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+_hypot($12,$14));
 $7 = $15;
 $16 = $15 > 3.1415926535897931;
 $17 = $7;
 do {
  if ($16) {
   $18 = $17 - 1.0E-10;
   $19 = $18 > 3.1415926535897931;
   if (!($19)) {
    $7 = 3.1415926535897931;
    break;
   }
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   _pj_ctx_set_errno($21,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $22 = $17 < 1.0E-10;
   if ($22) {
    $23 = $3;
    $24 = ((($23)) + 128|0);
    $25 = +HEAPF64[$24>>3];
    $26 = ((($4)) + 8|0);
    HEAPF64[$26>>3] = $25;
    HEAPF64[$4>>3] = 0.0;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $27 = $5;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(3);
 do {
  if ($30) {
   label = 9;
  } else {
   $31 = $5;
   $32 = ((($31)) + 64|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(2);
   if ($34) {
    label = 9;
   } else {
    $103 = $5;
    $104 = ((($103)) + 64|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)==(0);
    $107 = $7;
    if ($106) {
     $108 = 1.5707963267948966 - $107;
     $109 = ((($4)) + 8|0);
     HEAPF64[$109>>3] = $108;
     $110 = +HEAPF64[$1>>3];
     $111 = ((($1)) + 8|0);
     $112 = +HEAPF64[$111>>3];
     $113 = -$112;
     $114 = (+Math_atan2((+$110),(+$113)));
     HEAPF64[$4>>3] = $114;
     break;
    } else {
     $115 = $107 - 1.5707963267948966;
     $116 = ((($4)) + 8|0);
     HEAPF64[$116>>3] = $115;
     $117 = +HEAPF64[$1>>3];
     $118 = ((($1)) + 8|0);
     $119 = +HEAPF64[$118>>3];
     $120 = (+Math_atan2((+$117),(+$119)));
     HEAPF64[$4>>3] = $120;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $35 = $7;
  $36 = (+Math_sin((+$35)));
  $8 = $36;
  $37 = $7;
  $38 = (+Math_cos((+$37)));
  $6 = $38;
  $39 = $5;
  $40 = ((($39)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(2);
  $43 = $3;
  $44 = HEAP32[$43>>2]|0;
  if ($42) {
   $45 = ((($1)) + 8|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $8;
   $48 = $46 * $47;
   $49 = $7;
   $50 = $48 / $49;
   $51 = (+_aasin($44,$50));
   $52 = ((($4)) + 8|0);
   HEAPF64[$52>>3] = $51;
   $53 = $8;
   $54 = +HEAPF64[$1>>3];
   $55 = $54 * $53;
   HEAPF64[$1>>3] = $55;
   $56 = $6;
   $57 = $7;
   $58 = $56 * $57;
   $59 = ((($1)) + 8|0);
   HEAPF64[$59>>3] = $58;
  } else {
   $60 = $6;
   $61 = $5;
   $62 = +HEAPF64[$61>>3];
   $63 = $60 * $62;
   $64 = ((($1)) + 8|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $8;
   $67 = $65 * $66;
   $68 = $5;
   $69 = ((($68)) + 8|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $67 * $70;
   $72 = $7;
   $73 = $71 / $72;
   $74 = $63 + $73;
   $75 = (+_aasin($44,$74));
   $76 = ((($4)) + 8|0);
   HEAPF64[$76>>3] = $75;
   $77 = $6;
   $78 = $5;
   $79 = +HEAPF64[$78>>3];
   $80 = ((($4)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = (+Math_sin((+$81)));
   $83 = $79 * $82;
   $84 = $77 - $83;
   $85 = $7;
   $86 = $84 * $85;
   $87 = ((($1)) + 8|0);
   HEAPF64[$87>>3] = $86;
   $88 = $8;
   $89 = $5;
   $90 = ((($89)) + 8|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $88 * $91;
   $93 = +HEAPF64[$1>>3];
   $94 = $93 * $92;
   HEAPF64[$1>>3] = $94;
  }
  $95 = ((($1)) + 8|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $96 == 0.0;
  if ($97) {
   $102 = 0.0;
  } else {
   $98 = +HEAPF64[$1>>3];
   $99 = ((($1)) + 8|0);
   $100 = +HEAPF64[$99>>3];
   $101 = (+Math_atan2((+$98),(+$100)));
   $102 = $101;
  }
  HEAPF64[$4>>3] = $102;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_sin((+$13)));
 $8 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_cos((+$16)));
 $7 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_cos((+$18)));
 $6 = $19;
 $20 = $5;
 $21 = ((($20)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 2:  {
  $23 = $7;
  $24 = $6;
  $25 = $23 * $24;
  $26 = ((($4)) + 8|0);
  HEAPF64[$26>>3] = $25;
  label = 4;
  break;
 }
 case 3:  {
  $27 = $5;
  $28 = +HEAPF64[$27>>3];
  $29 = $8;
  $30 = $28 * $29;
  $31 = $5;
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $7;
  $35 = $33 * $34;
  $36 = $6;
  $37 = $35 * $36;
  $38 = $30 + $37;
  $39 = ((($4)) + 8|0);
  HEAPF64[$39>>3] = $38;
  label = 4;
  break;
 }
 case 0:  {
  $88 = ((($1)) + 8|0);
  $89 = +HEAPF64[$88>>3];
  $90 = -$89;
  $91 = ((($1)) + 8|0);
  HEAPF64[$91>>3] = $90;
  $92 = $6;
  $93 = -$92;
  $6 = $93;
  label = 13;
  break;
 }
 case 1:  {
  label = 13;
  break;
 }
 default: {
 }
 }
 do {
  if ((label|0) == 4) {
   $40 = ((($4)) + 8|0);
   $41 = +HEAPF64[$40>>3];
   $42 = (+Math_abs((+$41)));
   $43 = $42 - 1.0;
   $44 = (+Math_abs((+$43)));
   $45 = $44 < 9.9999999999999999E-15;
   $46 = ((($4)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   if ($45) {
    $48 = $47 < 0.0;
    if (!($48)) {
     $51 = ((($4)) + 8|0);
     HEAPF64[$51>>3] = 0.0;
     HEAPF64[$4>>3] = 0.0;
     break;
    }
    $49 = $3;
    $50 = HEAP32[$49>>2]|0;
    _pj_ctx_set_errno($50,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   } else {
    $52 = (+Math_acos((+$47)));
    $53 = ((($4)) + 8|0);
    HEAPF64[$53>>3] = $52;
    $54 = ((($4)) + 8|0);
    $55 = +HEAPF64[$54>>3];
    $56 = (+Math_sin((+$55)));
    $57 = ((($4)) + 8|0);
    $58 = +HEAPF64[$57>>3];
    $59 = $58 / $56;
    HEAPF64[$57>>3] = $59;
    $60 = ((($4)) + 8|0);
    $61 = +HEAPF64[$60>>3];
    $62 = $7;
    $63 = $61 * $62;
    $64 = +HEAPF64[$1>>3];
    $65 = (+Math_sin((+$64)));
    $66 = $63 * $65;
    HEAPF64[$4>>3] = $66;
    $67 = $5;
    $68 = ((($67)) + 64|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(2);
    if ($70) {
     $71 = $8;
     $87 = $71;
    } else {
     $72 = $5;
     $73 = ((($72)) + 8|0);
     $74 = +HEAPF64[$73>>3];
     $75 = $8;
     $76 = $74 * $75;
     $77 = $5;
     $78 = +HEAPF64[$77>>3];
     $79 = $7;
     $80 = $78 * $79;
     $81 = $6;
     $82 = $80 * $81;
     $83 = $76 - $82;
     $87 = $83;
    }
    $84 = ((($4)) + 8|0);
    $85 = +HEAPF64[$84>>3];
    $86 = $85 * $87;
    HEAPF64[$84>>3] = $86;
    break;
   }
  }
  else if ((label|0) == 13) {
   $94 = ((($1)) + 8|0);
   $95 = +HEAPF64[$94>>3];
   $96 = $95 - 1.5707963267948966;
   $97 = (+Math_abs((+$96)));
   $98 = $97 < 1.0E-10;
   if (!($98)) {
    $101 = ((($1)) + 8|0);
    $102 = +HEAPF64[$101>>3];
    $103 = 1.5707963267948966 + $102;
    $104 = ((($4)) + 8|0);
    HEAPF64[$104>>3] = $103;
    $105 = +HEAPF64[$1>>3];
    $106 = (+Math_sin((+$105)));
    $107 = $103 * $106;
    HEAPF64[$4>>3] = $107;
    $108 = $6;
    $109 = ((($4)) + 8|0);
    $110 = +HEAPF64[$109>>3];
    $111 = $110 * $108;
    HEAPF64[$109>>3] = $111;
    break;
   }
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   _pj_ctx_set_errno($100,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_guam_inv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = 0.5 * $12;
 $14 = +HEAPF64[$1>>3];
 $15 = $13 * $14;
 $6 = $15;
 $16 = $3;
 $17 = ((($16)) + 128|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($4)) + 8|0);
 HEAPF64[$19>>3] = $18;
 $8 = 0;
 while(1) {
  $20 = $8;
  $21 = ($20|0)<(3);
  if (!($21)) {
   break;
  }
  $22 = $3;
  $23 = ((($22)) + 88|0);
  $24 = +HEAPF64[$23>>3];
  $25 = ((($4)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (+Math_sin((+$26)));
  $28 = $24 * $27;
  $7 = $28;
  $29 = $3;
  $30 = HEAP32[$29>>2]|0;
  $31 = $5;
  $32 = ((($31)) + 24|0);
  $33 = +HEAPF64[$32>>3];
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $33 + $35;
  $37 = $6;
  $38 = ((($4)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  $40 = (+Math_tan((+$39)));
  $41 = $37 * $40;
  $42 = $7;
  $43 = $7;
  $44 = $42 * $43;
  $45 = 1.0 - $44;
  $46 = (+Math_sqrt((+$45)));
  $7 = $46;
  $47 = $41 * $46;
  $48 = $36 - $47;
  $49 = $3;
  $50 = ((($49)) + 72|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $5;
  $53 = ((($52)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (+_pj_inv_mlfn($30,$48,$51,$54));
  $56 = ((($4)) + 8|0);
  HEAPF64[$56>>3] = $55;
  $57 = $8;
  $58 = (($57) + 1)|0;
  $8 = $58;
 }
 $59 = +HEAPF64[$1>>3];
 $60 = $7;
 $61 = $59 * $60;
 $62 = ((($4)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = (+Math_cos((+$63)));
 $65 = $61 / $64;
 HEAPF64[$4>>3] = $65;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_guam_fwd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_cos((+$13)));
 $6 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_sin((+$16)));
 $7 = $17;
 $18 = $3;
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $7;
 $22 = $20 * $21;
 $23 = $7;
 $24 = $22 * $23;
 $25 = 1.0 - $24;
 $26 = (+Math_sqrt((+$25)));
 $27 = 1.0 / $26;
 $8 = $27;
 $28 = +HEAPF64[$1>>3];
 $29 = $6;
 $30 = $28 * $29;
 $31 = $8;
 $32 = $30 * $31;
 HEAPF64[$4>>3] = $32;
 $33 = ((($1)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $7;
 $36 = $6;
 $37 = $5;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (+_pj_mlfn($34,$35,$36,$39));
 $41 = $5;
 $42 = ((($41)) + 24|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $40 - $43;
 $45 = +HEAPF64[$1>>3];
 $46 = 0.5 * $45;
 $47 = +HEAPF64[$1>>3];
 $48 = $46 * $47;
 $49 = $6;
 $50 = $48 * $49;
 $51 = $7;
 $52 = $50 * $51;
 $53 = $8;
 $54 = $52 * $53;
 $55 = $44 + $54;
 $56 = ((($4)) + 8|0);
 HEAPF64[$56>>3] = $55;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 80|0;
 $8 = sp + 56|0;
 $14 = sp + 8|0;
 $15 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $16 = $3;
 $17 = ((($16)) + 416|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = +HEAPF64[$1>>3];
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+_hypot($19,$21));
 $6 = $22;
 $23 = $22 < 1.0E-10;
 if ($23) {
  $24 = $3;
  $25 = ((($24)) + 128|0);
  $26 = +HEAPF64[$25>>3];
  $27 = ((($4)) + 8|0);
  HEAPF64[$27>>3] = $26;
  HEAPF64[$4>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $28 = $5;
 $29 = ((($28)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  label = 5;
 } else {
  $32 = $5;
  $33 = ((($32)) + 64|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(2);
  if ($35) {
   label = 5;
  } else {
   $83 = $3;
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   $86 = ((($85)) + 64|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0);
   $89 = $5;
   $90 = ((($89)) + 40|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $6;
   $93 = $91 - $92;
   $94 = $91 + $92;
   $95 = $88 ? $93 : $94;
   $96 = $3;
   $97 = ((($96)) + 72|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $5;
   $100 = ((($99)) + 16|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (+_pj_inv_mlfn($84,$95,$98,$101));
   $103 = ((($4)) + 8|0);
   HEAPF64[$103>>3] = $102;
   $104 = +HEAPF64[$1>>3];
   $105 = $5;
   $106 = ((($105)) + 64|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0);
   $109 = ((($1)) + 8|0);
   $110 = +HEAPF64[$109>>3];
   $111 = -$110;
   $112 = $108 ? $111 : $110;
   $113 = (+Math_atan2((+$104),(+$112)));
   HEAPF64[$4>>3] = $113;
  }
 }
 if ((label|0) == 5) {
  $36 = +HEAPF64[$1>>3];
  $37 = $3;
  $38 = ((($37)) + 56|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $36 * $39;
  $10 = $40;
  $41 = ((($1)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $3;
  $44 = ((($43)) + 56|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 * $45;
  $11 = $46;
  $47 = $3;
  $48 = ((($47)) + 128|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $49 / 0.017453292519943295;
  $12 = $50;
  $51 = $3;
  $52 = ((($51)) + 120|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $53 / 0.017453292519943295;
  $13 = $54;
  $55 = $10;
  $56 = $11;
  $57 = (+Math_atan2((+$55),(+$56)));
  $58 = $57 / 0.017453292519943295;
  $7 = $58;
  $59 = $10;
  $60 = $10;
  $61 = $59 * $60;
  $62 = $11;
  $63 = $11;
  $64 = $62 * $63;
  $65 = $61 + $64;
  $66 = (+Math_sqrt((+$65)));
  $9 = $66;
  $67 = $5;
  $68 = ((($67)) + 72|0);
  $69 = $12;
  $70 = $13;
  $71 = $7;
  $72 = $9;
  _geod_direct($68,$69,$70,$71,$72,$14,$15,$8);
  $73 = +HEAPF64[$14>>3];
  $74 = $73 * 0.017453292519943295;
  $75 = ((($4)) + 8|0);
  HEAPF64[$75>>3] = $74;
  $76 = +HEAPF64[$15>>3];
  $77 = $76 * 0.017453292519943295;
  HEAPF64[$4>>3] = $77;
  $78 = $3;
  $79 = ((($78)) + 120|0);
  $80 = +HEAPF64[$79>>3];
  $81 = +HEAPF64[$4>>3];
  $82 = $81 - $80;
  HEAPF64[$4>>3] = $82;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 88|0;
 $10 = sp + 48|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $17 = $3;
 $18 = ((($17)) + 416|0);
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_cos((+$20)));
 $6 = $21;
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_cos((+$23)));
 $7 = $24;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+Math_sin((+$26)));
 $8 = $27;
 $28 = $5;
 $29 = ((($28)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 switch ($30|0) {
 case 0:  {
  $31 = $6;
  $32 = -$31;
  $6 = $32;
  break;
 }
 case 1:  {
  break;
 }
 case 3: case 2:  {
  $53 = +HEAPF64[$1>>3];
  $54 = (+Math_abs((+$53)));
  $55 = $54 < 1.0E-10;
  if ($55) {
   $56 = ((($1)) + 8|0);
   $57 = +HEAPF64[$56>>3];
   $58 = $3;
   $59 = ((($58)) + 128|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $57 - $60;
   $62 = (+Math_abs((+$61)));
   $63 = $62 < 1.0E-10;
   if ($63) {
    $64 = ((($4)) + 8|0);
    HEAPF64[$64>>3] = 0.0;
    HEAPF64[$4>>3] = 0.0;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
  $65 = $3;
  $66 = ((($65)) + 128|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $67 / 0.017453292519943295;
  $14 = $68;
  $69 = $3;
  $70 = ((($69)) + 120|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 / 0.017453292519943295;
  $13 = $72;
  $73 = ((($1)) + 8|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $74 / 0.017453292519943295;
  $16 = $75;
  $76 = +HEAPF64[$1>>3];
  $77 = $3;
  $78 = ((($77)) + 120|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $76 + $79;
  $81 = $80 / 0.017453292519943295;
  $15 = $81;
  $82 = $5;
  $83 = ((($82)) + 72|0);
  $84 = $14;
  $85 = $13;
  $86 = $16;
  $87 = $15;
  _geod_inverse($83,$84,$85,$86,$87,$12,$10,$11);
  $88 = +HEAPF64[$10>>3];
  $89 = $88 * 0.017453292519943295;
  HEAPF64[$10>>3] = $89;
  $90 = +HEAPF64[$12>>3];
  $91 = +HEAPF64[$10>>3];
  $92 = (+Math_sin((+$91)));
  $93 = $90 * $92;
  $94 = $3;
  $95 = ((($94)) + 56|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $93 / $96;
  HEAPF64[$4>>3] = $97;
  $98 = +HEAPF64[$12>>3];
  $99 = +HEAPF64[$10>>3];
  $100 = (+Math_cos((+$99)));
  $101 = $98 * $100;
  $102 = $3;
  $103 = ((($102)) + 56|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $101 / $104;
  $106 = ((($4)) + 8|0);
  HEAPF64[$106>>3] = $105;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 }
 $33 = $5;
 $34 = ((($33)) + 40|0);
 $35 = +HEAPF64[$34>>3];
 $36 = ((($1)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $8;
 $39 = $7;
 $40 = $5;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (+_pj_mlfn($37,$38,$39,$42));
 $44 = $35 - $43;
 $45 = (+Math_abs((+$44)));
 $9 = $45;
 $46 = +HEAPF64[$1>>3];
 $47 = (+Math_sin((+$46)));
 $48 = $45 * $47;
 HEAPF64[$4>>3] = $48;
 $49 = $9;
 $50 = $6;
 $51 = $49 * $50;
 $52 = ((($4)) + 8|0);
 HEAPF64[$52>>3] = $51;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_gnom($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gnom($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 161;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9158;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gnom($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_2($7)|0);
  $1 = $8;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 128|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_abs((+$14)));
 $16 = $15 - 1.5707963267948966;
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 1.0E-10;
 $19 = $2;
 $20 = ((($19)) + 128|0);
 $21 = +HEAPF64[$20>>3];
 do {
  if ($18) {
   $22 = $21 < 0.0;
   $23 = $22 ? 1 : 0;
   $24 = $3;
   $25 = ((($24)) + 16|0);
   HEAP32[$25>>2] = $23;
  } else {
   $26 = (+Math_abs((+$21)));
   $27 = $26 < 1.0E-10;
   $28 = $3;
   $29 = ((($28)) + 16|0);
   if ($27) {
    HEAP32[$29>>2] = 2;
    break;
   } else {
    HEAP32[$29>>2] = 3;
    $30 = $2;
    $31 = ((($30)) + 128|0);
    $32 = +HEAPF64[$31>>3];
    $33 = (+Math_sin((+$32)));
    $34 = $3;
    HEAPF64[$34>>3] = $33;
    $35 = $2;
    $36 = ((($35)) + 128|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (+Math_cos((+$37)));
    $39 = $3;
    $40 = ((($39)) + 8|0);
    HEAPF64[$40>>3] = $38;
    break;
   }
  }
 } while(0);
 $41 = $2;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 162;
 $43 = $2;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 163;
 $45 = $2;
 $46 = ((($45)) + 72|0);
 HEAPF64[$46>>3] = 0.0;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 STACKTOP = sp;return ($48|0);
}
function _freeup_1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_2($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+_hypot($12,$14));
 $6 = $15;
 $16 = $6;
 $17 = (+Math_atan((+$16)));
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = (+Math_sin((+$17)));
 $8 = $19;
 $20 = $8;
 $21 = $8;
 $22 = $20 * $21;
 $23 = 1.0 - $22;
 $24 = (+Math_sqrt((+$23)));
 $7 = $24;
 $25 = $6;
 $26 = (+Math_abs((+$25)));
 $27 = $26 <= 1.0E-10;
 if ($27) {
  $28 = $3;
  $29 = ((($28)) + 128|0);
  $30 = +HEAPF64[$29>>3];
  $31 = ((($4)) + 8|0);
  HEAPF64[$31>>3] = $30;
  HEAPF64[$4>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $32 = $5;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 switch ($34|0) {
 case 3:  {
  $35 = $7;
  $36 = $5;
  $37 = +HEAPF64[$36>>3];
  $38 = $35 * $37;
  $39 = ((($1)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $8;
  $42 = $40 * $41;
  $43 = $5;
  $44 = ((($43)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 * $45;
  $47 = $6;
  $48 = $46 / $47;
  $49 = $38 + $48;
  $50 = ((($4)) + 8|0);
  HEAPF64[$50>>3] = $49;
  $51 = ((($4)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = (+Math_abs((+$52)));
  $54 = $53 >= 1.0;
  $55 = ((($4)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  if ($54) {
   $57 = $56 > 0.0;
   $58 = $57 ? 1.5707963267948966 : -1.5707963267948966;
   $59 = ((($4)) + 8|0);
   HEAPF64[$59>>3] = $58;
  } else {
   $60 = (+Math_asin((+$56)));
   $61 = ((($4)) + 8|0);
   HEAPF64[$61>>3] = $60;
  }
  $62 = $7;
  $63 = $5;
  $64 = +HEAPF64[$63>>3];
  $65 = ((($4)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = (+Math_sin((+$66)));
  $68 = $64 * $67;
  $69 = $62 - $68;
  $70 = $6;
  $71 = $69 * $70;
  $72 = ((($1)) + 8|0);
  HEAPF64[$72>>3] = $71;
  $73 = $8;
  $74 = $5;
  $75 = ((($74)) + 8|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $73 * $76;
  $78 = +HEAPF64[$1>>3];
  $79 = $78 * $77;
  HEAPF64[$1>>3] = $79;
  break;
 }
 case 2:  {
  $80 = ((($1)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $8;
  $83 = $81 * $82;
  $84 = $6;
  $85 = $83 / $84;
  $86 = ((($4)) + 8|0);
  HEAPF64[$86>>3] = $85;
  $87 = ((($4)) + 8|0);
  $88 = +HEAPF64[$87>>3];
  $89 = (+Math_abs((+$88)));
  $90 = $89 >= 1.0;
  $91 = ((($4)) + 8|0);
  $92 = +HEAPF64[$91>>3];
  if ($90) {
   $93 = $92 > 0.0;
   $94 = $93 ? 1.5707963267948966 : -1.5707963267948966;
   $95 = ((($4)) + 8|0);
   HEAPF64[$95>>3] = $94;
  } else {
   $96 = (+Math_asin((+$92)));
   $97 = ((($4)) + 8|0);
   HEAPF64[$97>>3] = $96;
  }
  $98 = $7;
  $99 = $6;
  $100 = $98 * $99;
  $101 = ((($1)) + 8|0);
  HEAPF64[$101>>3] = $100;
  $102 = $8;
  $103 = +HEAPF64[$1>>3];
  $104 = $103 * $102;
  HEAPF64[$1>>3] = $104;
  break;
 }
 case 1:  {
  $105 = ((($4)) + 8|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $106 - 1.5707963267948966;
  HEAPF64[$105>>3] = $107;
  break;
 }
 case 0:  {
  $108 = ((($4)) + 8|0);
  $109 = +HEAPF64[$108>>3];
  $110 = 1.5707963267948966 - $109;
  $111 = ((($4)) + 8|0);
  HEAPF64[$111>>3] = $110;
  $112 = ((($1)) + 8|0);
  $113 = +HEAPF64[$112>>3];
  $114 = -$113;
  $115 = ((($1)) + 8|0);
  HEAPF64[$115>>3] = $114;
  break;
 }
 default: {
 }
 }
 $116 = +HEAPF64[$1>>3];
 $117 = ((($1)) + 8|0);
 $118 = +HEAPF64[$117>>3];
 $119 = (+Math_atan2((+$116),(+$118)));
 HEAPF64[$4>>3] = $119;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_sin((+$13)));
 $8 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_cos((+$16)));
 $7 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_cos((+$18)));
 $6 = $19;
 $20 = $5;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 2:  {
  $23 = $7;
  $24 = $6;
  $25 = $23 * $24;
  $26 = ((($4)) + 8|0);
  HEAPF64[$26>>3] = $25;
  break;
 }
 case 3:  {
  $27 = $5;
  $28 = +HEAPF64[$27>>3];
  $29 = $8;
  $30 = $28 * $29;
  $31 = $5;
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $7;
  $35 = $33 * $34;
  $36 = $6;
  $37 = $35 * $36;
  $38 = $30 + $37;
  $39 = ((($4)) + 8|0);
  HEAPF64[$39>>3] = $38;
  break;
 }
 case 1:  {
  $40 = $8;
  $41 = -$40;
  $42 = ((($4)) + 8|0);
  HEAPF64[$42>>3] = $41;
  break;
 }
 case 0:  {
  $43 = $8;
  $44 = ((($4)) + 8|0);
  HEAPF64[$44>>3] = $43;
  break;
 }
 default: {
 }
 }
 $45 = ((($4)) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $46 <= 1.0E-10;
 if ($47) {
  $48 = $3;
  $49 = HEAP32[$48>>2]|0;
  _pj_ctx_set_errno($49,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $50 = ((($4)) + 8|0);
 $51 = +HEAPF64[$50>>3];
 $52 = 1.0 / $51;
 $53 = ((($4)) + 8|0);
 HEAPF64[$53>>3] = $52;
 $54 = $7;
 $55 = $52 * $54;
 $56 = +HEAPF64[$1>>3];
 $57 = (+Math_sin((+$56)));
 $58 = $55 * $57;
 HEAPF64[$4>>3] = $58;
 $59 = $5;
 $60 = ((($59)) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 switch ($61|0) {
 case 2:  {
  $62 = $8;
  $63 = ((($4)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = $64 * $62;
  HEAPF64[$63>>3] = $65;
  break;
 }
 case 3:  {
  $66 = $5;
  $67 = ((($66)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $8;
  $70 = $68 * $69;
  $71 = $5;
  $72 = +HEAPF64[$71>>3];
  $73 = $7;
  $74 = $72 * $73;
  $75 = $6;
  $76 = $74 * $75;
  $77 = $70 - $76;
  $78 = ((($4)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $79 * $77;
  HEAPF64[$78>>3] = $80;
  break;
 }
 case 0:  {
  $81 = $6;
  $82 = -$81;
  $6 = $82;
  label = 12;
  break;
 }
 case 1:  {
  label = 12;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 12) {
  $83 = $7;
  $84 = $6;
  $85 = $83 * $84;
  $86 = ((($4)) + 8|0);
  $87 = +HEAPF64[$86>>3];
  $88 = $87 * $85;
  HEAPF64[$86>>3] = $88;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_laea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_laea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 164;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9178;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_laea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = (_pj_calloc(1,72)|0);
 $4 = $6;
 $7 = $4;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_6($9)|0);
  $1 = $10;
  $188 = $1;
  STACKTOP = sp;return ($188|0);
 }
 $11 = $4;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = ((($14)) + 128|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_abs((+$16)));
 $3 = $17;
 $18 = $3;
 $19 = $18 - 1.5707963267948966;
 $20 = (+Math_abs((+$19)));
 $21 = $20 < 1.0E-10;
 do {
  if ($21) {
   $22 = $2;
   $23 = ((($22)) + 128|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $24 < 0.0;
   $26 = $25 ? 1 : 0;
   $27 = $4;
   $28 = ((($27)) + 68|0);
   HEAP32[$28>>2] = $26;
  } else {
   $29 = $3;
   $30 = (+Math_abs((+$29)));
   $31 = $30 < 1.0E-10;
   $32 = $4;
   $33 = ((($32)) + 68|0);
   if ($31) {
    HEAP32[$33>>2] = 2;
    break;
   } else {
    HEAP32[$33>>2] = 3;
    break;
   }
  }
 } while(0);
 $34 = $2;
 $35 = ((($34)) + 72|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 != 0.0;
 if ($37) {
  $38 = $2;
  $39 = ((($38)) + 72|0);
  $40 = +HEAPF64[$39>>3];
  $41 = (+Math_sqrt((+$40)));
  $42 = $2;
  $43 = ((($42)) + 88|0);
  HEAPF64[$43>>3] = $41;
  $44 = $2;
  $45 = ((($44)) + 88|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $2;
  $48 = ((($47)) + 104|0);
  $49 = +HEAPF64[$48>>3];
  $50 = (+_pj_qsfn(1.0,$46,$49));
  $51 = $4;
  $52 = ((($51)) + 40|0);
  HEAPF64[$52>>3] = $50;
  $53 = $2;
  $54 = ((($53)) + 72|0);
  $55 = +HEAPF64[$54>>3];
  $56 = 1.0 - $55;
  $57 = 0.5 / $56;
  $58 = $4;
  $59 = ((($58)) + 32|0);
  HEAPF64[$59>>3] = $57;
  $60 = $2;
  $61 = ((($60)) + 72|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (_pj_authset($62)|0);
  $64 = $4;
  $65 = ((($64)) + 64|0);
  HEAP32[$65>>2] = $63;
  $66 = $4;
  $67 = ((($66)) + 68|0);
  $68 = HEAP32[$67>>2]|0;
  switch ($68|0) {
  case 1: case 0:  {
   $69 = $4;
   $70 = ((($69)) + 48|0);
   HEAPF64[$70>>3] = 1.0;
   break;
  }
  case 2:  {
   $71 = $4;
   $72 = ((($71)) + 40|0);
   $73 = +HEAPF64[$72>>3];
   $74 = 0.5 * $73;
   $75 = (+Math_sqrt((+$74)));
   $76 = $4;
   $77 = ((($76)) + 56|0);
   HEAPF64[$77>>3] = $75;
   $78 = 1.0 / $75;
   $79 = $4;
   $80 = ((($79)) + 48|0);
   HEAPF64[$80>>3] = $78;
   $81 = $4;
   $82 = ((($81)) + 16|0);
   HEAPF64[$82>>3] = 1.0;
   $83 = $4;
   $84 = ((($83)) + 40|0);
   $85 = +HEAPF64[$84>>3];
   $86 = 0.5 * $85;
   $87 = $4;
   $88 = ((($87)) + 24|0);
   HEAPF64[$88>>3] = $86;
   break;
  }
  case 3:  {
   $89 = $4;
   $90 = ((($89)) + 40|0);
   $91 = +HEAPF64[$90>>3];
   $92 = 0.5 * $91;
   $93 = (+Math_sqrt((+$92)));
   $94 = $4;
   $95 = ((($94)) + 56|0);
   HEAPF64[$95>>3] = $93;
   $96 = $2;
   $97 = ((($96)) + 128|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (+Math_sin((+$98)));
   $5 = $99;
   $100 = $5;
   $101 = $2;
   $102 = ((($101)) + 88|0);
   $103 = +HEAPF64[$102>>3];
   $104 = $2;
   $105 = ((($104)) + 104|0);
   $106 = +HEAPF64[$105>>3];
   $107 = (+_pj_qsfn($100,$103,$106));
   $108 = $4;
   $109 = ((($108)) + 40|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $107 / $110;
   $112 = $4;
   HEAPF64[$112>>3] = $111;
   $113 = $4;
   $114 = +HEAPF64[$113>>3];
   $115 = $4;
   $116 = +HEAPF64[$115>>3];
   $117 = $114 * $116;
   $118 = 1.0 - $117;
   $119 = (+Math_sqrt((+$118)));
   $120 = $4;
   $121 = ((($120)) + 8|0);
   HEAPF64[$121>>3] = $119;
   $122 = $2;
   $123 = ((($122)) + 128|0);
   $124 = +HEAPF64[$123>>3];
   $125 = (+Math_cos((+$124)));
   $126 = $2;
   $127 = ((($126)) + 72|0);
   $128 = +HEAPF64[$127>>3];
   $129 = $5;
   $130 = $128 * $129;
   $131 = $5;
   $132 = $130 * $131;
   $133 = 1.0 - $132;
   $134 = (+Math_sqrt((+$133)));
   $135 = $4;
   $136 = ((($135)) + 56|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $134 * $137;
   $139 = $4;
   $140 = ((($139)) + 8|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $138 * $141;
   $143 = $125 / $142;
   $144 = $4;
   $145 = ((($144)) + 48|0);
   HEAPF64[$145>>3] = $143;
   $146 = $4;
   $147 = ((($146)) + 56|0);
   $148 = +HEAPF64[$147>>3];
   $149 = $4;
   $150 = ((($149)) + 16|0);
   HEAPF64[$150>>3] = $148;
   $151 = $4;
   $152 = ((($151)) + 48|0);
   $153 = +HEAPF64[$152>>3];
   $154 = $148 / $153;
   $155 = $4;
   $156 = ((($155)) + 24|0);
   HEAPF64[$156>>3] = $154;
   $157 = $4;
   $158 = ((($157)) + 48|0);
   $159 = +HEAPF64[$158>>3];
   $160 = $4;
   $161 = ((($160)) + 16|0);
   $162 = +HEAPF64[$161>>3];
   $163 = $162 * $159;
   HEAPF64[$161>>3] = $163;
   break;
  }
  default: {
  }
  }
  $164 = $2;
  $165 = ((($164)) + 8|0);
  HEAP32[$165>>2] = 165;
  $166 = $2;
  $167 = ((($166)) + 4|0);
  HEAP32[$167>>2] = 166;
 } else {
  $168 = $4;
  $169 = ((($168)) + 68|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)==(3);
  if ($171) {
   $172 = $2;
   $173 = ((($172)) + 128|0);
   $174 = +HEAPF64[$173>>3];
   $175 = (+Math_sin((+$174)));
   $176 = $4;
   HEAPF64[$176>>3] = $175;
   $177 = $2;
   $178 = ((($177)) + 128|0);
   $179 = +HEAPF64[$178>>3];
   $180 = (+Math_cos((+$179)));
   $181 = $4;
   $182 = ((($181)) + 8|0);
   HEAPF64[$182>>3] = $180;
  }
  $183 = $2;
  $184 = ((($183)) + 8|0);
  HEAP32[$184>>2] = 167;
  $185 = $2;
  $186 = ((($185)) + 4|0);
  HEAP32[$186>>2] = 168;
 }
 $187 = $2;
 $1 = $187;
 $188 = $1;
 STACKTOP = sp;return ($188|0);
}
function _freeup_5($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_6($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _e_inverse_7($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $10 = 0.0;
 $14 = $5;
 $15 = ((($14)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 L1: do {
  switch ($16|0) {
  case 3: case 2:  {
   $17 = $5;
   $18 = ((($17)) + 48|0);
   $19 = +HEAPF64[$18>>3];
   $20 = +HEAPF64[$1>>3];
   $21 = $20 / $19;
   HEAPF64[$1>>3] = $21;
   $22 = $5;
   $23 = ((($22)) + 48|0);
   $24 = +HEAPF64[$23>>3];
   $25 = ((($1)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 * $24;
   HEAPF64[$25>>3] = $27;
   $28 = +HEAPF64[$1>>3];
   $29 = ((($1)) + 8|0);
   $30 = +HEAPF64[$29>>3];
   $31 = (+_hypot($28,$30));
   $9 = $31;
   $32 = $9;
   $33 = $32 < 1.0E-10;
   if ($33) {
    HEAPF64[$4>>3] = 0.0;
    $34 = $3;
    $35 = ((($34)) + 128|0);
    $36 = +HEAPF64[$35>>3];
    $37 = ((($4)) + 8|0);
    HEAPF64[$37>>3] = $36;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $38 = $9;
   $39 = 0.5 * $38;
   $40 = $5;
   $41 = ((($40)) + 56|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $39 / $42;
   $44 = (+Math_asin((+$43)));
   $45 = 2.0 * $44;
   $7 = $45;
   $46 = $7;
   $47 = (+Math_cos((+$46)));
   $6 = $47;
   $48 = $7;
   $49 = (+Math_sin((+$48)));
   $7 = $49;
   $50 = $7;
   $51 = +HEAPF64[$1>>3];
   $52 = $51 * $50;
   HEAPF64[$1>>3] = $52;
   $53 = $5;
   $54 = ((($53)) + 68|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(3);
   if ($56) {
    $57 = $6;
    $58 = $5;
    $59 = +HEAPF64[$58>>3];
    $60 = $57 * $59;
    $61 = ((($1)) + 8|0);
    $62 = +HEAPF64[$61>>3];
    $63 = $7;
    $64 = $62 * $63;
    $65 = $5;
    $66 = ((($65)) + 8|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $64 * $67;
    $69 = $9;
    $70 = $68 / $69;
    $71 = $60 + $70;
    $10 = $71;
    $72 = $9;
    $73 = $5;
    $74 = ((($73)) + 8|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $72 * $75;
    $77 = $6;
    $78 = $76 * $77;
    $79 = ((($1)) + 8|0);
    $80 = +HEAPF64[$79>>3];
    $81 = $5;
    $82 = +HEAPF64[$81>>3];
    $83 = $80 * $82;
    $84 = $7;
    $85 = $83 * $84;
    $86 = $78 - $85;
    $87 = ((($1)) + 8|0);
    HEAPF64[$87>>3] = $86;
    break L1;
   } else {
    $88 = ((($1)) + 8|0);
    $89 = +HEAPF64[$88>>3];
    $90 = $7;
    $91 = $89 * $90;
    $92 = $9;
    $93 = $91 / $92;
    $10 = $93;
    $94 = $9;
    $95 = $6;
    $96 = $94 * $95;
    $97 = ((($1)) + 8|0);
    HEAPF64[$97>>3] = $96;
    break L1;
   }
   break;
  }
  case 0:  {
   $98 = ((($1)) + 8|0);
   $99 = +HEAPF64[$98>>3];
   $100 = -$99;
   $101 = ((($1)) + 8|0);
   HEAPF64[$101>>3] = $100;
   label = 8;
   break;
  }
  case 1:  {
   label = 8;
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $102 = +HEAPF64[$1>>3];
   $103 = +HEAPF64[$1>>3];
   $104 = $102 * $103;
   $105 = ((($1)) + 8|0);
   $106 = +HEAPF64[$105>>3];
   $107 = ((($1)) + 8|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $106 * $108;
   $110 = $104 + $109;
   $8 = $110;
   $111 = $8;
   $112 = $111 != 0.0;
   if ($112) {
    $117 = $8;
    $118 = $5;
    $119 = ((($118)) + 40|0);
    $120 = +HEAPF64[$119>>3];
    $121 = $117 / $120;
    $122 = 1.0 - $121;
    $10 = $122;
    $123 = $5;
    $124 = ((($123)) + 68|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(1);
    if (!($126)) {
     break;
    }
    $127 = $10;
    $128 = -$127;
    $10 = $128;
    break;
   } else {
    HEAPF64[$4>>3] = 0.0;
    $113 = $3;
    $114 = ((($113)) + 128|0);
    $115 = +HEAPF64[$114>>3];
    $116 = ((($4)) + 8|0);
    HEAPF64[$116>>3] = $115;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $129 = +HEAPF64[$1>>3];
 $130 = ((($1)) + 8|0);
 $131 = +HEAPF64[$130>>3];
 $132 = (+Math_atan2((+$129),(+$131)));
 HEAPF64[$4>>3] = $132;
 $133 = $10;
 $134 = (+Math_asin((+$133)));
 $135 = $5;
 $136 = ((($135)) + 64|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (+_pj_authlat($134,$137));
 $139 = ((($4)) + 8|0);
 HEAPF64[$139>>3] = $138;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $10 = 0.0;
 $11 = 0.0;
 $12 = 0.0;
 $16 = +HEAPF64[$1>>3];
 $17 = (+Math_cos((+$16)));
 $6 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_sin((+$18)));
 $7 = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_sin((+$21)));
 $8 = $22;
 $23 = $8;
 $24 = $3;
 $25 = ((($24)) + 88|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 104|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_pj_qsfn($23,$26,$29));
 $9 = $30;
 $31 = $5;
 $32 = ((($31)) + 68|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(3);
 if ($34) {
  label = 3;
 } else {
  $35 = $5;
  $36 = ((($35)) + 68|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(2);
  if ($38) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $39 = $9;
  $40 = $5;
  $41 = ((($40)) + 40|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 / $42;
  $10 = $43;
  $44 = $10;
  $45 = $10;
  $46 = $44 * $45;
  $47 = 1.0 - $46;
  $48 = (+Math_sqrt((+$47)));
  $11 = $48;
 }
 $49 = $5;
 $50 = ((($49)) + 68|0);
 $51 = HEAP32[$50>>2]|0;
 switch ($51|0) {
 case 3:  {
  $52 = $5;
  $53 = +HEAPF64[$52>>3];
  $54 = $10;
  $55 = $53 * $54;
  $56 = 1.0 + $55;
  $57 = $5;
  $58 = ((($57)) + 8|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $11;
  $61 = $59 * $60;
  $62 = $6;
  $63 = $61 * $62;
  $64 = $56 + $63;
  $12 = $64;
  break;
 }
 case 2:  {
  $65 = $11;
  $66 = $6;
  $67 = $65 * $66;
  $68 = 1.0 + $67;
  $12 = $68;
  break;
 }
 case 0:  {
  $69 = ((($1)) + 8|0);
  $70 = +HEAPF64[$69>>3];
  $71 = 1.5707963267948966 + $70;
  $12 = $71;
  $72 = $5;
  $73 = ((($72)) + 40|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $9;
  $76 = $74 - $75;
  $9 = $76;
  break;
 }
 case 1:  {
  $77 = ((($1)) + 8|0);
  $78 = +HEAPF64[$77>>3];
  $79 = $78 - 1.5707963267948966;
  $12 = $79;
  $80 = $5;
  $81 = ((($80)) + 40|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $9;
  $84 = $82 + $83;
  $9 = $84;
  break;
 }
 default: {
 }
 }
 $85 = $12;
 $86 = (+Math_abs((+$85)));
 $87 = $86 < 1.0E-10;
 if ($87) {
  $88 = $3;
  $89 = HEAP32[$88>>2]|0;
  _pj_ctx_set_errno($89,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $90 = $5;
 $91 = ((($90)) + 68|0);
 $92 = HEAP32[$91>>2]|0;
 L16: do {
  switch ($92|0) {
  case 3:  {
   $93 = $12;
   $94 = 2.0 / $93;
   $95 = (+Math_sqrt((+$94)));
   $12 = $95;
   $96 = $5;
   $97 = ((($96)) + 24|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $12;
   $100 = $98 * $99;
   $101 = $5;
   $102 = ((($101)) + 8|0);
   $103 = +HEAPF64[$102>>3];
   $104 = $10;
   $105 = $103 * $104;
   $106 = $5;
   $107 = +HEAPF64[$106>>3];
   $108 = $11;
   $109 = $107 * $108;
   $110 = $6;
   $111 = $109 * $110;
   $112 = $105 - $111;
   $113 = $100 * $112;
   $114 = ((($4)) + 8|0);
   HEAPF64[$114>>3] = $113;
   label = 14;
   break;
  }
  case 2:  {
   $115 = $11;
   $116 = $6;
   $117 = $115 * $116;
   $118 = 1.0 + $117;
   $119 = 2.0 / $118;
   $120 = (+Math_sqrt((+$119)));
   $12 = $120;
   $121 = $12;
   $122 = $10;
   $123 = $121 * $122;
   $124 = $5;
   $125 = ((($124)) + 24|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $123 * $126;
   $128 = ((($4)) + 8|0);
   HEAPF64[$128>>3] = $127;
   label = 14;
   break;
  }
  case 1: case 0:  {
   $138 = $9;
   $139 = $138 >= 0.0;
   if ($139) {
    $140 = $9;
    $141 = (+Math_sqrt((+$140)));
    $12 = $141;
    $142 = $12;
    $143 = $7;
    $144 = $142 * $143;
    HEAPF64[$4>>3] = $144;
    $145 = $6;
    $146 = $5;
    $147 = ((($146)) + 68|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(1);
    $150 = $12;
    $151 = -$150;
    $152 = $149 ? $150 : $151;
    $153 = $145 * $152;
    $154 = ((($4)) + 8|0);
    HEAPF64[$154>>3] = $153;
    break L16;
   } else {
    $155 = ((($4)) + 8|0);
    HEAPF64[$155>>3] = 0.0;
    HEAPF64[$4>>3] = 0.0;
    break L16;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 14) {
  $129 = $5;
  $130 = ((($129)) + 16|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $12;
  $133 = $131 * $132;
  $134 = $11;
  $135 = $133 * $134;
  $136 = $7;
  $137 = $135 * $136;
  HEAPF64[$4>>3] = $137;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_9($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $6 = 0.0;
 $8 = 0.0;
 $12 = +HEAPF64[$1>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+_hypot($12,$14));
 $7 = $15;
 $16 = $7;
 $17 = $16 * 0.5;
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = $17 > 1.0;
 if ($19) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  _pj_ctx_set_errno($21,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_asin((+$23)));
 $25 = 2.0 * $24;
 $26 = ((($4)) + 8|0);
 HEAPF64[$26>>3] = $25;
 $27 = $5;
 $28 = ((($27)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(3);
 if ($30) {
  label = 5;
 } else {
  $31 = $5;
  $32 = ((($31)) + 68|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(2);
  if ($34) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $35 = ((($4)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = (+Math_sin((+$36)));
  $8 = $37;
  $38 = ((($4)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  $40 = (+Math_cos((+$39)));
  $6 = $40;
 }
 $41 = $5;
 $42 = ((($41)) + 68|0);
 $43 = HEAP32[$42>>2]|0;
 switch ($43|0) {
 case 2:  {
  $44 = $7;
  $45 = (+Math_abs((+$44)));
  $46 = $45 <= 1.0E-10;
  if ($46) {
   $55 = 0.0;
  } else {
   $47 = ((($1)) + 8|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $8;
   $50 = $48 * $49;
   $51 = $7;
   $52 = $50 / $51;
   $53 = (+Math_asin((+$52)));
   $55 = $53;
  }
  $54 = ((($4)) + 8|0);
  HEAPF64[$54>>3] = $55;
  $56 = $8;
  $57 = +HEAPF64[$1>>3];
  $58 = $57 * $56;
  HEAPF64[$1>>3] = $58;
  $59 = $6;
  $60 = $7;
  $61 = $59 * $60;
  $62 = ((($1)) + 8|0);
  HEAPF64[$62>>3] = $61;
  break;
 }
 case 3:  {
  $63 = $7;
  $64 = (+Math_abs((+$63)));
  $65 = $64 <= 1.0E-10;
  if ($65) {
   $66 = $3;
   $67 = ((($66)) + 128|0);
   $68 = +HEAPF64[$67>>3];
   $86 = $68;
  } else {
   $69 = $6;
   $70 = $5;
   $71 = +HEAPF64[$70>>3];
   $72 = $69 * $71;
   $73 = ((($1)) + 8|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $8;
   $76 = $74 * $75;
   $77 = $5;
   $78 = ((($77)) + 8|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $76 * $79;
   $81 = $7;
   $82 = $80 / $81;
   $83 = $72 + $82;
   $84 = (+Math_asin((+$83)));
   $86 = $84;
  }
  $85 = ((($4)) + 8|0);
  HEAPF64[$85>>3] = $86;
  $87 = $8;
  $88 = $5;
  $89 = ((($88)) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $87 * $90;
  $92 = +HEAPF64[$1>>3];
  $93 = $92 * $91;
  HEAPF64[$1>>3] = $93;
  $94 = $6;
  $95 = ((($4)) + 8|0);
  $96 = +HEAPF64[$95>>3];
  $97 = (+Math_sin((+$96)));
  $98 = $5;
  $99 = +HEAPF64[$98>>3];
  $100 = $97 * $99;
  $101 = $94 - $100;
  $102 = $7;
  $103 = $101 * $102;
  $104 = ((($1)) + 8|0);
  HEAPF64[$104>>3] = $103;
  break;
 }
 case 0:  {
  $105 = ((($1)) + 8|0);
  $106 = +HEAPF64[$105>>3];
  $107 = -$106;
  $108 = ((($1)) + 8|0);
  HEAPF64[$108>>3] = $107;
  $109 = ((($4)) + 8|0);
  $110 = +HEAPF64[$109>>3];
  $111 = 1.5707963267948966 - $110;
  $112 = ((($4)) + 8|0);
  HEAPF64[$112>>3] = $111;
  break;
 }
 case 1:  {
  $113 = ((($4)) + 8|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $114 - 1.5707963267948966;
  HEAPF64[$113>>3] = $115;
  break;
 }
 default: {
 }
 }
 $116 = ((($1)) + 8|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $117 == 0.0;
 if ($118) {
  $119 = $5;
  $120 = ((($119)) + 68|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(2);
  if ($122) {
   $131 = 0.0;
  } else {
   $123 = $5;
   $124 = ((($123)) + 68|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(3);
   if ($126) {
    $131 = 0.0;
   } else {
    label = 19;
   }
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $127 = +HEAPF64[$1>>3];
  $128 = ((($1)) + 8|0);
  $129 = +HEAPF64[$128>>3];
  $130 = (+Math_atan2((+$127),(+$129)));
  $131 = $130;
 }
 HEAPF64[$4>>3] = $131;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_10($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $12 = 0;
 var $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_sin((+$13)));
 $8 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_cos((+$16)));
 $7 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_cos((+$18)));
 $6 = $19;
 $20 = $5;
 $21 = ((($20)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 2:  {
  $23 = $7;
  $24 = $6;
  $25 = $23 * $24;
  $26 = 1.0 + $25;
  $27 = ((($4)) + 8|0);
  HEAPF64[$27>>3] = $26;
  label = 4;
  break;
 }
 case 3:  {
  $28 = $5;
  $29 = +HEAPF64[$28>>3];
  $30 = $8;
  $31 = $29 * $30;
  $32 = 1.0 + $31;
  $33 = $5;
  $34 = ((($33)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = $35 * $36;
  $38 = $6;
  $39 = $37 * $38;
  $40 = $32 + $39;
  $41 = ((($4)) + 8|0);
  HEAPF64[$41>>3] = $40;
  label = 4;
  break;
 }
 case 0:  {
  $80 = $6;
  $81 = -$80;
  $6 = $81;
  label = 11;
  break;
 }
 case 1:  {
  label = 11;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 4) {
  $42 = ((($4)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $43 <= 1.0E-10;
  if ($44) {
   $45 = $3;
   $46 = HEAP32[$45>>2]|0;
   _pj_ctx_set_errno($46,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
  $47 = ((($4)) + 8|0);
  $48 = +HEAPF64[$47>>3];
  $49 = 2.0 / $48;
  $50 = (+Math_sqrt((+$49)));
  $51 = ((($4)) + 8|0);
  HEAPF64[$51>>3] = $50;
  $52 = ((($4)) + 8|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $7;
  $55 = $53 * $54;
  $56 = +HEAPF64[$1>>3];
  $57 = (+Math_sin((+$56)));
  $58 = $55 * $57;
  HEAPF64[$4>>3] = $58;
  $59 = $5;
  $60 = ((($59)) + 68|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(2);
  if ($62) {
   $63 = $8;
   $79 = $63;
  } else {
   $64 = $5;
   $65 = ((($64)) + 8|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $8;
   $68 = $66 * $67;
   $69 = $5;
   $70 = +HEAPF64[$69>>3];
   $71 = $7;
   $72 = $70 * $71;
   $73 = $6;
   $74 = $72 * $73;
   $75 = $68 - $74;
   $79 = $75;
  }
  $76 = ((($4)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $77 * $79;
  HEAPF64[$76>>3] = $78;
 }
 else if ((label|0) == 11) {
  $82 = ((($1)) + 8|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $3;
  $85 = ((($84)) + 128|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $83 + $86;
  $88 = (+Math_abs((+$87)));
  $89 = $88 < 1.0E-10;
  if ($89) {
   $90 = $3;
   $91 = HEAP32[$90>>2]|0;
   _pj_ctx_set_errno($91,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
  $92 = ((($1)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 * 0.5;
  $95 = 0.78539816339744828 - $94;
  $96 = ((($4)) + 8|0);
  HEAPF64[$96>>3] = $95;
  $97 = $5;
  $98 = ((($97)) + 68|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(1);
  $101 = ((($4)) + 8|0);
  $102 = +HEAPF64[$101>>3];
  if ($100) {
   $103 = (+Math_cos((+$102)));
   $106 = $103;
  } else {
   $104 = (+Math_sin((+$102)));
   $106 = $104;
  }
  $105 = 2.0 * $106;
  $107 = ((($4)) + 8|0);
  HEAPF64[$107>>3] = $105;
  $108 = ((($4)) + 8|0);
  $109 = +HEAPF64[$108>>3];
  $110 = +HEAPF64[$1>>3];
  $111 = (+Math_sin((+$110)));
  $112 = $109 * $111;
  HEAPF64[$4>>3] = $112;
  $113 = $6;
  $114 = ((($4)) + 8|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $115 * $113;
  HEAPF64[$114>>3] = $116;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_mil_os($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mil_os($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 169;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9221;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mil_os($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_12($7)|0);
  $1 = $8;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 24|0);
  HEAP32[$13>>2] = 2;
  $14 = $2;
  $15 = ((($14)) + 120|0);
  HEAPF64[$15>>3] = 0.3490658503988659;
  $16 = $2;
  $17 = ((($16)) + 128|0);
  HEAPF64[$17>>3] = 0.31415926535897931;
  $18 = $3;
  HEAP32[$18>>2] = 8;
  $19 = $2;
  $20 = ((($19)) + 72|0);
  HEAPF64[$20>>3] = 0.0;
  $21 = $2;
  $22 = (_setup($21)|0);
  $1 = $22;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _freeup_11($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_12($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_12($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = ((($8)) + 72|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $10 != 0.0;
 $12 = $1;
 if ($11) {
  $13 = ((($12)) + 88|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $1;
  $16 = ((($15)) + 128|0);
  $17 = +HEAPF64[$16>>3];
  $18 = (+Math_sin((+$17)));
  $19 = $14 * $18;
  $3 = $19;
  $20 = $1;
  $21 = ((($20)) + 128|0);
  $22 = +HEAPF64[$21>>3];
  $23 = 1.5707963267948966 + $22;
  $24 = $23 * 0.5;
  $25 = (+Math_tan((+$24)));
  $26 = $3;
  $27 = 1.0 - $26;
  $28 = $3;
  $29 = 1.0 + $28;
  $30 = $27 / $29;
  $31 = $1;
  $32 = ((($31)) + 88|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 * 0.5;
  $35 = (+Math_pow((+$30),(+$34)));
  $36 = $25 * $35;
  $37 = (+Math_atan((+$36)));
  $38 = 2.0 * $37;
  $39 = $38 - 1.5707963267948966;
  $4 = $39;
 } else {
  $40 = ((($12)) + 128|0);
  $41 = +HEAPF64[$40>>3];
  $4 = $41;
 }
 $42 = $4;
 $43 = (+Math_sin((+$42)));
 $44 = $2;
 $45 = ((($44)) + 16|0);
 HEAPF64[$45>>3] = $43;
 $46 = $4;
 $47 = (+Math_cos((+$46)));
 $48 = $2;
 $49 = ((($48)) + 8|0);
 HEAPF64[$49>>3] = $47;
 $50 = $1;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = 170;
 $52 = $1;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = 171;
 $54 = $1;
 STACKTOP = sp;return ($54|0);
}
function _e_inverse_13($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0;
 var $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 168|0;
 $4 = sp + 152|0;
 $7 = sp + 136|0;
 $8 = sp + 120|0;
 $9 = sp + 104|0;
 $10 = sp + 88|0;
 $20 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $21 = $3;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 $5 = $23;
 $24 = +HEAPF64[$1>>3];
 HEAPF64[$7>>3] = $24;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = ((($7)) + 8|0);
 HEAPF64[$27>>3] = $26;
 $6 = 20;
 while(1) {
  $28 = $6;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
  _pj_zpolyd1($20,$$byval_copy,$31,$34,$9);
  ;HEAP32[$8>>2]=HEAP32[$20>>2]|0;HEAP32[$8+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$20+12>>2]|0;
  $35 = +HEAPF64[$1>>3];
  $36 = +HEAPF64[$8>>3];
  $37 = $36 - $35;
  HEAPF64[$8>>3] = $37;
  $38 = ((($1)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  $40 = ((($8)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 - $39;
  HEAPF64[$40>>3] = $42;
  $43 = +HEAPF64[$9>>3];
  $44 = +HEAPF64[$9>>3];
  $45 = $43 * $44;
  $46 = ((($9)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = ((($9)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $47 * $49;
  $51 = $45 + $50;
  $11 = $51;
  $52 = +HEAPF64[$8>>3];
  $53 = +HEAPF64[$9>>3];
  $54 = $52 * $53;
  $55 = ((($8)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = ((($9)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $56 * $58;
  $60 = $54 + $59;
  $61 = -$60;
  $62 = $11;
  $63 = $61 / $62;
  HEAPF64[$10>>3] = $63;
  $64 = ((($8)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = +HEAPF64[$9>>3];
  $67 = $65 * $66;
  $68 = +HEAPF64[$8>>3];
  $69 = ((($9)) + 8|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $68 * $70;
  $72 = $67 - $71;
  $73 = -$72;
  $74 = $11;
  $75 = $73 / $74;
  $76 = ((($10)) + 8|0);
  HEAPF64[$76>>3] = $75;
  $77 = +HEAPF64[$10>>3];
  $78 = +HEAPF64[$7>>3];
  $79 = $78 + $77;
  HEAPF64[$7>>3] = $79;
  $80 = ((($10)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = ((($7)) + 8|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $83 + $81;
  HEAPF64[$82>>3] = $84;
  $85 = +HEAPF64[$10>>3];
  $86 = (+Math_abs((+$85)));
  $87 = ((($10)) + 8|0);
  $88 = +HEAPF64[$87>>3];
  $89 = (+Math_abs((+$88)));
  $90 = $86 + $89;
  $91 = $90 <= 9.9999999999999998E-13;
  if ($91) {
   break;
  }
  $92 = $6;
  $93 = (($92) + -1)|0;
  $6 = $93;
 }
 $94 = $6;
 $95 = ($94|0)!=(0);
 L6: do {
  if ($95) {
   $96 = +HEAPF64[$7>>3];
   $97 = ((($7)) + 8|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (+_hypot($96,$98));
   $12 = $99;
   $100 = $12;
   $101 = 0.5 * $100;
   $102 = (+Math_atan((+$101)));
   $103 = 2.0 * $102;
   $13 = $103;
   $104 = $13;
   $105 = (+Math_sin((+$104)));
   $14 = $105;
   $106 = $13;
   $107 = (+Math_cos((+$106)));
   $15 = $107;
   $108 = $3;
   $109 = ((($108)) + 120|0);
   $110 = +HEAPF64[$109>>3];
   HEAPF64[$4>>3] = $110;
   $111 = $12;
   $112 = (+Math_abs((+$111)));
   $113 = $112 <= 9.9999999999999998E-13;
   $114 = $3;
   if ($113) {
    $115 = ((($114)) + 128|0);
    $116 = +HEAPF64[$115>>3];
    $117 = ((($4)) + 8|0);
    HEAPF64[$117>>3] = $116;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $118 = HEAP32[$114>>2]|0;
   $119 = $15;
   $120 = $5;
   $121 = ((($120)) + 16|0);
   $122 = +HEAPF64[$121>>3];
   $123 = $119 * $122;
   $124 = ((($7)) + 8|0);
   $125 = +HEAPF64[$124>>3];
   $126 = $14;
   $127 = $125 * $126;
   $128 = $5;
   $129 = ((($128)) + 8|0);
   $130 = +HEAPF64[$129>>3];
   $131 = $127 * $130;
   $132 = $12;
   $133 = $131 / $132;
   $134 = $123 + $133;
   $135 = (+_aasin($118,$134));
   $16 = $135;
   $136 = $16;
   $17 = $136;
   $6 = 20;
   while(1) {
    $137 = $6;
    $138 = ($137|0)!=(0);
    if (!($138)) {
     break L6;
    }
    $139 = $3;
    $140 = ((($139)) + 88|0);
    $141 = +HEAPF64[$140>>3];
    $142 = $17;
    $143 = (+Math_sin((+$142)));
    $144 = $141 * $143;
    $19 = $144;
    $145 = $16;
    $146 = 1.5707963267948966 + $145;
    $147 = $146 * 0.5;
    $148 = (+Math_tan((+$147)));
    $149 = $19;
    $150 = 1.0 + $149;
    $151 = $19;
    $152 = 1.0 - $151;
    $153 = $150 / $152;
    $154 = $3;
    $155 = ((($154)) + 88|0);
    $156 = +HEAPF64[$155>>3];
    $157 = $156 * 0.5;
    $158 = (+Math_pow((+$153),(+$157)));
    $159 = $148 * $158;
    $160 = (+Math_atan((+$159)));
    $161 = 2.0 * $160;
    $162 = $161 - 1.5707963267948966;
    $163 = $17;
    $164 = $162 - $163;
    $18 = $164;
    $165 = $18;
    $166 = $17;
    $167 = $166 + $165;
    $17 = $167;
    $168 = $18;
    $169 = (+Math_abs((+$168)));
    $170 = $169 <= 9.9999999999999998E-13;
    if ($170) {
     break L6;
    }
    $171 = $6;
    $172 = (($171) + -1)|0;
    $6 = $172;
   }
  }
 } while(0);
 $173 = $6;
 $174 = ($173|0)!=(0);
 if ($174) {
  $175 = $17;
  $176 = ((($4)) + 8|0);
  HEAPF64[$176>>3] = $175;
  $177 = +HEAPF64[$7>>3];
  $178 = $14;
  $179 = $177 * $178;
  $180 = $12;
  $181 = $5;
  $182 = ((($181)) + 8|0);
  $183 = +HEAPF64[$182>>3];
  $184 = $180 * $183;
  $185 = $15;
  $186 = $184 * $185;
  $187 = ((($7)) + 8|0);
  $188 = +HEAPF64[$187>>3];
  $189 = $5;
  $190 = ((($189)) + 16|0);
  $191 = +HEAPF64[$190>>3];
  $192 = $188 * $191;
  $193 = $14;
  $194 = $192 * $193;
  $195 = $186 - $194;
  $196 = (+Math_atan2((+$179),(+$195)));
  HEAPF64[$4>>3] = $196;
 } else {
  $197 = ((($4)) + 8|0);
  HEAPF64[$197>>3] = inf;
  HEAPF64[$4>>3] = inf;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_14($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 104|0;
 $4 = sp + 88|0;
 $13 = sp + 16|0;
 $14 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_sin((+$18)));
 $6 = $19;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_cos((+$20)));
 $7 = $21;
 $22 = $3;
 $23 = ((($22)) + 88|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+Math_sin((+$26)));
 $28 = $24 * $27;
 $8 = $28;
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = 1.5707963267948966 + $30;
 $32 = $31 * 0.5;
 $33 = (+Math_tan((+$32)));
 $34 = $8;
 $35 = 1.0 - $34;
 $36 = $8;
 $37 = 1.0 + $36;
 $38 = $35 / $37;
 $39 = $3;
 $40 = ((($39)) + 88|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 * 0.5;
 $43 = (+Math_pow((+$38),(+$42)));
 $44 = $33 * $43;
 $45 = (+Math_atan((+$44)));
 $46 = 2.0 * $45;
 $47 = $46 - 1.5707963267948966;
 $9 = $47;
 $48 = $9;
 $49 = (+Math_sin((+$48)));
 $10 = $49;
 $50 = $9;
 $51 = (+Math_cos((+$50)));
 $11 = $51;
 $52 = $5;
 $53 = ((($52)) + 16|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $10;
 $56 = $54 * $55;
 $57 = 1.0 + $56;
 $58 = $5;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $11;
 $62 = $60 * $61;
 $63 = $7;
 $64 = $62 * $63;
 $65 = $57 + $64;
 $66 = 2.0 / $65;
 $12 = $66;
 $67 = $12;
 $68 = $11;
 $69 = $67 * $68;
 $70 = $6;
 $71 = $69 * $70;
 HEAPF64[$13>>3] = $71;
 $72 = $12;
 $73 = $5;
 $74 = ((($73)) + 8|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $10;
 $77 = $75 * $76;
 $78 = $5;
 $79 = ((($78)) + 16|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $11;
 $82 = $80 * $81;
 $83 = $7;
 $84 = $82 * $83;
 $85 = $77 - $84;
 $86 = $72 * $85;
 $87 = ((($13)) + 8|0);
 HEAPF64[$87>>3] = $86;
 $88 = $5;
 $89 = HEAP32[$88>>2]|0;
 $90 = $5;
 $91 = ((($90)) + 24|0);
 $92 = HEAP32[$91>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
 _pj_zpoly1($14,$$byval_copy,$89,$92);
 ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;
 $93 = +HEAPF64[$13>>3];
 HEAPF64[$4>>3] = $93;
 $94 = ((($13)) + 8|0);
 $95 = +HEAPF64[$94>>3];
 $96 = ((($4)) + 8|0);
 HEAPF64[$96>>3] = $95;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_lee_os($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lee_os($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 169;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9260;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lee_os($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_12($7)|0);
  $1 = $8;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 24|0);
  HEAP32[$13>>2] = 2;
  $14 = $2;
  $15 = ((($14)) + 120|0);
  HEAPF64[$15>>3] = -2.8797932657906435;
  $16 = $2;
  $17 = ((($16)) + 128|0);
  HEAPF64[$17>>3] = -0.17453292519943295;
  $18 = $3;
  HEAP32[$18>>2] = 56;
  $19 = $2;
  $20 = ((($19)) + 72|0);
  HEAPF64[$20>>3] = 0.0;
  $21 = $2;
  $22 = (_setup($21)|0);
  $1 = $22;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _pj_gs48($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gs48($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 169;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9296;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gs48($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_12($7)|0);
  $1 = $8;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 24|0);
  HEAP32[$13>>2] = 4;
  $14 = $2;
  $15 = ((($14)) + 120|0);
  HEAPF64[$15>>3] = -1.6755160819145565;
  $16 = $2;
  $17 = ((($16)) + 128|0);
  HEAPF64[$17>>3] = -0.68067840827778847;
  $18 = $3;
  HEAP32[$18>>2] = 104;
  $19 = $2;
  $20 = ((($19)) + 72|0);
  HEAPF64[$20>>3] = 0.0;
  $21 = $2;
  $22 = ((($21)) + 56|0);
  HEAPF64[$22>>3] = 6370997.0;
  $23 = $2;
  $24 = (_setup($23)|0);
  $1 = $24;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _pj_alsk($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_alsk($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 169;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9336;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_alsk($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_12($7)|0);
  $1 = $8;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = 5;
 $14 = $2;
 $15 = ((($14)) + 120|0);
 HEAPF64[$15>>3] = -2.6529004630313811;
 $16 = $2;
 $17 = ((($16)) + 128|0);
 HEAPF64[$17>>3] = 1.1170107212763709;
 $18 = $2;
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 != 0.0;
 $22 = $3;
 if ($21) {
  HEAP32[$22>>2] = 184;
  $23 = $2;
  $24 = ((($23)) + 56|0);
  HEAPF64[$24>>3] = 6378206.4000000004;
  $25 = $2;
  $26 = ((($25)) + 72|0);
  HEAPF64[$26>>3] = 0.0067686600000000001;
  $27 = (+Math_sqrt(0.0067686600000000001));
  $28 = $2;
  $29 = ((($28)) + 88|0);
  HEAPF64[$29>>3] = $27;
 } else {
  HEAP32[$22>>2] = 280;
  $30 = $2;
  $31 = ((($30)) + 56|0);
  HEAPF64[$31>>3] = 6370997.0;
 }
 $32 = $2;
 $33 = (_setup($32)|0);
 $1 = $33;
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _pj_gs50($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gs50($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 169;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9375;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gs50($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_12($7)|0);
  $1 = $8;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = 9;
 $14 = $2;
 $15 = ((($14)) + 120|0);
 HEAPF64[$15>>3] = -2.0943951023931953;
 $16 = $2;
 $17 = ((($16)) + 128|0);
 HEAPF64[$17>>3] = 0.78539816339744828;
 $18 = $2;
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 != 0.0;
 $22 = $3;
 if ($21) {
  HEAP32[$22>>2] = 376;
  $23 = $2;
  $24 = ((($23)) + 56|0);
  HEAPF64[$24>>3] = 6378206.4000000004;
  $25 = $2;
  $26 = ((($25)) + 72|0);
  HEAPF64[$26>>3] = 0.0067686600000000001;
  $27 = (+Math_sqrt(0.0067686600000000001));
  $28 = $2;
  $29 = ((($28)) + 88|0);
  HEAPF64[$29>>3] = $27;
 } else {
  HEAP32[$22>>2] = 536;
  $30 = $2;
  $31 = ((($30)) + 56|0);
  HEAPF64[$31>>3] = 6370997.0;
 }
 $32 = $2;
 $33 = (_setup($32)|0);
 $1 = $33;
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _pj_nsper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_nsper($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 172;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9415;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_nsper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,104)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_16($7)|0);
  $1 = $8;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 100|0);
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = (_setup_17($14)|0);
  $1 = $15;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _freeup_15($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_16($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_17($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 _pj_param($4,$9,$12,12970);
 $13 = +HEAPF64[$4>>3];
 $14 = $3;
 HEAPF64[$14>>3] = $13;
 $15 = $13 <= 0.0;
 $16 = $2;
 if ($15) {
  $17 = HEAP32[$16>>2]|0;
  _pj_ctx_set_errno($17,-30);
  $18 = $2;
  _freeup_15($18);
  $1 = 0;
  $91 = $1;
  STACKTOP = sp;return ($91|0);
 }
 $19 = ((($16)) + 128|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_abs((+$20)));
 $22 = $21 - 1.5707963267948966;
 $23 = (+Math_abs((+$22)));
 $24 = $23 < 1.0E-10;
 $25 = $2;
 $26 = ((($25)) + 128|0);
 $27 = +HEAPF64[$26>>3];
 do {
  if ($24) {
   $28 = $27 < 0.0;
   $29 = $28 ? 1 : 0;
   $30 = $3;
   $31 = ((($30)) + 96|0);
   HEAP32[$31>>2] = $29;
  } else {
   $32 = (+Math_abs((+$27)));
   $33 = $32 < 1.0E-10;
   $34 = $3;
   $35 = ((($34)) + 96|0);
   if ($33) {
    HEAP32[$35>>2] = 2;
    break;
   } else {
    HEAP32[$35>>2] = 3;
    $36 = $2;
    $37 = ((($36)) + 128|0);
    $38 = +HEAPF64[$37>>3];
    $39 = (+Math_sin((+$38)));
    $40 = $3;
    $41 = ((($40)) + 8|0);
    HEAPF64[$41>>3] = $39;
    $42 = $2;
    $43 = ((($42)) + 128|0);
    $44 = +HEAPF64[$43>>3];
    $45 = (+Math_cos((+$44)));
    $46 = $3;
    $47 = ((($46)) + 16|0);
    HEAPF64[$47>>3] = $45;
    break;
   }
  }
 } while(0);
 $48 = $3;
 $49 = +HEAPF64[$48>>3];
 $50 = $2;
 $51 = ((($50)) + 56|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $49 / $52;
 $54 = $3;
 $55 = ((($54)) + 40|0);
 HEAPF64[$55>>3] = $53;
 $56 = $3;
 $57 = ((($56)) + 40|0);
 $58 = +HEAPF64[$57>>3];
 $59 = 1.0 + $58;
 $60 = $3;
 $61 = ((($60)) + 24|0);
 HEAPF64[$61>>3] = $59;
 $62 = $3;
 $63 = ((($62)) + 24|0);
 $64 = +HEAPF64[$63>>3];
 $65 = 1.0 / $64;
 $66 = $3;
 $67 = ((($66)) + 32|0);
 HEAPF64[$67>>3] = $65;
 $68 = $3;
 $69 = ((($68)) + 40|0);
 $70 = +HEAPF64[$69>>3];
 $71 = 1.0 / $70;
 $72 = $3;
 $73 = ((($72)) + 56|0);
 HEAPF64[$73>>3] = $71;
 $74 = $3;
 $75 = ((($74)) + 24|0);
 $76 = +HEAPF64[$75>>3];
 $77 = $76 + 1.0;
 $78 = $3;
 $79 = ((($78)) + 56|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $77 * $80;
 $82 = $3;
 $83 = ((($82)) + 48|0);
 HEAPF64[$83>>3] = $81;
 $84 = $2;
 $85 = ((($84)) + 8|0);
 HEAP32[$85>>2] = 173;
 $86 = $2;
 $87 = ((($86)) + 4|0);
 HEAP32[$87>>2] = 174;
 $88 = $2;
 $89 = ((($88)) + 72|0);
 HEAPF64[$89>>3] = 0.0;
 $90 = $2;
 $1 = $90;
 $91 = $1;
 STACKTOP = sp;return ($91|0);
}
function _s_inverse_18($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = $5;
 $16 = ((($15)) + 100|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $5;
  $20 = ((($19)) + 40|0);
  $21 = +HEAPF64[$20>>3];
  $22 = ((($1)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $5;
  $25 = ((($24)) + 80|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $23 * $26;
  $28 = $21 - $27;
  $29 = 1.0 / $28;
  $11 = $29;
  $30 = $5;
  $31 = ((($30)) + 40|0);
  $32 = +HEAPF64[$31>>3];
  $33 = +HEAPF64[$1>>3];
  $34 = $32 * $33;
  $35 = $11;
  $36 = $34 * $35;
  $9 = $36;
  $37 = $5;
  $38 = ((($37)) + 40|0);
  $39 = +HEAPF64[$38>>3];
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $39 * $41;
  $43 = $5;
  $44 = ((($43)) + 88|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 * $45;
  $47 = $11;
  $48 = $46 * $47;
  $10 = $48;
  $49 = $9;
  $50 = $5;
  $51 = ((($50)) + 64|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $49 * $52;
  $54 = $10;
  $55 = $5;
  $56 = ((($55)) + 72|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $54 * $57;
  $59 = $53 + $58;
  HEAPF64[$1>>3] = $59;
  $60 = $10;
  $61 = $5;
  $62 = ((($61)) + 64|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $60 * $63;
  $65 = $9;
  $66 = $5;
  $67 = ((($66)) + 72|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $65 * $68;
  $70 = $64 - $69;
  $71 = ((($1)) + 8|0);
  HEAPF64[$71>>3] = $70;
 }
 $72 = +HEAPF64[$1>>3];
 $73 = ((($1)) + 8|0);
 $74 = +HEAPF64[$73>>3];
 $75 = (+_hypot($72,$74));
 $6 = $75;
 $76 = $6;
 $77 = $6;
 $78 = $76 * $77;
 $79 = $5;
 $80 = ((($79)) + 48|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 * $81;
 $83 = 1.0 - $82;
 $8 = $83;
 $84 = $83 < 0.0;
 if ($84) {
  $85 = $3;
  $86 = HEAP32[$85>>2]|0;
  _pj_ctx_set_errno($86,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $87 = $5;
 $88 = ((($87)) + 24|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $8;
 $91 = (+Math_sqrt((+$90)));
 $92 = $89 - $91;
 $93 = $5;
 $94 = ((($93)) + 40|0);
 $95 = +HEAPF64[$94>>3];
 $96 = $6;
 $97 = $95 / $96;
 $98 = $6;
 $99 = $5;
 $100 = ((($99)) + 40|0);
 $101 = +HEAPF64[$100>>3];
 $102 = $98 / $101;
 $103 = $97 + $102;
 $104 = $92 / $103;
 $8 = $104;
 $105 = $8;
 $106 = $8;
 $107 = $105 * $106;
 $108 = 1.0 - $107;
 $109 = (+Math_sqrt((+$108)));
 $7 = $109;
 $110 = $6;
 $111 = (+Math_abs((+$110)));
 $112 = $111 <= 1.0E-10;
 if ($112) {
  HEAPF64[$4>>3] = 0.0;
  $113 = $3;
  $114 = ((($113)) + 128|0);
  $115 = +HEAPF64[$114>>3];
  $116 = ((($4)) + 8|0);
  HEAPF64[$116>>3] = $115;
 } else {
  $117 = $5;
  $118 = ((($117)) + 96|0);
  $119 = HEAP32[$118>>2]|0;
  switch ($119|0) {
  case 3:  {
   $120 = $7;
   $121 = $5;
   $122 = ((($121)) + 8|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $120 * $123;
   $125 = ((($1)) + 8|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $8;
   $128 = $126 * $127;
   $129 = $5;
   $130 = ((($129)) + 16|0);
   $131 = +HEAPF64[$130>>3];
   $132 = $128 * $131;
   $133 = $6;
   $134 = $132 / $133;
   $135 = $124 + $134;
   $136 = (+Math_asin((+$135)));
   $137 = ((($4)) + 8|0);
   HEAPF64[$137>>3] = $136;
   $138 = $7;
   $139 = $5;
   $140 = ((($139)) + 8|0);
   $141 = +HEAPF64[$140>>3];
   $142 = ((($4)) + 8|0);
   $143 = +HEAPF64[$142>>3];
   $144 = (+Math_sin((+$143)));
   $145 = $141 * $144;
   $146 = $138 - $145;
   $147 = $6;
   $148 = $146 * $147;
   $149 = ((($1)) + 8|0);
   HEAPF64[$149>>3] = $148;
   $150 = $8;
   $151 = $5;
   $152 = ((($151)) + 16|0);
   $153 = +HEAPF64[$152>>3];
   $154 = $150 * $153;
   $155 = +HEAPF64[$1>>3];
   $156 = $155 * $154;
   HEAPF64[$1>>3] = $156;
   break;
  }
  case 2:  {
   $157 = ((($1)) + 8|0);
   $158 = +HEAPF64[$157>>3];
   $159 = $8;
   $160 = $158 * $159;
   $161 = $6;
   $162 = $160 / $161;
   $163 = (+Math_asin((+$162)));
   $164 = ((($4)) + 8|0);
   HEAPF64[$164>>3] = $163;
   $165 = $7;
   $166 = $6;
   $167 = $165 * $166;
   $168 = ((($1)) + 8|0);
   HEAPF64[$168>>3] = $167;
   $169 = $8;
   $170 = +HEAPF64[$1>>3];
   $171 = $170 * $169;
   HEAPF64[$1>>3] = $171;
   break;
  }
  case 0:  {
   $172 = $7;
   $173 = (+Math_asin((+$172)));
   $174 = ((($4)) + 8|0);
   HEAPF64[$174>>3] = $173;
   $175 = ((($1)) + 8|0);
   $176 = +HEAPF64[$175>>3];
   $177 = -$176;
   $178 = ((($1)) + 8|0);
   HEAPF64[$178>>3] = $177;
   break;
  }
  case 1:  {
   $179 = $7;
   $180 = (+Math_asin((+$179)));
   $181 = -$180;
   $182 = ((($4)) + 8|0);
   HEAPF64[$182>>3] = $181;
   break;
  }
  default: {
  }
  }
  $183 = +HEAPF64[$1>>3];
  $184 = ((($1)) + 8|0);
  $185 = +HEAPF64[$184>>3];
  $186 = (+Math_atan2((+$183),(+$185)));
  HEAPF64[$4>>3] = $186;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_19($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_sin((+$15)));
 $8 = $16;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_cos((+$18)));
 $7 = $19;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_cos((+$20)));
 $6 = $21;
 $22 = $5;
 $23 = ((($22)) + 96|0);
 $24 = HEAP32[$23>>2]|0;
 switch ($24|0) {
 case 3:  {
  $25 = $5;
  $26 = ((($25)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $8;
  $29 = $27 * $28;
  $30 = $5;
  $31 = ((($30)) + 16|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $7;
  $34 = $32 * $33;
  $35 = $6;
  $36 = $34 * $35;
  $37 = $29 + $36;
  $38 = ((($4)) + 8|0);
  HEAPF64[$38>>3] = $37;
  break;
 }
 case 2:  {
  $39 = $7;
  $40 = $6;
  $41 = $39 * $40;
  $42 = ((($4)) + 8|0);
  HEAPF64[$42>>3] = $41;
  break;
 }
 case 1:  {
  $43 = $8;
  $44 = -$43;
  $45 = ((($4)) + 8|0);
  HEAPF64[$45>>3] = $44;
  break;
 }
 case 0:  {
  $46 = $8;
  $47 = ((($4)) + 8|0);
  HEAPF64[$47>>3] = $46;
  break;
 }
 default: {
 }
 }
 $48 = ((($4)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $5;
 $51 = ((($50)) + 32|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $49 < $52;
 if ($53) {
  $54 = $3;
  $55 = HEAP32[$54>>2]|0;
  _pj_ctx_set_errno($55,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $56 = $5;
 $57 = ((($56)) + 40|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $5;
 $60 = ((($59)) + 24|0);
 $61 = +HEAPF64[$60>>3];
 $62 = ((($4)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $61 - $63;
 $65 = $58 / $64;
 $66 = ((($4)) + 8|0);
 HEAPF64[$66>>3] = $65;
 $67 = ((($4)) + 8|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $7;
 $70 = $68 * $69;
 $71 = +HEAPF64[$1>>3];
 $72 = (+Math_sin((+$71)));
 $73 = $70 * $72;
 HEAPF64[$4>>3] = $73;
 $74 = $5;
 $75 = ((($74)) + 96|0);
 $76 = HEAP32[$75>>2]|0;
 switch ($76|0) {
 case 3:  {
  $77 = $5;
  $78 = ((($77)) + 16|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $8;
  $81 = $79 * $80;
  $82 = $5;
  $83 = ((($82)) + 8|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $7;
  $86 = $84 * $85;
  $87 = $6;
  $88 = $86 * $87;
  $89 = $81 - $88;
  $90 = ((($4)) + 8|0);
  $91 = +HEAPF64[$90>>3];
  $92 = $91 * $89;
  HEAPF64[$90>>3] = $92;
  break;
 }
 case 2:  {
  $93 = $8;
  $94 = ((($4)) + 8|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $95 * $93;
  HEAPF64[$94>>3] = $96;
  break;
 }
 case 0:  {
  $97 = $6;
  $98 = -$97;
  $6 = $98;
  label = 12;
  break;
 }
 case 1:  {
  label = 12;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 12) {
  $99 = $7;
  $100 = $6;
  $101 = $99 * $100;
  $102 = ((($4)) + 8|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $103 * $101;
  HEAPF64[$102>>3] = $104;
 }
 $105 = $5;
 $106 = ((($105)) + 100|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = ((($4)) + 8|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $5;
  $112 = ((($111)) + 64|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $110 * $113;
  $115 = +HEAPF64[$4>>3];
  $116 = $5;
  $117 = ((($116)) + 72|0);
  $118 = +HEAPF64[$117>>3];
  $119 = $115 * $118;
  $120 = $114 + $119;
  $9 = $120;
  $121 = $9;
  $122 = $5;
  $123 = ((($122)) + 80|0);
  $124 = +HEAPF64[$123>>3];
  $125 = $121 * $124;
  $126 = $5;
  $127 = ((($126)) + 56|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $125 * $128;
  $130 = $5;
  $131 = ((($130)) + 88|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $129 + $132;
  $134 = 1.0 / $133;
  $10 = $134;
  $135 = +HEAPF64[$4>>3];
  $136 = $5;
  $137 = ((($136)) + 64|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $135 * $138;
  $140 = ((($4)) + 8|0);
  $141 = +HEAPF64[$140>>3];
  $142 = $5;
  $143 = ((($142)) + 72|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $141 * $144;
  $146 = $139 - $145;
  $147 = $5;
  $148 = ((($147)) + 88|0);
  $149 = +HEAPF64[$148>>3];
  $150 = $146 * $149;
  $151 = $10;
  $152 = $150 * $151;
  HEAPF64[$4>>3] = $152;
  $153 = $9;
  $154 = $10;
  $155 = $153 * $154;
  $156 = ((($4)) + 8|0);
  HEAPF64[$156>>3] = $155;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_tpers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tpers($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 172;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9452;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tpers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $8 = (_pj_calloc(1,104)|0);
 $5 = $8;
 $9 = $5;
 $10 = (0|0)==($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_freeup_new_16($11)|0);
  $1 = $12;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 } else {
  $13 = $5;
  $14 = $2;
  $15 = ((($14)) + 416|0);
  HEAP32[$15>>2] = $13;
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  _pj_param($6,$17,$20,9496);
  $21 = +HEAPF64[$6>>3];
  $22 = $21 * 0.017453292519943295;
  $3 = $22;
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  _pj_param($7,$24,$27,9502);
  $28 = +HEAPF64[$7>>3];
  $29 = $28 * 0.017453292519943295;
  $4 = $29;
  $30 = $5;
  $31 = ((($30)) + 100|0);
  HEAP32[$31>>2] = 1;
  $32 = $4;
  $33 = (+Math_cos((+$32)));
  $34 = $5;
  $35 = ((($34)) + 64|0);
  HEAPF64[$35>>3] = $33;
  $36 = $4;
  $37 = (+Math_sin((+$36)));
  $38 = $5;
  $39 = ((($38)) + 72|0);
  HEAPF64[$39>>3] = $37;
  $40 = $3;
  $41 = (+Math_cos((+$40)));
  $42 = $5;
  $43 = ((($42)) + 88|0);
  HEAPF64[$43>>3] = $41;
  $44 = $3;
  $45 = (+Math_sin((+$44)));
  $46 = $5;
  $47 = ((($46)) + 80|0);
  HEAPF64[$47>>3] = $45;
  $48 = $2;
  $49 = (_setup_17($48)|0);
  $1 = $49;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _pj_nzmg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_nzmg($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 175;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9507;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_nzmg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 HEAPF64[$3>>3] = 6378388.0;
 $4 = $1;
 $5 = ((($4)) + 96|0);
 HEAPF64[$5>>3] = 1.5677942451917318E-7;
 $6 = $1;
 $7 = ((($6)) + 120|0);
 HEAPF64[$7>>3] = 3.0194196059501901;
 $8 = $1;
 $9 = ((($8)) + 128|0);
 HEAPF64[$9>>3] = -0.71558499331767511;
 $10 = $1;
 $11 = ((($10)) + 136|0);
 HEAPF64[$11>>3] = 2.51E+6;
 $12 = $1;
 $13 = ((($12)) + 144|0);
 HEAPF64[$13>>3] = 6023150.0;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 176;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 177;
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _freeup_22($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_23($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_23($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _e_inverse_24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 104|0;
 $4 = sp + 88|0;
 $7 = sp + 72|0;
 $8 = sp + 56|0;
 $9 = sp + 40|0;
 $10 = sp + 24|0;
 $13 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 HEAPF64[$7>>3] = $15;
 $16 = +HEAPF64[$1>>3];
 $17 = ((($7)) + 8|0);
 HEAPF64[$17>>3] = $16;
 $5 = 20;
 while(1) {
  $18 = $5;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
  _pj_zpolyd1($13,$$byval_copy,776,5,$9);
  ;HEAP32[$8>>2]=HEAP32[$13>>2]|0;HEAP32[$8+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$13+12>>2]|0;
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = +HEAPF64[$8>>3];
  $23 = $22 - $21;
  HEAPF64[$8>>3] = $23;
  $24 = +HEAPF64[$1>>3];
  $25 = ((($8)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 - $24;
  HEAPF64[$25>>3] = $27;
  $28 = +HEAPF64[$9>>3];
  $29 = +HEAPF64[$9>>3];
  $30 = $28 * $29;
  $31 = ((($9)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = ((($9)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $32 * $34;
  $36 = $30 + $35;
  $11 = $36;
  $37 = +HEAPF64[$8>>3];
  $38 = +HEAPF64[$9>>3];
  $39 = $37 * $38;
  $40 = ((($8)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = ((($9)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $41 * $43;
  $45 = $39 + $44;
  $46 = -$45;
  $47 = $11;
  $48 = $46 / $47;
  HEAPF64[$10>>3] = $48;
  $49 = +HEAPF64[$7>>3];
  $50 = $49 + $48;
  HEAPF64[$7>>3] = $50;
  $51 = ((($8)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = +HEAPF64[$9>>3];
  $54 = $52 * $53;
  $55 = +HEAPF64[$8>>3];
  $56 = ((($9)) + 8|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $55 * $57;
  $59 = $54 - $58;
  $60 = -$59;
  $61 = $11;
  $62 = $60 / $61;
  $63 = ((($10)) + 8|0);
  HEAPF64[$63>>3] = $62;
  $64 = ((($7)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $65 + $62;
  HEAPF64[$64>>3] = $66;
  $67 = +HEAPF64[$10>>3];
  $68 = (+Math_abs((+$67)));
  $69 = ((($10)) + 8|0);
  $70 = +HEAPF64[$69>>3];
  $71 = (+Math_abs((+$70)));
  $72 = $68 + $71;
  $73 = $72 <= 1.0E-10;
  if ($73) {
   break;
  }
  $74 = $5;
  $75 = (($74) + -1)|0;
  $5 = $75;
 }
 $76 = $5;
 $77 = ($76|0)!=(0);
 if (!($77)) {
  $105 = ((($4)) + 8|0);
  HEAPF64[$105>>3] = inf;
  HEAPF64[$4>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $78 = ((($7)) + 8|0);
 $79 = +HEAPF64[$78>>3];
 HEAPF64[$4>>3] = $79;
 $6 = 8;
 $12 = (936);
 $80 = +HEAPF64[(936)>>3];
 $81 = ((($4)) + 8|0);
 HEAPF64[$81>>3] = $80;
 while(1) {
  $82 = $6;
  $83 = ($82|0)!=(0);
  if (!($83)) {
   break;
  }
  $84 = $12;
  $85 = ((($84)) + -8|0);
  $12 = $85;
  $86 = +HEAPF64[$85>>3];
  $87 = +HEAPF64[$7>>3];
  $88 = ((($4)) + 8|0);
  $89 = +HEAPF64[$88>>3];
  $90 = $87 * $89;
  $91 = $86 + $90;
  $92 = ((($4)) + 8|0);
  HEAPF64[$92>>3] = $91;
  $93 = $6;
  $94 = (($93) + -1)|0;
  $6 = $94;
 }
 $95 = $3;
 $96 = ((($95)) + 128|0);
 $97 = +HEAPF64[$96>>3];
 $98 = +HEAPF64[$7>>3];
 $99 = ((($4)) + 8|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $98 * $100;
 $102 = $101 * 0.48481368110953599;
 $103 = $97 + $102;
 $104 = ((($4)) + 8|0);
 HEAPF64[$104>>3] = $103;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_25($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $8 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $3;
 $12 = ((($11)) + 128|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 - $13;
 $15 = $14 * 2.0626480624709638;
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $7 = 9;
 $6 = (768);
 $17 = +HEAPF64[(768)>>3];
 HEAPF64[$5>>3] = $17;
 while(1) {
  $18 = $7;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = ((($20)) + -8|0);
  $6 = $21;
  $22 = +HEAPF64[$21>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = +HEAPF64[$5>>3];
  $26 = $24 * $25;
  $27 = $22 + $26;
  HEAPF64[$5>>3] = $27;
  $28 = $7;
  $29 = (($28) + -1)|0;
  $7 = $29;
 }
 $30 = ((($1)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = +HEAPF64[$5>>3];
 $33 = $32 * $31;
 HEAPF64[$5>>3] = $33;
 $34 = +HEAPF64[$1>>3];
 $35 = ((($5)) + 8|0);
 HEAPF64[$35>>3] = $34;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 _pj_zpoly1($8,$$byval_copy,776,5);
 ;HEAP32[$5>>2]=HEAP32[$8>>2]|0;HEAP32[$5+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$8+12>>2]|0;
 $36 = ((($5)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 HEAPF64[$4>>3] = $37;
 $38 = +HEAPF64[$5>>3];
 $39 = ((($4)) + 8|0);
 HEAPF64[$39>>3] = $38;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_ortho($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_ortho($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 178;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9541;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_ortho($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_27($7)|0);
  $1 = $8;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 128|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_abs((+$14)));
 $16 = $15 - 1.5707963267948966;
 $17 = (+Math_abs((+$16)));
 $18 = $17 <= 1.0E-10;
 $19 = $2;
 $20 = ((($19)) + 128|0);
 $21 = +HEAPF64[$20>>3];
 do {
  if ($18) {
   $22 = $21 < 0.0;
   $23 = $22 ? 1 : 0;
   $24 = $3;
   $25 = ((($24)) + 16|0);
   HEAP32[$25>>2] = $23;
  } else {
   $26 = (+Math_abs((+$21)));
   $27 = $26 > 1.0E-10;
   $28 = $3;
   $29 = ((($28)) + 16|0);
   if ($27) {
    HEAP32[$29>>2] = 3;
    $30 = $2;
    $31 = ((($30)) + 128|0);
    $32 = +HEAPF64[$31>>3];
    $33 = (+Math_sin((+$32)));
    $34 = $3;
    HEAPF64[$34>>3] = $33;
    $35 = $2;
    $36 = ((($35)) + 128|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (+Math_cos((+$37)));
    $39 = $3;
    $40 = ((($39)) + 8|0);
    HEAPF64[$40>>3] = $38;
    break;
   } else {
    HEAP32[$29>>2] = 2;
    break;
   }
  }
 } while(0);
 $41 = $2;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 179;
 $43 = $2;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 180;
 $45 = $2;
 $46 = ((($45)) + 72|0);
 HEAPF64[$46>>3] = 0.0;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 STACKTOP = sp;return ($48|0);
}
function _freeup_26($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_27($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_27($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_28($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+_hypot($12,$14));
 $6 = $15;
 $8 = $15;
 $16 = $15 > 1.0;
 do {
  if ($16) {
   $17 = $8;
   $18 = $17 - 1.0;
   $19 = $18 > 1.0E-10;
   if (!($19)) {
    $8 = 1.0;
    break;
   }
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   _pj_ctx_set_errno($21,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = $8;
 $23 = $8;
 $24 = $22 * $23;
 $25 = 1.0 - $24;
 $26 = (+Math_sqrt((+$25)));
 $7 = $26;
 $27 = $6;
 $28 = (+Math_abs((+$27)));
 $29 = $28 <= 1.0E-10;
 if ($29) {
  $30 = $3;
  $31 = ((($30)) + 128|0);
  $32 = +HEAPF64[$31>>3];
  $33 = ((($4)) + 8|0);
  HEAPF64[$33>>3] = $32;
  HEAPF64[$4>>3] = 0.0;
 } else {
  $34 = $5;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  switch ($36|0) {
  case 0:  {
   $37 = ((($1)) + 8|0);
   $38 = +HEAPF64[$37>>3];
   $39 = -$38;
   $40 = ((($1)) + 8|0);
   HEAPF64[$40>>3] = $39;
   $41 = $8;
   $42 = (+Math_acos((+$41)));
   $43 = ((($4)) + 8|0);
   HEAPF64[$43>>3] = $42;
   break;
  }
  case 1:  {
   $44 = $8;
   $45 = (+Math_acos((+$44)));
   $46 = -$45;
   $47 = ((($4)) + 8|0);
   HEAPF64[$47>>3] = $46;
   break;
  }
  case 2:  {
   $48 = ((($1)) + 8|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $8;
   $51 = $49 * $50;
   $52 = $6;
   $53 = $51 / $52;
   $54 = ((($4)) + 8|0);
   HEAPF64[$54>>3] = $53;
   $55 = $8;
   $56 = +HEAPF64[$1>>3];
   $57 = $56 * $55;
   HEAPF64[$1>>3] = $57;
   $58 = $7;
   $59 = $6;
   $60 = $58 * $59;
   $61 = ((($1)) + 8|0);
   HEAPF64[$61>>3] = $60;
   label = 12;
   break;
  }
  case 3:  {
   $62 = $7;
   $63 = $5;
   $64 = +HEAPF64[$63>>3];
   $65 = $62 * $64;
   $66 = ((($1)) + 8|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $8;
   $69 = $67 * $68;
   $70 = $5;
   $71 = ((($70)) + 8|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $69 * $72;
   $74 = $6;
   $75 = $73 / $74;
   $76 = $65 + $75;
   $77 = ((($4)) + 8|0);
   HEAPF64[$77>>3] = $76;
   $78 = $7;
   $79 = $5;
   $80 = +HEAPF64[$79>>3];
   $81 = ((($4)) + 8|0);
   $82 = +HEAPF64[$81>>3];
   $83 = $80 * $82;
   $84 = $78 - $83;
   $85 = $6;
   $86 = $84 * $85;
   $87 = ((($1)) + 8|0);
   HEAPF64[$87>>3] = $86;
   $88 = $8;
   $89 = $5;
   $90 = ((($89)) + 8|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $88 * $91;
   $93 = +HEAPF64[$1>>3];
   $94 = $93 * $92;
   HEAPF64[$1>>3] = $94;
   label = 12;
   break;
  }
  default: {
  }
  }
  do {
   if ((label|0) == 12) {
    $95 = ((($4)) + 8|0);
    $96 = +HEAPF64[$95>>3];
    $97 = (+Math_abs((+$96)));
    $98 = $97 >= 1.0;
    $99 = ((($4)) + 8|0);
    $100 = +HEAPF64[$99>>3];
    if ($98) {
     $101 = $100 < 0.0;
     $102 = $101 ? -1.5707963267948966 : 1.5707963267948966;
     $103 = ((($4)) + 8|0);
     HEAPF64[$103>>3] = $102;
     break;
    } else {
     $104 = (+Math_asin((+$100)));
     $105 = ((($4)) + 8|0);
     HEAPF64[$105>>3] = $104;
     break;
    }
   }
  } while(0);
  $106 = ((($1)) + 8|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $107 == 0.0;
  do {
   if ($108) {
    $109 = $5;
    $110 = ((($109)) + 16|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)==(3);
    if (!($112)) {
     $113 = $5;
     $114 = ((($113)) + 16|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(2);
     if (!($116)) {
      label = 20;
      break;
     }
    }
    $117 = +HEAPF64[$1>>3];
    $118 = $117 == 0.0;
    if ($118) {
     $126 = 0.0;
    } else {
     $119 = +HEAPF64[$1>>3];
     $120 = $119 < 0.0;
     $121 = $120 ? -1.5707963267948966 : 1.5707963267948966;
     $126 = $121;
    }
   } else {
    label = 20;
   }
  } while(0);
  if ((label|0) == 20) {
   $122 = +HEAPF64[$1>>3];
   $123 = ((($1)) + 8|0);
   $124 = +HEAPF64[$123>>3];
   $125 = (+Math_atan2((+$122),(+$124)));
   $126 = $125;
  }
  HEAPF64[$4>>3] = $126;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_29($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_cos((+$13)));
 $7 = $14;
 $15 = +HEAPF64[$1>>3];
 $16 = (+Math_cos((+$15)));
 $6 = $16;
 $17 = $5;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 L1: do {
  switch ($19|0) {
  case 2:  {
   $20 = $7;
   $21 = $6;
   $22 = $20 * $21;
   $23 = $22 < -1.0E-10;
   if (!($23)) {
    $26 = ((($1)) + 8|0);
    $27 = +HEAPF64[$26>>3];
    $28 = (+Math_sin((+$27)));
    $29 = ((($4)) + 8|0);
    HEAPF64[$29>>3] = $28;
    break L1;
   }
   $24 = $3;
   $25 = HEAP32[$24>>2]|0;
   _pj_ctx_set_errno($25,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $30 = $5;
   $31 = +HEAPF64[$30>>3];
   $32 = ((($1)) + 8|0);
   $33 = +HEAPF64[$32>>3];
   $34 = (+Math_sin((+$33)));
   $8 = $34;
   $35 = $31 * $34;
   $36 = $5;
   $37 = ((($36)) + 8|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $7;
   $40 = $38 * $39;
   $41 = $6;
   $42 = $40 * $41;
   $43 = $35 + $42;
   $44 = $43 < -1.0E-10;
   if (!($44)) {
    $47 = $5;
    $48 = ((($47)) + 8|0);
    $49 = +HEAPF64[$48>>3];
    $50 = $8;
    $51 = $49 * $50;
    $52 = $5;
    $53 = +HEAPF64[$52>>3];
    $54 = $7;
    $55 = $53 * $54;
    $56 = $6;
    $57 = $55 * $56;
    $58 = $51 - $57;
    $59 = ((($4)) + 8|0);
    HEAPF64[$59>>3] = $58;
    break L1;
   }
   $45 = $3;
   $46 = HEAP32[$45>>2]|0;
   _pj_ctx_set_errno($46,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $60 = $6;
   $61 = -$60;
   $6 = $61;
   label = 9;
   break;
  }
  case 1:  {
   label = 9;
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $62 = ((($1)) + 8|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $3;
   $65 = ((($64)) + 128|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $63 - $66;
   $68 = (+Math_abs((+$67)));
   $69 = $68 - 1.0E-10;
   $70 = $69 > 1.5707963267948966;
   if (!($70)) {
    $73 = $7;
    $74 = $6;
    $75 = $73 * $74;
    $76 = ((($4)) + 8|0);
    HEAPF64[$76>>3] = $75;
    break;
   }
   $71 = $3;
   $72 = HEAP32[$71>>2]|0;
   _pj_ctx_set_errno($72,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $77 = $7;
 $78 = +HEAPF64[$1>>3];
 $79 = (+Math_sin((+$78)));
 $80 = $77 * $79;
 HEAPF64[$4>>3] = $80;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_stere($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_stere($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 181;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9565;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_stere($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,40)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_31($9)|0);
  $1 = $10;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 _pj_param($4,$15,$18,11165);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  _pj_param($5,$22,$25,15033);
  $26 = +HEAPF64[$5>>3];
  $28 = $26;
 } else {
  $28 = 1.5707963267948966;
 }
 $27 = $3;
 HEAPF64[$27>>3] = $28;
 $29 = $2;
 $30 = (_setup_34($29)|0);
 $1 = $30;
 $31 = $1;
 STACKTOP = sp;return ($31|0);
}
function _freeup_30($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_31($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_31($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $5 = $2;
  $6 = ((($5)) + 416|0);
  $7 = HEAP32[$6>>2]|0;
  (_pj_dealloc($7)|0);
  $8 = $2;
  $9 = (_pj_dealloc($8)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _setup_34($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $1;
 $9 = ((($8)) + 128|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (+Math_abs((+$10)));
 $2 = $11;
 $12 = $11 - 1.5707963267948966;
 $13 = (+Math_abs((+$12)));
 $14 = $13 < 1.0E-10;
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 128|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 < 0.0;
  $19 = $18 ? 0 : 1;
  $20 = $3;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
 } else {
  $22 = $2;
  $23 = $22 > 1.0E-10;
  $24 = $23 ? 2 : 3;
  $25 = $3;
  $26 = ((($25)) + 32|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_abs((+$28)));
 $30 = $3;
 HEAPF64[$30>>3] = $29;
 $31 = $1;
 $32 = ((($31)) + 72|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $33 != 0.0;
 $35 = $3;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 if ($34) {
  L7: do {
   switch ($37|0) {
   case 0: case 1:  {
    $38 = $3;
    $39 = +HEAPF64[$38>>3];
    $40 = $39 - 1.5707963267948966;
    $41 = (+Math_abs((+$40)));
    $42 = $41 < 1.0E-10;
    if ($42) {
     $43 = $1;
     $44 = ((($43)) + 152|0);
     $45 = +HEAPF64[$44>>3];
     $46 = 2.0 * $45;
     $47 = $1;
     $48 = ((($47)) + 88|0);
     $49 = +HEAPF64[$48>>3];
     $50 = 1.0 + $49;
     $51 = $1;
     $52 = ((($51)) + 88|0);
     $53 = +HEAPF64[$52>>3];
     $54 = 1.0 + $53;
     $55 = (+Math_pow((+$50),(+$54)));
     $56 = $1;
     $57 = ((($56)) + 88|0);
     $58 = +HEAPF64[$57>>3];
     $59 = 1.0 - $58;
     $60 = $1;
     $61 = ((($60)) + 88|0);
     $62 = +HEAPF64[$61>>3];
     $63 = 1.0 - $62;
     $64 = (+Math_pow((+$59),(+$63)));
     $65 = $55 * $64;
     $66 = (+Math_sqrt((+$65)));
     $67 = $46 / $66;
     $68 = $3;
     $69 = ((($68)) + 24|0);
     HEAPF64[$69>>3] = $67;
     break L7;
    } else {
     $70 = $3;
     $71 = +HEAPF64[$70>>3];
     $72 = (+Math_cos((+$71)));
     $73 = $3;
     $74 = +HEAPF64[$73>>3];
     $75 = $3;
     $76 = +HEAPF64[$75>>3];
     $77 = (+Math_sin((+$76)));
     $2 = $77;
     $78 = $1;
     $79 = ((($78)) + 88|0);
     $80 = +HEAPF64[$79>>3];
     $81 = (+_pj_tsfn($74,$77,$80));
     $82 = $72 / $81;
     $83 = $3;
     $84 = ((($83)) + 24|0);
     HEAPF64[$84>>3] = $82;
     $85 = $1;
     $86 = ((($85)) + 88|0);
     $87 = +HEAPF64[$86>>3];
     $88 = $2;
     $89 = $88 * $87;
     $2 = $89;
     $90 = $2;
     $91 = $2;
     $92 = $90 * $91;
     $93 = 1.0 - $92;
     $94 = (+Math_sqrt((+$93)));
     $95 = $3;
     $96 = ((($95)) + 24|0);
     $97 = +HEAPF64[$96>>3];
     $98 = $97 / $94;
     HEAPF64[$96>>3] = $98;
     break L7;
    }
    break;
   }
   case 2: case 3:  {
    $99 = $1;
    $100 = ((($99)) + 128|0);
    $101 = +HEAPF64[$100>>3];
    $102 = (+Math_sin((+$101)));
    $2 = $102;
    $103 = $1;
    $104 = ((($103)) + 128|0);
    $105 = +HEAPF64[$104>>3];
    $106 = $2;
    $107 = $1;
    $108 = ((($107)) + 88|0);
    $109 = +HEAPF64[$108>>3];
    $110 = (+_ssfn_($105,$106,$109));
    $111 = (+Math_atan((+$110)));
    $112 = 2.0 * $111;
    $113 = $112 - 1.5707963267948966;
    $4 = $113;
    $114 = $1;
    $115 = ((($114)) + 88|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $2;
    $118 = $117 * $116;
    $2 = $118;
    $119 = $1;
    $120 = ((($119)) + 152|0);
    $121 = +HEAPF64[$120>>3];
    $122 = 2.0 * $121;
    $123 = $1;
    $124 = ((($123)) + 128|0);
    $125 = +HEAPF64[$124>>3];
    $126 = (+Math_cos((+$125)));
    $127 = $122 * $126;
    $128 = $2;
    $129 = $2;
    $130 = $128 * $129;
    $131 = 1.0 - $130;
    $132 = (+Math_sqrt((+$131)));
    $133 = $127 / $132;
    $134 = $3;
    $135 = ((($134)) + 24|0);
    HEAPF64[$135>>3] = $133;
    $136 = $4;
    $137 = (+Math_sin((+$136)));
    $138 = $3;
    $139 = ((($138)) + 8|0);
    HEAPF64[$139>>3] = $137;
    $140 = $4;
    $141 = (+Math_cos((+$140)));
    $142 = $3;
    $143 = ((($142)) + 16|0);
    HEAPF64[$143>>3] = $141;
    break;
   }
   default: {
   }
   }
  } while(0);
  $144 = $1;
  $145 = ((($144)) + 8|0);
  HEAP32[$145>>2] = 182;
  $146 = $1;
  $147 = ((($146)) + 4|0);
  HEAP32[$147>>2] = 183;
  $195 = $1;
  STACKTOP = sp;return ($195|0);
 }
 switch ($37|0) {
 case 2:  {
  $148 = $1;
  $149 = ((($148)) + 128|0);
  $150 = +HEAPF64[$149>>3];
  $151 = (+Math_sin((+$150)));
  $152 = $1;
  $153 = ((($152)) + 416|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ((($154)) + 8|0);
  HEAPF64[$155>>3] = $151;
  $156 = $1;
  $157 = ((($156)) + 128|0);
  $158 = +HEAPF64[$157>>3];
  $159 = (+Math_cos((+$158)));
  $160 = $1;
  $161 = ((($160)) + 416|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($162)) + 16|0);
  HEAPF64[$163>>3] = $159;
  label = 13;
  break;
 }
 case 3:  {
  label = 13;
  break;
 }
 case 1: case 0:  {
  $170 = $3;
  $171 = +HEAPF64[$170>>3];
  $172 = $171 - 1.5707963267948966;
  $173 = (+Math_abs((+$172)));
  $174 = $173 >= 1.0E-10;
  if ($174) {
   $175 = $3;
   $176 = +HEAPF64[$175>>3];
   $177 = (+Math_cos((+$176)));
   $178 = $3;
   $179 = +HEAPF64[$178>>3];
   $180 = 0.5 * $179;
   $181 = 0.78539816339744828 - $180;
   $182 = (+Math_tan((+$181)));
   $183 = $177 / $182;
   $190 = $183;
  } else {
   $184 = $1;
   $185 = ((($184)) + 152|0);
   $186 = +HEAPF64[$185>>3];
   $187 = 2.0 * $186;
   $190 = $187;
  }
  $188 = $3;
  $189 = ((($188)) + 24|0);
  HEAPF64[$189>>3] = $190;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 13) {
  $164 = $1;
  $165 = ((($164)) + 152|0);
  $166 = +HEAPF64[$165>>3];
  $167 = 2.0 * $166;
  $168 = $3;
  $169 = ((($168)) + 24|0);
  HEAPF64[$169>>3] = $167;
 }
 $191 = $1;
 $192 = ((($191)) + 8|0);
 HEAP32[$192>>2] = 184;
 $193 = $1;
 $194 = ((($193)) + 4|0);
 HEAP32[$194>>2] = 185;
 $195 = $1;
 STACKTOP = sp;return ($195|0);
}
function _ssfn_($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $4;
 $8 = $7 * $6;
 $4 = $8;
 $9 = $3;
 $10 = 1.5707963267948966 + $9;
 $11 = 0.5 * $10;
 $12 = (+Math_tan((+$11)));
 $13 = $4;
 $14 = 1.0 - $13;
 $15 = $4;
 $16 = 1.0 + $15;
 $17 = $14 / $16;
 $18 = $5;
 $19 = 0.5 * $18;
 $20 = (+Math_pow((+$17),(+$19)));
 $21 = $12 * $20;
 STACKTOP = sp;return (+$21);
}
function _e_inverse_35($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = $3;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $8 = 0.0;
 $9 = 0.0;
 $11 = 0.0;
 $12 = 0.0;
 $17 = +HEAPF64[$1>>3];
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+_hypot($17,$19));
 $10 = $20;
 $21 = $5;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 switch ($23|0) {
 case 3: case 2:  {
  $24 = $10;
  $25 = $5;
  $26 = ((($25)) + 16|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $24 * $27;
  $29 = $5;
  $30 = ((($29)) + 24|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_atan2((+$28),(+$31)));
  $33 = 2.0 * $32;
  $8 = $33;
  $34 = (+Math_cos((+$33)));
  $6 = $34;
  $35 = $8;
  $36 = (+Math_sin((+$35)));
  $7 = $36;
  $37 = $10;
  $38 = $37 == 0.0;
  $39 = $6;
  $40 = $5;
  $41 = ((($40)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 * $42;
  if ($38) {
   $44 = (+Math_asin((+$43)));
   $9 = $44;
  } else {
   $45 = ((($1)) + 8|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $7;
   $48 = $46 * $47;
   $49 = $5;
   $50 = ((($49)) + 16|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $48 * $51;
   $53 = $10;
   $54 = $52 / $53;
   $55 = $43 + $54;
   $56 = (+Math_asin((+$55)));
   $9 = $56;
  }
  $57 = $9;
  $58 = 1.5707963267948966 + $57;
  $59 = 0.5 * $58;
  $60 = (+Math_tan((+$59)));
  $8 = $60;
  $61 = $7;
  $62 = +HEAPF64[$1>>3];
  $63 = $62 * $61;
  HEAPF64[$1>>3] = $63;
  $64 = $10;
  $65 = $5;
  $66 = ((($65)) + 16|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $64 * $67;
  $69 = $6;
  $70 = $68 * $69;
  $71 = ((($1)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $5;
  $74 = ((($73)) + 8|0);
  $75 = +HEAPF64[$74>>3];
  $76 = $72 * $75;
  $77 = $7;
  $78 = $76 * $77;
  $79 = $70 - $78;
  $80 = ((($1)) + 8|0);
  HEAPF64[$80>>3] = $79;
  $12 = 1.5707963267948966;
  $81 = $3;
  $82 = ((($81)) + 88|0);
  $83 = +HEAPF64[$82>>3];
  $84 = 0.5 * $83;
  $11 = $84;
  break;
 }
 case 1:  {
  $85 = ((($1)) + 8|0);
  $86 = +HEAPF64[$85>>3];
  $87 = -$86;
  $88 = ((($1)) + 8|0);
  HEAPF64[$88>>3] = $87;
  label = 7;
  break;
 }
 case 0:  {
  label = 7;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 7) {
  $89 = $10;
  $90 = -$89;
  $91 = $5;
  $92 = ((($91)) + 24|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $90 / $93;
  $8 = $94;
  $95 = (+Math_atan((+$94)));
  $96 = 2.0 * $95;
  $97 = 1.5707963267948966 - $96;
  $9 = $97;
  $12 = -1.5707963267948966;
  $98 = $3;
  $99 = ((($98)) + 88|0);
  $100 = +HEAPF64[$99>>3];
  $101 = -0.5 * $100;
  $11 = $101;
 }
 $13 = 8;
 while(1) {
  $102 = $13;
  $103 = (($102) + -1)|0;
  $13 = $103;
  $104 = ($102|0)!=(0);
  $105 = $3;
  if (!($104)) {
   label = 18;
   break;
  }
  $106 = ((($105)) + 88|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $9;
  $109 = (+Math_sin((+$108)));
  $110 = $107 * $109;
  $7 = $110;
  $111 = $8;
  $112 = $7;
  $113 = 1.0 + $112;
  $114 = $7;
  $115 = 1.0 - $114;
  $116 = $113 / $115;
  $117 = $11;
  $118 = (+Math_pow((+$116),(+$117)));
  $119 = $111 * $118;
  $120 = (+Math_atan((+$119)));
  $121 = 2.0 * $120;
  $122 = $12;
  $123 = $121 - $122;
  $124 = ((($4)) + 8|0);
  HEAPF64[$124>>3] = $123;
  $125 = $9;
  $126 = ((($4)) + 8|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $125 - $127;
  $129 = (+Math_abs((+$128)));
  $130 = $129 < 1.0E-10;
  if ($130) {
   break;
  }
  $149 = ((($4)) + 8|0);
  $150 = +HEAPF64[$149>>3];
  $9 = $150;
 }
 if ((label|0) == 18) {
  $151 = HEAP32[$105>>2]|0;
  _pj_ctx_set_errno($151,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $131 = $5;
 $132 = ((($131)) + 32|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)==(0);
 if ($134) {
  $135 = ((($4)) + 8|0);
  $136 = +HEAPF64[$135>>3];
  $137 = -$136;
  $138 = ((($4)) + 8|0);
  HEAPF64[$138>>3] = $137;
 }
 $139 = +HEAPF64[$1>>3];
 $140 = $139 == 0.0;
 if ($140) {
  $141 = ((($1)) + 8|0);
  $142 = +HEAPF64[$141>>3];
  $143 = $142 == 0.0;
  if ($143) {
   $148 = 0.0;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $144 = +HEAPF64[$1>>3];
  $145 = ((($1)) + 8|0);
  $146 = +HEAPF64[$145>>3];
  $147 = (+Math_atan2((+$144),(+$146)));
  $148 = $147;
 }
 HEAPF64[$4>>3] = $148;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_36($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $8 = 0.0;
 $9 = 0.0;
 $16 = +HEAPF64[$1>>3];
 $17 = (+Math_cos((+$16)));
 $6 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_sin((+$18)));
 $7 = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_sin((+$21)));
 $12 = $22;
 $23 = $5;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(2);
 if ($26) {
  label = 3;
 } else {
  $27 = $5;
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(3);
  if ($30) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $31 = ((($1)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $12;
  $34 = $3;
  $35 = ((($34)) + 88|0);
  $36 = +HEAPF64[$35>>3];
  $37 = (+_ssfn_($32,$33,$36));
  $38 = (+Math_atan((+$37)));
  $39 = 2.0 * $38;
  $40 = $39 - 1.5707963267948966;
  $10 = $40;
  $41 = (+Math_sin((+$40)));
  $8 = $41;
  $42 = $10;
  $43 = (+Math_cos((+$42)));
  $9 = $43;
 }
 $44 = $5;
 $45 = ((($44)) + 32|0);
 $46 = HEAP32[$45>>2]|0;
 switch ($46|0) {
 case 2:  {
  $47 = $5;
  $48 = ((($47)) + 24|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $5;
  $54 = ((($53)) + 8|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $8;
  $57 = $55 * $56;
  $58 = 1.0 + $57;
  $59 = $5;
  $60 = ((($59)) + 16|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $9;
  $63 = $61 * $62;
  $64 = $6;
  $65 = $63 * $64;
  $66 = $58 + $65;
  $67 = $52 * $66;
  $68 = $49 / $67;
  $11 = $68;
  $69 = $11;
  $70 = $5;
  $71 = ((($70)) + 16|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $8;
  $74 = $72 * $73;
  $75 = $5;
  $76 = ((($75)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $9;
  $79 = $77 * $78;
  $80 = $6;
  $81 = $79 * $80;
  $82 = $74 - $81;
  $83 = $69 * $82;
  $84 = ((($4)) + 8|0);
  HEAPF64[$84>>3] = $83;
  label = 7;
  break;
 }
 case 3:  {
  $85 = $5;
  $86 = ((($85)) + 24|0);
  $87 = +HEAPF64[$86>>3];
  $88 = 2.0 * $87;
  $89 = $9;
  $90 = $6;
  $91 = $89 * $90;
  $92 = 1.0 + $91;
  $93 = $88 / $92;
  $11 = $93;
  $94 = $11;
  $95 = $8;
  $96 = $94 * $95;
  $97 = ((($4)) + 8|0);
  HEAPF64[$97>>3] = $96;
  label = 7;
  break;
 }
 case 0:  {
  $101 = ((($1)) + 8|0);
  $102 = +HEAPF64[$101>>3];
  $103 = -$102;
  $104 = ((($1)) + 8|0);
  HEAPF64[$104>>3] = $103;
  $105 = $6;
  $106 = -$105;
  $6 = $106;
  $107 = $12;
  $108 = -$107;
  $12 = $108;
  label = 9;
  break;
 }
 case 1:  {
  label = 9;
  break;
 }
 default: {
  $125 = +HEAPF64[$4>>3];
  $126 = $7;
  $127 = $125 * $126;
  HEAPF64[$4>>3] = $127;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 7) {
  $98 = $11;
  $99 = $9;
  $100 = $98 * $99;
  HEAPF64[$4>>3] = $100;
  $125 = +HEAPF64[$4>>3];
  $126 = $7;
  $127 = $125 * $126;
  HEAPF64[$4>>3] = $127;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $109 = $5;
  $110 = ((($109)) + 24|0);
  $111 = +HEAPF64[$110>>3];
  $112 = ((($1)) + 8|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $12;
  $115 = $3;
  $116 = ((($115)) + 88|0);
  $117 = +HEAPF64[$116>>3];
  $118 = (+_pj_tsfn($113,$114,$117));
  $119 = $111 * $118;
  HEAPF64[$4>>3] = $119;
  $120 = +HEAPF64[$4>>3];
  $121 = -$120;
  $122 = $6;
  $123 = $121 * $122;
  $124 = ((($4)) + 8|0);
  HEAPF64[$124>>3] = $123;
  $125 = +HEAPF64[$4>>3];
  $126 = $7;
  $127 = $125 * $126;
  HEAPF64[$4>>3] = $127;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_inverse_37($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+_hypot($13,$15));
 $7 = $16;
 $17 = $5;
 $18 = ((($17)) + 24|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 / $19;
 $21 = (+Math_atan((+$20)));
 $22 = 2.0 * $21;
 $6 = $22;
 $23 = (+Math_sin((+$22)));
 $8 = $23;
 $24 = $6;
 $25 = (+Math_cos((+$24)));
 $9 = $25;
 HEAPF64[$4>>3] = 0.0;
 $26 = $5;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 L1: do {
  switch ($28|0) {
  case 3:  {
   $29 = $7;
   $30 = (+Math_abs((+$29)));
   $31 = $30 <= 1.0E-10;
   if ($31) {
    $32 = ((($4)) + 8|0);
    HEAPF64[$32>>3] = 0.0;
   } else {
    $33 = ((($1)) + 8|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $8;
    $36 = $34 * $35;
    $37 = $7;
    $38 = $36 / $37;
    $39 = (+Math_asin((+$38)));
    $40 = ((($4)) + 8|0);
    HEAPF64[$40>>3] = $39;
   }
   $41 = $9;
   $42 = $41 != 0.0;
   if (!($42)) {
    $43 = +HEAPF64[$1>>3];
    $44 = $43 != 0.0;
    if (!($44)) {
     break L1;
    }
   }
   $45 = +HEAPF64[$1>>3];
   $46 = $8;
   $47 = $45 * $46;
   $48 = $9;
   $49 = $7;
   $50 = $48 * $49;
   $51 = (+Math_atan2((+$47),(+$50)));
   HEAPF64[$4>>3] = $51;
   break;
  }
  case 2:  {
   $52 = $7;
   $53 = (+Math_abs((+$52)));
   $54 = $53 <= 1.0E-10;
   if ($54) {
    $55 = $3;
    $56 = ((($55)) + 128|0);
    $57 = +HEAPF64[$56>>3];
    $58 = ((($4)) + 8|0);
    HEAPF64[$58>>3] = $57;
   } else {
    $59 = $9;
    $60 = $3;
    $61 = ((($60)) + 416|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 8|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $59 * $64;
    $66 = ((($1)) + 8|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $8;
    $69 = $67 * $68;
    $70 = $3;
    $71 = ((($70)) + 416|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 16|0);
    $74 = +HEAPF64[$73>>3];
    $75 = $69 * $74;
    $76 = $7;
    $77 = $75 / $76;
    $78 = $65 + $77;
    $79 = (+Math_asin((+$78)));
    $80 = ((($4)) + 8|0);
    HEAPF64[$80>>3] = $79;
   }
   $81 = $9;
   $82 = $3;
   $83 = ((($82)) + 416|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 8|0);
   $86 = +HEAPF64[$85>>3];
   $87 = ((($4)) + 8|0);
   $88 = +HEAPF64[$87>>3];
   $89 = (+Math_sin((+$88)));
   $90 = $86 * $89;
   $91 = $81 - $90;
   $6 = $91;
   $92 = $91 != 0.0;
   if (!($92)) {
    $93 = +HEAPF64[$1>>3];
    $94 = $93 != 0.0;
    if (!($94)) {
     break L1;
    }
   }
   $95 = +HEAPF64[$1>>3];
   $96 = $8;
   $97 = $95 * $96;
   $98 = $3;
   $99 = ((($98)) + 416|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 16|0);
   $102 = +HEAPF64[$101>>3];
   $103 = $97 * $102;
   $104 = $6;
   $105 = $7;
   $106 = $104 * $105;
   $107 = (+Math_atan2((+$103),(+$106)));
   HEAPF64[$4>>3] = $107;
   break;
  }
  case 1:  {
   $108 = ((($1)) + 8|0);
   $109 = +HEAPF64[$108>>3];
   $110 = -$109;
   $111 = ((($1)) + 8|0);
   HEAPF64[$111>>3] = $110;
   label = 15;
   break;
  }
  case 0:  {
   label = 15;
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 15) {
  $112 = $7;
  $113 = (+Math_abs((+$112)));
  $114 = $113 <= 1.0E-10;
  if ($114) {
   $115 = $3;
   $116 = ((($115)) + 128|0);
   $117 = +HEAPF64[$116>>3];
   $118 = ((($4)) + 8|0);
   HEAPF64[$118>>3] = $117;
  } else {
   $119 = $5;
   $120 = ((($119)) + 32|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(0);
   $123 = $9;
   $124 = -$123;
   $125 = $122 ? $124 : $123;
   $126 = (+Math_asin((+$125)));
   $127 = ((($4)) + 8|0);
   HEAPF64[$127>>3] = $126;
  }
  $128 = +HEAPF64[$1>>3];
  $129 = $128 == 0.0;
  if ($129) {
   $130 = ((($1)) + 8|0);
   $131 = +HEAPF64[$130>>3];
   $132 = $131 == 0.0;
   if ($132) {
    $137 = 0.0;
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
  if ((label|0) == 20) {
   $133 = +HEAPF64[$1>>3];
   $134 = ((($1)) + 8|0);
   $135 = +HEAPF64[$134>>3];
   $136 = (+Math_atan2((+$133),(+$135)));
   $137 = $136;
  }
  HEAPF64[$4>>3] = $137;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_38($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_sin((+$14)));
 $6 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_cos((+$17)));
 $7 = $18;
 $19 = +HEAPF64[$1>>3];
 $20 = (+Math_cos((+$19)));
 $8 = $20;
 $21 = +HEAPF64[$1>>3];
 $22 = (+Math_sin((+$21)));
 $9 = $22;
 $23 = $5;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 switch ($25|0) {
 case 3:  {
  $26 = $7;
  $27 = $8;
  $28 = $26 * $27;
  $29 = 1.0 + $28;
  $30 = ((($4)) + 8|0);
  HEAPF64[$30>>3] = $29;
  label = 4;
  break;
 }
 case 2:  {
  $31 = $3;
  $32 = ((($31)) + 416|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $6;
  $37 = $35 * $36;
  $38 = 1.0 + $37;
  $39 = $3;
  $40 = ((($39)) + 416|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 16|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $7;
  $45 = $43 * $44;
  $46 = $8;
  $47 = $45 * $46;
  $48 = $38 + $47;
  $49 = ((($4)) + 8|0);
  HEAPF64[$49>>3] = $48;
  label = 4;
  break;
 }
 case 1:  {
  $92 = $8;
  $93 = -$92;
  $8 = $93;
  $94 = ((($1)) + 8|0);
  $95 = +HEAPF64[$94>>3];
  $96 = -$95;
  $97 = ((($1)) + 8|0);
  HEAPF64[$97>>3] = $96;
  label = 11;
  break;
 }
 case 0:  {
  label = 11;
  break;
 }
 default: {
 }
 }
 do {
  if ((label|0) == 4) {
   $50 = ((($4)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $51 <= 1.0E-10;
   if ($52) {
    $53 = $3;
    $54 = HEAP32[$53>>2]|0;
    _pj_ctx_set_errno($54,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $55 = $5;
   $56 = ((($55)) + 24|0);
   $57 = +HEAPF64[$56>>3];
   $58 = ((($4)) + 8|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $57 / $59;
   $61 = ((($4)) + 8|0);
   HEAPF64[$61>>3] = $60;
   $62 = $7;
   $63 = $60 * $62;
   $64 = $9;
   $65 = $63 * $64;
   HEAPF64[$4>>3] = $65;
   $66 = $5;
   $67 = ((($66)) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(3);
   if ($69) {
    $70 = $6;
    $91 = $70;
   } else {
    $71 = $3;
    $72 = ((($71)) + 416|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 16|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $6;
    $77 = $75 * $76;
    $78 = $3;
    $79 = ((($78)) + 416|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 8|0);
    $82 = +HEAPF64[$81>>3];
    $83 = $7;
    $84 = $82 * $83;
    $85 = $8;
    $86 = $84 * $85;
    $87 = $77 - $86;
    $91 = $87;
   }
   $88 = ((($4)) + 8|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $89 * $91;
   HEAPF64[$88>>3] = $90;
  }
  else if ((label|0) == 11) {
   $98 = ((($1)) + 8|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $99 - 1.5707963267948966;
   $101 = (+Math_abs((+$100)));
   $102 = $101 < 1.0E-8;
   if (!($102)) {
    $105 = $9;
    $106 = $5;
    $107 = ((($106)) + 24|0);
    $108 = +HEAPF64[$107>>3];
    $109 = ((($1)) + 8|0);
    $110 = +HEAPF64[$109>>3];
    $111 = 0.5 * $110;
    $112 = 0.78539816339744828 + $111;
    $113 = (+Math_tan((+$112)));
    $114 = $108 * $113;
    $115 = ((($4)) + 8|0);
    HEAPF64[$115>>3] = $114;
    $116 = $105 * $114;
    HEAPF64[$4>>3] = $116;
    $117 = $8;
    $118 = ((($4)) + 8|0);
    $119 = +HEAPF64[$118>>3];
    $120 = $119 * $117;
    HEAPF64[$118>>3] = $120;
    break;
   }
   $103 = $3;
   $104 = HEAP32[$103>>2]|0;
   _pj_ctx_set_errno($104,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_ups($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_ups($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 181;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9602;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_ups($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,40)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_31($8)|0);
  $1 = $9;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pj_param($4,$14,$17,13100);
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $19 ? -1.5707963267948966 : 1.5707963267948966;
 $21 = $2;
 $22 = ((($21)) + 128|0);
 HEAPF64[$22>>3] = $20;
 $23 = $2;
 $24 = ((($23)) + 72|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 != 0.0;
 $27 = $2;
 if ($26) {
  $30 = ((($27)) + 152|0);
  HEAPF64[$30>>3] = 0.99399999999999999;
  $31 = $2;
  $32 = ((($31)) + 136|0);
  HEAPF64[$32>>3] = 2.0E+6;
  $33 = $2;
  $34 = ((($33)) + 144|0);
  HEAPF64[$34>>3] = 2.0E+6;
  $35 = $3;
  HEAPF64[$35>>3] = 1.5707963267948966;
  $36 = $2;
  $37 = ((($36)) + 120|0);
  HEAPF64[$37>>3] = 0.0;
  $38 = $2;
  $39 = (_setup_34($38)|0);
  $1 = $39;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 } else {
  $28 = HEAP32[$27>>2]|0;
  _pj_ctx_set_errno($28,-34);
  $29 = $2;
  _freeup_30($29);
  $1 = 0;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _pj_sterea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_sterea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 186;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9653;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_sterea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,40)|0);
 $4 = $5;
 $6 = $4;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_41($8)|0);
  $1 = $9;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 $10 = $4;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = ((($13)) + 88|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $2;
 $17 = ((($16)) + 128|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $4;
 $20 = (_pj_gauss_ini($15,$18,$19,$3)|0);
 $21 = $4;
 $22 = ((($21)) + 32|0);
 HEAP32[$22>>2] = $20;
 $23 = $4;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (0|0)==($25|0);
 if ($26) {
  $27 = $2;
  $28 = (_freeup_new_41($27)|0);
  $1 = $28;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 } else {
  $29 = $4;
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_sin((+$30)));
  $32 = $4;
  $33 = ((($32)) + 16|0);
  HEAPF64[$33>>3] = $31;
  $34 = $4;
  $35 = +HEAPF64[$34>>3];
  $36 = (+Math_cos((+$35)));
  $37 = $4;
  $38 = ((($37)) + 8|0);
  HEAPF64[$38>>3] = $36;
  $39 = +HEAPF64[$3>>3];
  $40 = 2.0 * $39;
  $41 = $4;
  $42 = ((($41)) + 24|0);
  HEAPF64[$42>>3] = $40;
  $43 = $2;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = 187;
  $45 = $2;
  $46 = ((($45)) + 4|0);
  HEAP32[$46>>2] = 188;
  $47 = $2;
  $1 = $47;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _freeup_40($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_41($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_41($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _e_inverse_42($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 152|0);
 $15 = +HEAPF64[$14>>3];
 $16 = +HEAPF64[$1>>3];
 $17 = $16 / $15;
 HEAPF64[$1>>3] = $17;
 $18 = $3;
 $19 = ((($18)) + 152|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 / $20;
 HEAPF64[$21>>3] = $23;
 $24 = +HEAPF64[$1>>3];
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+_hypot($24,$26));
 $6 = $27;
 $28 = $27 != 0.0;
 if ($28) {
  $29 = $6;
  $30 = $5;
  $31 = ((($30)) + 24|0);
  $32 = +HEAPF64[$31>>3];
  $33 = (+Math_atan2((+$29),(+$32)));
  $34 = 2.0 * $33;
  $7 = $34;
  $35 = $7;
  $36 = (+Math_sin((+$35)));
  $8 = $36;
  $37 = $7;
  $38 = (+Math_cos((+$37)));
  $9 = $38;
  $39 = $9;
  $40 = $5;
  $41 = ((($40)) + 16|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 * $42;
  $44 = ((($1)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $8;
  $47 = $45 * $46;
  $48 = $5;
  $49 = ((($48)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $47 * $50;
  $52 = $6;
  $53 = $51 / $52;
  $54 = $43 + $53;
  $55 = (+Math_asin((+$54)));
  $56 = ((($4)) + 8|0);
  HEAPF64[$56>>3] = $55;
  $57 = +HEAPF64[$1>>3];
  $58 = $8;
  $59 = $57 * $58;
  $60 = $6;
  $61 = $5;
  $62 = ((($61)) + 8|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $60 * $63;
  $65 = $9;
  $66 = $64 * $65;
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $5;
  $70 = ((($69)) + 16|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $68 * $71;
  $73 = $8;
  $74 = $72 * $73;
  $75 = $66 - $74;
  $76 = (+Math_atan2((+$59),(+$75)));
  HEAPF64[$4>>3] = $76;
  $80 = $3;
  $81 = HEAP32[$80>>2]|0;
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = HEAP32[$83>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
  _pj_inv_gauss($0,$81,$$byval_copy,$84);
  STACKTOP = sp;return;
 } else {
  $77 = $5;
  $78 = +HEAPF64[$77>>3];
  $79 = ((($4)) + 8|0);
  HEAPF64[$79>>3] = $78;
  HEAPF64[$4>>3] = 0.0;
  $80 = $3;
  $81 = HEAP32[$80>>2]|0;
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = HEAP32[$83>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
  _pj_inv_gauss($0,$81,$$byval_copy,$84);
  STACKTOP = sp;return;
 }
}
function _e_forward_43($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 64|0;
 $4 = sp + 48|0;
 $10 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _pj_gauss($10,$15,$$byval_copy,$18);
 ;HEAP32[$1>>2]=HEAP32[$10>>2]|0;HEAP32[$1+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$10+12>>2]|0;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_sin((+$20)));
 $7 = $21;
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_cos((+$23)));
 $6 = $24;
 $25 = +HEAPF64[$1>>3];
 $26 = (+Math_cos((+$25)));
 $8 = $26;
 $27 = $3;
 $28 = ((($27)) + 152|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $5;
 $31 = ((($30)) + 24|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $29 * $32;
 $34 = $5;
 $35 = ((($34)) + 16|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $7;
 $38 = $36 * $37;
 $39 = 1.0 + $38;
 $40 = $5;
 $41 = ((($40)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $6;
 $44 = $42 * $43;
 $45 = $8;
 $46 = $44 * $45;
 $47 = $39 + $46;
 $48 = $33 / $47;
 $9 = $48;
 $49 = $9;
 $50 = $6;
 $51 = $49 * $50;
 $52 = +HEAPF64[$1>>3];
 $53 = (+Math_sin((+$52)));
 $54 = $51 * $53;
 HEAPF64[$4>>3] = $54;
 $55 = $9;
 $56 = $5;
 $57 = ((($56)) + 8|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $7;
 $60 = $58 * $59;
 $61 = $5;
 $62 = ((($61)) + 16|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $6;
 $65 = $63 * $64;
 $66 = $8;
 $67 = $65 * $66;
 $68 = $60 - $67;
 $69 = $55 * $68;
 $70 = ((($4)) + 8|0);
 HEAPF64[$70>>3] = $69;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_aea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_aea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 189;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9707;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_aea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,80)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_45($9)|0);
  $1 = $10;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 } else {
  $11 = $3;
  $12 = $2;
  $13 = ((($12)) + 416|0);
  HEAP32[$13>>2] = $11;
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  _pj_param($4,$15,$18,15081);
  $19 = +HEAPF64[$4>>3];
  $20 = $3;
  $21 = ((($20)) + 56|0);
  HEAPF64[$21>>3] = $19;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  _pj_param($5,$23,$26,12667);
  $27 = +HEAPF64[$5>>3];
  $28 = $3;
  $29 = ((($28)) + 64|0);
  HEAPF64[$29>>3] = $27;
  $30 = $2;
  (_setup_48($30)|0);
  $31 = $2;
  $1 = $31;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _freeup_44($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_45($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_45($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _setup_48($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0;
 var $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 190;
 $16 = $2;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 191;
 $18 = $6;
 $19 = ((($18)) + 56|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $6;
 $22 = ((($21)) + 64|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 + $23;
 $25 = (+Math_abs((+$24)));
 $26 = $25 < 1.0E-10;
 if ($26) {
  $27 = $2;
  $28 = HEAP32[$27>>2]|0;
  _pj_ctx_set_errno($28,-21);
  $29 = $2;
  _freeup_44($29);
  $1 = 0;
  $239 = $1;
  STACKTOP = sp;return ($239|0);
 }
 $30 = $6;
 $31 = ((($30)) + 56|0);
 $32 = +HEAPF64[$31>>3];
 $33 = (+Math_sin((+$32)));
 $4 = $33;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 HEAPF64[$35>>3] = $33;
 $36 = $6;
 $37 = ((($36)) + 56|0);
 $38 = +HEAPF64[$37>>3];
 $39 = (+Math_cos((+$38)));
 $3 = $39;
 $40 = $6;
 $41 = ((($40)) + 56|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $6;
 $44 = ((($43)) + 64|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $42 - $45;
 $47 = (+Math_abs((+$46)));
 $48 = $47 >= 1.0E-10;
 $49 = $48&1;
 $5 = $49;
 $50 = $2;
 $51 = ((($50)) + 72|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 > 0.0;
 $54 = $53&1;
 $55 = $6;
 $56 = ((($55)) + 76|0);
 HEAP32[$56>>2] = $54;
 if ($53) {
  $57 = $2;
  $58 = ((($57)) + 72|0);
  $59 = +HEAPF64[$58>>3];
  $60 = (_pj_enfn($59)|0);
  $61 = $6;
  $62 = ((($61)) + 72|0);
  HEAP32[$62>>2] = $60;
  $63 = ($60|0)!=(0|0);
  if (!($63)) {
   $64 = $2;
   _freeup_44($64);
   $1 = 0;
   $239 = $1;
   STACKTOP = sp;return ($239|0);
  }
  $65 = $4;
  $66 = $3;
  $67 = $2;
  $68 = ((($67)) + 72|0);
  $69 = +HEAPF64[$68>>3];
  $70 = (+_pj_msfn($65,$66,$69));
  $8 = $70;
  $71 = $4;
  $72 = $2;
  $73 = ((($72)) + 88|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $2;
  $76 = ((($75)) + 104|0);
  $77 = +HEAPF64[$76>>3];
  $78 = (+_pj_qsfn($71,$74,$77));
  $7 = $78;
  $79 = $5;
  $80 = ($79|0)!=(0);
  if ($80) {
   $81 = $6;
   $82 = ((($81)) + 64|0);
   $83 = +HEAPF64[$82>>3];
   $84 = (+Math_sin((+$83)));
   $4 = $84;
   $85 = $6;
   $86 = ((($85)) + 64|0);
   $87 = +HEAPF64[$86>>3];
   $88 = (+Math_cos((+$87)));
   $3 = $88;
   $89 = $4;
   $90 = $3;
   $91 = $2;
   $92 = ((($91)) + 72|0);
   $93 = +HEAPF64[$92>>3];
   $94 = (+_pj_msfn($89,$90,$93));
   $10 = $94;
   $95 = $4;
   $96 = $2;
   $97 = ((($96)) + 88|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $2;
   $100 = ((($99)) + 104|0);
   $101 = +HEAPF64[$100>>3];
   $102 = (+_pj_qsfn($95,$98,$101));
   $9 = $102;
   $103 = $8;
   $104 = $8;
   $105 = $103 * $104;
   $106 = $10;
   $107 = $10;
   $108 = $106 * $107;
   $109 = $105 - $108;
   $110 = $9;
   $111 = $7;
   $112 = $110 - $111;
   $113 = $109 / $112;
   $114 = $6;
   $115 = ((($114)) + 8|0);
   HEAPF64[$115>>3] = $113;
  }
  $116 = $2;
  $117 = ((($116)) + 104|0);
  $118 = +HEAPF64[$117>>3];
  $119 = 0.5 * $118;
  $120 = $2;
  $121 = ((($120)) + 88|0);
  $122 = +HEAPF64[$121>>3];
  $123 = 1.0 - $122;
  $124 = $2;
  $125 = ((($124)) + 88|0);
  $126 = +HEAPF64[$125>>3];
  $127 = 1.0 + $126;
  $128 = $123 / $127;
  $129 = (+Math_log((+$128)));
  $130 = $119 * $129;
  $131 = $2;
  $132 = ((($131)) + 88|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $130 / $133;
  $135 = 1.0 - $134;
  $136 = $6;
  HEAPF64[$136>>3] = $135;
  $137 = $8;
  $138 = $8;
  $139 = $137 * $138;
  $140 = $6;
  $141 = ((($140)) + 8|0);
  $142 = +HEAPF64[$141>>3];
  $143 = $7;
  $144 = $142 * $143;
  $145 = $139 + $144;
  $146 = $6;
  $147 = ((($146)) + 16|0);
  HEAPF64[$147>>3] = $145;
  $148 = $6;
  $149 = ((($148)) + 8|0);
  $150 = +HEAPF64[$149>>3];
  $151 = 1.0 / $150;
  $152 = $6;
  $153 = ((($152)) + 24|0);
  HEAPF64[$153>>3] = $151;
  $154 = $6;
  $155 = ((($154)) + 24|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $6;
  $158 = ((($157)) + 16|0);
  $159 = +HEAPF64[$158>>3];
  $160 = $6;
  $161 = ((($160)) + 8|0);
  $162 = +HEAPF64[$161>>3];
  $163 = $2;
  $164 = ((($163)) + 128|0);
  $165 = +HEAPF64[$164>>3];
  $166 = (+Math_sin((+$165)));
  $167 = $2;
  $168 = ((($167)) + 88|0);
  $169 = +HEAPF64[$168>>3];
  $170 = $2;
  $171 = ((($170)) + 104|0);
  $172 = +HEAPF64[$171>>3];
  $173 = (+_pj_qsfn($166,$169,$172));
  $174 = $162 * $173;
  $175 = $159 - $174;
  $176 = (+Math_sqrt((+$175)));
  $177 = $156 * $176;
  $178 = $6;
  $179 = ((($178)) + 40|0);
  HEAPF64[$179>>3] = $177;
 } else {
  $180 = $5;
  $181 = ($180|0)!=(0);
  if ($181) {
   $182 = $6;
   $183 = ((($182)) + 8|0);
   $184 = +HEAPF64[$183>>3];
   $185 = $6;
   $186 = ((($185)) + 64|0);
   $187 = +HEAPF64[$186>>3];
   $188 = (+Math_sin((+$187)));
   $189 = $184 + $188;
   $190 = 0.5 * $189;
   $191 = $6;
   $192 = ((($191)) + 8|0);
   HEAPF64[$192>>3] = $190;
  }
  $193 = $6;
  $194 = ((($193)) + 8|0);
  $195 = +HEAPF64[$194>>3];
  $196 = $6;
  $197 = ((($196)) + 8|0);
  $198 = +HEAPF64[$197>>3];
  $199 = $195 + $198;
  $200 = $6;
  $201 = ((($200)) + 32|0);
  HEAPF64[$201>>3] = $199;
  $202 = $3;
  $203 = $3;
  $204 = $202 * $203;
  $205 = $6;
  $206 = ((($205)) + 32|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $4;
  $209 = $207 * $208;
  $210 = $204 + $209;
  $211 = $6;
  $212 = ((($211)) + 16|0);
  HEAPF64[$212>>3] = $210;
  $213 = $6;
  $214 = ((($213)) + 8|0);
  $215 = +HEAPF64[$214>>3];
  $216 = 1.0 / $215;
  $217 = $6;
  $218 = ((($217)) + 24|0);
  HEAPF64[$218>>3] = $216;
  $219 = $6;
  $220 = ((($219)) + 24|0);
  $221 = +HEAPF64[$220>>3];
  $222 = $6;
  $223 = ((($222)) + 16|0);
  $224 = +HEAPF64[$223>>3];
  $225 = $6;
  $226 = ((($225)) + 32|0);
  $227 = +HEAPF64[$226>>3];
  $228 = $2;
  $229 = ((($228)) + 128|0);
  $230 = +HEAPF64[$229>>3];
  $231 = (+Math_sin((+$230)));
  $232 = $227 * $231;
  $233 = $224 - $232;
  $234 = (+Math_sqrt((+$233)));
  $235 = $221 * $234;
  $236 = $6;
  $237 = ((($236)) + 40|0);
  HEAPF64[$237>>3] = $235;
 }
 $238 = $2;
 $1 = $238;
 $239 = $1;
 STACKTOP = sp;return ($239|0);
}
function _e_inverse_49($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0;
 var $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = $5;
 $11 = ((($10)) + 40|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $12 - $14;
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = (+_hypot($9,$15));
 $18 = $5;
 $19 = ((($18)) + 48|0);
 HEAPF64[$19>>3] = $17;
 $20 = $17 != 0.0;
 if ($20) {
  $21 = $5;
  $22 = ((($21)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 < 0.0;
  if ($24) {
   $25 = $5;
   $26 = ((($25)) + 48|0);
   $27 = +HEAPF64[$26>>3];
   $28 = -$27;
   $29 = $5;
   $30 = ((($29)) + 48|0);
   HEAPF64[$30>>3] = $28;
   $31 = +HEAPF64[$1>>3];
   $32 = -$31;
   HEAPF64[$1>>3] = $32;
   $33 = ((($1)) + 8|0);
   $34 = +HEAPF64[$33>>3];
   $35 = -$34;
   $36 = ((($1)) + 8|0);
   HEAPF64[$36>>3] = $35;
  }
  $37 = $5;
  $38 = ((($37)) + 48|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $5;
  $41 = ((($40)) + 24|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 / $42;
  $44 = ((($4)) + 8|0);
  HEAPF64[$44>>3] = $43;
  $45 = $5;
  $46 = ((($45)) + 76|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  $49 = $5;
  $50 = ((($49)) + 16|0);
  $51 = +HEAPF64[$50>>3];
  $52 = ((($4)) + 8|0);
  $53 = +HEAPF64[$52>>3];
  $54 = ((($4)) + 8|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $53 * $55;
  $57 = $51 - $56;
  $58 = $5;
  do {
   if ($48) {
    $59 = ((($58)) + 8|0);
    $60 = +HEAPF64[$59>>3];
    $61 = $57 / $60;
    $62 = ((($4)) + 8|0);
    HEAPF64[$62>>3] = $61;
    $63 = $5;
    $64 = +HEAPF64[$63>>3];
    $65 = ((($4)) + 8|0);
    $66 = +HEAPF64[$65>>3];
    $67 = (+Math_abs((+$66)));
    $68 = $64 - $67;
    $69 = (+Math_abs((+$68)));
    $70 = $69 > 9.9999999999999995E-8;
    $71 = ((($4)) + 8|0);
    $72 = +HEAPF64[$71>>3];
    if (!($70)) {
     $84 = $72 < 0.0;
     $85 = $84 ? -1.5707963267948966 : 1.5707963267948966;
     $86 = ((($4)) + 8|0);
     HEAPF64[$86>>3] = $85;
     break;
    }
    $73 = $3;
    $74 = ((($73)) + 88|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $3;
    $77 = ((($76)) + 104|0);
    $78 = +HEAPF64[$77>>3];
    $79 = (+_phi1_($72,$75,$78));
    $80 = ((($4)) + 8|0);
    HEAPF64[$80>>3] = $79;
    $81 = $79 == inf;
    if ($81) {
     $82 = $3;
     $83 = HEAP32[$82>>2]|0;
     _pj_ctx_set_errno($83,-20);
     ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
     STACKTOP = sp;return;
    }
   } else {
    $87 = ((($58)) + 32|0);
    $88 = +HEAPF64[$87>>3];
    $89 = $57 / $88;
    $90 = ((($4)) + 8|0);
    HEAPF64[$90>>3] = $89;
    $91 = (+Math_abs((+$89)));
    $92 = $91 <= 1.0;
    $93 = ((($4)) + 8|0);
    $94 = +HEAPF64[$93>>3];
    if ($92) {
     $95 = (+Math_asin((+$94)));
     $96 = ((($4)) + 8|0);
     HEAPF64[$96>>3] = $95;
     break;
    } else {
     $97 = $94 < 0.0;
     $98 = $97 ? -1.5707963267948966 : 1.5707963267948966;
     $99 = ((($4)) + 8|0);
     HEAPF64[$99>>3] = $98;
     break;
    }
   }
  } while(0);
  $100 = +HEAPF64[$1>>3];
  $101 = ((($1)) + 8|0);
  $102 = +HEAPF64[$101>>3];
  $103 = (+Math_atan2((+$100),(+$102)));
  $104 = $5;
  $105 = ((($104)) + 8|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $103 / $106;
  HEAPF64[$4>>3] = $107;
 } else {
  HEAPF64[$4>>3] = 0.0;
  $108 = $5;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $110 > 0.0;
  $112 = $111 ? 1.5707963267948966 : -1.5707963267948966;
  $113 = ((($4)) + 8|0);
  HEAPF64[$113>>3] = $112;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_50($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 16|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $5;
 $13 = ((($12)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 $16 = $5;
 if ($15) {
  $17 = ((($16)) + 8|0);
  $18 = +HEAPF64[$17>>3];
  $19 = ((($1)) + 8|0);
  $20 = +HEAPF64[$19>>3];
  $21 = (+Math_sin((+$20)));
  $22 = $3;
  $23 = ((($22)) + 88|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $3;
  $26 = ((($25)) + 104|0);
  $27 = +HEAPF64[$26>>3];
  $28 = (+_pj_qsfn($21,$24,$27));
  $29 = $18 * $28;
  $37 = $29;
 } else {
  $30 = ((($16)) + 32|0);
  $31 = +HEAPF64[$30>>3];
  $32 = ((($1)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (+Math_sin((+$33)));
  $35 = $31 * $34;
  $37 = $35;
 }
 $36 = $11 - $37;
 $38 = $5;
 $39 = ((($38)) + 48|0);
 HEAPF64[$39>>3] = $36;
 $40 = $36 < 0.0;
 if ($40) {
  $41 = $3;
  $42 = HEAP32[$41>>2]|0;
  _pj_ctx_set_errno($42,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $43 = $5;
  $44 = ((($43)) + 24|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $5;
  $47 = ((($46)) + 48|0);
  $48 = +HEAPF64[$47>>3];
  $49 = (+Math_sqrt((+$48)));
  $50 = $45 * $49;
  $51 = $5;
  $52 = ((($51)) + 48|0);
  HEAPF64[$52>>3] = $50;
  $53 = $5;
  $54 = ((($53)) + 48|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $5;
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = +HEAPF64[$1>>3];
  $60 = $59 * $58;
  HEAPF64[$1>>3] = $60;
  $61 = (+Math_sin((+$60)));
  $62 = $55 * $61;
  HEAPF64[$4>>3] = $62;
  $63 = $5;
  $64 = ((($63)) + 40|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $5;
  $67 = ((($66)) + 48|0);
  $68 = +HEAPF64[$67>>3];
  $69 = +HEAPF64[$1>>3];
  $70 = (+Math_cos((+$69)));
  $71 = $68 * $70;
  $72 = $65 - $71;
  $73 = ((($4)) + 8|0);
  HEAPF64[$73>>3] = $72;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _phi1_($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = 0.5 * $14;
 $16 = (+Math_asin((+$15)));
 $8 = $16;
 $17 = $5;
 $18 = $17 < 9.9999999999999995E-8;
 if ($18) {
  $19 = $8;
  $3 = $19;
  $68 = $3;
  STACKTOP = sp;return (+$68);
 }
 $7 = 15;
 while(1) {
  $20 = $8;
  $21 = (+Math_sin((+$20)));
  $9 = $21;
  $22 = $8;
  $23 = (+Math_cos((+$22)));
  $10 = $23;
  $24 = $5;
  $25 = $9;
  $26 = $24 * $25;
  $11 = $26;
  $27 = $11;
  $28 = $11;
  $29 = $27 * $28;
  $30 = 1.0 - $29;
  $12 = $30;
  $31 = $12;
  $32 = 0.5 * $31;
  $33 = $12;
  $34 = $32 * $33;
  $35 = $10;
  $36 = $34 / $35;
  $37 = $4;
  $38 = $6;
  $39 = $37 / $38;
  $40 = $9;
  $41 = $12;
  $42 = $40 / $41;
  $43 = $39 - $42;
  $44 = $5;
  $45 = 0.5 / $44;
  $46 = $11;
  $47 = 1.0 - $46;
  $48 = $11;
  $49 = 1.0 + $48;
  $50 = $47 / $49;
  $51 = (+Math_log((+$50)));
  $52 = $45 * $51;
  $53 = $43 + $52;
  $54 = $36 * $53;
  $13 = $54;
  $55 = $13;
  $56 = $8;
  $57 = $56 + $55;
  $8 = $57;
  $58 = $13;
  $59 = (+Math_abs((+$58)));
  $60 = $59 > 1.0E-10;
  if (!($60)) {
   break;
  }
  $61 = $7;
  $62 = (($61) + -1)|0;
  $7 = $62;
  $63 = ($62|0)!=(0);
  if (!($63)) {
   break;
  }
 }
 $64 = $7;
 $65 = ($64|0)!=(0);
 $66 = $8;
 $67 = $65 ? $66 : inf;
 $3 = $67;
 $68 = $3;
 STACKTOP = sp;return (+$68);
}
function _pj_leac($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_leac($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 189;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9755;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_leac($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,80)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_45($9)|0);
  $1 = $10;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 } else {
  $11 = $3;
  $12 = $2;
  $13 = ((($12)) + 416|0);
  HEAP32[$13>>2] = $11;
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  _pj_param($4,$15,$18,15081);
  $19 = +HEAPF64[$4>>3];
  $20 = $3;
  $21 = ((($20)) + 64|0);
  HEAPF64[$21>>3] = $19;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  _pj_param($5,$23,$26,13100);
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27|0)!=(0);
  $29 = $28 ? -1.5707963267948966 : 1.5707963267948966;
  $30 = $3;
  $31 = ((($30)) + 56|0);
  HEAPF64[$31>>3] = $29;
  $32 = $2;
  (_setup_48($32)|0);
  $33 = $2;
  $1 = $33;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _pj_bipc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_bipc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 192;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9810;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_bipc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,4)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_53($8)|0);
  $1 = $9;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $10 = $3;
  $11 = $2;
  $12 = ((($11)) + 416|0);
  HEAP32[$12>>2] = $10;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  _pj_param($4,$14,$17,9858);
  $18 = HEAP32[$4>>2]|0;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = 193;
  $22 = $2;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 194;
  $24 = $2;
  $25 = ((($24)) + 72|0);
  HEAPF64[$25>>3] = 0.0;
  $26 = $2;
  $1 = $26;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _freeup_52($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_53($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_53($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $5 = $2;
  $6 = ((($5)) + 416|0);
  $7 = HEAP32[$6>>2]|0;
  (_pj_dealloc($7)|0);
  $8 = $2;
  $9 = (_pj_dealloc($8)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _s_inverse_55($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 88|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $19 = $3;
 $20 = ((($19)) + 416|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = +HEAPF64[$1>>3];
  $6 = $25;
  $26 = +HEAPF64[$1>>3];
  $27 = -$26;
  $28 = $27 * 0.69691523038678371;
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 * 0.71715351331143606;
  $32 = $28 + $31;
  HEAPF64[$1>>3] = $32;
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = -$34;
  $36 = $35 * 0.69691523038678371;
  $37 = $6;
  $38 = $37 * 0.71715351331143606;
  $39 = $36 - $38;
  $40 = ((($1)) + 8|0);
  HEAPF64[$40>>3] = $39;
 }
 $41 = +HEAPF64[$1>>3];
 $42 = $41 < 0.0;
 $43 = $42&1;
 $17 = $43;
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 if ($42) {
  $46 = 1.2070912152156872 - $45;
  $47 = ((($1)) + 8|0);
  HEAPF64[$47>>3] = $46;
  $14 = -0.34202014332566871;
  $15 = 0.93969262078590842;
  $16 = 0.81650043674686368;
 } else {
  $48 = $45 + 1.2070912152156872;
  HEAPF64[$44>>3] = $48;
  $14 = 0.70710678118654757;
  $15 = 0.70710678118654757;
  $16 = 1.8226184385618593;
 }
 $49 = +HEAPF64[$1>>3];
 $50 = ((($1)) + 8|0);
 $51 = +HEAPF64[$50>>3];
 $52 = (+_hypot($49,$51));
 $7 = $52;
 $8 = $52;
 $9 = $52;
 $53 = +HEAPF64[$1>>3];
 $54 = ((($1)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = (+Math_atan2((+$53),(+$55)));
 $13 = $56;
 $57 = (+Math_abs((+$56)));
 $12 = $57;
 $18 = 10;
 while(1) {
  $58 = $18;
  $59 = ($58|0)!=(0);
  if (!($59)) {
   break;
  }
  $60 = $7;
  $61 = $60 / 1.8972474256746104;
  $62 = (+Math_pow((+$61),1.585895806935677));
  $63 = (+Math_atan((+$62)));
  $64 = 2.0 * $63;
  $11 = $64;
  $65 = $11;
  $66 = 0.5 * $65;
  $67 = (+Math_tan((+$66)));
  $68 = (+Math_pow((+$67),0.63055844881274692));
  $69 = $11;
  $70 = 1.8151424220741028 - $69;
  $71 = 0.5 * $70;
  $72 = (+Math_tan((+$71)));
  $73 = (+Math_pow((+$72),0.63055844881274692));
  $74 = $68 + $73;
  $75 = $74 / 1.2724657826708901;
  $76 = (+Math_acos((+$75)));
  $10 = $76;
  $77 = $12;
  $78 = $10;
  $79 = $77 < $78;
  if ($79) {
   $80 = $8;
   $81 = $10;
   $82 = $17;
   $83 = ($82|0)!=(0);
   $84 = $13;
   $85 = -$84;
   $86 = $83 ? $84 : $85;
   $87 = $81 + $86;
   $88 = (+Math_cos((+$87)));
   $89 = $80 * $88;
   $7 = $89;
  }
  $90 = $9;
  $91 = $7;
  $92 = $90 - $91;
  $93 = (+Math_abs((+$92)));
  $94 = $93 < 1.0E-10;
  if ($94) {
   break;
  }
  $95 = $7;
  $9 = $95;
  $96 = $18;
  $97 = (($96) + -1)|0;
  $18 = $97;
 }
 $98 = $18;
 $99 = ($98|0)!=(0);
 if (!($99)) {
  $100 = $3;
  $101 = HEAP32[$100>>2]|0;
  _pj_ctx_set_errno($101,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $102 = $16;
 $103 = $13;
 $104 = $103 / 0.63055844881274692;
 $105 = $102 - $104;
 $13 = $105;
 $106 = $14;
 $107 = $11;
 $108 = (+Math_cos((+$107)));
 $109 = $106 * $108;
 $110 = $15;
 $111 = $11;
 $112 = (+Math_sin((+$111)));
 $113 = $110 * $112;
 $114 = $13;
 $115 = (+Math_cos((+$114)));
 $116 = $113 * $115;
 $117 = $109 + $116;
 $118 = (+Math_asin((+$117)));
 $119 = ((($4)) + 8|0);
 HEAPF64[$119>>3] = $118;
 $120 = $13;
 $121 = (+Math_sin((+$120)));
 $122 = $15;
 $123 = $11;
 $124 = (+Math_tan((+$123)));
 $125 = $122 / $124;
 $126 = $14;
 $127 = $13;
 $128 = (+Math_cos((+$127)));
 $129 = $126 * $128;
 $130 = $125 - $129;
 $131 = (+Math_atan2((+$121),(+$130)));
 HEAPF64[$4>>3] = $131;
 $132 = $17;
 $133 = ($132|0)!=(0);
 $134 = +HEAPF64[$4>>3];
 if ($133) {
  $135 = $134 - 1.9198621771937625;
  HEAPF64[$4>>3] = $135;
 } else {
  $136 = -0.34894976726250682 - $134;
  HEAPF64[$4>>3] = $136;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_56($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0;
 var $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 88|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $18 = $3;
 $19 = ((($18)) + 416|0);
 $20 = HEAP32[$19>>2]|0;
 $5 = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_cos((+$22)));
 $6 = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_sin((+$25)));
 $7 = $26;
 $27 = +HEAPF64[$1>>3];
 $28 = -0.34894976726250682 - $27;
 $15 = $28;
 $29 = (+Math_cos((+$28)));
 $14 = $29;
 $30 = $15;
 $31 = (+Math_sin((+$30)));
 $15 = $31;
 $32 = ((($1)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (+Math_abs((+$33)));
 $35 = $34 - 1.5707963267948966;
 $36 = (+Math_abs((+$35)));
 $37 = $36 < 1.0E-10;
 if ($37) {
  $38 = ((($1)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $39 < 0.0;
  $41 = $40 ? 3.1415926535897931 : 0.0;
  $11 = $41;
  $8 = inf;
 } else {
  $42 = $7;
  $43 = $6;
  $44 = $42 / $43;
  $8 = $44;
  $45 = $15;
  $46 = $8;
  $47 = $14;
  $48 = $46 - $47;
  $49 = 0.70710678118654757 * $48;
  $50 = (+Math_atan2((+$45),(+$49)));
  $11 = $50;
 }
 $51 = $11;
 $52 = $51 > 1.8226184385618593;
 $53 = $52&1;
 $17 = $53;
 if ($52) {
  $54 = +HEAPF64[$1>>3];
  $55 = $54 + 1.9198621771937625;
  $15 = $55;
  $56 = (+Math_cos((+$55)));
  $14 = $56;
  $57 = $15;
  $58 = (+Math_sin((+$57)));
  $15 = $58;
  $59 = $7;
  $60 = -0.34202014332566871 * $59;
  $61 = $6;
  $62 = 0.93969262078590842 * $61;
  $63 = $14;
  $64 = $62 * $63;
  $65 = $60 + $64;
  $12 = $65;
  $66 = $12;
  $67 = (+Math_abs((+$66)));
  $68 = $67 > 1.0;
  $69 = $12;
  do {
   if ($68) {
    $70 = (+Math_abs((+$69)));
    $71 = $70 > 1.0000000010000001;
    if (!($71)) {
     $74 = $12;
     $75 = $74 < 0.0;
     $76 = $75 ? -1.0 : 1.0;
     $12 = $76;
     break;
    }
    $72 = $3;
    $73 = HEAP32[$72>>2]|0;
    _pj_ctx_set_errno($73,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   } else {
    $77 = (+Math_acos((+$69)));
    $12 = $77;
   }
  } while(0);
  $78 = $8;
  $79 = $78 != inf;
  if ($79) {
   $80 = $15;
   $81 = $8;
   $82 = 0.93969262078590842 * $81;
   $83 = $14;
   $84 = -0.34202014332566871 * $83;
   $85 = $82 - $84;
   $86 = (+Math_atan2((+$80),(+$85)));
   $11 = $86;
  }
  $13 = 0.81650043674686368;
  $87 = ((($4)) + 8|0);
  HEAPF64[$87>>3] = 1.2070912152156872;
 } else {
  $88 = $7;
  $89 = $6;
  $90 = $14;
  $91 = $89 * $90;
  $92 = $88 + $91;
  $93 = 0.70710678118654757 * $92;
  $12 = $93;
  $94 = $12;
  $95 = (+Math_abs((+$94)));
  $96 = $95 > 1.0;
  $97 = $12;
  do {
   if ($96) {
    $98 = (+Math_abs((+$97)));
    $99 = $98 > 1.0000000010000001;
    if (!($99)) {
     $102 = $12;
     $103 = $102 < 0.0;
     $104 = $103 ? -1.0 : 1.0;
     $12 = $104;
     break;
    }
    $100 = $3;
    $101 = HEAP32[$100>>2]|0;
    _pj_ctx_set_errno($101,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   } else {
    $105 = (+Math_acos((+$97)));
    $12 = $105;
   }
  } while(0);
  $13 = 1.8226184385618593;
  $106 = ((($4)) + 8|0);
  HEAPF64[$106>>3] = -1.2070912152156872;
 }
 $107 = $12;
 $108 = $107 < 0.0;
 if ($108) {
  $109 = $3;
  $110 = HEAP32[$109>>2]|0;
  _pj_ctx_set_errno($110,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $111 = $12;
 $112 = 0.5 * $111;
 $113 = (+Math_tan((+$112)));
 $114 = (+Math_pow((+$113),0.63055844881274692));
 $9 = $114;
 $115 = 1.8972474256746104 * $114;
 $16 = $115;
 $116 = $12;
 $117 = 1.8151424220741028 - $116;
 $118 = 0.5 * $117;
 $10 = $118;
 $119 = $118 < 0.0;
 if ($119) {
  $120 = $3;
  $121 = HEAP32[$120>>2]|0;
  _pj_ctx_set_errno($121,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $122 = $9;
 $123 = $10;
 $124 = (+Math_pow((+$123),0.63055844881274692));
 $125 = $122 + $124;
 $126 = $125 / 1.2724657826708901;
 $10 = $126;
 $127 = $10;
 $128 = (+Math_abs((+$127)));
 $129 = $128 > 1.0;
 $130 = $10;
 do {
  if ($129) {
   $131 = (+Math_abs((+$130)));
   $132 = $131 > 1.0000000010000001;
   if (!($132)) {
    $135 = $10;
    $136 = $135 < 0.0;
    $137 = $136 ? -1.0 : 1.0;
    $10 = $137;
    break;
   }
   $133 = $3;
   $134 = HEAP32[$133>>2]|0;
   _pj_ctx_set_errno($134,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $138 = (+Math_acos((+$130)));
   $10 = $138;
  }
 } while(0);
 $139 = $13;
 $140 = $11;
 $141 = $139 - $140;
 $142 = 0.63055844881274692 * $141;
 $9 = $142;
 $143 = (+Math_abs((+$142)));
 $144 = $10;
 $145 = $143 < $144;
 if ($145) {
  $146 = $10;
  $147 = $17;
  $148 = ($147|0)!=(0);
  $149 = $9;
  $150 = -$149;
  $151 = $148 ? $149 : $150;
  $152 = $146 + $151;
  $153 = (+Math_cos((+$152)));
  $154 = $16;
  $155 = $154 / $153;
  $16 = $155;
 }
 $156 = $16;
 $157 = $9;
 $158 = (+Math_sin((+$157)));
 $159 = $156 * $158;
 HEAPF64[$4>>3] = $159;
 $160 = $17;
 $161 = ($160|0)!=(0);
 $162 = $16;
 $163 = -$162;
 $164 = $161 ? $163 : $162;
 $165 = $9;
 $166 = (+Math_cos((+$165)));
 $167 = $164 * $166;
 $168 = ((($4)) + 8|0);
 $169 = +HEAPF64[$168>>3];
 $170 = $169 + $167;
 HEAPF64[$168>>3] = $170;
 $171 = $5;
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)!=(0);
 if ($173) {
  $174 = +HEAPF64[$4>>3];
  $9 = $174;
  $175 = +HEAPF64[$4>>3];
  $176 = -$175;
  $177 = $176 * 0.69691523038678371;
  $178 = ((($4)) + 8|0);
  $179 = +HEAPF64[$178>>3];
  $180 = $179 * 0.71715351331143606;
  $181 = $177 - $180;
  HEAPF64[$4>>3] = $181;
  $182 = ((($4)) + 8|0);
  $183 = +HEAPF64[$182>>3];
  $184 = -$183;
  $185 = $184 * 0.69691523038678371;
  $186 = $9;
  $187 = $186 * 0.71715351331143606;
  $188 = $185 + $187;
  $189 = ((($4)) + 8|0);
  HEAPF64[$189>>3] = $188;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_bonne($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_bonne($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 195;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9862;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_bonne($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,40)|0);
 $4 = $6;
 $7 = $4;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_58($9)|0);
  $1 = $10;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 $11 = $4;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 _pj_param($5,$15,$18,15081);
 $19 = +HEAPF64[$5>>3];
 $20 = $4;
 HEAPF64[$20>>3] = $19;
 $21 = $4;
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_abs((+$22)));
 $24 = $23 < 1.0E-10;
 $25 = $2;
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  _pj_ctx_set_errno($26,-23);
  $27 = $2;
  _freeup_57($27);
  $1 = 0;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 $28 = ((($25)) + 72|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 != 0.0;
 if ($30) {
  $31 = $2;
  $32 = ((($31)) + 72|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (_pj_enfn($33)|0);
  $35 = $4;
  $36 = ((($35)) + 32|0);
  HEAP32[$36>>2] = $34;
  $37 = $4;
  $38 = +HEAPF64[$37>>3];
  $39 = $4;
  $40 = +HEAPF64[$39>>3];
  $41 = (+Math_sin((+$40)));
  $42 = $4;
  $43 = ((($42)) + 16|0);
  HEAPF64[$43>>3] = $41;
  $44 = $4;
  $45 = +HEAPF64[$44>>3];
  $46 = (+Math_cos((+$45)));
  $3 = $46;
  $47 = $4;
  $48 = ((($47)) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (+_pj_mlfn($38,$41,$46,$49));
  $51 = $4;
  $52 = ((($51)) + 24|0);
  HEAPF64[$52>>3] = $50;
  $53 = $3;
  $54 = $2;
  $55 = ((($54)) + 72|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $4;
  $58 = ((($57)) + 16|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $56 * $59;
  $61 = $4;
  $62 = ((($61)) + 16|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $60 * $63;
  $65 = 1.0 - $64;
  $66 = (+Math_sqrt((+$65)));
  $67 = $4;
  $68 = ((($67)) + 16|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $66 * $69;
  $71 = $53 / $70;
  $72 = $4;
  $73 = ((($72)) + 16|0);
  HEAPF64[$73>>3] = $71;
  $74 = $2;
  $75 = ((($74)) + 8|0);
  HEAP32[$75>>2] = 196;
  $76 = $2;
  $77 = ((($76)) + 4|0);
  HEAP32[$77>>2] = 197;
 } else {
  $78 = $4;
  $79 = +HEAPF64[$78>>3];
  $80 = (+Math_abs((+$79)));
  $81 = $80 + 1.0E-10;
  $82 = $81 >= 1.5707963267948966;
  $83 = $4;
  if ($82) {
   $84 = ((($83)) + 8|0);
   HEAPF64[$84>>3] = 0.0;
  } else {
   $85 = +HEAPF64[$83>>3];
   $86 = (+Math_tan((+$85)));
   $87 = 1.0 / $86;
   $88 = $4;
   $89 = ((($88)) + 8|0);
   HEAPF64[$89>>3] = $87;
  }
  $90 = $2;
  $91 = ((($90)) + 8|0);
  HEAP32[$91>>2] = 198;
  $92 = $2;
  $93 = ((($92)) + 4|0);
  HEAP32[$93>>2] = 199;
 }
 $94 = $2;
 $1 = $94;
 $95 = $1;
 STACKTOP = sp;return ($95|0);
}
function _freeup_57($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_58($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_58($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _e_inverse_60($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = +HEAPF64[$1>>3];
 $12 = $5;
 $13 = ((($12)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 - $16;
 $18 = ((($1)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = (+_hypot($11,$17));
 $7 = $19;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = ((($22)) + 16|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $5;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 + $27;
 $29 = $7;
 $30 = $28 - $29;
 $31 = $3;
 $32 = ((($31)) + 72|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $5;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+_pj_inv_mlfn($21,$30,$33,$36));
 $38 = ((($4)) + 8|0);
 HEAPF64[$38>>3] = $37;
 $39 = ((($4)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = (+Math_abs((+$40)));
 $6 = $41;
 $42 = $41 < 1.5707963267948966;
 do {
  if ($42) {
   $43 = ((($4)) + 8|0);
   $44 = +HEAPF64[$43>>3];
   $45 = (+Math_sin((+$44)));
   $6 = $45;
   $46 = $7;
   $47 = +HEAPF64[$1>>3];
   $48 = ((($1)) + 8|0);
   $49 = +HEAPF64[$48>>3];
   $50 = (+Math_atan2((+$47),(+$49)));
   $51 = $46 * $50;
   $52 = $3;
   $53 = ((($52)) + 72|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $6;
   $56 = $54 * $55;
   $57 = $6;
   $58 = $56 * $57;
   $59 = 1.0 - $58;
   $60 = (+Math_sqrt((+$59)));
   $61 = $51 * $60;
   $62 = ((($4)) + 8|0);
   $63 = +HEAPF64[$62>>3];
   $64 = (+Math_cos((+$63)));
   $65 = $61 / $64;
   HEAPF64[$4>>3] = $65;
  } else {
   $66 = $6;
   $67 = $66 - 1.5707963267948966;
   $68 = (+Math_abs((+$67)));
   $69 = $68 <= 1.0E-10;
   if ($69) {
    HEAPF64[$4>>3] = 0.0;
    break;
   }
   $70 = $3;
   $71 = HEAP32[$70>>2]|0;
   _pj_ctx_set_errno($71,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_61($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = ((($12)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $5;
 $16 = ((($15)) + 24|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $14 + $17;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_sin((+$22)));
 $7 = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_cos((+$25)));
 $8 = $26;
 $27 = $5;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (+_pj_mlfn($20,$23,$26,$29));
 $31 = $18 - $30;
 $6 = $31;
 $32 = $8;
 $33 = +HEAPF64[$1>>3];
 $34 = $32 * $33;
 $35 = $6;
 $36 = $3;
 $37 = ((($36)) + 72|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $7;
 $40 = $38 * $39;
 $41 = $7;
 $42 = $40 * $41;
 $43 = 1.0 - $42;
 $44 = (+Math_sqrt((+$43)));
 $45 = $35 * $44;
 $46 = $34 / $45;
 $7 = $46;
 $47 = $6;
 $48 = $7;
 $49 = (+Math_sin((+$48)));
 $50 = $47 * $49;
 HEAPF64[$4>>3] = $50;
 $51 = $5;
 $52 = ((($51)) + 16|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $6;
 $55 = $7;
 $56 = (+Math_cos((+$55)));
 $57 = $54 * $56;
 $58 = $53 - $57;
 $59 = ((($4)) + 8|0);
 HEAPF64[$59>>3] = $58;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_62($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = +HEAPF64[$1>>3];
 $11 = $5;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 - $15;
 $17 = ((($1)) + 8|0);
 HEAPF64[$17>>3] = $16;
 $18 = (+_hypot($10,$16));
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $5;
 $23 = +HEAPF64[$22>>3];
 $24 = $21 + $23;
 $25 = $6;
 $26 = $24 - $25;
 $27 = ((($4)) + 8|0);
 HEAPF64[$27>>3] = $26;
 $28 = ((($4)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+Math_abs((+$29)));
 $31 = $30 > 1.5707963267948966;
 if ($31) {
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  _pj_ctx_set_errno($33,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $34 = ((($4)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = (+Math_abs((+$35)));
 $37 = $36 - 1.5707963267948966;
 $38 = (+Math_abs((+$37)));
 $39 = $38 <= 1.0E-10;
 if ($39) {
  HEAPF64[$4>>3] = 0.0;
 } else {
  $40 = $6;
  $41 = +HEAPF64[$1>>3];
  $42 = ((($1)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (+Math_atan2((+$41),(+$43)));
  $45 = $40 * $44;
  $46 = ((($4)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = (+Math_cos((+$47)));
  $49 = $45 / $48;
  HEAPF64[$4>>3] = $49;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_63($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $5;
 $15 = +HEAPF64[$14>>3];
 $16 = $13 + $15;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 - $18;
 $7 = $19;
 $20 = $7;
 $21 = (+Math_abs((+$20)));
 $22 = $21 > 1.0E-10;
 if ($22) {
  $23 = $7;
  $24 = +HEAPF64[$1>>3];
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (+Math_cos((+$26)));
  $28 = $24 * $27;
  $29 = $7;
  $30 = $28 / $29;
  $6 = $30;
  $31 = (+Math_sin((+$30)));
  $32 = $23 * $31;
  HEAPF64[$4>>3] = $32;
  $33 = $5;
  $34 = ((($33)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = $6;
  $38 = (+Math_cos((+$37)));
  $39 = $36 * $38;
  $40 = $35 - $39;
  $41 = ((($4)) + 8|0);
  HEAPF64[$41>>3] = $40;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $42 = ((($4)) + 8|0);
  HEAPF64[$42>>3] = 0.0;
  HEAPF64[$4>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_eqdc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eqdc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 200;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9909;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eqdc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $2 = $0;
 $11 = (_pj_calloc(1,56)|0);
 $6 = $11;
 $12 = $6;
 $13 = (0|0)==($12|0);
 if ($13) {
  $14 = $2;
  $15 = (_freeup_new_65($14)|0);
  $1 = $15;
  $197 = $1;
  STACKTOP = sp;return ($197|0);
 }
 $16 = $6;
 $17 = $2;
 $18 = ((($17)) + 416|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 _pj_param($7,$20,$23,15081);
 $24 = +HEAPF64[$7>>3];
 $25 = $6;
 HEAPF64[$25>>3] = $24;
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 _pj_param($8,$27,$30,12667);
 $31 = +HEAPF64[$8>>3];
 $32 = $6;
 $33 = ((($32)) + 8|0);
 HEAPF64[$33>>3] = $31;
 $34 = $6;
 $35 = +HEAPF64[$34>>3];
 $36 = $6;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $35 + $38;
 $40 = (+Math_abs((+$39)));
 $41 = $40 < 1.0E-10;
 $42 = $2;
 if ($41) {
  $43 = HEAP32[$42>>2]|0;
  _pj_ctx_set_errno($43,-21);
  $44 = $2;
  _freeup_64($44);
  $1 = 0;
  $197 = $1;
  STACKTOP = sp;return ($197|0);
 }
 $45 = ((($42)) + 72|0);
 $46 = +HEAPF64[$45>>3];
 $47 = (_pj_enfn($46)|0);
 $48 = $6;
 $49 = ((($48)) + 48|0);
 HEAP32[$49>>2] = $47;
 $50 = ($47|0)!=(0|0);
 if (!($50)) {
  $51 = $2;
  _freeup_64($51);
  $1 = 0;
  $197 = $1;
  STACKTOP = sp;return ($197|0);
 }
 $52 = $6;
 $53 = +HEAPF64[$52>>3];
 $54 = (+Math_sin((+$53)));
 $4 = $54;
 $55 = $6;
 $56 = ((($55)) + 16|0);
 HEAPF64[$56>>3] = $54;
 $57 = $6;
 $58 = +HEAPF64[$57>>3];
 $59 = (+Math_cos((+$58)));
 $3 = $59;
 $60 = $6;
 $61 = +HEAPF64[$60>>3];
 $62 = $6;
 $63 = ((($62)) + 8|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $61 - $64;
 $66 = (+Math_abs((+$65)));
 $67 = $66 >= 1.0E-10;
 $68 = $67&1;
 $5 = $68;
 $69 = $2;
 $70 = ((($69)) + 72|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71 > 0.0;
 $73 = $72&1;
 $74 = $6;
 $75 = ((($74)) + 52|0);
 HEAP32[$75>>2] = $73;
 if ($72) {
  $76 = $4;
  $77 = $3;
  $78 = $2;
  $79 = ((($78)) + 72|0);
  $80 = +HEAPF64[$79>>3];
  $81 = (+_pj_msfn($76,$77,$80));
  $10 = $81;
  $82 = $6;
  $83 = +HEAPF64[$82>>3];
  $84 = $4;
  $85 = $3;
  $86 = $6;
  $87 = ((($86)) + 48|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (+_pj_mlfn($83,$84,$85,$88));
  $9 = $89;
  $90 = $5;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $6;
   $93 = ((($92)) + 8|0);
   $94 = +HEAPF64[$93>>3];
   $95 = (+Math_sin((+$94)));
   $4 = $95;
   $96 = $6;
   $97 = ((($96)) + 8|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (+Math_cos((+$98)));
   $3 = $99;
   $100 = $10;
   $101 = $4;
   $102 = $3;
   $103 = $2;
   $104 = ((($103)) + 72|0);
   $105 = +HEAPF64[$104>>3];
   $106 = (+_pj_msfn($101,$102,$105));
   $107 = $100 - $106;
   $108 = $6;
   $109 = ((($108)) + 8|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $4;
   $112 = $3;
   $113 = $6;
   $114 = ((($113)) + 48|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (+_pj_mlfn($110,$111,$112,$115));
   $117 = $9;
   $118 = $116 - $117;
   $119 = $107 / $118;
   $120 = $6;
   $121 = ((($120)) + 16|0);
   HEAPF64[$121>>3] = $119;
  }
  $122 = $9;
  $123 = $10;
  $124 = $6;
  $125 = ((($124)) + 16|0);
  $126 = +HEAPF64[$125>>3];
  $127 = $123 / $126;
  $128 = $122 + $127;
  $129 = $6;
  $130 = ((($129)) + 40|0);
  HEAPF64[$130>>3] = $128;
  $131 = $6;
  $132 = ((($131)) + 40|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $2;
  $135 = ((($134)) + 128|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $2;
  $138 = ((($137)) + 128|0);
  $139 = +HEAPF64[$138>>3];
  $140 = (+Math_sin((+$139)));
  $141 = $2;
  $142 = ((($141)) + 128|0);
  $143 = +HEAPF64[$142>>3];
  $144 = (+Math_cos((+$143)));
  $145 = $6;
  $146 = ((($145)) + 48|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (+_pj_mlfn($136,$140,$144,$147));
  $149 = $133 - $148;
  $150 = $6;
  $151 = ((($150)) + 32|0);
  HEAPF64[$151>>3] = $149;
 } else {
  $152 = $5;
  $153 = ($152|0)!=(0);
  if ($153) {
   $154 = $3;
   $155 = $6;
   $156 = ((($155)) + 8|0);
   $157 = +HEAPF64[$156>>3];
   $158 = (+Math_cos((+$157)));
   $159 = $154 - $158;
   $160 = $6;
   $161 = ((($160)) + 8|0);
   $162 = +HEAPF64[$161>>3];
   $163 = $6;
   $164 = +HEAPF64[$163>>3];
   $165 = $162 - $164;
   $166 = $159 / $165;
   $167 = $6;
   $168 = ((($167)) + 16|0);
   HEAPF64[$168>>3] = $166;
  }
  $169 = $6;
  $170 = +HEAPF64[$169>>3];
  $171 = $6;
  $172 = +HEAPF64[$171>>3];
  $173 = (+Math_cos((+$172)));
  $174 = $6;
  $175 = ((($174)) + 16|0);
  $176 = +HEAPF64[$175>>3];
  $177 = $173 / $176;
  $178 = $170 + $177;
  $179 = $6;
  $180 = ((($179)) + 40|0);
  HEAPF64[$180>>3] = $178;
  $181 = $6;
  $182 = ((($181)) + 40|0);
  $183 = +HEAPF64[$182>>3];
  $184 = $2;
  $185 = ((($184)) + 128|0);
  $186 = +HEAPF64[$185>>3];
  $187 = $183 - $186;
  $188 = $6;
  $189 = ((($188)) + 32|0);
  HEAPF64[$189>>3] = $187;
 }
 $190 = $2;
 $191 = ((($190)) + 8|0);
 HEAP32[$191>>2] = 201;
 $192 = $2;
 $193 = ((($192)) + 4|0);
 HEAP32[$193>>2] = 202;
 $194 = $2;
 $195 = ((($194)) + 20|0);
 HEAP32[$195>>2] = 203;
 $196 = $2;
 $1 = $196;
 $197 = $1;
 STACKTOP = sp;return ($197|0);
}
function _freeup_64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_65($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_65($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 416|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  (_pj_dealloc($20)|0);
 }
 $21 = $2;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 (_pj_dealloc($23)|0);
 $24 = $2;
 $25 = (_pj_dealloc($24)|0);
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _e_inverse_68($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = $5;
 $11 = ((($10)) + 32|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $12 - $14;
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = (+_hypot($9,$15));
 $18 = $5;
 $19 = ((($18)) + 24|0);
 HEAPF64[$19>>3] = $17;
 $20 = $17 != 0.0;
 if (!($20)) {
  HEAPF64[$4>>3] = 0.0;
  $69 = $5;
  $70 = ((($69)) + 16|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 > 0.0;
  $73 = $72 ? 1.5707963267948966 : -1.5707963267948966;
  $74 = ((($4)) + 8|0);
  HEAPF64[$74>>3] = $73;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = ((($21)) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 < 0.0;
 if ($24) {
  $25 = $5;
  $26 = ((($25)) + 24|0);
  $27 = +HEAPF64[$26>>3];
  $28 = -$27;
  $29 = $5;
  $30 = ((($29)) + 24|0);
  HEAPF64[$30>>3] = $28;
  $31 = +HEAPF64[$1>>3];
  $32 = -$31;
  HEAPF64[$1>>3] = $32;
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = -$34;
  $36 = ((($1)) + 8|0);
  HEAPF64[$36>>3] = $35;
 }
 $37 = $5;
 $38 = ((($37)) + 40|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $5;
 $41 = ((($40)) + 24|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $39 - $42;
 $44 = ((($4)) + 8|0);
 HEAPF64[$44>>3] = $43;
 $45 = $5;
 $46 = ((($45)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $3;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($4)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $3;
  $54 = ((($53)) + 72|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $5;
  $57 = ((($56)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (+_pj_inv_mlfn($50,$52,$55,$58));
  $60 = ((($4)) + 8|0);
  HEAPF64[$60>>3] = $59;
 }
 $61 = +HEAPF64[$1>>3];
 $62 = ((($1)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = (+Math_atan2((+$61),(+$63)));
 $65 = $5;
 $66 = ((($65)) + 16|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $64 / $67;
 HEAPF64[$4>>3] = $68;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_69($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 40|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $5;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 if ($15) {
  $18 = ((($1)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (+Math_sin((+$19)));
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_cos((+$22)));
  $24 = $5;
  $25 = ((($24)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+_pj_mlfn($17,$20,$23,$26));
  $29 = $27;
 } else {
  $29 = $17;
 }
 $28 = $11 - $29;
 $30 = $5;
 $31 = ((($30)) + 24|0);
 HEAPF64[$31>>3] = $28;
 $32 = $5;
 $33 = ((($32)) + 24|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $5;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = +HEAPF64[$1>>3];
 $39 = $38 * $37;
 HEAPF64[$1>>3] = $39;
 $40 = (+Math_sin((+$39)));
 $41 = $34 * $40;
 HEAPF64[$4>>3] = $41;
 $42 = $5;
 $43 = ((($42)) + 32|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $5;
 $46 = ((($45)) + 24|0);
 $47 = +HEAPF64[$46>>3];
 $48 = +HEAPF64[$1>>3];
 $49 = (+Math_cos((+$48)));
 $50 = $47 * $49;
 $51 = $44 - $50;
 $52 = ((($4)) + 8|0);
 HEAPF64[$52>>3] = $51;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _special($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $1;
 $4 = $2;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($0)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_sin((+$12)));
 $6 = $13;
 $14 = ((($0)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_cos((+$15)));
 $7 = $16;
 $17 = $4;
 $18 = ((($17)) + 96|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 | 4;
 HEAP32[$18>>2] = $20;
 $21 = $4;
 $22 = ((($21)) + 32|0);
 HEAPF64[$22>>3] = 1.0;
 $23 = $5;
 $24 = ((($23)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = ((($26)) + 40|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $5;
 $30 = ((($29)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0);
 $33 = ((($0)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 if ($32) {
  $35 = $6;
  $36 = $7;
  $37 = $5;
  $38 = ((($37)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+_pj_mlfn($34,$35,$36,$39));
  $42 = $40;
 } else {
  $42 = $34;
 }
 $41 = $28 - $42;
 $43 = $25 * $41;
 $44 = $6;
 $45 = $7;
 $46 = $3;
 $47 = ((($46)) + 72|0);
 $48 = +HEAPF64[$47>>3];
 $49 = (+_pj_msfn($44,$45,$48));
 $50 = $43 / $49;
 $51 = $4;
 $52 = ((($51)) + 40|0);
 HEAPF64[$52>>3] = $50;
 STACKTOP = sp;return;
}
function _pj_isea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_isea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 204;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 9958;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_isea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $5 = sp + 128|0;
 $6 = sp + 120|0;
 $7 = sp + 112|0;
 $8 = sp + 104|0;
 $9 = sp + 96|0;
 $10 = sp + 88|0;
 $11 = sp + 80|0;
 $12 = sp + 72|0;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 16|0;
 $20 = sp + 8|0;
 $21 = sp;
 $2 = $0;
 $22 = (_pj_calloc(1,72)|0);
 $4 = $22;
 $23 = $4;
 $24 = (0|0)==($23|0);
 if ($24) {
  $25 = $2;
  $26 = (_freeup_new_71($25)|0);
  $1 = $26;
  $204 = $1;
  STACKTOP = sp;return ($204|0);
 }
 $27 = $4;
 $28 = $2;
 $29 = ((($28)) + 416|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 205;
 $32 = $4;
 (_isea_grid_init($32)|0);
 $33 = $4;
 $34 = ((($33)) + 56|0);
 HEAP32[$34>>2] = 4;
 $35 = $2;
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 _pj_param($5,$36,$39,9993);
 $40 = HEAP32[$5>>2]|0;
 $3 = $40;
 $41 = $3;
 $42 = ($41|0)!=(0|0);
 do {
  if ($42) {
   $43 = $3;
   $44 = (_strcmp($43,17590)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    $46 = $4;
    (_isea_orient_isea($46)|0);
    break;
   }
   $47 = $3;
   $48 = (_strcmp($47,10001)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    $50 = $4;
    (_isea_orient_pole($50)|0);
    break;
   }
   $51 = $2;
   $52 = HEAP32[$51>>2]|0;
   _pj_ctx_set_errno($52,-34);
   $53 = $2;
   _freeup_70($53);
   $1 = 0;
   $204 = $1;
   STACKTOP = sp;return ($204|0);
  }
 } while(0);
 $54 = $2;
 $55 = HEAP32[$54>>2]|0;
 $56 = $2;
 $57 = ((($56)) + 32|0);
 $58 = HEAP32[$57>>2]|0;
 _pj_param($6,$55,$58,10006);
 $59 = HEAP32[$6>>2]|0;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $2;
  $62 = HEAP32[$61>>2]|0;
  $63 = $2;
  $64 = ((($63)) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  _pj_param($7,$62,$65,11019);
  $66 = +HEAPF64[$7>>3];
  $67 = $4;
  $68 = ((($67)) + 24|0);
  HEAPF64[$68>>3] = $66;
 }
 $69 = $2;
 $70 = HEAP32[$69>>2]|0;
 $71 = $2;
 $72 = ((($71)) + 32|0);
 $73 = HEAP32[$72>>2]|0;
 _pj_param($8,$70,$73,10257);
 $74 = HEAP32[$8>>2]|0;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $2;
  $77 = HEAP32[$76>>2]|0;
  $78 = $2;
  $79 = ((($78)) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  _pj_param($9,$77,$80,17180);
  $81 = +HEAPF64[$9>>3];
  $82 = $4;
  $83 = ((($82)) + 16|0);
  HEAPF64[$83>>3] = $81;
 }
 $84 = $2;
 $85 = HEAP32[$84>>2]|0;
 $86 = $2;
 $87 = ((($86)) + 32|0);
 $88 = HEAP32[$87>>2]|0;
 _pj_param($10,$85,$88,12916);
 $89 = HEAP32[$10>>2]|0;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $2;
  $92 = HEAP32[$91>>2]|0;
  $93 = $2;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  _pj_param($11,$92,$95,17187);
  $96 = +HEAPF64[$11>>3];
  $97 = $4;
  $98 = ((($97)) + 8|0);
  HEAPF64[$98>>3] = $96;
 }
 $99 = $2;
 $100 = HEAP32[$99>>2]|0;
 $101 = $2;
 $102 = ((($101)) + 32|0);
 $103 = HEAP32[$102>>2]|0;
 _pj_param($12,$100,$103,10011);
 $104 = HEAP32[$12>>2]|0;
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $2;
  $107 = HEAP32[$106>>2]|0;
  $108 = $2;
  $109 = ((($108)) + 32|0);
  $110 = HEAP32[$109>>2]|0;
  _pj_param($13,$107,$110,10021);
  $111 = HEAP32[$13>>2]|0;
  $112 = $4;
  $113 = ((($112)) + 40|0);
  HEAP32[$113>>2] = $111;
 }
 $114 = $2;
 $115 = HEAP32[$114>>2]|0;
 $116 = $2;
 $117 = ((($116)) + 32|0);
 $118 = HEAP32[$117>>2]|0;
 _pj_param($14,$115,$118,10031);
 $119 = HEAP32[$14>>2]|0;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $2;
  $122 = HEAP32[$121>>2]|0;
  $123 = $2;
  $124 = ((($123)) + 32|0);
  $125 = HEAP32[$124>>2]|0;
  _pj_param($15,$122,$125,10043);
  $126 = HEAP32[$15>>2]|0;
  $127 = $4;
  $128 = ((($127)) + 44|0);
  HEAP32[$128>>2] = $126;
 }
 $129 = $2;
 $130 = HEAP32[$129>>2]|0;
 $131 = $2;
 $132 = ((($131)) + 32|0);
 $133 = HEAP32[$132>>2]|0;
 _pj_param($16,$130,$133,10055);
 $134 = HEAP32[$16>>2]|0;
 $3 = $134;
 $135 = $3;
 $136 = ($135|0)!=(0|0);
 do {
  if ($136) {
   $137 = $3;
   $138 = (_strcmp($137,10061)|0);
   $139 = ($138|0)!=(0);
   if (!($139)) {
    $140 = $4;
    $141 = ((($140)) + 56|0);
    HEAP32[$141>>2] = 4;
    break;
   }
   $142 = $3;
   $143 = (_strcmp($142,10067)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    $145 = $4;
    $146 = ((($145)) + 56|0);
    HEAP32[$146>>2] = 1;
    break;
   }
   $147 = $3;
   $148 = (_strcmp($147,10070)|0);
   $149 = ($148|0)!=(0);
   if (!($149)) {
    $150 = $4;
    $151 = ((($150)) + 56|0);
    HEAP32[$151>>2] = 5;
    break;
   }
   $152 = $3;
   $153 = (_strcmp($152,10073)|0);
   $154 = ($153|0)!=(0);
   if (!($154)) {
    $155 = $4;
    $156 = ((($155)) + 56|0);
    HEAP32[$156>>2] = 8;
    break;
   }
   $157 = $2;
   $158 = HEAP32[$157>>2]|0;
   _pj_ctx_set_errno($158,-34);
   $159 = $2;
   _freeup_70($159);
   $1 = 0;
   $204 = $1;
   STACKTOP = sp;return ($204|0);
  }
 } while(0);
 $160 = $2;
 $161 = HEAP32[$160>>2]|0;
 $162 = $2;
 $163 = ((($162)) + 32|0);
 $164 = HEAP32[$163>>2]|0;
 _pj_param($17,$161,$164,10077);
 $165 = HEAP32[$17>>2]|0;
 $166 = ($165|0)!=(0);
 if ($166) {
  $167 = $4;
  $168 = ((($167)) + 48|0);
  HEAPF64[$168>>3] = 0.83015728578375947;
 }
 $169 = $2;
 $170 = HEAP32[$169>>2]|0;
 $171 = $2;
 $172 = ((($171)) + 32|0);
 $173 = HEAP32[$172>>2]|0;
 _pj_param($18,$170,$173,10031);
 $174 = HEAP32[$18>>2]|0;
 $175 = ($174|0)!=(0);
 if ($175) {
  $176 = $2;
  $177 = HEAP32[$176>>2]|0;
  $178 = $2;
  $179 = ((($178)) + 32|0);
  $180 = HEAP32[$179>>2]|0;
  _pj_param($19,$177,$180,10043);
  $181 = HEAP32[$19>>2]|0;
  $182 = $4;
  $183 = ((($182)) + 44|0);
  HEAP32[$183>>2] = $181;
 } else {
  $184 = $4;
  $185 = ((($184)) + 44|0);
  HEAP32[$185>>2] = 4;
 }
 $186 = $2;
 $187 = HEAP32[$186>>2]|0;
 $188 = $2;
 $189 = ((($188)) + 32|0);
 $190 = HEAP32[$189>>2]|0;
 _pj_param($20,$187,$190,10011);
 $191 = HEAP32[$20>>2]|0;
 $192 = ($191|0)!=(0);
 if ($192) {
  $193 = $2;
  $194 = HEAP32[$193>>2]|0;
  $195 = $2;
  $196 = ((($195)) + 32|0);
  $197 = HEAP32[$196>>2]|0;
  _pj_param($21,$194,$197,10021);
  $198 = HEAP32[$21>>2]|0;
  $199 = $4;
  $200 = ((($199)) + 40|0);
  HEAP32[$200>>2] = $198;
 } else {
  $201 = $4;
  $202 = ((($201)) + 40|0);
  HEAP32[$202>>2] = 3;
 }
 $203 = $2;
 $1 = $203;
 $204 = $1;
 STACKTOP = sp;return ($204|0);
}
function _freeup_70($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_71($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_71($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_72($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 HEAPF64[$7>>3] = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($7)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = $5;
 _isea_forward($8,$16,$7);
 ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
 $17 = +HEAPF64[$6>>3];
 HEAPF64[$4>>3] = $17;
 $18 = ((($6)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($4)) + 8|0);
 HEAPF64[$20>>3] = $19;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _isea_grid_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  HEAP32[$5>>2] = 20;
  $6 = $2;
  $7 = ((($6)) + 8|0);
  HEAPF64[$7>>3] = 1.0172219679233507;
  $8 = $2;
  $9 = ((($8)) + 16|0);
  HEAPF64[$9>>3] = 0.19634954084936207;
  $10 = $2;
  $11 = ((($10)) + 24|0);
  HEAPF64[$11>>3] = 0.0;
  $12 = $2;
  $13 = ((($12)) + 40|0);
  HEAP32[$13>>2] = 4;
  $14 = $2;
  $15 = ((($14)) + 44|0);
  HEAP32[$15>>2] = 6;
  $16 = $2;
  $17 = ((($16)) + 48|0);
  HEAPF64[$17>>3] = 1.0;
  $18 = $2;
  $19 = ((($18)) + 36|0);
  HEAP32[$19>>2] = 6;
  $1 = 1;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _isea_orient_isea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ((($5)) + 8|0);
  HEAPF64[$6>>3] = 1.0172219679233507;
  $7 = $2;
  $8 = ((($7)) + 16|0);
  HEAPF64[$8>>3] = 0.19634954084936207;
  $9 = $2;
  $10 = ((($9)) + 24|0);
  HEAPF64[$10>>3] = 0.0;
  $1 = 1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _isea_orient_pole($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ((($5)) + 8|0);
  HEAPF64[$6>>3] = 1.5707963267948966;
  $7 = $2;
  $8 = ((($7)) + 16|0);
  HEAPF64[$8>>3] = 0.0;
  $9 = $2;
  $10 = ((($9)) + 24|0);
  HEAPF64[$10>>3] = 0.0;
  $1 = 1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _isea_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $1;
 $4 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (_isea_transform($8,$9,$6)|0);
 $5 = $10;
 $11 = $3;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(4);
 if ($14) {
  $15 = $5;
  $16 = $3;
  $17 = ((($16)) + 48|0);
  $18 = +HEAPF64[$17>>3];
  (_isea_tri_plane($15,$6,$18)|0);
  ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
  STACKTOP = sp;return;
 }
 $19 = +HEAPF64[$6>>3];
 $20 = $3;
 $21 = ((($20)) + 48|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 / $22;
 $24 = $23 * 0.83015728578375947;
 HEAPF64[$6>>3] = $24;
 $25 = ((($6)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 48|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 / $29;
 $31 = $30 * 0.83015728578375947;
 $32 = ((($6)) + 8|0);
 HEAPF64[$32>>3] = $31;
 $33 = +HEAPF64[$6>>3];
 $34 = $33 + 0.5;
 HEAPF64[$6>>3] = $34;
 $35 = ((($6)) + 8|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 + 0.28867513459481287;
 HEAPF64[$35>>3] = $37;
 $38 = $3;
 $39 = ((($38)) + 56|0);
 $40 = HEAP32[$39>>2]|0;
 switch ($40|0) {
 case 8:  {
  $60 = $3;
  $61 = $5;
  (_isea_hex($60,$61,$6,$7)|0);
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $41 = $5;
  $42 = (_isea_ptdd($41,$6)|0);
  $43 = $3;
  $44 = ((($43)) + 64|0);
  HEAP32[$44>>2] = $42;
  break;
 }
 case 5:  {
  $45 = $5;
  $46 = (_isea_ptdd($45,$6)|0);
  $47 = $3;
  $48 = ((($47)) + 64|0);
  HEAP32[$48>>2] = $46;
  break;
 }
 case 1:  {
  $49 = $3;
  $50 = $5;
  $51 = (_isea_ptdi($49,$50,$6,$7)|0);
  $52 = $3;
  $53 = ((($52)) + 64|0);
  HEAP32[$53>>2] = $51;
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $54 = $3;
  $55 = $5;
  (_isea_ptdi($54,$55,$6,$7)|0);
  $56 = $3;
  $57 = $3;
  $58 = ((($57)) + 64|0);
  $59 = HEAP32[$58>>2]|0;
  (_isea_disn($56,$59,$7)|0);
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
 STACKTOP = sp;return;
}
function _isea_transform($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($7)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = $3;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 HEAPF64[$7>>3] = $16;
 $17 = $4;
 $18 = $3;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF64[$19>>3];
 _isea_ctran($9,$7,$17,$20);
 ;HEAP32[$6>>2]=HEAP32[$9>>2]|0;HEAP32[$6+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$9+12>>2]|0;
 $21 = $5;
 $22 = (_isea_snyder_forward($6,$21)|0);
 $8 = $22;
 $23 = $3;
 $24 = ((($23)) + 48|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = +HEAPF64[$26>>3];
 $28 = $27 * $25;
 HEAPF64[$26>>3] = $28;
 $29 = $3;
 $30 = ((($29)) + 48|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $5;
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 * $31;
 HEAPF64[$33>>3] = $35;
 $36 = $8;
 $37 = $3;
 $38 = ((($37)) + 60|0);
 HEAP32[$38>>2] = $36;
 $39 = $8;
 STACKTOP = sp;return ($39|0);
}
function _isea_tri_plane($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (($8) - 1)|0;
 $10 = (($9|0) / 5)&-1;
 $11 = (($10|0) % 2)&-1;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = $4;
  _isea_rotate($13,180.0);
 }
 $14 = $3;
 _isea_triangle_xy($7,$14);
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 $15 = $5;
 $16 = +HEAPF64[$6>>3];
 $17 = $16 * $15;
 HEAPF64[$6>>3] = $17;
 $18 = $5;
 $19 = ((($6)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 * $18;
 HEAPF64[$19>>3] = $21;
 $22 = +HEAPF64[$6>>3];
 $23 = $4;
 $24 = +HEAPF64[$23>>3];
 $25 = $24 + $22;
 HEAPF64[$23>>3] = $25;
 $26 = ((($6)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $4;
 $29 = ((($28)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $30 + $27;
 HEAPF64[$29>>3] = $31;
 $32 = $3;
 STACKTOP = sp;return ($32|0);
}
function _isea_ptdd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (($6) - 1)|0;
 $8 = (($7|0) / 5)&-1;
 $9 = (($8|0) % 2)&-1;
 $10 = ($9|0)==(1);
 $11 = $10&1;
 $4 = $11;
 $12 = $2;
 $13 = (($12) - 1)|0;
 $14 = (($13|0) % 5)&-1;
 $15 = $2;
 $16 = (($15) - 1)|0;
 $17 = (($16|0) / 10)&-1;
 $18 = ($17*5)|0;
 $19 = (($14) + ($18))|0;
 $20 = (($19) + 1)|0;
 $5 = $20;
 $21 = $3;
 $22 = $4;
 $23 = ($22|0)!=(0);
 $24 = $23 ? 240.0 : 60.0;
 _isea_rotate($21,$24);
 $25 = $4;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 }
 $27 = $3;
 $28 = +HEAPF64[$27>>3];
 $29 = $28 + 0.5;
 HEAPF64[$27>>3] = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32 + 0.8660254037844386;
 HEAPF64[$31>>3] = $33;
 $34 = $5;
 STACKTOP = sp;return ($34|0);
}
function _isea_ptdi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$10+12>>2]|0;
 $11 = $5;
 $12 = (_isea_ptdd($11,$8)|0);
 $9 = $12;
 $13 = $4;
 $14 = $9;
 $15 = $7;
 $16 = (_isea_dddi($13,$14,$8,$15)|0);
 $9 = $16;
 $17 = $9;
 STACKTOP = sp;return ($17|0);
}
function _isea_disn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ($11|0)==(0);
 $13 = $4;
 if ($12) {
  $14 = ((($13)) + 68|0);
  HEAP32[$14>>2] = 1;
  $15 = $4;
  $16 = ((($15)) + 68|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
  $114 = $3;
  STACKTOP = sp;return ($114|0);
 }
 $18 = ((($13)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 $21 = $4;
 $22 = ((($21)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($23|0));
 $25 = (+Math_pow((+$20),(+$24)));
 $26 = $25 + 0.5;
 $27 = (~~(($26)));
 $10 = $27;
 $28 = $5;
 $29 = ($28|0)==(11);
 if ($29) {
  $30 = $10;
  $31 = ($30*10)|0;
  $32 = (1 + ($31))|0;
  $33 = (($32) + 1)|0;
  $34 = $4;
  $35 = ((($34)) + 68|0);
  HEAP32[$35>>2] = $33;
  $36 = $4;
  $37 = ((($36)) + 68|0);
  $38 = HEAP32[$37>>2]|0;
  $3 = $38;
  $114 = $3;
  STACKTOP = sp;return ($114|0);
 }
 $39 = $4;
 $40 = ((($39)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(3);
 if ($42) {
  $43 = $4;
  $44 = ((($43)) + 44|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45|0) % 2)&-1;
  $47 = ($46|0)==(1);
  if ($47) {
   $48 = $4;
   $49 = ((($48)) + 40|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (+($50|0));
   $52 = $4;
   $53 = ((($52)) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) - 1)|0;
   $56 = (+($55|0));
   $57 = $56 / 2.0;
   $58 = (+Math_pow((+$51),(+$57)));
   $59 = (~~(($58)));
   $9 = $59;
   $60 = $6;
   $61 = +HEAPF64[$60>>3];
   $62 = (~~(($61)));
   $63 = $9;
   $64 = Math_imul($62, $63)|0;
   $8 = $64;
   $65 = $6;
   $66 = ((($65)) + 8|0);
   $67 = +HEAPF64[$66>>3];
   $68 = (~~(($67)));
   $69 = $9;
   $70 = (($68|0) / ($69|0))&-1;
   $71 = $8;
   $72 = (($71) + ($70))|0;
   $8 = $72;
   $73 = $5;
   $74 = (($73) - 1)|0;
   $75 = $10;
   $76 = Math_imul($74, $75)|0;
   $77 = $8;
   $78 = (($77) + ($76))|0;
   $8 = $78;
   $79 = $8;
   $80 = (($79) + 2)|0;
   $8 = $80;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $81 = $4;
  $82 = ((($81)) + 40|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (+($83|0));
  $85 = $4;
  $86 = ((($85)) + 44|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (+($87|0));
  $89 = $88 / 2.0;
  $90 = (+Math_pow((+$84),(+$89)));
  $91 = $90 + 0.5;
  $92 = (~~(($91)));
  $7 = $92;
  $93 = $5;
  $94 = (($93) - 1)|0;
  $95 = $10;
  $96 = Math_imul($94, $95)|0;
  $97 = (+($96|0));
  $98 = $7;
  $99 = (+($98|0));
  $100 = $6;
  $101 = +HEAPF64[$100>>3];
  $102 = $99 * $101;
  $103 = $97 + $102;
  $104 = $6;
  $105 = ((($104)) + 8|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $103 + $106;
  $108 = $107 + 2.0;
  $109 = (~~(($108)));
  $8 = $109;
 }
 $110 = $8;
 $111 = $4;
 $112 = ((($111)) + 68|0);
 HEAP32[$112>>2] = $110;
 $113 = $8;
 $3 = $113;
 $114 = $3;
 STACKTOP = sp;return ($114|0);
}
function _isea_hex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = (_isea_ptdi($10,$11,$12,$8)|0);
 $9 = $13;
 $14 = +HEAPF64[$8>>3];
 $15 = (~~(($14)));
 $16 = $15 << 4;
 $17 = $9;
 $18 = (($16) + ($17))|0;
 $19 = (+($18|0));
 $20 = $7;
 HEAPF64[$20>>3] = $19;
 $21 = ((($8)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $7;
 $24 = ((($23)) + 8|0);
 HEAPF64[$24>>3] = $22;
 STACKTOP = sp;return 1;
}
function _isea_dddi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp + 8|0;
 $12 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(3);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19|0) % 2)&-1;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $5;
   $23 = $6;
   $24 = $7;
   $25 = $8;
   $26 = (_isea_dddi_ap3odd($22,$23,$24,$25)|0);
   $4 = $26;
   $155 = $4;
   STACKTOP = sp;return ($155|0);
  }
 }
 $27 = $5;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)>(0);
 $31 = $5;
 if ($30) {
  $32 = ((($31)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (+($33|0));
  $35 = $5;
  $36 = ((($35)) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37|0));
  $39 = $38 / 2.0;
  $40 = (+Math_pow((+$34),(+$39)));
  $41 = $40 + 0.5;
  $42 = (~~(($41)));
  $11 = $42;
 } else {
  $43 = ((($31)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $11 = $44;
 }
 $45 = $11;
 $46 = (+($45|0));
 $47 = 1.0 / $46;
 $10 = $47;
 $48 = $7;
 ;HEAP32[$9>>2]=HEAP32[$48>>2]|0;HEAP32[$9+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$48+12>>2]|0;
 _isea_rotate($9,-30.0);
 $49 = $10;
 $50 = +HEAPF64[$9>>3];
 $51 = ((($9)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = ((($12)) + 4|0);
 $54 = ((($12)) + 8|0);
 (_hexbin2($49,$50,$52,$53,$54)|0);
 HEAP32[$12>>2] = 0;
 (_hex_iso($12)|0);
 $55 = $6;
 $56 = ($55|0)<=(5);
 do {
  if ($56) {
   $57 = ((($12)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = ((($12)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $11;
    $63 = (0 - ($62))|0;
    $64 = ($61|0)==($63|0);
    if ($64) {
     $6 = 0;
     $65 = ((($12)) + 12|0);
     HEAP32[$65>>2] = 0;
     $66 = ((($12)) + 8|0);
     HEAP32[$66>>2] = 0;
     $67 = ((($12)) + 4|0);
     HEAP32[$67>>2] = 0;
     break;
    }
   }
   $68 = ((($12)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $11;
   $71 = (0 - ($70))|0;
   $72 = ($69|0)==($71|0);
   if ($72) {
    $73 = $6;
    $74 = (($73) + 1)|0;
    $6 = $74;
    $75 = $6;
    $76 = ($75|0)==(6);
    $$ = $76 ? 1 : $74;
    $6 = $$;
    $77 = $11;
    $78 = ((($12)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) - ($79))|0;
    $81 = ((($12)) + 8|0);
    HEAP32[$81>>2] = $80;
    $82 = ((($12)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $11;
    $85 = (($83) - ($84))|0;
    $86 = ((($12)) + 12|0);
    HEAP32[$86>>2] = $85;
    $87 = ((($12)) + 4|0);
    HEAP32[$87>>2] = 0;
    break;
   }
   $88 = ((($12)) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $11;
   $91 = ($89|0)==($90|0);
   if ($91) {
    $92 = $6;
    $93 = (($92) + 5)|0;
    $6 = $93;
    $94 = ((($12)) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (0 - ($95))|0;
    $97 = ((($12)) + 8|0);
    HEAP32[$97>>2] = $96;
    $98 = ((($12)) + 4|0);
    HEAP32[$98>>2] = 0;
   }
  } else {
   $99 = $6;
   $100 = ($99|0)>=(6);
   if ($100) {
    $101 = ((($12)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $104 = ((($12)) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $11;
     $107 = ($105|0)==($106|0);
     if ($107) {
      $6 = 11;
      $108 = ((($12)) + 4|0);
      HEAP32[$108>>2] = 0;
      $109 = ((($12)) + 8|0);
      HEAP32[$109>>2] = 0;
      $110 = ((($12)) + 12|0);
      HEAP32[$110>>2] = 0;
      break;
     }
    }
    $111 = ((($12)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $11;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $6;
     $116 = (($115) + 1)|0;
     $6 = $116;
     $117 = $6;
     $118 = ($117|0)==(11);
     $$1 = $118 ? 6 : $116;
     $6 = $$1;
     $119 = ((($12)) + 8|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $11;
     $122 = (($120) + ($121))|0;
     $123 = ((($12)) + 4|0);
     HEAP32[$123>>2] = $122;
     $124 = ((($12)) + 8|0);
     HEAP32[$124>>2] = 0;
     $125 = ((($12)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (0 - ($126))|0;
     $128 = ((($12)) + 12|0);
     HEAP32[$128>>2] = $127;
     break;
    }
    $129 = ((($12)) + 8|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $11;
    $132 = (0 - ($131))|0;
    $133 = ($130|0)==($132|0);
    if ($133) {
     $134 = $6;
     $135 = (($134) - 4)|0;
     $6 = $135;
     $136 = ((($12)) + 8|0);
     HEAP32[$136>>2] = 0;
     $137 = ((($12)) + 4|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (0 - ($138))|0;
     $140 = ((($12)) + 12|0);
     HEAP32[$140>>2] = $139;
    }
   }
  }
 } while(0);
 $141 = ((($12)) + 4|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (+($142|0));
 $144 = $8;
 HEAPF64[$144>>3] = $143;
 $145 = ((($12)) + 12|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (0 - ($146))|0;
 $148 = (+($147|0));
 $149 = $8;
 $150 = ((($149)) + 8|0);
 HEAPF64[$150>>3] = $148;
 $151 = $6;
 $152 = $5;
 $153 = ((($152)) + 64|0);
 HEAP32[$153>>2] = $151;
 $154 = $6;
 $4 = $154;
 $155 = $4;
 STACKTOP = sp;return ($155|0);
}
function _isea_dddi_ap3odd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = sp + 16|0;
 $14 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $4;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17|0));
 $19 = (+Math_pow(2.0,(+$18)));
 $20 = $19 + 1.0;
 $21 = $20 / 2.0;
 $10 = $21;
 $22 = (+Math_cos(0.52359877559829882));
 $23 = $10;
 $24 = $22 / $23;
 $9 = $24;
 $25 = $10;
 $26 = $25 * 2.0;
 $27 = $26 + 0.5;
 $28 = (~~(($27)));
 $13 = $28;
 $29 = $6;
 ;HEAP32[$8>>2]=HEAP32[$29>>2]|0;HEAP32[$8+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$29+12>>2]|0;
 $30 = $9;
 $31 = +HEAPF64[$8>>3];
 $32 = ((($8)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = ((($14)) + 4|0);
 $35 = ((($14)) + 8|0);
 (_hexbin2($30,$31,$33,$34,$35)|0);
 HEAP32[$14>>2] = 0;
 (_hex_iso($14)|0);
 $36 = ((($14)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($14)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) - ($39))|0;
 $11 = $40;
 $41 = ((($14)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($14)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + ($44))|0;
 $46 = ((($14)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + ($47))|0;
 $12 = $48;
 $49 = $5;
 $50 = ($49|0)<=(5);
 do {
  if ($50) {
   $51 = $11;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = $12;
    $54 = $13;
    $55 = ($53|0)==($54|0);
    if ($55) {
     $5 = 0;
     $11 = 0;
     $12 = 0;
     break;
    }
   }
   $56 = $12;
   $57 = $13;
   $58 = ($56|0)==($57|0);
   if ($58) {
    $59 = $5;
    $60 = (($59) + 1)|0;
    $5 = $60;
    $61 = $5;
    $62 = ($61|0)==(6);
    $$ = $62 ? 1 : $60;
    $5 = $$;
    $63 = $13;
    $64 = $11;
    $65 = (($63) - ($64))|0;
    $12 = $65;
    $11 = 0;
    break;
   }
   $66 = $11;
   $67 = $13;
   $68 = ($66|0)==($67|0);
   if ($68) {
    $69 = $5;
    $70 = (($69) + 5)|0;
    $5 = $70;
    $11 = 0;
   }
  } else {
   $71 = $5;
   $72 = ($71|0)>=(6);
   if ($72) {
    $73 = $12;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = $11;
     $76 = $13;
     $77 = ($75|0)==($76|0);
     if ($77) {
      $5 = 11;
      $11 = 0;
      $12 = 0;
      break;
     }
    }
    $78 = $11;
    $79 = $13;
    $80 = ($78|0)==($79|0);
    if ($80) {
     $81 = $5;
     $82 = (($81) + 1)|0;
     $5 = $82;
     $83 = $5;
     $84 = ($83|0)==(11);
     $$1 = $84 ? 6 : $82;
     $5 = $$1;
     $85 = $13;
     $86 = $12;
     $87 = (($85) - ($86))|0;
     $11 = $87;
     $12 = 0;
     break;
    }
    $88 = $12;
    $89 = $13;
    $90 = ($88|0)==($89|0);
    if ($90) {
     $91 = $5;
     $92 = (($91) - 4)|0;
     $93 = (($92|0) % 5)&-1;
     $5 = $93;
     $12 = 0;
    }
   }
  }
 } while(0);
 $94 = $11;
 $95 = (+($94|0));
 $96 = $7;
 HEAPF64[$96>>3] = $95;
 $97 = $12;
 $98 = (+($97|0));
 $99 = $7;
 $100 = ((($99)) + 8|0);
 HEAPF64[$100>>3] = $98;
 $101 = $5;
 $102 = $4;
 $103 = ((($102)) + 64|0);
 HEAP32[$103>>2] = $101;
 $104 = $5;
 STACKTOP = sp;return ($104|0);
}
function _isea_rotate($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0, $48 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = -$7;
 $9 = $8 * 3.1415926535897931;
 $10 = $9 / 180.0;
 $4 = $10;
 while(1) {
  $11 = $4;
  $12 = $11 >= 6.2831853071795862;
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $13 - 6.2831853071795862;
  $4 = $14;
 }
 while(1) {
  $15 = $4;
  $16 = $15 <= -6.2831853071795862;
  if (!($16)) {
   break;
  }
  $17 = $4;
  $18 = $17 + 6.2831853071795862;
  $4 = $18;
 }
 $19 = $2;
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = (+Math_cos((+$21)));
 $23 = $20 * $22;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = (+Math_sin((+$27)));
 $29 = $26 * $28;
 $30 = $23 + $29;
 $5 = $30;
 $31 = $2;
 $32 = +HEAPF64[$31>>3];
 $33 = -$32;
 $34 = $4;
 $35 = (+Math_sin((+$34)));
 $36 = $33 * $35;
 $37 = $2;
 $38 = ((($37)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $4;
 $41 = (+Math_cos((+$40)));
 $42 = $39 * $41;
 $43 = $36 + $42;
 $6 = $43;
 $44 = $5;
 $45 = $2;
 HEAPF64[$45>>3] = $44;
 $46 = $6;
 $47 = $2;
 $48 = ((($47)) + 8|0);
 HEAPF64[$48>>3] = $46;
 STACKTOP = sp;return;
}
function _hexbin2($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $21 = sp + 80|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $6;
 $23 = (+Math_cos(0.52359877559829882));
 $24 = $22 / $23;
 $6 = $24;
 $25 = $7;
 $26 = $6;
 $27 = $26 / 2.0;
 $28 = $25 - $27;
 $7 = $28;
 $29 = $5;
 $30 = $6;
 $31 = $30 / $29;
 $6 = $31;
 $32 = $5;
 $33 = $7;
 $34 = $33 / $32;
 $7 = $34;
 $35 = $6;
 $36 = -$35;
 $37 = $7;
 $38 = $36 - $37;
 $10 = $38;
 $39 = $6;
 $40 = $39 + 0.5;
 $41 = (+Math_floor((+$40)));
 $11 = $41;
 $42 = (~~(($41)));
 $17 = $42;
 $43 = $7;
 $44 = $43 + 0.5;
 $45 = (+Math_floor((+$44)));
 $12 = $45;
 $46 = (~~(($45)));
 $18 = $46;
 $47 = $10;
 $48 = $47 + 0.5;
 $49 = (+Math_floor((+$48)));
 $13 = $49;
 $50 = (~~(($49)));
 $19 = $50;
 $51 = $17;
 $52 = $18;
 $53 = (($51) + ($52))|0;
 $54 = $19;
 $55 = (($53) + ($54))|0;
 $20 = $55;
 $56 = $20;
 $57 = ($56|0)!=(0);
 do {
  if ($57) {
   $58 = $11;
   $59 = $6;
   $60 = $58 - $59;
   $61 = (+Math_abs((+$60)));
   $14 = $61;
   $62 = $12;
   $63 = $7;
   $64 = $62 - $63;
   $65 = (+Math_abs((+$64)));
   $15 = $65;
   $66 = $13;
   $67 = $10;
   $68 = $66 - $67;
   $69 = (+Math_abs((+$68)));
   $16 = $69;
   $70 = $14;
   $71 = $15;
   $72 = $70 >= $71;
   if ($72) {
    $73 = $14;
    $74 = $16;
    $75 = $73 >= $74;
    if ($75) {
     $76 = $20;
     $77 = $17;
     $78 = (($77) - ($76))|0;
     $17 = $78;
     break;
    }
   }
   $79 = $15;
   $80 = $14;
   $81 = $79 >= $80;
   if ($81) {
    $82 = $15;
    $83 = $16;
    $84 = $82 >= $83;
    if ($84) {
     $85 = $20;
     $86 = $18;
     $87 = (($86) - ($85))|0;
     $18 = $87;
     break;
    }
   }
   $88 = $20;
   $89 = $19;
   $90 = (($89) - ($88))|0;
   $19 = $90;
  }
 } while(0);
 $91 = $17;
 $92 = ((($21)) + 4|0);
 HEAP32[$92>>2] = $91;
 $93 = $18;
 $94 = ((($21)) + 8|0);
 HEAP32[$94>>2] = $93;
 $95 = $19;
 $96 = ((($21)) + 12|0);
 HEAP32[$96>>2] = $95;
 HEAP32[$21>>2] = 1;
 (_hex_xy($21)|0);
 $97 = ((($21)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $8;
 HEAP32[$99>>2] = $98;
 $100 = ((($21)) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $9;
 HEAP32[$102>>2] = $101;
 $103 = $17;
 $104 = ($103*100)|0;
 $105 = $18;
 $106 = (($104) + ($105))|0;
 STACKTOP = sp;return ($106|0);
}
function _hex_iso($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $1 = 1;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($12))|0;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 if ($9) {
  $17 = (($16) + 1)|0;
  $18 = (($17|0) / 2)&-1;
  $19 = (($13) - ($18))|0;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = $19;
 } else {
  $22 = (($16|0) / 2)&-1;
  $23 = (($13) - ($22))|0;
  $24 = $2;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = $2;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (0 - ($28))|0;
 $30 = $2;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) - ($32))|0;
 $34 = $2;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $2;
 HEAP32[$36>>2] = 1;
 $1 = 1;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _hex_xy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($12))|0;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 if ($9) {
  $17 = (($16) + 1)|0;
  $18 = (($17|0) / 2)&-1;
  $19 = (($13) - ($18))|0;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = $19;
 } else {
  $22 = (($16|0) / 2)&-1;
  $23 = (($13) - ($22))|0;
  $24 = $2;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = $2;
 HEAP32[$26>>2] = 0;
 $1 = 1;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _isea_triangle_xy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $1;
 $4 = 0.91038328153090287;
 $5 = $2;
 $6 = (($5) - 1)|0;
 $7 = (($6|0) % 20)&-1;
 $2 = $7;
 $8 = $2;
 $9 = (($8|0) % 5)&-1;
 $10 = (($9) - 2)|0;
 $11 = (+($10|0));
 $12 = 0.66158453829999997 * $11;
 $13 = $12 * 2.0;
 HEAPF64[$3>>3] = $13;
 $14 = $2;
 $15 = ($14|0)>(9);
 if ($15) {
  $16 = +HEAPF64[$3>>3];
  $17 = $16 + 0.66158453829999997;
  HEAPF64[$3>>3] = $17;
 }
 $18 = $2;
 $19 = (($18|0) / 5)&-1;
 switch ($19|0) {
 case 0:  {
  $20 = ((($3)) + 8|0);
  HEAPF64[$20>>3] = 0.95491502800000005;
  break;
 }
 case 1:  {
  $21 = ((($3)) + 8|0);
  HEAPF64[$21>>3] = 0.19098300560000001;
  break;
 }
 case 2:  {
  $22 = ((($3)) + 8|0);
  HEAPF64[$22>>3] = -0.19098300560000001;
  break;
 }
 case 3:  {
  $23 = ((($3)) + 8|0);
  HEAPF64[$23>>3] = -0.95491502800000005;
  break;
 }
 default: {
  _exit(1);
  // unreachable;
 }
 }
 $24 = $4;
 $25 = +HEAPF64[$3>>3];
 $26 = $25 * $24;
 HEAPF64[$3>>3] = $26;
 $27 = $4;
 $28 = ((($3)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 * $27;
 HEAPF64[$28>>3] = $30;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
 STACKTOP = sp;return;
}
function _isea_ctran($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $8 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $11 = $10 + 3.1415926535897931;
 HEAPF64[$9>>3] = $11;
 $12 = $4;
 $13 = $5;
 _snyder_ctran($8,$12,$13);
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$8+12>>2]|0;
 $14 = $4;
 $15 = +HEAPF64[$14>>3];
 $16 = $15 - 3.1415926535897931;
 HEAPF64[$14>>3] = $16;
 $17 = $6;
 $18 = 3.1415926535897931 - $17;
 $19 = $4;
 $20 = +HEAPF64[$19>>3];
 $21 = $18 + $20;
 $22 = +HEAPF64[$7>>3];
 $23 = $22 - $21;
 HEAPF64[$7>>3] = $23;
 $24 = +HEAPF64[$7>>3];
 $25 = $24 + 3.1415926535897931;
 HEAPF64[$7>>3] = $25;
 $26 = +HEAPF64[$7>>3];
 $27 = (+_fmod($26,6.2831853071795862));
 HEAPF64[$7>>3] = $27;
 while(1) {
  $28 = +HEAPF64[$7>>3];
  $29 = $28 > 3.1415926535897931;
  if (!($29)) {
   break;
  }
  $30 = +HEAPF64[$7>>3];
  $31 = $30 - 6.2831853071795862;
  HEAPF64[$7>>3] = $31;
 }
 while(1) {
  $32 = +HEAPF64[$7>>3];
  $33 = $32 < -3.1415926535897931;
  if (!($33)) {
   break;
  }
  $34 = +HEAPF64[$7>>3];
  $35 = $34 + 6.2831853071795862;
  HEAPF64[$7>>3] = $35;
 }
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function _isea_snyder_forward($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp + 232|0;
 $23 = sp + 24|0;
 $25 = sp;
 $2 = $0;
 $3 = $1;
 dest=$23; src=(1712); stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $26 = ((($23)) + 16|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 * 0.017453292519943295;
 $7 = $28;
 $29 = +HEAPF64[$23>>3];
 $30 = $29 * 0.017453292519943295;
 $5 = $30;
 $31 = ((($23)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32 * 0.017453292519943295;
 $6 = $33;
 $4 = 1;
 while(1) {
  $34 = $4;
  $35 = ($34|0)<=(20);
  if (!($35)) {
   label = 14;
   break;
  }
  $36 = $4;
  $37 = (944 + ($36<<4)|0);
  ;HEAP32[$25>>2]=HEAP32[$37>>2]|0;HEAP32[$25+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$37+12>>2]|0;
  $38 = ((($25)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  $40 = (+Math_sin((+$39)));
  $41 = $2;
  $42 = ((($41)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (+Math_sin((+$43)));
  $45 = $40 * $44;
  $46 = ((($25)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = (+Math_cos((+$47)));
  $49 = $2;
  $50 = ((($49)) + 8|0);
  $51 = +HEAPF64[$50>>3];
  $52 = (+Math_cos((+$51)));
  $53 = $48 * $52;
  $54 = $2;
  $55 = +HEAPF64[$54>>3];
  $56 = +HEAPF64[$25>>3];
  $57 = $55 - $56;
  $58 = (+Math_cos((+$57)));
  $59 = $53 * $58;
  $60 = $45 + $59;
  $61 = (+Math_acos((+$60)));
  $24 = $61;
  $62 = $24;
  $63 = $5;
  $64 = $63 + 5.0000000000000004E-6;
  $65 = $62 > $64;
  if (!($65)) {
   $66 = +HEAPF64[$25>>3];
   $67 = ((($25)) + 8|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $2;
   $70 = +HEAPF64[$69>>3];
   $71 = $2;
   $72 = ((($71)) + 8|0);
   $73 = +HEAPF64[$72>>3];
   $74 = (+_sph_azimuth($66,$68,$70,$73));
   $13 = $74;
   $75 = $4;
   $76 = (+_az_adjustment($75));
   $21 = $76;
   $77 = $21;
   $78 = $13;
   $79 = $78 - $77;
   $13 = $79;
   $80 = $13;
   $81 = $80 < 0.0;
   if ($81) {
    $82 = $13;
    $83 = $82 + 6.2831853071795862;
    $13 = $83;
   }
   $22 = 0;
   while(1) {
    $84 = $13;
    $85 = $84 < 0.0;
    if (!($85)) {
     break;
    }
    $86 = $13;
    $87 = $86 + 2.0943951023931957;
    $13 = $87;
    $88 = $22;
    $89 = (($88) + -1)|0;
    $22 = $89;
   }
   while(1) {
    $90 = $13;
    $91 = $90 > 2.0943951023931957;
    if (!($91)) {
     break;
    }
    $92 = $13;
    $93 = $92 - 2.0943951023931957;
    $13 = $93;
    $94 = $22;
    $95 = (($94) + 1)|0;
    $22 = $95;
   }
   $96 = $7;
   $97 = (+Math_tan((+$96)));
   $98 = 1.0 / $97;
   $19 = $98;
   $99 = $5;
   $100 = (+Math_tan((+$99)));
   $20 = $100;
   $101 = $20;
   $102 = $13;
   $103 = (+Math_cos((+$102)));
   $104 = $13;
   $105 = (+Math_sin((+$104)));
   $106 = $19;
   $107 = $105 * $106;
   $108 = $103 + $107;
   $109 = (+Math_atan2((+$101),(+$108)));
   $8 = $109;
   $110 = $24;
   $111 = $8;
   $112 = $111 + 5.0000000000000004E-6;
   $113 = $110 > $112;
   if (!($113)) {
    label = 12;
    break;
   }
  }
  $196 = $4;
  $197 = (($196) + 1)|0;
  $4 = $197;
 }
 if ((label|0) == 12) {
  $9 = 0.91038328153090287;
  $114 = $13;
  $115 = (+Math_sin((+$114)));
  $116 = $6;
  $117 = (+Math_sin((+$116)));
  $118 = $115 * $117;
  $119 = $5;
  $120 = (+Math_cos((+$119)));
  $121 = $118 * $120;
  $122 = $13;
  $123 = (+Math_cos((+$122)));
  $124 = $6;
  $125 = (+Math_cos((+$124)));
  $126 = $123 * $125;
  $127 = $121 - $126;
  $128 = (+Math_acos((+$127)));
  $10 = $128;
  $129 = $13;
  $130 = $6;
  $131 = $129 + $130;
  $132 = $10;
  $133 = $131 + $132;
  $134 = $133 - 3.1415926535897931;
  $11 = $134;
  $135 = $11;
  $136 = 2.0 * $135;
  $137 = $9;
  $138 = $9;
  $139 = $137 * $138;
  $140 = $20;
  $141 = $139 * $140;
  $142 = $20;
  $143 = $141 * $142;
  $144 = $11;
  $145 = 2.0 * $144;
  $146 = $19;
  $147 = $145 * $146;
  $148 = $143 - $147;
  $149 = (+Math_atan2((+$136),(+$148)));
  $12 = $149;
  $150 = $9;
  $151 = $20;
  $152 = $150 * $151;
  $153 = $12;
  $154 = (+Math_cos((+$153)));
  $155 = $12;
  $156 = (+Math_sin((+$155)));
  $157 = $19;
  $158 = $156 * $157;
  $159 = $154 + $158;
  $160 = $152 / $159;
  $14 = $160;
  $161 = $14;
  $162 = $9;
  $163 = 2.0 * $162;
  $164 = $8;
  $165 = $164 / 2.0;
  $166 = (+Math_sin((+$165)));
  $167 = $163 * $166;
  $168 = $161 / $167;
  $15 = $168;
  $169 = $9;
  $170 = 2.0 * $169;
  $171 = $15;
  $172 = $170 * $171;
  $173 = $24;
  $174 = $173 / 2.0;
  $175 = (+Math_sin((+$174)));
  $176 = $172 * $175;
  $16 = $176;
  $177 = $22;
  $178 = (+($177|0));
  $179 = 2.0943951023931957 * $178;
  $180 = $12;
  $181 = $180 + $179;
  $12 = $181;
  $182 = $16;
  $183 = $12;
  $184 = (+Math_sin((+$183)));
  $185 = $182 * $184;
  $17 = $185;
  $186 = $16;
  $187 = $12;
  $188 = (+Math_cos((+$187)));
  $189 = $186 * $188;
  $18 = $189;
  $190 = $17;
  $191 = $3;
  HEAPF64[$191>>3] = $190;
  $192 = $18;
  $193 = $3;
  $194 = ((($193)) + 8|0);
  HEAPF64[$194>>3] = $192;
  $195 = $4;
  STACKTOP = sp;return ($195|0);
 }
 else if ((label|0) == 14) {
  $198 = HEAP32[2195]|0;
  $199 = $2;
  $200 = +HEAPF64[$199>>3];
  $201 = $200 * 57.295779513082323;
  $202 = $2;
  $203 = ((($202)) + 8|0);
  $204 = +HEAPF64[$203>>3];
  $205 = $204 * 57.295779513082323;
  HEAPF64[$vararg_buffer>>3] = $201;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $205;
  (_fprintf($198,10086,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function _sph_azimuth($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $7;
 $10 = (+Math_cos((+$9)));
 $11 = $6;
 $12 = $4;
 $13 = $11 - $12;
 $14 = (+Math_sin((+$13)));
 $15 = $10 * $14;
 $16 = $5;
 $17 = (+Math_cos((+$16)));
 $18 = $7;
 $19 = (+Math_sin((+$18)));
 $20 = $17 * $19;
 $21 = $5;
 $22 = (+Math_sin((+$21)));
 $23 = $7;
 $24 = (+Math_cos((+$23)));
 $25 = $22 * $24;
 $26 = $6;
 $27 = $4;
 $28 = $26 - $27;
 $29 = (+Math_cos((+$28)));
 $30 = $25 * $29;
 $31 = $20 - $30;
 $32 = (+Math_atan2((+$15),(+$31)));
 $8 = $32;
 $33 = $8;
 STACKTOP = sp;return (+$33);
}
function _az_adjustment($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 16|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (4260 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (1784 + ($7<<4)|0);
 ;HEAP32[$3>>2]=HEAP32[$8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$8+12>>2]|0;
 $9 = $1;
 $10 = (944 + ($9<<4)|0);
 ;HEAP32[$4>>2]=HEAP32[$10>>2]|0;HEAP32[$4+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$10+12>>2]|0;
 $11 = ((($3)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_cos((+$12)));
 $14 = +HEAPF64[$3>>3];
 $15 = +HEAPF64[$4>>3];
 $16 = $14 - $15;
 $17 = (+Math_sin((+$16)));
 $18 = $13 * $17;
 $19 = ((($4)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_cos((+$20)));
 $22 = ((($3)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_sin((+$23)));
 $25 = $21 * $24;
 $26 = ((($4)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+Math_sin((+$27)));
 $29 = ((($3)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (+Math_cos((+$30)));
 $32 = $28 * $31;
 $33 = +HEAPF64[$3>>3];
 $34 = +HEAPF64[$4>>3];
 $35 = $33 - $34;
 $36 = (+Math_cos((+$35)));
 $37 = $32 * $36;
 $38 = $25 - $37;
 $39 = (+Math_atan2((+$18),(+$38)));
 $2 = $39;
 $40 = $2;
 STACKTOP = sp;return (+$40);
}
function _snyder_ctran($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 88|0;
 $3 = $1;
 $4 = $2;
 $17 = $4;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $7 = $19;
 $20 = $4;
 $21 = +HEAPF64[$20>>3];
 $8 = $21;
 $22 = $3;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $6 = $24;
 $25 = $3;
 $26 = +HEAPF64[$25>>3];
 $10 = $26;
 $27 = $10;
 $9 = $27;
 $28 = $7;
 $29 = (+Math_cos((+$28)));
 $15 = $29;
 $30 = $6;
 $31 = (+Math_sin((+$30)));
 $16 = $31;
 $32 = $16;
 $33 = $7;
 $34 = (+Math_sin((+$33)));
 $35 = $32 * $34;
 $36 = $6;
 $37 = (+Math_cos((+$36)));
 $38 = $15;
 $39 = $37 * $38;
 $40 = $8;
 $41 = $9;
 $42 = $40 - $41;
 $43 = (+Math_cos((+$42)));
 $44 = $39 * $43;
 $45 = $35 - $44;
 $13 = $45;
 $46 = $15;
 $47 = $8;
 $48 = $9;
 $49 = $47 - $48;
 $50 = (+Math_sin((+$49)));
 $51 = $46 * $50;
 $52 = $16;
 $53 = $15;
 $54 = $52 * $53;
 $55 = $8;
 $56 = $9;
 $57 = $55 - $56;
 $58 = (+Math_cos((+$57)));
 $59 = $54 * $58;
 $60 = $6;
 $61 = (+Math_cos((+$60)));
 $62 = $7;
 $63 = (+Math_sin((+$62)));
 $64 = $61 * $63;
 $65 = $59 + $64;
 $66 = (+Math_atan2((+$51),(+$65)));
 $14 = $66;
 $67 = $14;
 $68 = $10;
 $69 = $67 + $68;
 $11 = $69;
 $70 = $11;
 $71 = (+_fmod($70,6.2831853071795862));
 $11 = $71;
 while(1) {
  $72 = $11;
  $73 = $72 > 3.1415926535897931;
  if (!($73)) {
   break;
  }
  $74 = $11;
  $75 = $74 - 6.2831853071795862;
  $11 = $75;
 }
 while(1) {
  $76 = $11;
  $77 = $76 < -3.1415926535897931;
  if (!($77)) {
   break;
  }
  $78 = $11;
  $79 = $78 + 6.2831853071795862;
  $11 = $79;
 }
 $80 = $13;
 $81 = (+Math_asin((+$80)));
 $12 = $81;
 $82 = $12;
 $83 = ((($5)) + 8|0);
 HEAPF64[$83>>3] = $82;
 $84 = $11;
 HEAPF64[$5>>3] = $84;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_imw_p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_imw_p($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 206;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10138;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_imw_p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 96|0;
 $4 = sp + 88|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $9 = sp + 48|0;
 $10 = sp + 40|0;
 $16 = sp + 8|0;
 $17 = sp;
 $2 = $0;
 $18 = (_pj_calloc(1,104)|0);
 $15 = $18;
 $19 = $15;
 $20 = (0|0)==($19|0);
 if ($20) {
  $21 = $2;
  $22 = (_freeup_new_77($21)|0);
  $1 = $22;
  $211 = $1;
  STACKTOP = sp;return ($211|0);
 }
 $23 = $15;
 $24 = $2;
 $25 = ((($24)) + 416|0);
 HEAP32[$25>>2] = $23;
 $26 = $2;
 $27 = ((($26)) + 72|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (_pj_enfn($28)|0);
 $30 = $15;
 $31 = ((($30)) + 96|0);
 HEAP32[$31>>2] = $29;
 $32 = ($29|0)!=(0|0);
 $33 = $2;
 if (!($32)) {
  _freeup_76($33);
  $1 = 0;
  $211 = $1;
  STACKTOP = sp;return ($211|0);
 }
 $34 = (_phi12($33,$3,$4)|0);
 $14 = $34;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $2;
  $37 = HEAP32[$36>>2]|0;
  $38 = $14;
  _pj_ctx_set_errno($37,$38);
  $39 = $2;
  _freeup_76($39);
  $1 = 0;
  $211 = $1;
  STACKTOP = sp;return ($211|0);
 }
 $40 = $15;
 $41 = ((($40)) + 80|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $15;
 $44 = ((($43)) + 72|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $42 < $45;
 if ($46) {
  $47 = $15;
  $48 = ((($47)) + 72|0);
  $49 = +HEAPF64[$48>>3];
  HEAPF64[$3>>3] = $49;
  $50 = $15;
  $51 = ((($50)) + 80|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $15;
  $54 = ((($53)) + 72|0);
  HEAPF64[$54>>3] = $52;
  $55 = +HEAPF64[$3>>3];
  $56 = $15;
  $57 = ((($56)) + 80|0);
  HEAPF64[$57>>3] = $55;
 }
 $58 = $2;
 $59 = HEAP32[$58>>2]|0;
 $60 = $2;
 $61 = ((($60)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 _pj_param($16,$59,$62,10228);
 $63 = HEAP32[$16>>2]|0;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $2;
  $66 = HEAP32[$65>>2]|0;
  $67 = $2;
  $68 = ((($67)) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  _pj_param($17,$66,$69,12660);
  $70 = +HEAPF64[$17>>3];
  $71 = $15;
  $72 = ((($71)) + 88|0);
  HEAPF64[$72>>3] = $70;
 } else {
  $73 = +HEAPF64[$4>>3];
  $74 = $73 * 57.295779513082323;
  $75 = (+Math_abs((+$74)));
  HEAPF64[$4>>3] = $75;
  $76 = +HEAPF64[$4>>3];
  $77 = $76 <= 60.0;
  do {
   if ($77) {
    HEAPF64[$4>>3] = 2.0;
   } else {
    $78 = +HEAPF64[$4>>3];
    $79 = $78 <= 76.0;
    if ($79) {
     HEAPF64[$4>>3] = 4.0;
     break;
    } else {
     HEAPF64[$4>>3] = 8.0;
     break;
    }
   }
  } while(0);
  $80 = +HEAPF64[$4>>3];
  $81 = $80 * 0.017453292519943295;
  $82 = $15;
  $83 = ((($82)) + 88|0);
  HEAPF64[$83>>3] = $81;
 }
 $84 = $15;
 $85 = ((($84)) + 100|0);
 HEAP32[$85>>2] = 0;
 $86 = $15;
 $87 = ((($86)) + 72|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $88 != 0.0;
 if ($89) {
  $90 = $2;
  $91 = $15;
  $92 = ((($91)) + 72|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $15;
  $95 = ((($94)) + 48|0);
  $96 = $15;
  $97 = ((($96)) + 32|0);
  _xy($90,$93,$7,$10,$95,$97);
 } else {
  $98 = $15;
  $99 = ((($98)) + 100|0);
  HEAP32[$99>>2] = 1;
  HEAPF64[$10>>3] = 0.0;
  $100 = $15;
  $101 = ((($100)) + 88|0);
  $102 = +HEAPF64[$101>>3];
  HEAPF64[$7>>3] = $102;
 }
 $103 = $15;
 $104 = ((($103)) + 80|0);
 $105 = +HEAPF64[$104>>3];
 $106 = $105 != 0.0;
 if ($106) {
  $107 = $2;
  $108 = $15;
  $109 = ((($108)) + 80|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $15;
  $112 = ((($111)) + 56|0);
  $113 = $15;
  $114 = ((($113)) + 40|0);
  _xy($107,$110,$8,$9,$112,$114);
 } else {
  $115 = $15;
  $116 = ((($115)) + 100|0);
  HEAP32[$116>>2] = -1;
  HEAPF64[$9>>3] = 0.0;
  $117 = $15;
  $118 = ((($117)) + 88|0);
  $119 = +HEAPF64[$118>>3];
  HEAPF64[$8>>3] = $119;
 }
 $120 = $15;
 $121 = ((($120)) + 72|0);
 $122 = +HEAPF64[$121>>3];
 $123 = $15;
 $124 = ((($123)) + 48|0);
 $125 = +HEAPF64[$124>>3];
 $126 = $15;
 $127 = ((($126)) + 72|0);
 $128 = +HEAPF64[$127>>3];
 $129 = (+Math_cos((+$128)));
 $130 = $15;
 $131 = ((($130)) + 96|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (+_pj_mlfn($122,$125,$129,$132));
 $11 = $133;
 $134 = $15;
 $135 = ((($134)) + 80|0);
 $136 = +HEAPF64[$135>>3];
 $137 = $15;
 $138 = ((($137)) + 56|0);
 $139 = +HEAPF64[$138>>3];
 $140 = $15;
 $141 = ((($140)) + 80|0);
 $142 = +HEAPF64[$141>>3];
 $143 = (+Math_cos((+$142)));
 $144 = $15;
 $145 = ((($144)) + 96|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (+_pj_mlfn($136,$139,$143,$146));
 $12 = $147;
 $148 = $12;
 $149 = $11;
 $150 = $148 - $149;
 $6 = $150;
 $151 = +HEAPF64[$8>>3];
 $152 = +HEAPF64[$7>>3];
 $153 = $151 - $152;
 $5 = $153;
 $154 = $6;
 $155 = $6;
 $156 = $154 * $155;
 $157 = $5;
 $158 = $5;
 $159 = $157 * $158;
 $160 = $156 - $159;
 $161 = (+Math_sqrt((+$160)));
 $162 = +HEAPF64[$10>>3];
 $163 = $161 + $162;
 $13 = $163;
 $164 = $13;
 $165 = +HEAPF64[$9>>3];
 $166 = $164 - $165;
 $167 = $15;
 $168 = ((($167)) + 64|0);
 HEAPF64[$168>>3] = $166;
 $169 = $6;
 $170 = 1.0 / $169;
 $6 = $170;
 $171 = $12;
 $172 = +HEAPF64[$10>>3];
 $173 = $171 * $172;
 $174 = $11;
 $175 = $13;
 $176 = $174 * $175;
 $177 = $173 - $176;
 $178 = $6;
 $179 = $177 * $178;
 $180 = $15;
 HEAPF64[$180>>3] = $179;
 $181 = $13;
 $182 = +HEAPF64[$10>>3];
 $183 = $181 - $182;
 $184 = $6;
 $185 = $183 * $184;
 $186 = $15;
 $187 = ((($186)) + 16|0);
 HEAPF64[$187>>3] = $185;
 $188 = $12;
 $189 = +HEAPF64[$7>>3];
 $190 = $188 * $189;
 $191 = $11;
 $192 = +HEAPF64[$8>>3];
 $193 = $191 * $192;
 $194 = $190 - $193;
 $195 = $6;
 $196 = $194 * $195;
 $197 = $15;
 $198 = ((($197)) + 8|0);
 HEAPF64[$198>>3] = $196;
 $199 = +HEAPF64[$8>>3];
 $200 = +HEAPF64[$7>>3];
 $201 = $199 - $200;
 $202 = $6;
 $203 = $201 * $202;
 $204 = $15;
 $205 = ((($204)) + 24|0);
 HEAPF64[$205>>3] = $203;
 $206 = $2;
 $207 = ((($206)) + 4|0);
 HEAP32[$207>>2] = 207;
 $208 = $2;
 $209 = ((($208)) + 8|0);
 HEAP32[$209>>2] = 208;
 $210 = $2;
 $1 = $210;
 $211 = $1;
 STACKTOP = sp;return ($211|0);
}
function _freeup_76($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_77($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_77($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _phi12($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 $7 = 0;
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _pj_param($8,$16,$19,11826);
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  _pj_param($9,$23,$26,10722);
  $27 = HEAP32[$9>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   $32 = ((($31)) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   _pj_param($10,$30,$33,15081);
   $34 = +HEAPF64[$10>>3];
   $35 = $6;
   $36 = ((($35)) + 72|0);
   HEAPF64[$36>>3] = $34;
   $37 = $3;
   $38 = HEAP32[$37>>2]|0;
   $39 = $3;
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   _pj_param($11,$38,$41,12667);
   $42 = +HEAPF64[$11>>3];
   $43 = $6;
   $44 = ((($43)) + 80|0);
   HEAPF64[$44>>3] = $42;
   $45 = $6;
   $46 = ((($45)) + 80|0);
   $47 = +HEAPF64[$46>>3];
   $48 = $6;
   $49 = ((($48)) + 72|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $47 - $50;
   $52 = 0.5 * $51;
   $53 = $4;
   HEAPF64[$53>>3] = $52;
   $54 = $6;
   $55 = ((($54)) + 80|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $6;
   $58 = ((($57)) + 72|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $56 + $59;
   $61 = 0.5 * $60;
   $62 = $5;
   HEAPF64[$62>>3] = $61;
   $63 = $4;
   $64 = +HEAPF64[$63>>3];
   $65 = (+Math_abs((+$64)));
   $66 = $65 < 1.0E-10;
   if ($66) {
    $71 = 1;
   } else {
    $67 = $5;
    $68 = +HEAPF64[$67>>3];
    $69 = (+Math_abs((+$68)));
    $70 = $69 < 1.0E-10;
    $71 = $70;
   }
   $72 = $71 ? -42 : 0;
   $7 = $72;
   $73 = $7;
   STACKTOP = sp;return ($73|0);
  }
 }
 $7 = -41;
 $73 = $7;
 STACKTOP = sp;return ($73|0);
}
function _xy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $7;
 $14 = (+Math_sin((+$13)));
 $15 = $10;
 HEAPF64[$15>>3] = $14;
 $16 = $7;
 $17 = (+Math_tan((+$16)));
 $18 = $6;
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $10;
 $22 = +HEAPF64[$21>>3];
 $23 = $20 * $22;
 $24 = $10;
 $25 = +HEAPF64[$24>>3];
 $26 = $23 * $25;
 $27 = 1.0 - $26;
 $28 = (+Math_sqrt((+$27)));
 $29 = $17 * $28;
 $30 = 1.0 / $29;
 $31 = $11;
 HEAPF64[$31>>3] = $30;
 $32 = $6;
 $33 = ((($32)) + 416|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 88|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $10;
 $38 = +HEAPF64[$37>>3];
 $39 = $36 * $38;
 $12 = $39;
 $40 = $11;
 $41 = +HEAPF64[$40>>3];
 $42 = $12;
 $43 = (+Math_cos((+$42)));
 $44 = 1.0 - $43;
 $45 = $41 * $44;
 $46 = $9;
 HEAPF64[$46>>3] = $45;
 $47 = $11;
 $48 = +HEAPF64[$47>>3];
 $49 = $12;
 $50 = (+Math_sin((+$49)));
 $51 = $48 * $50;
 $52 = $8;
 HEAPF64[$52>>3] = $51;
 STACKTOP = sp;return;
}
function _e_forward_80($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _loc_for($6,$$byval_copy,$7,$5);
 ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_inverse_81($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 56|0;
 $4 = sp + 40|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = ((($12)) + 80|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = +HEAPF64[$1>>3];
 $17 = ((($4)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_cos((+$18)));
 $20 = $16 / $19;
 HEAPF64[$4>>3] = $20;
 while(1) {
  $21 = $3;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
  _loc_for($8,$$byval_copy,$21,$7);
  ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
  $22 = ((($4)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $5;
  $25 = ((($24)) + 72|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $23 - $26;
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = +HEAPF64[$7>>3];
  $31 = $29 - $30;
  $32 = $27 * $31;
  $33 = ((($6)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = +HEAPF64[$7>>3];
  $36 = $34 - $35;
  $37 = $32 / $36;
  $38 = $5;
  $39 = ((($38)) + 72|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $37 + $40;
  $42 = ((($4)) + 8|0);
  HEAPF64[$42>>3] = $41;
  $43 = +HEAPF64[$4>>3];
  $44 = +HEAPF64[$1>>3];
  $45 = $43 * $44;
  $46 = +HEAPF64[$6>>3];
  $47 = $45 / $46;
  HEAPF64[$4>>3] = $47;
  $48 = +HEAPF64[$6>>3];
  $49 = +HEAPF64[$1>>3];
  $50 = $48 - $49;
  $51 = (+Math_abs((+$50)));
  $52 = $51 > 1.0E-10;
  if ($52) {
   continue;
  }
  $53 = ((($6)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = ((($1)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $54 - $56;
  $58 = (+Math_abs((+$57)));
  $59 = $58 > 1.0E-10;
  if (!($59)) {
   break;
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _loc_for($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 96|0;
 $4 = $2;
 $5 = $3;
 $20 = $4;
 $21 = ((($20)) + 416|0);
 $22 = HEAP32[$21>>2]|0;
 $6 = $22;
 $23 = ((($1)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 != 0.0;
 if (!($25)) {
  $26 = +HEAPF64[$1>>3];
  HEAPF64[$7>>3] = $26;
  $27 = ((($7)) + 8|0);
  HEAPF64[$27>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
 }
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+Math_sin((+$29)));
 $16 = $30;
 $31 = ((($1)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $16;
 $34 = ((($1)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = (+Math_cos((+$35)));
 $37 = $6;
 $38 = ((($37)) + 96|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (+_pj_mlfn($32,$33,$36,$39));
 $15 = $40;
 $41 = $6;
 $42 = ((($41)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $6;
 $45 = ((($44)) + 24|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $15;
 $48 = $46 * $47;
 $49 = $43 + $48;
 $8 = $49;
 $50 = $6;
 $51 = +HEAPF64[$50>>3];
 $52 = $6;
 $53 = ((($52)) + 16|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $15;
 $56 = $54 * $55;
 $57 = $51 + $56;
 $9 = $57;
 $58 = ((($1)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = (+Math_tan((+$59)));
 $61 = $4;
 $62 = ((($61)) + 72|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $16;
 $65 = $63 * $64;
 $66 = $16;
 $67 = $65 * $66;
 $68 = 1.0 - $67;
 $69 = (+Math_sqrt((+$68)));
 $70 = $60 * $69;
 $71 = 1.0 / $70;
 $18 = $71;
 $72 = $18;
 $73 = $18;
 $74 = $72 * $73;
 $75 = $8;
 $76 = $8;
 $77 = $75 * $76;
 $78 = $74 - $77;
 $79 = (+Math_sqrt((+$78)));
 $19 = $79;
 $80 = ((($1)) + 8|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $81 < 0.0;
 if ($82) {
  $83 = $19;
  $84 = -$83;
  $19 = $84;
 }
 $85 = $9;
 $86 = $18;
 $87 = $85 - $86;
 $88 = $19;
 $89 = $88 + $87;
 $19 = $89;
 $90 = $6;
 $91 = ((($90)) + 100|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)<(0);
 $94 = +HEAPF64[$1>>3];
 if ($93) {
  $10 = $94;
  $95 = $6;
  $96 = ((($95)) + 64|0);
  $97 = +HEAPF64[$96>>3];
  $11 = $97;
 } else {
  $98 = $6;
  $99 = ((($98)) + 56|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $94 * $100;
  $17 = $101;
  $102 = $6;
  $103 = ((($102)) + 40|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $17;
  $106 = (+Math_sin((+$105)));
  $107 = $104 * $106;
  $10 = $107;
  $108 = $6;
  $109 = ((($108)) + 64|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $6;
  $112 = ((($111)) + 40|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $17;
  $115 = (+Math_cos((+$114)));
  $116 = 1.0 - $115;
  $117 = $113 * $116;
  $118 = $110 + $117;
  $11 = $118;
 }
 $119 = $6;
 $120 = ((($119)) + 100|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)>(0);
 $123 = +HEAPF64[$1>>3];
 if ($122) {
  $12 = $123;
  $124 = $5;
  HEAPF64[$124>>3] = 0.0;
 } else {
  $125 = $6;
  $126 = ((($125)) + 48|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $123 * $127;
  $17 = $128;
  $129 = $6;
  $130 = ((($129)) + 32|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $17;
  $133 = (+Math_sin((+$132)));
  $134 = $131 * $133;
  $12 = $134;
  $135 = $6;
  $136 = ((($135)) + 32|0);
  $137 = +HEAPF64[$136>>3];
  $138 = $17;
  $139 = (+Math_cos((+$138)));
  $140 = 1.0 - $139;
  $141 = $137 * $140;
  $142 = $5;
  HEAPF64[$142>>3] = $141;
 }
 $143 = $10;
 $144 = $12;
 $145 = $143 - $144;
 $146 = $11;
 $147 = $5;
 $148 = +HEAPF64[$147>>3];
 $149 = $146 - $148;
 $150 = $145 / $149;
 $13 = $150;
 $151 = $12;
 $152 = $13;
 $153 = $19;
 $154 = $18;
 $155 = $153 + $154;
 $156 = $5;
 $157 = +HEAPF64[$156>>3];
 $158 = $155 - $157;
 $159 = $152 * $158;
 $160 = $151 + $159;
 $14 = $160;
 $161 = $13;
 $162 = $18;
 $163 = $18;
 $164 = $162 * $163;
 $165 = $13;
 $166 = $13;
 $167 = $165 * $166;
 $168 = 1.0 + $167;
 $169 = $164 * $168;
 $170 = $14;
 $171 = $14;
 $172 = $170 * $171;
 $173 = $169 - $172;
 $174 = (+Math_sqrt((+$173)));
 $175 = $161 * $174;
 HEAPF64[$7>>3] = $175;
 $176 = ((($1)) + 8|0);
 $177 = +HEAPF64[$176>>3];
 $178 = $177 > 0.0;
 if ($178) {
  $179 = +HEAPF64[$7>>3];
  $180 = -$179;
  HEAPF64[$7>>3] = $180;
 }
 $181 = $14;
 $182 = +HEAPF64[$7>>3];
 $183 = $181 + $182;
 $184 = $13;
 $185 = $13;
 $186 = $184 * $185;
 $187 = 1.0 + $186;
 $188 = $183 / $187;
 HEAPF64[$7>>3] = $188;
 $189 = $18;
 $190 = $18;
 $191 = $189 * $190;
 $192 = +HEAPF64[$7>>3];
 $193 = +HEAPF64[$7>>3];
 $194 = $192 * $193;
 $195 = $191 - $194;
 $196 = (+Math_sqrt((+$195)));
 $197 = ((($7)) + 8|0);
 HEAPF64[$197>>3] = $196;
 $198 = ((($1)) + 8|0);
 $199 = +HEAPF64[$198>>3];
 $200 = $199 > 0.0;
 if ($200) {
  $201 = ((($7)) + 8|0);
  $202 = +HEAPF64[$201>>3];
  $203 = -$202;
  $204 = ((($7)) + 8|0);
  HEAPF64[$204>>3] = $203;
 }
 $205 = $19;
 $206 = $18;
 $207 = $205 + $206;
 $208 = ((($7)) + 8|0);
 $209 = +HEAPF64[$208>>3];
 $210 = $209 + $207;
 HEAPF64[$208>>3] = $210;
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_krovak($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_krovak($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 209;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10235;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_krovak($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $2 = $0;
 $11 = (_pj_calloc(1,48)|0);
 $6 = $11;
 $12 = $6;
 $13 = (0|0)==($12|0);
 if ($13) {
  $14 = $2;
  $15 = (_freeup_new_87($14)|0);
  $1 = $15;
  $169 = $1;
  STACKTOP = sp;return ($169|0);
 }
 $16 = $6;
 $17 = $2;
 $18 = ((($17)) + 416|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = ((($19)) + 56|0);
 HEAPF64[$20>>3] = 6377397.1550000003;
 $21 = $2;
 $22 = ((($21)) + 72|0);
 HEAPF64[$22>>3] = 0.0066743722306139997;
 $23 = (+Math_sqrt(0.0066743722306139997));
 $24 = $2;
 $25 = ((($24)) + 88|0);
 HEAPF64[$25>>3] = $23;
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 _pj_param($7,$27,$30,12916);
 $31 = HEAP32[$7>>2]|0;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $33 = $2;
  $34 = ((($33)) + 128|0);
  HEAPF64[$34>>3] = 0.863937979737193;
 }
 $35 = $2;
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 _pj_param($8,$36,$39,10257);
 $40 = HEAP32[$8>>2]|0;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  $42 = $2;
  $43 = ((($42)) + 120|0);
  HEAPF64[$43>>3] = 0.43342343091192509;
 }
 $44 = $2;
 $45 = HEAP32[$44>>2]|0;
 $46 = $2;
 $47 = ((($46)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 _pj_param($9,$45,$48,17214);
 $49 = HEAP32[$9>>2]|0;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  $51 = $2;
  $52 = ((($51)) + 152|0);
  HEAPF64[$52>>3] = 0.99990000000000001;
 }
 $53 = $6;
 $54 = ((($53)) + 40|0);
 HEAP32[$54>>2] = 1;
 $55 = $2;
 $56 = HEAP32[$55>>2]|0;
 $57 = $2;
 $58 = ((($57)) + 32|0);
 $59 = HEAP32[$58>>2]|0;
 _pj_param($10,$56,$59,10264);
 $60 = HEAP32[$10>>2]|0;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  $62 = $6;
  $63 = ((($62)) + 40|0);
  HEAP32[$63>>2] = -1;
 }
 $64 = $2;
 $65 = ((($64)) + 72|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $2;
 $68 = ((($67)) + 128|0);
 $69 = +HEAPF64[$68>>3];
 $70 = (+Math_cos((+$69)));
 $71 = (+Math_pow((+$70),4.0));
 $72 = $66 * $71;
 $73 = $2;
 $74 = ((($73)) + 72|0);
 $75 = +HEAPF64[$74>>3];
 $76 = 1.0 - $75;
 $77 = $72 / $76;
 $78 = 1.0 + $77;
 $79 = (+Math_sqrt((+$78)));
 $80 = $6;
 HEAPF64[$80>>3] = $79;
 $81 = $2;
 $82 = ((($81)) + 128|0);
 $83 = +HEAPF64[$82>>3];
 $84 = (+Math_sin((+$83)));
 $85 = $6;
 $86 = +HEAPF64[$85>>3];
 $87 = $84 / $86;
 $88 = (+Math_asin((+$87)));
 $3 = $88;
 $89 = $2;
 $90 = ((($89)) + 88|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $2;
 $93 = ((($92)) + 128|0);
 $94 = +HEAPF64[$93>>3];
 $95 = (+Math_sin((+$94)));
 $96 = $91 * $95;
 $97 = 1.0 + $96;
 $98 = $2;
 $99 = ((($98)) + 88|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $2;
 $102 = ((($101)) + 128|0);
 $103 = +HEAPF64[$102>>3];
 $104 = (+Math_sin((+$103)));
 $105 = $100 * $104;
 $106 = 1.0 - $105;
 $107 = $97 / $106;
 $108 = $6;
 $109 = +HEAPF64[$108>>3];
 $110 = $2;
 $111 = ((($110)) + 88|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $109 * $112;
 $114 = $113 / 2.0;
 $115 = (+Math_pow((+$107),(+$114)));
 $5 = $115;
 $116 = $3;
 $117 = $116 / 2.0;
 $118 = $117 + 0.78539816339744795;
 $119 = (+Math_tan((+$118)));
 $120 = $2;
 $121 = ((($120)) + 128|0);
 $122 = +HEAPF64[$121>>3];
 $123 = $122 / 2.0;
 $124 = $123 + 0.78539816339744795;
 $125 = (+Math_tan((+$124)));
 $126 = $6;
 $127 = +HEAPF64[$126>>3];
 $128 = (+Math_pow((+$125),(+$127)));
 $129 = $119 / $128;
 $130 = $5;
 $131 = $129 * $130;
 $132 = $6;
 $133 = ((($132)) + 8|0);
 HEAPF64[$133>>3] = $131;
 $134 = $2;
 $135 = ((($134)) + 72|0);
 $136 = +HEAPF64[$135>>3];
 $137 = 1.0 - $136;
 $138 = (+Math_sqrt((+$137)));
 $139 = $2;
 $140 = ((($139)) + 72|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $2;
 $143 = ((($142)) + 128|0);
 $144 = +HEAPF64[$143>>3];
 $145 = (+Math_sin((+$144)));
 $146 = (+Math_pow((+$145),2.0));
 $147 = $141 * $146;
 $148 = 1.0 - $147;
 $149 = $138 / $148;
 $4 = $149;
 $150 = (+Math_sin(1.37008346281555));
 $151 = $6;
 $152 = ((($151)) + 16|0);
 HEAPF64[$152>>3] = $150;
 $153 = $2;
 $154 = ((($153)) + 152|0);
 $155 = +HEAPF64[$154>>3];
 $156 = $4;
 $157 = $155 * $156;
 $158 = (+Math_tan(1.37008346281555));
 $159 = $157 / $158;
 $160 = $6;
 $161 = ((($160)) + 24|0);
 HEAPF64[$161>>3] = $159;
 $162 = $6;
 $163 = ((($162)) + 32|0);
 HEAPF64[$163>>3] = 0.5286277629901559;
 $164 = $2;
 $165 = ((($164)) + 8|0);
 HEAP32[$165>>2] = 210;
 $166 = $2;
 $167 = ((($166)) + 4|0);
 HEAP32[$167>>2] = 211;
 $168 = $2;
 $1 = $168;
 $169 = $1;
 STACKTOP = sp;return ($169|0);
}
function _freeup_86($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_87($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_87($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_92($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $5 = sp + 64|0;
 $3 = $2;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $4 = $17;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 $18 = +HEAPF64[$1>>3];
 $13 = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 HEAPF64[$1>>3] = $20;
 $21 = $13;
 $22 = ((($1)) + 8|0);
 HEAPF64[$22>>3] = $21;
 $23 = $4;
 $24 = ((($23)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = +HEAPF64[$1>>3];
 $28 = $27 * $26;
 HEAPF64[$1>>3] = $28;
 $29 = $4;
 $30 = ((($29)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (+($31|0));
 $33 = ((($1)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 * $32;
 HEAPF64[$33>>3] = $35;
 $36 = +HEAPF64[$1>>3];
 $37 = +HEAPF64[$1>>3];
 $38 = $36 * $37;
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = ((($1)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $40 * $42;
 $44 = $38 + $43;
 $45 = (+Math_sqrt((+$44)));
 $11 = $45;
 $46 = ((($1)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = +HEAPF64[$1>>3];
 $49 = (+Math_atan2((+$47),(+$48)));
 $10 = $49;
 $50 = $10;
 $51 = (+Math_sin(1.37008346281555));
 $52 = $50 / $51;
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 24|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $11;
 $57 = $55 / $56;
 $58 = $4;
 $59 = ((($58)) + 16|0);
 $60 = +HEAPF64[$59>>3];
 $61 = 1.0 / $60;
 $62 = (+Math_pow((+$57),(+$61)));
 $63 = (+Math_tan(1.4704398948052231));
 $64 = $62 * $63;
 $65 = (+Math_atan((+$64)));
 $66 = $65 - 0.78539816339744795;
 $67 = 2.0 * $66;
 $8 = $67;
 $68 = $4;
 $69 = ((($68)) + 32|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (+Math_cos((+$70)));
 $72 = $8;
 $73 = (+Math_sin((+$72)));
 $74 = $71 * $73;
 $75 = $4;
 $76 = ((($75)) + 32|0);
 $77 = +HEAPF64[$76>>3];
 $78 = (+Math_sin((+$77)));
 $79 = $8;
 $80 = (+Math_cos((+$79)));
 $81 = $78 * $80;
 $82 = $9;
 $83 = (+Math_cos((+$82)));
 $84 = $81 * $83;
 $85 = $74 - $84;
 $86 = (+Math_asin((+$85)));
 $6 = $86;
 $87 = $8;
 $88 = (+Math_cos((+$87)));
 $89 = $9;
 $90 = (+Math_sin((+$89)));
 $91 = $88 * $90;
 $92 = $6;
 $93 = (+Math_cos((+$92)));
 $94 = $91 / $93;
 $95 = (+Math_asin((+$94)));
 $7 = $95;
 $96 = $3;
 $97 = ((($96)) + 120|0);
 $98 = +HEAPF64[$97>>3];
 $99 = $7;
 $100 = $4;
 $101 = +HEAPF64[$100>>3];
 $102 = $99 / $101;
 $103 = $98 - $102;
 HEAPF64[$5>>3] = $103;
 $104 = $6;
 $12 = $104;
 $14 = 0;
 while(1) {
  $105 = $4;
  $106 = ((($105)) + 8|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $4;
  $109 = +HEAPF64[$108>>3];
  $110 = -1.0 / $109;
  $111 = (+Math_pow((+$107),(+$110)));
  $112 = $6;
  $113 = $112 / 2.0;
  $114 = $113 + 0.78539816339744795;
  $115 = (+Math_tan((+$114)));
  $116 = $4;
  $117 = +HEAPF64[$116>>3];
  $118 = 1.0 / $117;
  $119 = (+Math_pow((+$115),(+$118)));
  $120 = $111 * $119;
  $121 = $3;
  $122 = ((($121)) + 88|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $12;
  $125 = (+Math_sin((+$124)));
  $126 = $123 * $125;
  $127 = 1.0 + $126;
  $128 = $3;
  $129 = ((($128)) + 88|0);
  $130 = +HEAPF64[$129>>3];
  $131 = $12;
  $132 = (+Math_sin((+$131)));
  $133 = $130 * $132;
  $134 = 1.0 - $133;
  $135 = $127 / $134;
  $136 = $3;
  $137 = ((($136)) + 88|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $138 / 2.0;
  $140 = (+Math_pow((+$135),(+$139)));
  $141 = $120 * $140;
  $142 = (+Math_atan((+$141)));
  $143 = $142 - 0.78539816339744795;
  $144 = 2.0 * $143;
  $145 = ((($5)) + 8|0);
  HEAPF64[$145>>3] = $144;
  $146 = $12;
  $147 = ((($5)) + 8|0);
  $148 = +HEAPF64[$147>>3];
  $149 = $146 - $148;
  $150 = (+Math_abs((+$149)));
  $151 = $150 < 1.0000000000000001E-15;
  if ($151) {
   $14 = 1;
  }
  $152 = ((($5)) + 8|0);
  $153 = +HEAPF64[$152>>3];
  $12 = $153;
  $154 = $14;
  $155 = ($154|0)==(0);
  if (!($155)) {
   break;
  }
 }
 $156 = $3;
 $157 = ((($156)) + 120|0);
 $158 = +HEAPF64[$157>>3];
 $159 = +HEAPF64[$5>>3];
 $160 = $159 - $158;
 HEAPF64[$5>>3] = $160;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_93($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 56|0;
 $3 = $2;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $4 = $15;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 $16 = $3;
 $17 = ((($16)) + 88|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_sin((+$20)));
 $22 = $18 * $21;
 $23 = 1.0 + $22;
 $24 = $3;
 $25 = ((($24)) + 88|0);
 $26 = +HEAPF64[$25>>3];
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_sin((+$28)));
 $30 = $26 * $29;
 $31 = 1.0 - $30;
 $32 = $23 / $31;
 $33 = $4;
 $34 = +HEAPF64[$33>>3];
 $35 = $3;
 $36 = ((($35)) + 88|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 * $37;
 $39 = $38 / 2.0;
 $40 = (+Math_pow((+$32),(+$39)));
 $6 = $40;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $45 / 2.0;
 $47 = $46 + 0.78539816339744795;
 $48 = (+Math_tan((+$47)));
 $49 = $4;
 $50 = +HEAPF64[$49>>3];
 $51 = (+Math_pow((+$48),(+$50)));
 $52 = $43 * $51;
 $53 = $6;
 $54 = $52 / $53;
 $55 = (+Math_atan((+$54)));
 $56 = $55 - 0.78539816339744795;
 $57 = 2.0 * $56;
 $7 = $57;
 $58 = +HEAPF64[$1>>3];
 $59 = -$58;
 $60 = $4;
 $61 = +HEAPF64[$60>>3];
 $62 = $59 * $61;
 $8 = $62;
 $63 = $4;
 $64 = ((($63)) + 32|0);
 $65 = +HEAPF64[$64>>3];
 $66 = (+Math_cos((+$65)));
 $67 = $7;
 $68 = (+Math_sin((+$67)));
 $69 = $66 * $68;
 $70 = $4;
 $71 = ((($70)) + 32|0);
 $72 = +HEAPF64[$71>>3];
 $73 = (+Math_sin((+$72)));
 $74 = $7;
 $75 = (+Math_cos((+$74)));
 $76 = $73 * $75;
 $77 = $8;
 $78 = (+Math_cos((+$77)));
 $79 = $76 * $78;
 $80 = $69 + $79;
 $81 = (+Math_asin((+$80)));
 $9 = $81;
 $82 = $7;
 $83 = (+Math_cos((+$82)));
 $84 = $8;
 $85 = (+Math_sin((+$84)));
 $86 = $83 * $85;
 $87 = $9;
 $88 = (+Math_cos((+$87)));
 $89 = $86 / $88;
 $90 = (+Math_asin((+$89)));
 $10 = $90;
 $91 = $4;
 $92 = ((($91)) + 16|0);
 $93 = +HEAPF64[$92>>3];
 $94 = $10;
 $95 = $93 * $94;
 $11 = $95;
 $96 = $4;
 $97 = ((($96)) + 24|0);
 $98 = +HEAPF64[$97>>3];
 $99 = (+Math_tan(1.4704398948052231));
 $100 = $4;
 $101 = ((($100)) + 16|0);
 $102 = +HEAPF64[$101>>3];
 $103 = (+Math_pow((+$99),(+$102)));
 $104 = $98 * $103;
 $105 = $9;
 $106 = $105 / 2.0;
 $107 = $106 + 0.78539816339744795;
 $108 = (+Math_tan((+$107)));
 $109 = $4;
 $110 = ((($109)) + 16|0);
 $111 = +HEAPF64[$110>>3];
 $112 = (+Math_pow((+$108),(+$111)));
 $113 = $104 / $112;
 $12 = $113;
 $114 = $12;
 $115 = $11;
 $116 = (+Math_cos((+$115)));
 $117 = $114 * $116;
 $118 = ((($5)) + 8|0);
 HEAPF64[$118>>3] = $117;
 $119 = $12;
 $120 = $11;
 $121 = (+Math_sin((+$120)));
 $122 = $119 * $121;
 HEAPF64[$5>>3] = $122;
 $123 = $4;
 $124 = ((($123)) + 40|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (+($125|0));
 $127 = ((($5)) + 8|0);
 $128 = +HEAPF64[$127>>3];
 $129 = $128 * $126;
 HEAPF64[$127>>3] = $129;
 $130 = $4;
 $131 = ((($130)) + 40|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (+($132|0));
 $134 = +HEAPF64[$5>>3];
 $135 = $134 * $133;
 HEAPF64[$5>>3] = $135;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_lcc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lcc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 212;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10271;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lcc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0;
 var $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $2 = $0;
 $13 = (_pj_calloc(1,48)|0);
 $6 = $13;
 $14 = $6;
 $15 = (0|0)==($14|0);
 if ($15) {
  $16 = $2;
  $17 = (_freeup_new_95($16)|0);
  $1 = $17;
  $264 = $1;
  STACKTOP = sp;return ($264|0);
 }
 $18 = $6;
 $19 = $2;
 $20 = ((($19)) + 416|0);
 HEAP32[$20>>2] = $18;
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _pj_param($7,$22,$25,15081);
 $26 = +HEAPF64[$7>>3];
 $27 = $6;
 HEAPF64[$27>>3] = $26;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = $2;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _pj_param($8,$29,$32,10722);
 $33 = HEAP32[$8>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $37 = $2;
  $38 = ((($37)) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  _pj_param($9,$36,$39,12667);
  $40 = +HEAPF64[$9>>3];
  $41 = $6;
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = $40;
 } else {
  $43 = $6;
  $44 = +HEAPF64[$43>>3];
  $45 = $6;
  $46 = ((($45)) + 8|0);
  HEAPF64[$46>>3] = $44;
  $47 = $2;
  $48 = HEAP32[$47>>2]|0;
  $49 = $2;
  $50 = ((($49)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  _pj_param($10,$48,$51,12916);
  $52 = HEAP32[$10>>2]|0;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   $54 = $6;
   $55 = +HEAPF64[$54>>3];
   $56 = $2;
   $57 = ((($56)) + 128|0);
   HEAPF64[$57>>3] = $55;
  }
 }
 $58 = $6;
 $59 = +HEAPF64[$58>>3];
 $60 = $6;
 $61 = ((($60)) + 8|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $59 + $62;
 $64 = (+Math_abs((+$63)));
 $65 = $64 < 1.0E-10;
 if ($65) {
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  _pj_ctx_set_errno($67,-21);
  $68 = $2;
  _freeup_94($68);
  $1 = 0;
  $264 = $1;
  STACKTOP = sp;return ($264|0);
 }
 $69 = $6;
 $70 = +HEAPF64[$69>>3];
 $71 = (+Math_sin((+$70)));
 $4 = $71;
 $72 = $6;
 $73 = ((($72)) + 16|0);
 HEAPF64[$73>>3] = $71;
 $74 = $6;
 $75 = +HEAPF64[$74>>3];
 $76 = (+Math_cos((+$75)));
 $3 = $76;
 $77 = $6;
 $78 = +HEAPF64[$77>>3];
 $79 = $6;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 - $81;
 $83 = (+Math_abs((+$82)));
 $84 = $83 >= 1.0E-10;
 $85 = $84&1;
 $5 = $85;
 $86 = $2;
 $87 = ((($86)) + 72|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $88 != 0.0;
 $90 = $89&1;
 $91 = $6;
 $92 = ((($91)) + 40|0);
 HEAP32[$92>>2] = $90;
 if ($89) {
  $93 = $2;
  $94 = ((($93)) + 72|0);
  $95 = +HEAPF64[$94>>3];
  $96 = (+Math_sqrt((+$95)));
  $97 = $2;
  $98 = ((($97)) + 88|0);
  HEAPF64[$98>>3] = $96;
  $99 = $4;
  $100 = $3;
  $101 = $2;
  $102 = ((($101)) + 72|0);
  $103 = +HEAPF64[$102>>3];
  $104 = (+_pj_msfn($99,$100,$103));
  $12 = $104;
  $105 = $6;
  $106 = +HEAPF64[$105>>3];
  $107 = $4;
  $108 = $2;
  $109 = ((($108)) + 88|0);
  $110 = +HEAPF64[$109>>3];
  $111 = (+_pj_tsfn($106,$107,$110));
  $11 = $111;
  $112 = $5;
  $113 = ($112|0)!=(0);
  if ($113) {
   $114 = $6;
   $115 = ((($114)) + 8|0);
   $116 = +HEAPF64[$115>>3];
   $117 = (+Math_sin((+$116)));
   $4 = $117;
   $118 = $12;
   $119 = $4;
   $120 = $6;
   $121 = ((($120)) + 8|0);
   $122 = +HEAPF64[$121>>3];
   $123 = (+Math_cos((+$122)));
   $124 = $2;
   $125 = ((($124)) + 72|0);
   $126 = +HEAPF64[$125>>3];
   $127 = (+_pj_msfn($119,$123,$126));
   $128 = $118 / $127;
   $129 = (+Math_log((+$128)));
   $130 = $6;
   $131 = ((($130)) + 16|0);
   HEAPF64[$131>>3] = $129;
   $132 = $11;
   $133 = $6;
   $134 = ((($133)) + 8|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $4;
   $137 = $2;
   $138 = ((($137)) + 88|0);
   $139 = +HEAPF64[$138>>3];
   $140 = (+_pj_tsfn($135,$136,$139));
   $141 = $132 / $140;
   $142 = (+Math_log((+$141)));
   $143 = $6;
   $144 = ((($143)) + 16|0);
   $145 = +HEAPF64[$144>>3];
   $146 = $145 / $142;
   HEAPF64[$144>>3] = $146;
  }
  $147 = $12;
  $148 = $11;
  $149 = $6;
  $150 = ((($149)) + 16|0);
  $151 = +HEAPF64[$150>>3];
  $152 = -$151;
  $153 = (+Math_pow((+$148),(+$152)));
  $154 = $147 * $153;
  $155 = $6;
  $156 = ((($155)) + 16|0);
  $157 = +HEAPF64[$156>>3];
  $158 = $154 / $157;
  $159 = $6;
  $160 = ((($159)) + 24|0);
  HEAPF64[$160>>3] = $158;
  $161 = $6;
  $162 = ((($161)) + 32|0);
  HEAPF64[$162>>3] = $158;
  $163 = $2;
  $164 = ((($163)) + 128|0);
  $165 = +HEAPF64[$164>>3];
  $166 = (+Math_abs((+$165)));
  $167 = $166 - 1.5707963267948966;
  $168 = (+Math_abs((+$167)));
  $169 = $168 < 1.0E-10;
  if ($169) {
   $189 = 0.0;
  } else {
   $170 = $2;
   $171 = ((($170)) + 128|0);
   $172 = +HEAPF64[$171>>3];
   $173 = $2;
   $174 = ((($173)) + 128|0);
   $175 = +HEAPF64[$174>>3];
   $176 = (+Math_sin((+$175)));
   $177 = $2;
   $178 = ((($177)) + 88|0);
   $179 = +HEAPF64[$178>>3];
   $180 = (+_pj_tsfn($172,$176,$179));
   $181 = $6;
   $182 = ((($181)) + 16|0);
   $183 = +HEAPF64[$182>>3];
   $184 = (+Math_pow((+$180),(+$183)));
   $189 = $184;
  }
  $185 = $6;
  $186 = ((($185)) + 24|0);
  $187 = +HEAPF64[$186>>3];
  $188 = $187 * $189;
  HEAPF64[$186>>3] = $188;
 } else {
  $190 = $5;
  $191 = ($190|0)!=(0);
  if ($191) {
   $192 = $3;
   $193 = $6;
   $194 = ((($193)) + 8|0);
   $195 = +HEAPF64[$194>>3];
   $196 = (+Math_cos((+$195)));
   $197 = $192 / $196;
   $198 = (+Math_log((+$197)));
   $199 = $6;
   $200 = ((($199)) + 8|0);
   $201 = +HEAPF64[$200>>3];
   $202 = 0.5 * $201;
   $203 = 0.78539816339744828 + $202;
   $204 = (+Math_tan((+$203)));
   $205 = $6;
   $206 = +HEAPF64[$205>>3];
   $207 = 0.5 * $206;
   $208 = 0.78539816339744828 + $207;
   $209 = (+Math_tan((+$208)));
   $210 = $204 / $209;
   $211 = (+Math_log((+$210)));
   $212 = $198 / $211;
   $213 = $6;
   $214 = ((($213)) + 16|0);
   HEAPF64[$214>>3] = $212;
  }
  $215 = $3;
  $216 = $6;
  $217 = +HEAPF64[$216>>3];
  $218 = 0.5 * $217;
  $219 = 0.78539816339744828 + $218;
  $220 = (+Math_tan((+$219)));
  $221 = $6;
  $222 = ((($221)) + 16|0);
  $223 = +HEAPF64[$222>>3];
  $224 = (+Math_pow((+$220),(+$223)));
  $225 = $215 * $224;
  $226 = $6;
  $227 = ((($226)) + 16|0);
  $228 = +HEAPF64[$227>>3];
  $229 = $225 / $228;
  $230 = $6;
  $231 = ((($230)) + 32|0);
  HEAPF64[$231>>3] = $229;
  $232 = $2;
  $233 = ((($232)) + 128|0);
  $234 = +HEAPF64[$233>>3];
  $235 = (+Math_abs((+$234)));
  $236 = $235 - 1.5707963267948966;
  $237 = (+Math_abs((+$236)));
  $238 = $237 < 1.0E-10;
  if ($238) {
   $256 = 0.0;
  } else {
   $239 = $6;
   $240 = ((($239)) + 32|0);
   $241 = +HEAPF64[$240>>3];
   $242 = $2;
   $243 = ((($242)) + 128|0);
   $244 = +HEAPF64[$243>>3];
   $245 = 0.5 * $244;
   $246 = 0.78539816339744828 + $245;
   $247 = (+Math_tan((+$246)));
   $248 = $6;
   $249 = ((($248)) + 16|0);
   $250 = +HEAPF64[$249>>3];
   $251 = -$250;
   $252 = (+Math_pow((+$247),(+$251)));
   $253 = $241 * $252;
   $256 = $253;
  }
  $254 = $6;
  $255 = ((($254)) + 24|0);
  HEAPF64[$255>>3] = $256;
 }
 $257 = $2;
 $258 = ((($257)) + 8|0);
 HEAP32[$258>>2] = 213;
 $259 = $2;
 $260 = ((($259)) + 4|0);
 HEAP32[$260>>2] = 214;
 $261 = $2;
 $262 = ((($261)) + 20|0);
 HEAP32[$262>>2] = 215;
 $263 = $2;
 $1 = $263;
 $264 = $1;
 STACKTOP = sp;return ($264|0);
}
function _freeup_94($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_95($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_95($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_100($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $3;
 $11 = ((($10)) + 152|0);
 $12 = +HEAPF64[$11>>3];
 $13 = +HEAPF64[$1>>3];
 $14 = $13 / $12;
 HEAPF64[$1>>3] = $14;
 $15 = $3;
 $16 = ((($15)) + 152|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 / $17;
 HEAPF64[$18>>3] = $20;
 $21 = $5;
 $22 = ((($21)) + 24|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $23 - $25;
 $27 = ((($1)) + 8|0);
 HEAPF64[$27>>3] = $26;
 $28 = +HEAPF64[$1>>3];
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (+_hypot($28,$30));
 $6 = $31;
 $32 = $6;
 $33 = $32 != 0.0;
 if ($33) {
  $34 = $5;
  $35 = ((($34)) + 16|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 < 0.0;
  if ($37) {
   $38 = $6;
   $39 = -$38;
   $6 = $39;
   $40 = +HEAPF64[$1>>3];
   $41 = -$40;
   HEAPF64[$1>>3] = $41;
   $42 = ((($1)) + 8|0);
   $43 = +HEAPF64[$42>>3];
   $44 = -$43;
   $45 = ((($1)) + 8|0);
   HEAPF64[$45>>3] = $44;
  }
  $46 = $5;
  $47 = ((($46)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $3;
   $51 = HEAP32[$50>>2]|0;
   $52 = $6;
   $53 = $5;
   $54 = ((($53)) + 32|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $52 / $55;
   $57 = $5;
   $58 = ((($57)) + 16|0);
   $59 = +HEAPF64[$58>>3];
   $60 = 1.0 / $59;
   $61 = (+Math_pow((+$56),(+$60)));
   $62 = $3;
   $63 = ((($62)) + 88|0);
   $64 = +HEAPF64[$63>>3];
   $65 = (+_pj_phi2($51,$61,$64));
   $66 = ((($4)) + 8|0);
   HEAPF64[$66>>3] = $65;
   $67 = ((($4)) + 8|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $68 == inf;
   if ($69) {
    $70 = $3;
    $71 = HEAP32[$70>>2]|0;
    _pj_ctx_set_errno($71,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  } else {
   $72 = $5;
   $73 = ((($72)) + 32|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $6;
   $76 = $74 / $75;
   $77 = $5;
   $78 = ((($77)) + 16|0);
   $79 = +HEAPF64[$78>>3];
   $80 = 1.0 / $79;
   $81 = (+Math_pow((+$76),(+$80)));
   $82 = (+Math_atan((+$81)));
   $83 = 2.0 * $82;
   $84 = $83 - 1.5707963267948966;
   $85 = ((($4)) + 8|0);
   HEAPF64[$85>>3] = $84;
  }
  $86 = +HEAPF64[$1>>3];
  $87 = ((($1)) + 8|0);
  $88 = +HEAPF64[$87>>3];
  $89 = (+Math_atan2((+$86),(+$88)));
  $90 = $5;
  $91 = ((($90)) + 16|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $89 / $92;
  HEAPF64[$4>>3] = $93;
 } else {
  HEAPF64[$4>>3] = 0.0;
  $94 = $5;
  $95 = ((($94)) + 16|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $96 > 0.0;
  $98 = $97 ? 1.5707963267948966 : -1.5707963267948966;
  $99 = ((($4)) + 8|0);
  HEAPF64[$99>>3] = $98;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_101($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_abs((+$11)));
 $13 = $12 - 1.5707963267948966;
 $14 = (+Math_abs((+$13)));
 $15 = $14 < 1.0E-10;
 do {
  if ($15) {
   $16 = ((($1)) + 8|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $5;
   $19 = ((($18)) + 16|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $17 * $20;
   $22 = $21 <= 0.0;
   if (!($22)) {
    $6 = 0.0;
    break;
   }
   $23 = $3;
   $24 = HEAP32[$23>>2]|0;
   _pj_ctx_set_errno($24,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $25 = $5;
   $26 = ((($25)) + 32|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $5;
   $29 = ((($28)) + 40|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   $32 = ((($1)) + 8|0);
   $33 = +HEAPF64[$32>>3];
   if ($31) {
    $34 = ((($1)) + 8|0);
    $35 = +HEAPF64[$34>>3];
    $36 = (+Math_sin((+$35)));
    $37 = $3;
    $38 = ((($37)) + 88|0);
    $39 = +HEAPF64[$38>>3];
    $40 = (+_pj_tsfn($33,$36,$39));
    $41 = $5;
    $42 = ((($41)) + 16|0);
    $43 = +HEAPF64[$42>>3];
    $44 = (+Math_pow((+$40),(+$43)));
    $54 = $44;
   } else {
    $45 = 0.5 * $33;
    $46 = 0.78539816339744828 + $45;
    $47 = (+Math_tan((+$46)));
    $48 = $5;
    $49 = ((($48)) + 16|0);
    $50 = +HEAPF64[$49>>3];
    $51 = -$50;
    $52 = (+Math_pow((+$47),(+$51)));
    $54 = $52;
   }
   $53 = $27 * $54;
   $6 = $53;
  }
 } while(0);
 $55 = $5;
 $56 = ((($55)) + 16|0);
 $57 = +HEAPF64[$56>>3];
 $58 = +HEAPF64[$1>>3];
 $59 = $58 * $57;
 HEAPF64[$1>>3] = $59;
 $60 = $3;
 $61 = ((($60)) + 152|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $6;
 $64 = +HEAPF64[$1>>3];
 $65 = (+Math_sin((+$64)));
 $66 = $63 * $65;
 $67 = $62 * $66;
 HEAPF64[$4>>3] = $67;
 $68 = $3;
 $69 = ((($68)) + 152|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $5;
 $72 = ((($71)) + 24|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $6;
 $75 = +HEAPF64[$1>>3];
 $76 = (+Math_cos((+$75)));
 $77 = $74 * $76;
 $78 = $73 - $77;
 $79 = $70 * $78;
 $80 = ((($4)) + 8|0);
 HEAPF64[$80>>3] = $79;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _special_102($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $1;
 $4 = $2;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = ((($0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_abs((+$11)));
 $13 = $12 - 1.5707963267948966;
 $14 = (+Math_abs((+$13)));
 $15 = $14 < 1.0E-10;
 do {
  if ($15) {
   $16 = ((($0)) + 8|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $5;
   $19 = ((($18)) + 16|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $17 * $20;
   $22 = $21 <= 0.0;
   if ($22) {
    STACKTOP = sp;return;
   } else {
    $6 = 0.0;
    break;
   }
  } else {
   $23 = $5;
   $24 = ((($23)) + 32|0);
   $25 = +HEAPF64[$24>>3];
   $26 = $5;
   $27 = ((($26)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0);
   $30 = ((($0)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   if ($29) {
    $32 = ((($0)) + 8|0);
    $33 = +HEAPF64[$32>>3];
    $34 = (+Math_sin((+$33)));
    $35 = $3;
    $36 = ((($35)) + 88|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (+_pj_tsfn($31,$34,$37));
    $39 = $5;
    $40 = ((($39)) + 16|0);
    $41 = +HEAPF64[$40>>3];
    $42 = (+Math_pow((+$38),(+$41)));
    $52 = $42;
   } else {
    $43 = 0.5 * $31;
    $44 = 0.78539816339744828 + $43;
    $45 = (+Math_tan((+$44)));
    $46 = $5;
    $47 = ((($46)) + 16|0);
    $48 = +HEAPF64[$47>>3];
    $49 = -$48;
    $50 = (+Math_pow((+$45),(+$49)));
    $52 = $50;
   }
   $51 = $25 * $52;
   $6 = $51;
  }
 } while(0);
 $53 = $4;
 $54 = ((($53)) + 96|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 | 12;
 HEAP32[$54>>2] = $56;
 $57 = $3;
 $58 = ((($57)) + 152|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $5;
 $61 = ((($60)) + 16|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $59 * $62;
 $64 = $6;
 $65 = $63 * $64;
 $66 = ((($0)) + 8|0);
 $67 = +HEAPF64[$66>>3];
 $68 = (+Math_sin((+$67)));
 $69 = ((($0)) + 8|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (+Math_cos((+$70)));
 $72 = $3;
 $73 = ((($72)) + 72|0);
 $74 = +HEAPF64[$73>>3];
 $75 = (+_pj_msfn($68,$71,$74));
 $76 = $65 / $75;
 $77 = $4;
 $78 = ((($77)) + 32|0);
 HEAPF64[$78>>3] = $76;
 $79 = $4;
 $80 = ((($79)) + 40|0);
 HEAPF64[$80>>3] = $76;
 $81 = $5;
 $82 = ((($81)) + 16|0);
 $83 = +HEAPF64[$82>>3];
 $84 = -$83;
 $85 = +HEAPF64[$0>>3];
 $86 = $84 * $85;
 $87 = $4;
 $88 = ((($87)) + 64|0);
 HEAPF64[$88>>3] = $86;
 STACKTOP = sp;return;
}
function _pj_poly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_poly($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 216;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10339;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_poly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_104($7)|0);
  $1 = $8;
  $52 = $1;
  STACKTOP = sp;return ($52|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 72|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 != 0.0;
 $16 = $2;
 do {
  if ($15) {
   $17 = ((($16)) + 72|0);
   $18 = +HEAPF64[$17>>3];
   $19 = (_pj_enfn($18)|0);
   $20 = $3;
   $21 = ((($20)) + 8|0);
   HEAP32[$21>>2] = $19;
   $22 = ($19|0)!=(0|0);
   $23 = $2;
   if ($22) {
    $24 = ((($23)) + 128|0);
    $25 = +HEAPF64[$24>>3];
    $26 = $2;
    $27 = ((($26)) + 128|0);
    $28 = +HEAPF64[$27>>3];
    $29 = (+Math_sin((+$28)));
    $30 = $2;
    $31 = ((($30)) + 128|0);
    $32 = +HEAPF64[$31>>3];
    $33 = (+Math_cos((+$32)));
    $34 = $3;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (+_pj_mlfn($25,$29,$33,$36));
    $38 = $3;
    HEAPF64[$38>>3] = $37;
    $39 = $2;
    $40 = ((($39)) + 8|0);
    HEAP32[$40>>2] = 217;
    $41 = $2;
    $42 = ((($41)) + 4|0);
    HEAP32[$42>>2] = 218;
    break;
   }
   _freeup_103($23);
   $1 = 0;
   $52 = $1;
   STACKTOP = sp;return ($52|0);
  } else {
   $43 = ((($16)) + 128|0);
   $44 = +HEAPF64[$43>>3];
   $45 = -$44;
   $46 = $3;
   HEAPF64[$46>>3] = $45;
   $47 = $2;
   $48 = ((($47)) + 8|0);
   HEAP32[$48>>2] = 219;
   $49 = $2;
   $50 = ((($49)) + 4|0);
   HEAP32[$50>>2] = 220;
  }
 } while(0);
 $51 = $2;
 $1 = $51;
 $52 = $1;
 STACKTOP = sp;return ($52|0);
}
function _freeup_103($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_104($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_104($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 416|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  (_pj_dealloc($20)|0);
 }
 $21 = $2;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 (_pj_dealloc($23)|0);
 $24 = $2;
 $25 = (_pj_dealloc($24)|0);
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _e_inverse_105($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 72|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $16 = $3;
 $17 = ((($16)) + 416|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $5;
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 + $20;
 HEAPF64[$21>>3] = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_abs((+$25)));
 $27 = $26 <= 1.0E-10;
 do {
  if ($27) {
   $28 = +HEAPF64[$1>>3];
   HEAPF64[$4>>3] = $28;
   $29 = ((($4)) + 8|0);
   HEAPF64[$29>>3] = 0.0;
  } else {
   $30 = ((($1)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $32 = ((($1)) + 8|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $31 * $33;
   $35 = +HEAPF64[$1>>3];
   $36 = +HEAPF64[$1>>3];
   $37 = $35 * $36;
   $38 = $34 + $37;
   $6 = $38;
   $39 = ((($1)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = ((($4)) + 8|0);
   HEAPF64[$41>>3] = $40;
   $15 = 20;
   while(1) {
    $42 = $15;
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
    $44 = ((($4)) + 8|0);
    $45 = +HEAPF64[$44>>3];
    $46 = (+Math_sin((+$45)));
    $8 = $46;
    $47 = $8;
    $48 = ((($4)) + 8|0);
    $49 = +HEAPF64[$48>>3];
    $50 = (+Math_cos((+$49)));
    $9 = $50;
    $51 = $47 * $50;
    $10 = $51;
    $52 = $9;
    $53 = (+Math_abs((+$52)));
    $54 = $53 < 9.9999999999999998E-13;
    if ($54) {
     label = 6;
     break;
    }
    $57 = $8;
    $58 = $3;
    $59 = ((($58)) + 72|0);
    $60 = +HEAPF64[$59>>3];
    $61 = $8;
    $62 = $60 * $61;
    $63 = $8;
    $64 = $62 * $63;
    $65 = 1.0 - $64;
    $66 = (+Math_sqrt((+$65)));
    $13 = $66;
    $67 = $57 * $66;
    $68 = $9;
    $69 = $67 / $68;
    $7 = $69;
    $70 = ((($4)) + 8|0);
    $71 = +HEAPF64[$70>>3];
    $72 = $8;
    $73 = $9;
    $74 = $5;
    $75 = ((($74)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (+_pj_mlfn($71,$72,$73,$76));
    $11 = $77;
    $78 = $11;
    $79 = $11;
    $80 = $78 * $79;
    $81 = $6;
    $82 = $80 + $81;
    $12 = $82;
    $83 = $3;
    $84 = ((($83)) + 104|0);
    $85 = +HEAPF64[$84>>3];
    $86 = $13;
    $87 = $13;
    $88 = $86 * $87;
    $89 = $13;
    $90 = $88 * $89;
    $91 = $85 / $90;
    $13 = $91;
    $92 = $11;
    $93 = $11;
    $94 = $92 + $93;
    $95 = $7;
    $96 = $12;
    $97 = $95 * $96;
    $98 = $94 + $97;
    $99 = ((($1)) + 8|0);
    $100 = +HEAPF64[$99>>3];
    $101 = 2.0 * $100;
    $102 = $7;
    $103 = $11;
    $104 = $102 * $103;
    $105 = $104 + 1.0;
    $106 = $101 * $105;
    $107 = $98 - $106;
    $108 = $3;
    $109 = ((($108)) + 72|0);
    $110 = +HEAPF64[$109>>3];
    $111 = $10;
    $112 = $110 * $111;
    $113 = $12;
    $114 = ((($1)) + 8|0);
    $115 = +HEAPF64[$114>>3];
    $116 = 2.0 * $115;
    $117 = $11;
    $118 = $116 * $117;
    $119 = $113 - $118;
    $120 = $112 * $119;
    $121 = $7;
    $122 = $120 / $121;
    $123 = ((($1)) + 8|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $11;
    $126 = $124 - $125;
    $127 = 2.0 * $126;
    $128 = $7;
    $129 = $13;
    $130 = $128 * $129;
    $131 = $10;
    $132 = 1.0 / $131;
    $133 = $130 - $132;
    $134 = $127 * $133;
    $135 = $122 + $134;
    $136 = $13;
    $137 = $135 - $136;
    $138 = $13;
    $139 = $137 - $138;
    $140 = $107 / $139;
    $14 = $140;
    $141 = ((($4)) + 8|0);
    $142 = +HEAPF64[$141>>3];
    $143 = $142 + $140;
    HEAPF64[$141>>3] = $143;
    $144 = $14;
    $145 = (+Math_abs((+$144)));
    $146 = $145 <= 9.9999999999999998E-13;
    if ($146) {
     break;
    }
    $147 = $15;
    $148 = (($147) + -1)|0;
    $15 = $148;
   }
   if ((label|0) == 6) {
    $55 = $3;
    $56 = HEAP32[$55>>2]|0;
    _pj_ctx_set_errno($56,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $149 = $15;
   $150 = ($149|0)!=(0);
   if ($150) {
    $153 = ((($4)) + 8|0);
    $154 = +HEAPF64[$153>>3];
    $155 = (+Math_sin((+$154)));
    $7 = $155;
    $156 = +HEAPF64[$1>>3];
    $157 = ((($4)) + 8|0);
    $158 = +HEAPF64[$157>>3];
    $159 = (+Math_tan((+$158)));
    $160 = $156 * $159;
    $161 = $3;
    $162 = ((($161)) + 72|0);
    $163 = +HEAPF64[$162>>3];
    $164 = $7;
    $165 = $163 * $164;
    $166 = $7;
    $167 = $165 * $166;
    $168 = 1.0 - $167;
    $169 = (+Math_sqrt((+$168)));
    $170 = $160 * $169;
    $171 = (+Math_asin((+$170)));
    $172 = ((($4)) + 8|0);
    $173 = +HEAPF64[$172>>3];
    $174 = (+Math_sin((+$173)));
    $175 = $171 / $174;
    HEAPF64[$4>>3] = $175;
    break;
   }
   $151 = $3;
   $152 = HEAP32[$151>>2]|0;
   _pj_ctx_set_errno($152,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_106($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_abs((+$13)));
 $15 = $14 <= 1.0E-10;
 if ($15) {
  $16 = +HEAPF64[$1>>3];
  HEAPF64[$4>>3] = $16;
  $17 = $5;
  $18 = +HEAPF64[$17>>3];
  $19 = -$18;
  $20 = ((($4)) + 8|0);
  HEAPF64[$20>>3] = $19;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_sin((+$22)));
 $7 = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_cos((+$25)));
 $8 = $26;
 $27 = (+Math_abs((+$26)));
 $28 = $27 > 1.0E-10;
 if ($28) {
  $29 = $7;
  $30 = $8;
  $31 = $3;
  $32 = ((($31)) + 72|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (+_pj_msfn($29,$30,$33));
  $35 = $7;
  $36 = $34 / $35;
  $37 = $36;
 } else {
  $37 = 0.0;
 }
 $6 = $37;
 $38 = $6;
 $39 = $7;
 $40 = +HEAPF64[$1>>3];
 $41 = $40 * $39;
 HEAPF64[$1>>3] = $41;
 $42 = (+Math_sin((+$41)));
 $43 = $38 * $42;
 HEAPF64[$4>>3] = $43;
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $7;
 $47 = $8;
 $48 = $5;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (+_pj_mlfn($45,$46,$47,$50));
 $52 = $5;
 $53 = +HEAPF64[$52>>3];
 $54 = $51 - $53;
 $55 = $6;
 $56 = +HEAPF64[$1>>3];
 $57 = (+Math_cos((+$56)));
 $58 = 1.0 - $57;
 $59 = $55 * $58;
 $60 = $54 + $59;
 $61 = ((($4)) + 8|0);
 HEAPF64[$61>>3] = $60;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_107($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 128|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 + $13;
 $15 = ((($1)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = (+Math_abs((+$14)));
 $17 = $16 <= 1.0E-10;
 do {
  if ($17) {
   $18 = +HEAPF64[$1>>3];
   HEAPF64[$4>>3] = $18;
   $19 = ((($4)) + 8|0);
   HEAPF64[$19>>3] = 0.0;
  } else {
   $20 = ((($1)) + 8|0);
   $21 = +HEAPF64[$20>>3];
   $22 = ((($4)) + 8|0);
   HEAPF64[$22>>3] = $21;
   $23 = +HEAPF64[$1>>3];
   $24 = +HEAPF64[$1>>3];
   $25 = $23 * $24;
   $26 = ((($1)) + 8|0);
   $27 = +HEAPF64[$26>>3];
   $28 = ((($1)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $27 * $29;
   $31 = $25 + $30;
   $5 = $31;
   $8 = 10;
   while(1) {
    $32 = ((($4)) + 8|0);
    $33 = +HEAPF64[$32>>3];
    $34 = (+Math_tan((+$33)));
    $7 = $34;
    $35 = ((($1)) + 8|0);
    $36 = +HEAPF64[$35>>3];
    $37 = ((($4)) + 8|0);
    $38 = +HEAPF64[$37>>3];
    $39 = $7;
    $40 = $38 * $39;
    $41 = $40 + 1.0;
    $42 = $36 * $41;
    $43 = ((($4)) + 8|0);
    $44 = +HEAPF64[$43>>3];
    $45 = $42 - $44;
    $46 = ((($4)) + 8|0);
    $47 = +HEAPF64[$46>>3];
    $48 = ((($4)) + 8|0);
    $49 = +HEAPF64[$48>>3];
    $50 = $47 * $49;
    $51 = $5;
    $52 = $50 + $51;
    $53 = 0.5 * $52;
    $54 = $7;
    $55 = $53 * $54;
    $56 = $45 - $55;
    $57 = ((($4)) + 8|0);
    $58 = +HEAPF64[$57>>3];
    $59 = ((($1)) + 8|0);
    $60 = +HEAPF64[$59>>3];
    $61 = $58 - $60;
    $62 = $7;
    $63 = $61 / $62;
    $64 = $63 - 1.0;
    $65 = $56 / $64;
    $6 = $65;
    $66 = ((($4)) + 8|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $67 - $65;
    HEAPF64[$66>>3] = $68;
    $69 = $6;
    $70 = (+Math_abs((+$69)));
    $71 = $70 > 1.0E-10;
    if (!($71)) {
     break;
    }
    $72 = $8;
    $73 = (($72) + -1)|0;
    $8 = $73;
    $74 = ($73|0)!=(0);
    if (!($74)) {
     break;
    }
   }
   $75 = $8;
   $76 = ($75|0)!=(0);
   if ($76) {
    $79 = +HEAPF64[$1>>3];
    $80 = ((($4)) + 8|0);
    $81 = +HEAPF64[$80>>3];
    $82 = (+Math_tan((+$81)));
    $83 = $79 * $82;
    $84 = (+Math_asin((+$83)));
    $85 = ((($4)) + 8|0);
    $86 = +HEAPF64[$85>>3];
    $87 = (+Math_sin((+$86)));
    $88 = $84 / $87;
    HEAPF64[$4>>3] = $88;
    break;
   }
   $77 = $3;
   $78 = HEAP32[$77>>2]|0;
   _pj_ctx_set_errno($78,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_108($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 <= 1.0E-10;
 if ($14) {
  $15 = +HEAPF64[$1>>3];
  HEAPF64[$4>>3] = $15;
  $16 = $5;
  $17 = +HEAPF64[$16>>3];
  $18 = ((($4)) + 8|0);
  HEAPF64[$18>>3] = $17;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $19 = ((($1)) + 8|0);
  $20 = +HEAPF64[$19>>3];
  $21 = (+Math_tan((+$20)));
  $22 = 1.0 / $21;
  $6 = $22;
  $23 = +HEAPF64[$1>>3];
  $24 = ((($1)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+Math_sin((+$25)));
  $27 = $23 * $26;
  $7 = $27;
  $28 = (+Math_sin((+$27)));
  $29 = $6;
  $30 = $28 * $29;
  HEAPF64[$4>>3] = $30;
  $31 = ((($1)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $3;
  $34 = ((($33)) + 128|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $32 - $35;
  $37 = $6;
  $38 = $7;
  $39 = (+Math_cos((+$38)));
  $40 = 1.0 - $39;
  $41 = $37 * $40;
  $42 = $36 + $41;
  $43 = ((($4)) + 8|0);
  HEAPF64[$43>>3] = $42;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_rpoly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_rpoly($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 221;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10376;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_rpoly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,32)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_110($8)|0);
  $1 = $9;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pj_param($4,$14,$17,15033);
 $18 = +HEAPF64[$4>>3];
 $19 = (+Math_abs((+$18)));
 $20 = $3;
 HEAPF64[$20>>3] = $19;
 $21 = $19 > 1.0000000000000001E-9;
 $22 = $21&1;
 $23 = $3;
 $24 = ((($23)) + 24|0);
 HEAP32[$24>>2] = $22;
 if ($21) {
  $25 = $3;
  $26 = +HEAPF64[$25>>3];
  $27 = (+Math_sin((+$26)));
  $28 = 0.5 * $27;
  $29 = $3;
  $30 = ((($29)) + 16|0);
  HEAPF64[$30>>3] = $28;
  $31 = $3;
  $32 = ((($31)) + 16|0);
  $33 = +HEAPF64[$32>>3];
  $34 = 0.5 / $33;
  $35 = $3;
  $36 = ((($35)) + 8|0);
  HEAPF64[$36>>3] = $34;
 }
 $37 = $2;
 $38 = ((($37)) + 72|0);
 HEAPF64[$38>>3] = 0.0;
 $39 = $2;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = 222;
 $41 = $2;
 $1 = $41;
 $42 = $1;
 STACKTOP = sp;return ($42|0);
}
function _freeup_109($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_110($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_110($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_112($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = +HEAPF64[$1>>3];
 if ($13) {
  $15 = $5;
  $16 = ((($15)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $14 * $17;
  $19 = (+Math_tan((+$18)));
  $20 = $5;
  $21 = ((($20)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $19 * $22;
  $6 = $23;
 } else {
  $24 = 0.5 * $14;
  $6 = $24;
 }
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+Math_abs((+$26)));
 $28 = $27 < 1.0000000000000001E-9;
 if ($28) {
  $29 = $6;
  $30 = $6;
  $31 = $29 + $30;
  HEAPF64[$4>>3] = $31;
  $32 = $3;
  $33 = ((($32)) + 128|0);
  $34 = +HEAPF64[$33>>3];
  $35 = -$34;
  $36 = ((($4)) + 8|0);
  HEAPF64[$36>>3] = $35;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $37 = ((($1)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+Math_tan((+$38)));
  $40 = 1.0 / $39;
  $41 = ((($4)) + 8|0);
  HEAPF64[$41>>3] = $40;
  $42 = $6;
  $43 = ((($1)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = (+Math_sin((+$44)));
  $46 = $42 * $45;
  $47 = (+Math_atan((+$46)));
  $48 = 2.0 * $47;
  $6 = $48;
  $49 = (+Math_sin((+$48)));
  $50 = ((($4)) + 8|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $49 * $51;
  HEAPF64[$4>>3] = $52;
  $53 = ((($1)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $3;
  $56 = ((($55)) + 128|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $54 - $57;
  $59 = $6;
  $60 = (+Math_cos((+$59)));
  $61 = 1.0 - $60;
  $62 = ((($4)) + 8|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $61 * $63;
  $65 = $58 + $64;
  $66 = ((($4)) + 8|0);
  HEAPF64[$66>>3] = $65;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_euler($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_euler($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10429;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_euler($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,0)|0);
 STACKTOP = sp;return ($3|0);
}
function _freeup_113($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_114($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_114($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_115($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0;
 var $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $9 = (_pj_calloc(1,56)|0);
 $8 = $9;
 $10 = $8;
 $11 = (0|0)==($10|0);
 if ($11) {
  $12 = $3;
  $13 = (_freeup_new_114($12)|0);
  $2 = $13;
  $280 = $2;
  STACKTOP = sp;return ($280|0);
 }
 $14 = $8;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 HEAP32[$16>>2] = $14;
 $17 = $4;
 $18 = $8;
 $19 = ((($18)) + 48|0);
 HEAP32[$19>>2] = $17;
 $20 = $3;
 $21 = (_phi12_116($20,$5)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = $7;
  _pj_ctx_set_errno($25,$26);
  $27 = $3;
  _freeup_113($27);
  $2 = 0;
  $280 = $2;
  STACKTOP = sp;return ($280|0);
 }
 $28 = $8;
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 L9: do {
  switch ($30|0) {
  case 5:  {
   $31 = $8;
   $32 = ((($31)) + 24|0);
   $33 = +HEAPF64[$32>>3];
   $34 = (+Math_sin((+$33)));
   $35 = $8;
   HEAPF64[$35>>3] = $34;
   $36 = +HEAPF64[$5>>3];
   $37 = (+Math_cos((+$36)));
   $6 = $37;
   $38 = $8;
   $39 = +HEAPF64[$38>>3];
   $40 = $6;
   $41 = $39 / $40;
   $42 = $6;
   $43 = $8;
   $44 = +HEAPF64[$43>>3];
   $45 = $42 / $44;
   $46 = $41 + $45;
   $47 = $8;
   $48 = ((($47)) + 8|0);
   HEAPF64[$48>>3] = $46;
   $49 = $8;
   $50 = ((($49)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $3;
   $53 = ((($52)) + 128|0);
   $54 = +HEAPF64[$53>>3];
   $55 = (+Math_sin((+$54)));
   $56 = 2.0 * $55;
   $57 = $51 - $56;
   $58 = $8;
   $59 = +HEAPF64[$58>>3];
   $60 = $57 / $59;
   $61 = (+Math_sqrt((+$60)));
   $62 = $8;
   $63 = ((($62)) + 16|0);
   HEAPF64[$63>>3] = $61;
   break;
  }
  case 1:  {
   $64 = +HEAPF64[$5>>3];
   $65 = (+Math_sin((+$64)));
   $66 = +HEAPF64[$5>>3];
   $67 = $8;
   $68 = ((($67)) + 24|0);
   $69 = +HEAPF64[$68>>3];
   $70 = (+Math_tan((+$69)));
   $71 = $66 * $70;
   $72 = $65 / $71;
   $73 = $8;
   $74 = ((($73)) + 24|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $72 + $75;
   $77 = $8;
   $78 = ((($77)) + 8|0);
   HEAPF64[$78>>3] = $76;
   $79 = $8;
   $80 = ((($79)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $3;
   $83 = ((($82)) + 128|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $81 - $84;
   $86 = $8;
   $87 = ((($86)) + 16|0);
   HEAPF64[$87>>3] = $85;
   $88 = $8;
   $89 = ((($88)) + 24|0);
   $90 = +HEAPF64[$89>>3];
   $91 = (+Math_sin((+$90)));
   $92 = $8;
   HEAPF64[$92>>3] = $91;
   break;
  }
  case 2:  {
   $93 = +HEAPF64[$5>>3];
   $94 = (+Math_cos((+$93)));
   $95 = (+Math_sqrt((+$94)));
   $6 = $95;
   $96 = $8;
   $97 = ((($96)) + 24|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (+Math_tan((+$98)));
   $100 = $95 / $99;
   $101 = $8;
   $102 = ((($101)) + 8|0);
   HEAPF64[$102>>3] = $100;
   $103 = $8;
   $104 = ((($103)) + 8|0);
   $105 = +HEAPF64[$104>>3];
   $106 = $8;
   $107 = ((($106)) + 24|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $3;
   $110 = ((($109)) + 128|0);
   $111 = +HEAPF64[$110>>3];
   $112 = $108 - $111;
   $113 = (+Math_tan((+$112)));
   $114 = $105 + $113;
   $115 = $8;
   $116 = ((($115)) + 16|0);
   HEAPF64[$116>>3] = $114;
   $117 = $8;
   $118 = ((($117)) + 24|0);
   $119 = +HEAPF64[$118>>3];
   $120 = (+Math_sin((+$119)));
   $121 = $6;
   $122 = $120 * $121;
   $123 = $8;
   HEAPF64[$123>>3] = $122;
   break;
  }
  case 3:  {
   $124 = +HEAPF64[$5>>3];
   $125 = $8;
   $126 = ((($125)) + 24|0);
   $127 = +HEAPF64[$126>>3];
   $128 = (+Math_tan((+$127)));
   $129 = +HEAPF64[$5>>3];
   $130 = (+Math_tan((+$129)));
   $131 = $128 * $130;
   $132 = $124 / $131;
   $133 = $8;
   $134 = ((($133)) + 24|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $132 + $135;
   $137 = $8;
   $138 = ((($137)) + 8|0);
   HEAPF64[$138>>3] = $136;
   $139 = $8;
   $140 = ((($139)) + 8|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $3;
   $143 = ((($142)) + 128|0);
   $144 = +HEAPF64[$143>>3];
   $145 = $141 - $144;
   $146 = $8;
   $147 = ((($146)) + 16|0);
   HEAPF64[$147>>3] = $145;
   $148 = $8;
   $149 = ((($148)) + 24|0);
   $150 = +HEAPF64[$149>>3];
   $151 = (+Math_sin((+$150)));
   $152 = +HEAPF64[$5>>3];
   $153 = (+Math_sin((+$152)));
   $154 = $151 * $153;
   $155 = +HEAPF64[$5>>3];
   $156 = (+Math_tan((+$155)));
   $157 = $154 * $156;
   $158 = +HEAPF64[$5>>3];
   $159 = +HEAPF64[$5>>3];
   $160 = $158 * $159;
   $161 = $157 / $160;
   $162 = $8;
   HEAPF64[$162>>3] = $161;
   break;
  }
  case 0:  {
   $163 = $8;
   $164 = ((($163)) + 24|0);
   $165 = +HEAPF64[$164>>3];
   $166 = (+Math_sin((+$165)));
   $167 = +HEAPF64[$5>>3];
   $168 = (+Math_sin((+$167)));
   $169 = $166 * $168;
   $170 = +HEAPF64[$5>>3];
   $171 = $169 / $170;
   $172 = $8;
   HEAPF64[$172>>3] = $171;
   $173 = +HEAPF64[$5>>3];
   $174 = $173 * 0.5;
   HEAPF64[$5>>3] = $174;
   $175 = +HEAPF64[$5>>3];
   $176 = +HEAPF64[$5>>3];
   $177 = (+Math_tan((+$176)));
   $178 = $8;
   $179 = ((($178)) + 24|0);
   $180 = +HEAPF64[$179>>3];
   $181 = (+Math_tan((+$180)));
   $182 = $177 * $181;
   $183 = $175 / $182;
   $184 = $8;
   $185 = ((($184)) + 24|0);
   $186 = +HEAPF64[$185>>3];
   $187 = $183 + $186;
   $188 = $8;
   $189 = ((($188)) + 8|0);
   HEAPF64[$189>>3] = $187;
   $190 = $8;
   $191 = ((($190)) + 8|0);
   $192 = +HEAPF64[$191>>3];
   $193 = $3;
   $194 = ((($193)) + 128|0);
   $195 = +HEAPF64[$194>>3];
   $196 = $192 - $195;
   $197 = $8;
   $198 = ((($197)) + 16|0);
   HEAPF64[$198>>3] = $196;
   break;
  }
  case 4:  {
   $199 = $8;
   $200 = ((($199)) + 24|0);
   $201 = +HEAPF64[$200>>3];
   $202 = (+Math_sin((+$201)));
   $203 = $8;
   HEAPF64[$203>>3] = $202;
   $204 = +HEAPF64[$5>>3];
   $205 = (+Math_cos((+$204)));
   $206 = $8;
   $207 = ((($206)) + 40|0);
   HEAPF64[$207>>3] = $205;
   $208 = $8;
   $209 = ((($208)) + 24|0);
   $210 = +HEAPF64[$209>>3];
   $211 = (+Math_tan((+$210)));
   $212 = 1.0 / $211;
   $213 = $8;
   $214 = ((($213)) + 32|0);
   HEAPF64[$214>>3] = $212;
   $215 = $3;
   $216 = ((($215)) + 128|0);
   $217 = +HEAPF64[$216>>3];
   $218 = $8;
   $219 = ((($218)) + 24|0);
   $220 = +HEAPF64[$219>>3];
   $221 = $217 - $220;
   HEAPF64[$5>>3] = $221;
   $222 = (+Math_abs((+$221)));
   $223 = $222 - 1.0E-10;
   $224 = $223 >= 1.5707963267948966;
   if (!($224)) {
    $228 = $8;
    $229 = ((($228)) + 40|0);
    $230 = +HEAPF64[$229>>3];
    $231 = $8;
    $232 = ((($231)) + 32|0);
    $233 = +HEAPF64[$232>>3];
    $234 = +HEAPF64[$5>>3];
    $235 = (+Math_tan((+$234)));
    $236 = $233 - $235;
    $237 = $230 * $236;
    $238 = $8;
    $239 = ((($238)) + 16|0);
    HEAPF64[$239>>3] = $237;
    break L9;
   }
   $225 = $3;
   $226 = HEAP32[$225>>2]|0;
   _pj_ctx_set_errno($226,-43);
   $227 = $3;
   _freeup_113($227);
   $2 = 0;
   $280 = $2;
   STACKTOP = sp;return ($280|0);
   break;
  }
  case 6:  {
   $240 = +HEAPF64[$5>>3];
   $241 = (+Math_tan((+$240)));
   $6 = $241;
   $242 = $8;
   $243 = ((($242)) + 24|0);
   $244 = +HEAPF64[$243>>3];
   $245 = (+Math_sin((+$244)));
   $246 = $241 * $245;
   $247 = +HEAPF64[$5>>3];
   $248 = $246 / $247;
   $249 = $8;
   HEAPF64[$249>>3] = $248;
   $250 = +HEAPF64[$5>>3];
   $251 = $6;
   $252 = $8;
   $253 = ((($252)) + 24|0);
   $254 = +HEAPF64[$253>>3];
   $255 = (+Math_tan((+$254)));
   $256 = $251 * $255;
   $257 = $250 / $256;
   $258 = $8;
   $259 = ((($258)) + 24|0);
   $260 = +HEAPF64[$259>>3];
   $261 = $257 + $260;
   $262 = $8;
   $263 = ((($262)) + 8|0);
   HEAPF64[$263>>3] = $261;
   $264 = $8;
   $265 = ((($264)) + 8|0);
   $266 = +HEAPF64[$265>>3];
   $267 = $3;
   $268 = ((($267)) + 128|0);
   $269 = +HEAPF64[$268>>3];
   $270 = $266 - $269;
   $271 = $8;
   $272 = ((($271)) + 16|0);
   HEAPF64[$272>>3] = $270;
   break;
  }
  default: {
  }
  }
 } while(0);
 $273 = $3;
 $274 = ((($273)) + 8|0);
 HEAP32[$274>>2] = 224;
 $275 = $3;
 $276 = ((($275)) + 4|0);
 HEAP32[$276>>2] = 225;
 $277 = $3;
 $278 = ((($277)) + 72|0);
 HEAPF64[$278>>3] = 0.0;
 $279 = $3;
 $2 = $279;
 $280 = $2;
 STACKTOP = sp;return ($280|0);
}
function _phi12_116($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 _pj_param($7,$12,$15,11826);
 $16 = HEAP32[$7>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = ((($20)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  _pj_param($8,$19,$22,10722);
  $23 = HEAP32[$8>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = $2;
   $28 = ((($27)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   _pj_param($9,$26,$29,15081);
   $30 = +HEAPF64[$9>>3];
   $4 = $30;
   $31 = $2;
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   _pj_param($10,$32,$35,12667);
   $36 = +HEAPF64[$10>>3];
   $5 = $36;
   $37 = $5;
   $38 = $4;
   $39 = $37 - $38;
   $40 = 0.5 * $39;
   $41 = $3;
   HEAPF64[$41>>3] = $40;
   $42 = $5;
   $43 = $4;
   $44 = $42 + $43;
   $45 = 0.5 * $44;
   $46 = $2;
   $47 = ((($46)) + 416|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 24|0);
   HEAPF64[$49>>3] = $45;
   $50 = $3;
   $51 = +HEAPF64[$50>>3];
   $52 = (+Math_abs((+$51)));
   $53 = $52 < 1.0E-10;
   if ($53) {
    $61 = 1;
   } else {
    $54 = $2;
    $55 = ((($54)) + 416|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 24|0);
    $58 = +HEAPF64[$57>>3];
    $59 = (+Math_abs((+$58)));
    $60 = $59 < 1.0E-10;
    $61 = $60;
   }
   $62 = $61 ? -42 : 0;
   $6 = $62;
   $63 = $3;
   $64 = +HEAPF64[$63>>3];
   $65 = $3;
   HEAPF64[$65>>3] = $64;
   $66 = $6;
   STACKTOP = sp;return ($66|0);
  }
 }
 $6 = -41;
 $66 = $6;
 STACKTOP = sp;return ($66|0);
}
function _s_inverse_117($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = +HEAPF64[$1>>3];
 $11 = $5;
 $12 = ((($11)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 - $15;
 $17 = ((($1)) + 8|0);
 HEAPF64[$17>>3] = $16;
 $18 = (+_hypot($10,$16));
 $6 = $18;
 $19 = $5;
 $20 = +HEAPF64[$19>>3];
 $21 = $20 < 0.0;
 if ($21) {
  $22 = $6;
  $23 = -$22;
  $6 = $23;
  $24 = +HEAPF64[$1>>3];
  $25 = -$24;
  HEAPF64[$1>>3] = $25;
  $26 = ((($1)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = -$27;
  $29 = ((($1)) + 8|0);
  HEAPF64[$29>>3] = $28;
 }
 $30 = +HEAPF64[$1>>3];
 $31 = ((($1)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = (+Math_atan2((+$30),(+$32)));
 $34 = $5;
 $35 = +HEAPF64[$34>>3];
 $36 = $33 / $35;
 HEAPF64[$4>>3] = $36;
 $37 = $5;
 $38 = ((($37)) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 switch ($39|0) {
 case 4:  {
  $40 = $5;
  $41 = ((($40)) + 32|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $6;
  $44 = $5;
  $45 = ((($44)) + 40|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $43 / $46;
  $48 = $42 - $47;
  $49 = (+Math_atan((+$48)));
  $50 = $5;
  $51 = ((($50)) + 24|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $49 + $52;
  $54 = ((($4)) + 8|0);
  HEAPF64[$54>>3] = $53;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $55 = $5;
  $56 = ((($55)) + 24|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $6;
  $59 = $5;
  $60 = ((($59)) + 8|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $58 - $61;
  $63 = (+Math_atan((+$62)));
  $64 = $57 - $63;
  $65 = ((($4)) + 8|0);
  HEAPF64[$65>>3] = $64;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $66 = $5;
  $67 = ((($66)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $6;
  $70 = $68 - $69;
  $71 = ((($4)) + 8|0);
  HEAPF64[$71>>3] = $70;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 }
}
function _s_forward_118($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 switch ($12|0) {
 case 2:  {
  $13 = $5;
  $14 = ((($13)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $5;
  $17 = ((($16)) + 24|0);
  $18 = +HEAPF64[$17>>3];
  $19 = ((($1)) + 8|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $18 - $20;
  $22 = (+Math_tan((+$21)));
  $23 = $15 + $22;
  $6 = $23;
  break;
 }
 case 4:  {
  $24 = $5;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $5;
  $28 = ((($27)) + 32|0);
  $29 = +HEAPF64[$28>>3];
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $5;
  $33 = ((($32)) + 24|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $31 - $34;
  $36 = (+Math_tan((+$35)));
  $37 = $29 - $36;
  $38 = $26 * $37;
  $6 = $38;
  break;
 }
 default: {
  $39 = $5;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = ((($1)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $41 - $43;
  $6 = $44;
 }
 }
 $45 = $6;
 $46 = $5;
 $47 = +HEAPF64[$46>>3];
 $48 = +HEAPF64[$1>>3];
 $49 = $48 * $47;
 HEAPF64[$1>>3] = $49;
 $50 = (+Math_sin((+$49)));
 $51 = $45 * $50;
 HEAPF64[$4>>3] = $51;
 $52 = $5;
 $53 = ((($52)) + 16|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $6;
 $56 = +HEAPF64[$1>>3];
 $57 = (+Math_cos((+$56)));
 $58 = $55 * $57;
 $59 = $54 - $58;
 $60 = ((($4)) + 8|0);
 HEAPF64[$60>>3] = $59;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_tissot($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tissot($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10466;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tissot($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,5)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_murd1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_murd1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10504;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_murd1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,1)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_murd2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_murd2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10545;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_murd2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_murd3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_murd3($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10587;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_murd3($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,3)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_pconic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_pconic($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10630;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_pconic($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,4)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_vitk1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_vitk1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 223;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10679;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_vitk1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_setup_115($2,6)|0);
 STACKTOP = sp;return ($3|0);
}
function _pj_rouss($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_rouss($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 226;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10729;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_rouss($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0;
 var $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0;
 var $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $10 = (_pj_calloc(1,280)|0);
 $9 = $10;
 $11 = $9;
 $12 = (0|0)==($11|0);
 if ($12) {
  $13 = $2;
  $14 = (_freeup_new_124($13)|0);
  $1 = $14;
  $375 = $1;
  STACKTOP = sp;return ($375|0);
 }
 $15 = $9;
 $16 = $2;
 $17 = ((($16)) + 416|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (_proj_mdist_ini($20)|0);
 $22 = $9;
 $23 = ((($22)) + 272|0);
 HEAP32[$23>>2] = $21;
 $24 = ($21|0)!=(0|0);
 $25 = $2;
 if ($24) {
  $26 = ((($25)) + 128|0);
  $27 = +HEAPF64[$26>>3];
  $28 = (+Math_sin((+$27)));
  $4 = $28;
  $29 = $2;
  $30 = ((($29)) + 128|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $4;
  $33 = $2;
  $34 = ((($33)) + 128|0);
  $35 = +HEAPF64[$34>>3];
  $36 = (+Math_cos((+$35)));
  $37 = $9;
  $38 = ((($37)) + 272|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+_proj_mdist($31,$32,$36,$39));
  $41 = $9;
  HEAPF64[$41>>3] = $40;
  $42 = $2;
  $43 = ((($42)) + 72|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $4;
  $46 = $44 * $45;
  $47 = $4;
  $48 = $46 * $47;
  $4 = $48;
  $49 = 1.0 - $48;
  $5 = $49;
  $50 = $5;
  $51 = (+Math_sqrt((+$50)));
  $52 = 1.0 / $51;
  $3 = $52;
  $53 = $5;
  $54 = $5;
  $55 = $53 * $54;
  $56 = $2;
  $57 = ((($56)) + 104|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $55 / $58;
  $7 = $59;
  $60 = $7;
  $61 = $7;
  $62 = $60 * $61;
  $8 = $62;
  $63 = $2;
  $64 = ((($63)) + 128|0);
  $65 = +HEAPF64[$64>>3];
  $66 = (+Math_tan((+$65)));
  $5 = $66;
  $67 = $5;
  $68 = $5;
  $69 = $67 * $68;
  $6 = $69;
  $70 = $7;
  $71 = $70 / 4.0;
  $72 = $9;
  $73 = ((($72)) + 8|0);
  HEAPF64[$73>>3] = $71;
  $74 = $9;
  $75 = ((($74)) + 120|0);
  HEAPF64[$75>>3] = $71;
  $76 = $7;
  $77 = $6;
  $78 = 2.0 * $77;
  $79 = $78 - 1.0;
  $80 = $4;
  $81 = 2.0 * $80;
  $82 = $79 - $81;
  $83 = $76 * $82;
  $84 = $83 / 12.0;
  $85 = $9;
  $86 = ((($85)) + 16|0);
  HEAPF64[$86>>3] = $84;
  $87 = $9;
  $88 = ((($87)) + 128|0);
  HEAPF64[$88>>3] = $84;
  $89 = $7;
  $90 = $5;
  $91 = $89 * $90;
  $92 = $6;
  $93 = 4.0 * $92;
  $94 = 1.0 + $93;
  $95 = $91 * $94;
  $96 = $3;
  $97 = 12.0 * $96;
  $98 = $95 / $97;
  $99 = $9;
  $100 = ((($99)) + 24|0);
  HEAPF64[$100>>3] = $98;
  $101 = $8;
  $102 = $101 / 24.0;
  $103 = $9;
  $104 = ((($103)) + 32|0);
  HEAPF64[$104>>3] = $102;
  $105 = $8;
  $106 = $6;
  $107 = $6;
  $108 = 12.0 * $107;
  $109 = 11.0 + $108;
  $110 = $106 * $109;
  $111 = -1.0 + $110;
  $112 = $105 * $111;
  $113 = $112 / 24.0;
  $114 = $9;
  $115 = ((($114)) + 40|0);
  HEAPF64[$115>>3] = $113;
  $116 = $8;
  $117 = $6;
  $118 = $6;
  $119 = 2.0 * $118;
  $120 = 11.0 - $119;
  $121 = $117 * $120;
  $122 = -2.0 + $121;
  $123 = $116 * $122;
  $124 = $123 / 240.0;
  $125 = $9;
  $126 = ((($125)) + 48|0);
  HEAPF64[$126>>3] = $124;
  $127 = $5;
  $128 = $3;
  $129 = 2.0 * $128;
  $130 = $127 / $129;
  $131 = $9;
  $132 = ((($131)) + 56|0);
  HEAPF64[$132>>3] = $130;
  $133 = $7;
  $134 = $133 / 12.0;
  $135 = $9;
  $136 = ((($135)) + 64|0);
  HEAPF64[$136>>3] = $134;
  $137 = $7;
  $138 = $6;
  $139 = 2.0 * $138;
  $140 = 1.0 + $139;
  $141 = $4;
  $142 = 2.0 * $141;
  $143 = $140 - $142;
  $144 = $137 * $143;
  $145 = $144 / 4.0;
  $146 = $9;
  $147 = ((($146)) + 72|0);
  HEAPF64[$147>>3] = $145;
  $148 = $7;
  $149 = $5;
  $150 = $148 * $149;
  $151 = $6;
  $152 = 2.0 - $151;
  $153 = $150 * $152;
  $154 = $3;
  $155 = 24.0 * $154;
  $156 = $153 / $155;
  $157 = $9;
  $158 = ((($157)) + 80|0);
  HEAPF64[$158>>3] = $156;
  $159 = $7;
  $160 = $5;
  $161 = $159 * $160;
  $162 = $6;
  $163 = 4.0 * $162;
  $164 = 5.0 + $163;
  $165 = $161 * $164;
  $166 = $3;
  $167 = 8.0 * $166;
  $168 = $165 / $167;
  $169 = $9;
  $170 = ((($169)) + 88|0);
  HEAPF64[$170>>3] = $168;
  $171 = $8;
  $172 = $6;
  $173 = $6;
  $174 = 6.0 * $173;
  $175 = -5.0 + $174;
  $176 = $172 * $175;
  $177 = -2.0 + $176;
  $178 = $171 * $177;
  $179 = $178 / 48.0;
  $180 = $9;
  $181 = ((($180)) + 96|0);
  HEAPF64[$181>>3] = $179;
  $182 = $8;
  $183 = $6;
  $184 = $6;
  $185 = 12.0 * $184;
  $186 = 19.0 + $185;
  $187 = $183 * $186;
  $188 = 5.0 + $187;
  $189 = $182 * $188;
  $190 = $189 / 24.0;
  $191 = $9;
  $192 = ((($191)) + 104|0);
  HEAPF64[$192>>3] = $190;
  $193 = $8;
  $194 = $193 / 120.0;
  $195 = $9;
  $196 = ((($195)) + 112|0);
  HEAPF64[$196>>3] = $194;
  $197 = $7;
  $198 = $5;
  $199 = $197 * $198;
  $200 = $6;
  $201 = 1.0 + $200;
  $202 = $199 * $201;
  $203 = $3;
  $204 = 3.0 * $203;
  $205 = $202 / $204;
  $206 = $9;
  $207 = ((($206)) + 136|0);
  HEAPF64[$207>>3] = $205;
  $208 = $8;
  $209 = $6;
  $210 = $6;
  $211 = 22.0 * $210;
  $212 = 34.0 + $211;
  $213 = $209 * $212;
  $214 = -3.0 + $213;
  $215 = $208 * $214;
  $216 = $215 / 240.0;
  $217 = $9;
  $218 = ((($217)) + 144|0);
  HEAPF64[$218>>3] = $216;
  $219 = $8;
  $220 = $6;
  $221 = $6;
  $222 = 12.0 * $221;
  $223 = 13.0 + $222;
  $224 = $220 * $223;
  $225 = 4.0 + $224;
  $226 = $219 * $225;
  $227 = $226 / 24.0;
  $228 = $9;
  $229 = ((($228)) + 152|0);
  HEAPF64[$229>>3] = $227;
  $230 = $8;
  $231 = $230 / 16.0;
  $232 = $9;
  $233 = ((($232)) + 160|0);
  HEAPF64[$233>>3] = $231;
  $234 = $8;
  $235 = $5;
  $236 = $234 * $235;
  $237 = $6;
  $238 = $6;
  $239 = $238 * 16.0;
  $240 = 33.0 + $239;
  $241 = $237 * $240;
  $242 = 11.0 + $241;
  $243 = $236 * $242;
  $244 = $3;
  $245 = 48.0 * $244;
  $246 = $243 / $245;
  $247 = $9;
  $248 = ((($247)) + 168|0);
  HEAPF64[$248>>3] = $246;
  $249 = $8;
  $250 = $5;
  $251 = $249 * $250;
  $252 = $6;
  $253 = $252 * 4.0;
  $254 = 1.0 + $253;
  $255 = $251 * $254;
  $256 = $3;
  $257 = 36.0 * $256;
  $258 = $255 / $257;
  $259 = $9;
  $260 = ((($259)) + 176|0);
  HEAPF64[$260>>3] = $258;
  $261 = $5;
  $262 = $3;
  $263 = 2.0 * $262;
  $264 = $261 / $263;
  $265 = $9;
  $266 = ((($265)) + 184|0);
  HEAPF64[$266>>3] = $264;
  $267 = $7;
  $268 = $267 / 12.0;
  $269 = $9;
  $270 = ((($269)) + 192|0);
  HEAPF64[$270>>3] = $268;
  $271 = $7;
  $272 = $6;
  $273 = 2.0 * $272;
  $274 = $273 + 1.0;
  $275 = $4;
  $276 = 2.0 * $275;
  $277 = $274 - $276;
  $278 = $271 * $277;
  $279 = $278 / 4.0;
  $280 = $9;
  $281 = ((($280)) + 200|0);
  HEAPF64[$281>>3] = $279;
  $282 = $7;
  $283 = $5;
  $284 = $282 * $283;
  $285 = $6;
  $286 = 1.0 + $285;
  $287 = $284 * $286;
  $288 = $3;
  $289 = 8.0 * $288;
  $290 = $287 / $289;
  $291 = $9;
  $292 = ((($291)) + 208|0);
  HEAPF64[$292>>3] = $290;
  $293 = $7;
  $294 = $5;
  $295 = $293 * $294;
  $296 = $6;
  $297 = $296 * 2.0;
  $298 = 1.0 + $297;
  $299 = $295 * $298;
  $300 = $3;
  $301 = 4.0 * $300;
  $302 = $299 / $301;
  $303 = $9;
  $304 = ((($303)) + 216|0);
  HEAPF64[$304>>3] = $302;
  $305 = $8;
  $306 = $6;
  $307 = $6;
  $308 = $307 * 6.0;
  $309 = 6.0 + $308;
  $310 = $306 * $309;
  $311 = 1.0 + $310;
  $312 = $305 * $311;
  $313 = $312 / 16.0;
  $314 = $9;
  $315 = ((($314)) + 224|0);
  HEAPF64[$315>>3] = $313;
  $316 = $8;
  $317 = $6;
  $318 = $316 * $317;
  $319 = $6;
  $320 = $319 * 4.0;
  $321 = 3.0 + $320;
  $322 = $318 * $321;
  $323 = $322 / 8.0;
  $324 = $9;
  $325 = ((($324)) + 232|0);
  HEAPF64[$325>>3] = $323;
  $326 = $8;
  $327 = $326 / 80.0;
  $328 = $9;
  $329 = ((($328)) + 240|0);
  HEAPF64[$329>>3] = $327;
  $330 = $8;
  $331 = $5;
  $332 = $330 * $331;
  $333 = $6;
  $334 = $6;
  $335 = $334 * 26.0;
  $336 = 178.0 - $335;
  $337 = $333 * $336;
  $338 = -21.0 + $337;
  $339 = $332 * $338;
  $340 = $339 / 720.0;
  $341 = $9;
  $342 = ((($341)) + 248|0);
  HEAPF64[$342>>3] = $340;
  $343 = $8;
  $344 = $5;
  $345 = $343 * $344;
  $346 = $6;
  $347 = $6;
  $348 = $347 * 48.0;
  $349 = 86.0 + $348;
  $350 = $346 * $349;
  $351 = 29.0 + $350;
  $352 = $345 * $351;
  $353 = $3;
  $354 = 96.0 * $353;
  $355 = $352 / $354;
  $356 = $9;
  $357 = ((($356)) + 256|0);
  HEAPF64[$357>>3] = $355;
  $358 = $8;
  $359 = $5;
  $360 = $358 * $359;
  $361 = $6;
  $362 = $361 * 44.0;
  $363 = 37.0 + $362;
  $364 = $360 * $363;
  $365 = $3;
  $366 = 96.0 * $365;
  $367 = $364 / $366;
  $368 = $9;
  $369 = ((($368)) + 264|0);
  HEAPF64[$369>>3] = $367;
  $370 = $2;
  $371 = ((($370)) + 4|0);
  HEAP32[$371>>2] = 227;
  $372 = $2;
  $373 = ((($372)) + 8|0);
  HEAP32[$373>>2] = 228;
  $374 = $2;
  $1 = $374;
  $375 = $1;
  STACKTOP = sp;return ($375|0);
 } else {
  _freeup_123($25);
  $1 = 0;
  $375 = $1;
  STACKTOP = sp;return ($375|0);
 }
 return (0)|0;
}
function _freeup_123($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_124($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_124($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 272|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 416|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 272|0);
  $20 = HEAP32[$19>>2]|0;
  (_pj_dealloc($20)|0);
 }
 $21 = $2;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 (_pj_dealloc($23)|0);
 $24 = $2;
 $25 = (_pj_dealloc($24)|0);
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _e_forward_125($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_cos((+$16)));
 $8 = $17;
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_sin((+$19)));
 $9 = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $9;
 $24 = $8;
 $25 = $5;
 $26 = ((($25)) + 272|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+_proj_mdist($22,$23,$24,$27));
 $29 = $5;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 $6 = $31;
 $32 = $6;
 $33 = $6;
 $34 = $32 * $33;
 $11 = $34;
 $35 = +HEAPF64[$1>>3];
 $36 = $8;
 $37 = $35 * $36;
 $38 = $3;
 $39 = ((($38)) + 72|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $9;
 $42 = $40 * $41;
 $43 = $9;
 $44 = $42 * $43;
 $45 = 1.0 - $44;
 $46 = (+Math_sqrt((+$45)));
 $47 = $37 / $46;
 $7 = $47;
 $48 = $7;
 $49 = $7;
 $50 = $48 * $49;
 $10 = $50;
 $51 = $3;
 $52 = ((($51)) + 152|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $7;
 $55 = $53 * $54;
 $56 = $11;
 $57 = $5;
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $11;
 $61 = $5;
 $62 = ((($61)) + 32|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $60 * $63;
 $65 = $59 + $64;
 $66 = $56 * $65;
 $67 = 1.0 + $66;
 $68 = $10;
 $69 = $5;
 $70 = ((($69)) + 16|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $6;
 $73 = $5;
 $74 = ((($73)) + 24|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $72 * $75;
 $77 = $71 + $76;
 $78 = $11;
 $79 = $5;
 $80 = ((($79)) + 40|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 * $81;
 $83 = $77 + $82;
 $84 = $10;
 $85 = $5;
 $86 = ((($85)) + 48|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $84 * $87;
 $89 = $83 + $88;
 $90 = $68 * $89;
 $91 = $67 - $90;
 $92 = $55 * $91;
 HEAPF64[$4>>3] = $92;
 $93 = $3;
 $94 = ((($93)) + 152|0);
 $95 = +HEAPF64[$94>>3];
 $96 = $10;
 $97 = $5;
 $98 = ((($97)) + 56|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $10;
 $101 = $5;
 $102 = ((($101)) + 80|0);
 $103 = +HEAPF64[$102>>3];
 $104 = $100 * $103;
 $105 = $99 + $104;
 $106 = $96 * $105;
 $107 = $6;
 $108 = $10;
 $109 = $5;
 $110 = ((($109)) + 72|0);
 $111 = +HEAPF64[$110>>3];
 $112 = $10;
 $113 = $5;
 $114 = ((($113)) + 96|0);
 $115 = +HEAPF64[$114>>3];
 $116 = $112 * $115;
 $117 = $111 - $116;
 $118 = $108 * $117;
 $119 = 1.0 + $118;
 $120 = $11;
 $121 = $5;
 $122 = ((($121)) + 64|0);
 $123 = +HEAPF64[$122>>3];
 $124 = $11;
 $125 = $5;
 $126 = ((($125)) + 112|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $124 * $127;
 $129 = $123 + $128;
 $130 = $120 * $129;
 $131 = $119 + $130;
 $132 = $6;
 $133 = $10;
 $134 = $132 * $133;
 $135 = $5;
 $136 = ((($135)) + 88|0);
 $137 = +HEAPF64[$136>>3];
 $138 = $6;
 $139 = $5;
 $140 = ((($139)) + 104|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $138 * $141;
 $143 = $137 + $142;
 $144 = $134 * $143;
 $145 = $131 + $144;
 $146 = $107 * $145;
 $147 = $106 + $146;
 $148 = $95 * $147;
 $149 = ((($4)) + 8|0);
 HEAPF64[$149>>3] = $148;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_inverse_126($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = +HEAPF64[$1>>3];
 $16 = $3;
 $17 = ((($16)) + 152|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 / $18;
 $8 = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $3;
 $23 = ((($22)) + 152|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $21 / $24;
 $9 = $25;
 $26 = $8;
 $27 = $8;
 $28 = $26 * $27;
 $10 = $28;
 $29 = $9;
 $30 = $9;
 $31 = $29 * $30;
 $11 = $31;
 $32 = $8;
 $33 = $5;
 $34 = ((($33)) + 120|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $11;
 $37 = $35 * $36;
 $38 = 1.0 - $37;
 $39 = $10;
 $40 = $5;
 $41 = ((($40)) + 128|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $5;
 $44 = ((($43)) + 136|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $9;
 $47 = $45 * $46;
 $48 = $42 + $47;
 $49 = $5;
 $50 = ((($49)) + 144|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $10;
 $53 = $51 * $52;
 $54 = $48 - $53;
 $55 = $5;
 $56 = ((($55)) + 152|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $11;
 $59 = $57 * $58;
 $60 = $54 + $59;
 $61 = $5;
 $62 = ((($61)) + 168|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $10;
 $65 = $63 * $64;
 $66 = $9;
 $67 = $65 * $66;
 $68 = $60 - $67;
 $69 = $39 * $68;
 $70 = $38 + $69;
 $71 = $11;
 $72 = $5;
 $73 = ((($72)) + 160|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $11;
 $76 = $74 * $75;
 $77 = $5;
 $78 = ((($77)) + 176|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $10;
 $81 = $79 * $80;
 $82 = $9;
 $83 = $81 * $82;
 $84 = $76 - $83;
 $85 = $71 * $84;
 $86 = $70 + $85;
 $87 = $32 * $86;
 $7 = $87;
 $88 = $5;
 $89 = +HEAPF64[$88>>3];
 $90 = $9;
 $91 = $11;
 $92 = $5;
 $93 = ((($92)) + 192|0);
 $94 = +HEAPF64[$93>>3];
 $95 = -$94;
 $96 = $5;
 $97 = ((($96)) + 240|0);
 $98 = +HEAPF64[$97>>3];
 $99 = $11;
 $100 = $98 * $99;
 $101 = $95 + $100;
 $102 = $91 * $101;
 $103 = 1.0 + $102;
 $104 = $90 * $103;
 $105 = $89 + $104;
 $106 = $10;
 $107 = $5;
 $108 = ((($107)) + 184|0);
 $109 = +HEAPF64[$108>>3];
 $110 = -$109;
 $111 = $9;
 $112 = $5;
 $113 = ((($112)) + 200|0);
 $114 = +HEAPF64[$113>>3];
 $115 = -$114;
 $116 = $9;
 $117 = $5;
 $118 = ((($117)) + 216|0);
 $119 = +HEAPF64[$118>>3];
 $120 = -$119;
 $121 = $9;
 $122 = $5;
 $123 = ((($122)) + 232|0);
 $124 = +HEAPF64[$123>>3];
 $125 = -$124;
 $126 = $9;
 $127 = $5;
 $128 = ((($127)) + 264|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $126 * $129;
 $131 = $125 + $130;
 $132 = $121 * $131;
 $133 = $120 + $132;
 $134 = $116 * $133;
 $135 = $115 + $134;
 $136 = $111 * $135;
 $137 = $110 + $136;
 $138 = $10;
 $139 = $5;
 $140 = ((($139)) + 208|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $9;
 $143 = $5;
 $144 = ((($143)) + 224|0);
 $145 = +HEAPF64[$144>>3];
 $146 = $9;
 $147 = $5;
 $148 = ((($147)) + 256|0);
 $149 = +HEAPF64[$148>>3];
 $150 = $146 * $149;
 $151 = $145 + $150;
 $152 = $142 * $151;
 $153 = $141 + $152;
 $154 = $10;
 $155 = $5;
 $156 = ((($155)) + 248|0);
 $157 = +HEAPF64[$156>>3];
 $158 = $154 * $157;
 $159 = $153 - $158;
 $160 = $138 * $159;
 $161 = $137 + $160;
 $162 = $106 * $161;
 $163 = $105 + $162;
 $6 = $163;
 $164 = $3;
 $165 = HEAP32[$164>>2]|0;
 $166 = $6;
 $167 = $5;
 $168 = ((($167)) + 272|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = (+_proj_inv_mdist($165,$166,$169));
 $171 = ((($4)) + 8|0);
 HEAPF64[$171>>3] = $170;
 $172 = ((($4)) + 8|0);
 $173 = +HEAPF64[$172>>3];
 $174 = (+Math_sin((+$173)));
 $6 = $174;
 $175 = $7;
 $176 = $3;
 $177 = ((($176)) + 72|0);
 $178 = +HEAPF64[$177>>3];
 $179 = $6;
 $180 = $178 * $179;
 $181 = $6;
 $182 = $180 * $181;
 $183 = 1.0 - $182;
 $184 = (+Math_sqrt((+$183)));
 $185 = $175 * $184;
 $186 = ((($4)) + 8|0);
 $187 = +HEAPF64[$186>>3];
 $188 = (+Math_cos((+$187)));
 $189 = $185 / $188;
 HEAPF64[$4>>3] = $189;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_cass($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_cass($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 229;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10767;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_cass($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 72|0);
 $5 = +HEAPF64[$4>>3];
 $6 = 0.0 == $5;
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = 230;
  $9 = $2;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 231;
  $11 = $2;
  $1 = $11;
  $58 = $1;
  STACKTOP = sp;return ($58|0);
 }
 $12 = (_pj_calloc(1,16)|0);
 $13 = $2;
 $14 = ((($13)) + 416|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (0|0)==($17|0);
 $19 = $2;
 if ($18) {
  $20 = (_freeup_new_128($19)|0);
  $1 = $20;
  $58 = $1;
  STACKTOP = sp;return ($58|0);
 }
 $21 = ((($19)) + 72|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (_pj_enfn($22)|0);
 $24 = $2;
 $25 = ((($24)) + 416|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$26>>2] = $23;
 $27 = $2;
 $28 = ((($27)) + 416|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (0|0)==($30|0);
 $32 = $2;
 if ($31) {
  $33 = (_freeup_new_128($32)|0);
  $1 = $33;
  $58 = $1;
  STACKTOP = sp;return ($58|0);
 } else {
  $34 = ((($32)) + 128|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $2;
  $37 = ((($36)) + 128|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+Math_sin((+$38)));
  $40 = $2;
  $41 = ((($40)) + 128|0);
  $42 = +HEAPF64[$41>>3];
  $43 = (+Math_cos((+$42)));
  $44 = $2;
  $45 = ((($44)) + 416|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (+_pj_mlfn($35,$39,$43,$47));
  $49 = $2;
  $50 = ((($49)) + 416|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 8|0);
  HEAPF64[$52>>3] = $48;
  $53 = $2;
  $54 = ((($53)) + 8|0);
  HEAP32[$54>>2] = 232;
  $55 = $2;
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = 233;
  $57 = $2;
  $1 = $57;
  $58 = $1;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _freeup_127($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_128($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_128($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  (_pj_dealloc($13)|0);
  $14 = $2;
  $15 = ((($14)) + 416|0);
  $16 = HEAP32[$15>>2]|0;
  (_pj_dealloc($16)|0);
  $17 = $2;
  $18 = (_pj_dealloc($17)|0);
  $1 = $18;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _s_inverse_129($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $3;
 $9 = ((($8)) + 128|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 + $10;
 $5 = $11;
 $12 = (+Math_sin((+$11)));
 $13 = +HEAPF64[$1>>3];
 $14 = (+Math_cos((+$13)));
 $15 = $12 * $14;
 $16 = (+Math_asin((+$15)));
 $17 = ((($4)) + 8|0);
 HEAPF64[$17>>3] = $16;
 $18 = +HEAPF64[$1>>3];
 $19 = (+Math_tan((+$18)));
 $20 = $5;
 $21 = (+Math_cos((+$20)));
 $22 = (+Math_atan2((+$19),(+$21)));
 HEAPF64[$4>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_130($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_cos((+$6)));
 $8 = +HEAPF64[$1>>3];
 $9 = (+Math_sin((+$8)));
 $10 = $7 * $9;
 $11 = (+Math_asin((+$10)));
 HEAPF64[$4>>3] = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_tan((+$13)));
 $15 = +HEAPF64[$1>>3];
 $16 = (+Math_cos((+$15)));
 $17 = (+Math_atan2((+$14),(+$16)));
 $18 = $3;
 $19 = ((($18)) + 128|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 - $20;
 $22 = ((($4)) + 8|0);
 HEAPF64[$22>>3] = $21;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_inverse_131($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp;
 $3 = $2;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $12 = $15;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = $12;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $20 + $22;
 $24 = $3;
 $25 = ((($24)) + 72|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $12;
 $28 = HEAP32[$27>>2]|0;
 $29 = (+_pj_inv_mlfn($17,$23,$26,$28));
 $10 = $29;
 $30 = $10;
 $31 = (+Math_tan((+$30)));
 $9 = $31;
 $32 = $9;
 $33 = $9;
 $34 = $32 * $33;
 $5 = $34;
 $35 = $10;
 $36 = (+Math_sin((+$35)));
 $4 = $36;
 $37 = $3;
 $38 = ((($37)) + 72|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $4;
 $41 = $39 * $40;
 $42 = $4;
 $43 = $41 * $42;
 $44 = 1.0 - $43;
 $45 = 1.0 / $44;
 $6 = $45;
 $46 = $6;
 $47 = (+Math_sqrt((+$46)));
 $4 = $47;
 $48 = $3;
 $49 = ((($48)) + 72|0);
 $50 = +HEAPF64[$49>>3];
 $51 = 1.0 - $50;
 $52 = $4;
 $53 = $51 * $52;
 $54 = $6;
 $55 = $54 * $53;
 $6 = $55;
 $56 = +HEAPF64[$1>>3];
 $57 = $4;
 $58 = $56 / $57;
 $7 = $58;
 $59 = $7;
 $60 = $7;
 $61 = $59 * $60;
 $8 = $61;
 $62 = $10;
 $63 = $4;
 $64 = $9;
 $65 = $63 * $64;
 $66 = $6;
 $67 = $65 / $66;
 $68 = $8;
 $69 = $67 * $68;
 $70 = $5;
 $71 = 3.0 * $70;
 $72 = 1.0 + $71;
 $73 = $8;
 $74 = $72 * $73;
 $75 = $74 * 0.041666666666666664;
 $76 = 0.5 - $75;
 $77 = $69 * $76;
 $78 = $62 - $77;
 $79 = ((($11)) + 8|0);
 HEAPF64[$79>>3] = $78;
 $80 = $7;
 $81 = $5;
 $82 = $8;
 $83 = $81 * $82;
 $84 = $5;
 $85 = 3.0 * $84;
 $86 = 1.0 + $85;
 $87 = $8;
 $88 = $86 * $87;
 $89 = $88 * 0.066666666666666666;
 $90 = -0.33333333333333331 + $89;
 $91 = $83 * $90;
 $92 = 1.0 + $91;
 $93 = $80 * $92;
 $94 = $10;
 $95 = (+Math_cos((+$94)));
 $96 = $93 / $95;
 HEAPF64[$11>>3] = $96;
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_132($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp;
 $3 = $2;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_sin((+$18)));
 $4 = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_cos((+$21)));
 $7 = $22;
 $23 = $11;
 $24 = HEAP32[$23>>2]|0;
 $25 = (+_pj_mlfn($16,$19,$22,$24));
 $26 = ((($10)) + 8|0);
 HEAPF64[$26>>3] = $25;
 $27 = $3;
 $28 = ((($27)) + 72|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $4;
 $31 = $29 * $30;
 $32 = $4;
 $33 = $31 * $32;
 $34 = 1.0 - $33;
 $35 = (+Math_sqrt((+$34)));
 $36 = 1.0 / $35;
 $4 = $36;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = (+Math_tan((+$38)));
 $9 = $39;
 $40 = $9;
 $41 = $9;
 $42 = $40 * $41;
 $5 = $42;
 $43 = +HEAPF64[$1>>3];
 $44 = $7;
 $45 = $43 * $44;
 $6 = $45;
 $46 = $3;
 $47 = ((($46)) + 72|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $7;
 $50 = $48 * $49;
 $51 = $3;
 $52 = ((($51)) + 72|0);
 $53 = +HEAPF64[$52>>3];
 $54 = 1.0 - $53;
 $55 = $50 / $54;
 $56 = $7;
 $57 = $56 * $55;
 $7 = $57;
 $58 = $6;
 $59 = $6;
 $60 = $58 * $59;
 $8 = $60;
 $61 = $4;
 $62 = $6;
 $63 = $61 * $62;
 $64 = $8;
 $65 = $5;
 $66 = $64 * $65;
 $67 = $5;
 $68 = 8.0 - $67;
 $69 = $7;
 $70 = 8.0 * $69;
 $71 = $68 + $70;
 $72 = $8;
 $73 = $71 * $72;
 $74 = $73 * 0.0083333333333333332;
 $75 = 0.16666666666666666 - $74;
 $76 = $66 * $75;
 $77 = 1.0 - $76;
 $78 = $63 * $77;
 HEAPF64[$10>>3] = $78;
 $79 = $11;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $4;
 $83 = $9;
 $84 = $82 * $83;
 $85 = $8;
 $86 = $84 * $85;
 $87 = $5;
 $88 = 5.0 - $87;
 $89 = $7;
 $90 = 6.0 * $89;
 $91 = $88 + $90;
 $92 = $8;
 $93 = $91 * $92;
 $94 = $93 * 0.041666666666666664;
 $95 = 0.5 + $94;
 $96 = $86 * $95;
 $97 = $81 - $96;
 $98 = ((($10)) + 8|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $99 - $97;
 HEAPF64[$98>>3] = $100;
 ;HEAP32[$0>>2]=HEAP32[$10>>2]|0;HEAP32[$0+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$10+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_cc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_cc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 234;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10789;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_cc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 235;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 236;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_133($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_134($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_134($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_135($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_atan((+$6)));
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $9;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_136($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_abs((+$6)));
 $8 = $7 - 1.5707963267948966;
 $9 = (+Math_abs((+$8)));
 $10 = $9 <= 1.0E-10;
 if ($10) {
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  _pj_ctx_set_errno($12,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $13 = +HEAPF64[$1>>3];
  HEAPF64[$4>>3] = $13;
  $14 = ((($1)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = (+Math_tan((+$15)));
  $17 = ((($4)) + 8|0);
  HEAPF64[$17>>3] = $16;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_cea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_cea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 237;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10819;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_cea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $6 = sp;
 $2 = $0;
 $3 = 0.0;
 $7 = (_pj_calloc(1,16)|0);
 $4 = $7;
 $8 = $4;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_freeup_new_138($10)|0);
  $1 = $11;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $12 = $4;
 $13 = $2;
 $14 = ((($13)) + 416|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _pj_param($5,$16,$19,11165);
 $20 = HEAP32[$5>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  _pj_param($6,$23,$26,15033);
  $27 = +HEAPF64[$6>>3];
  $3 = $27;
  $28 = (+Math_cos((+$27)));
  $29 = $2;
  $30 = ((($29)) + 152|0);
  HEAPF64[$30>>3] = $28;
  $31 = $2;
  $32 = ((($31)) + 152|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 < 0.0;
  if ($34) {
   $35 = $2;
   $36 = HEAP32[$35>>2]|0;
   _pj_ctx_set_errno($36,-24);
   $37 = $2;
   _freeup_137($37);
   $1 = 0;
   $87 = $1;
   STACKTOP = sp;return ($87|0);
  }
 }
 $38 = $2;
 $39 = ((($38)) + 72|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 != 0.0;
 do {
  if ($41) {
   $42 = $3;
   $43 = (+Math_sin((+$42)));
   $3 = $43;
   $44 = $2;
   $45 = ((($44)) + 72|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $3;
   $48 = $46 * $47;
   $49 = $3;
   $50 = $48 * $49;
   $51 = 1.0 - $50;
   $52 = (+Math_sqrt((+$51)));
   $53 = $2;
   $54 = ((($53)) + 152|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55 / $52;
   HEAPF64[$54>>3] = $56;
   $57 = $2;
   $58 = ((($57)) + 72|0);
   $59 = +HEAPF64[$58>>3];
   $60 = (+Math_sqrt((+$59)));
   $61 = $2;
   $62 = ((($61)) + 88|0);
   HEAPF64[$62>>3] = $60;
   $63 = $2;
   $64 = ((($63)) + 72|0);
   $65 = +HEAPF64[$64>>3];
   $66 = (_pj_authset($65)|0);
   $67 = $4;
   $68 = ((($67)) + 8|0);
   HEAP32[$68>>2] = $66;
   $69 = ($66|0)!=(0|0);
   $70 = $2;
   if ($69) {
    $71 = ((($70)) + 88|0);
    $72 = +HEAPF64[$71>>3];
    $73 = $2;
    $74 = ((($73)) + 104|0);
    $75 = +HEAPF64[$74>>3];
    $76 = (+_pj_qsfn(1.0,$72,$75));
    $77 = $4;
    HEAPF64[$77>>3] = $76;
    $78 = $2;
    $79 = ((($78)) + 8|0);
    HEAP32[$79>>2] = 238;
    $80 = $2;
    $81 = ((($80)) + 4|0);
    HEAP32[$81>>2] = 239;
    break;
   }
   _freeup_137($70);
   $1 = 0;
   $87 = $1;
   STACKTOP = sp;return ($87|0);
  } else {
   $82 = $2;
   $83 = ((($82)) + 8|0);
   HEAP32[$83>>2] = 240;
   $84 = $2;
   $85 = ((($84)) + 4|0);
   HEAP32[$85>>2] = 241;
  }
 } while(0);
 $86 = $2;
 $1 = $86;
 $87 = $1;
 STACKTOP = sp;return ($87|0);
}
function _freeup_137($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_138($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_138($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _e_inverse_141($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = 2.0 * $6;
 $8 = $3;
 $9 = ((($8)) + 152|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 * $10;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = +HEAPF64[$14>>3];
 $16 = $11 / $15;
 $17 = (+Math_asin((+$16)));
 $18 = $3;
 $19 = ((($18)) + 416|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+_pj_authlat($17,$22));
 $24 = ((($4)) + 8|0);
 HEAPF64[$24>>3] = $23;
 $25 = +HEAPF64[$1>>3];
 $26 = $3;
 $27 = ((($26)) + 152|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $25 / $28;
 HEAPF64[$4>>3] = $29;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_142($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = ((($5)) + 152|0);
 $7 = +HEAPF64[$6>>3];
 $8 = +HEAPF64[$1>>3];
 $9 = $7 * $8;
 HEAPF64[$4>>3] = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_sin((+$11)));
 $13 = $3;
 $14 = ((($13)) + 88|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $3;
 $17 = ((($16)) + 104|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+_pj_qsfn($12,$15,$18));
 $20 = 0.5 * $19;
 $21 = $3;
 $22 = ((($21)) + 152|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 / $23;
 $25 = ((($4)) + 8|0);
 HEAPF64[$25>>3] = $24;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_143($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 152|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $10 * $8;
 HEAPF64[$9>>3] = $11;
 $12 = (+Math_abs((+$11)));
 $5 = $12;
 $13 = $12 - 1.0E-10;
 $14 = $13 <= 1.0;
 if (!($14)) {
  $29 = $3;
  $30 = HEAP32[$29>>2]|0;
  _pj_ctx_set_errno($30,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $15 = $5;
 $16 = $15 >= 1.0;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 if ($16) {
  $19 = $18 < 0.0;
  $20 = $19 ? -1.5707963267948966 : 1.5707963267948966;
  $21 = ((($4)) + 8|0);
  HEAPF64[$21>>3] = $20;
 } else {
  $22 = (+Math_asin((+$18)));
  $23 = ((($4)) + 8|0);
  HEAPF64[$23>>3] = $22;
 }
 $24 = +HEAPF64[$1>>3];
 $25 = $3;
 $26 = ((($25)) + 152|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 / $27;
 HEAPF64[$4>>3] = $28;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_144($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = ((($5)) + 152|0);
 $7 = +HEAPF64[$6>>3];
 $8 = +HEAPF64[$1>>3];
 $9 = $7 * $8;
 HEAPF64[$4>>3] = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_sin((+$11)));
 $13 = $3;
 $14 = ((($13)) + 152|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 / $15;
 $17 = ((($4)) + 8|0);
 HEAPF64[$17>>3] = $16;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_eqc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eqc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 242;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10865;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eqc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,8)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_146($8)|0);
  $1 = $9;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pj_param($4,$14,$17,15033);
 $18 = +HEAPF64[$4>>3];
 $19 = (+Math_cos((+$18)));
 $20 = $3;
 HEAPF64[$20>>3] = $19;
 $21 = $19 <= 0.0;
 $22 = $2;
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  _pj_ctx_set_errno($23,-24);
  $24 = $2;
  _freeup_145($24);
  $1 = 0;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 } else {
  $25 = ((($22)) + 8|0);
  HEAP32[$25>>2] = 243;
  $26 = $2;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 244;
  $28 = $2;
  $29 = ((($28)) + 72|0);
  HEAPF64[$29>>3] = 0.0;
  $30 = $2;
  $1 = $30;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _freeup_145($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_146($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_146($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_148($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 / $11;
 HEAPF64[$4>>3] = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $3;
 $16 = ((($15)) + 128|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $14 + $17;
 $19 = ((($4)) + 8|0);
 HEAPF64[$19>>3] = $18;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_149($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = +HEAPF64[$9>>3];
 $11 = +HEAPF64[$1>>3];
 $12 = $10 * $11;
 HEAPF64[$4>>3] = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $3;
 $16 = ((($15)) + 128|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $14 - $17;
 $19 = ((($4)) + 8|0);
 HEAPF64[$19>>3] = $18;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_gall($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gall($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 245;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10933;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gall($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 246;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 247;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_150($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_151($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_151($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_152($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 1.4142135623730951 * $5;
 HEAPF64[$4>>3] = $6;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 * 0.58578643762690497;
 $10 = (+Math_atan((+$9)));
 $11 = 2.0 * $10;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_153($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.70710678118654757 * $5;
 HEAPF64[$4>>3] = $6;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 0.5 * $8;
 $10 = (+Math_tan((+$9)));
 $11 = 1.7071067811865475 * $10;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_labrd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_labrd($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 248;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 10969;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_labrd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0;
 var $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 8|0;
 $10 = sp;
 $2 = $0;
 $11 = (_pj_calloc(1,72)|0);
 $8 = $11;
 $12 = $8;
 $13 = (0|0)==($12|0);
 if ($13) {
  $14 = $2;
  $15 = (_freeup_new_155($14)|0);
  $1 = $15;
  $186 = $1;
  STACKTOP = sp;return ($186|0);
 } else {
  $16 = $8;
  $17 = $2;
  $18 = ((($17)) + 416|0);
  HEAP32[$18>>2] = $16;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  _pj_param($9,$20,$23,11011);
  $24 = HEAP32[$9>>2]|0;
  $25 = ($24|0)==(0);
  $26 = $25&1;
  $27 = $8;
  $28 = ((($27)) + 64|0);
  HEAP32[$28>>2] = $26;
  $29 = $2;
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = ((($31)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  _pj_param($10,$30,$33,11019);
  $34 = +HEAPF64[$10>>3];
  $3 = $34;
  $35 = $2;
  $36 = ((($35)) + 128|0);
  $37 = +HEAPF64[$36>>3];
  $38 = (+Math_sin((+$37)));
  $4 = $38;
  $39 = $2;
  $40 = ((($39)) + 72|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $4;
  $43 = $41 * $42;
  $44 = $4;
  $45 = $43 * $44;
  $46 = 1.0 - $45;
  $7 = $46;
  $47 = $7;
  $48 = (+Math_sqrt((+$47)));
  $49 = 1.0 / $48;
  $6 = $49;
  $50 = $2;
  $51 = ((($50)) + 104|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $6;
  $54 = $52 * $53;
  $55 = $7;
  $56 = $54 / $55;
  $5 = $56;
  $57 = $2;
  $58 = ((($57)) + 152|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $6;
  $61 = $5;
  $62 = $60 * $61;
  $63 = (+Math_sqrt((+$62)));
  $64 = $59 * $63;
  $65 = $8;
  HEAPF64[$65>>3] = $64;
  $66 = $5;
  $67 = $6;
  $68 = $66 / $67;
  $69 = (+Math_sqrt((+$68)));
  $70 = $2;
  $71 = ((($70)) + 128|0);
  $72 = +HEAPF64[$71>>3];
  $73 = (+Math_tan((+$72)));
  $74 = $69 * $73;
  $75 = (+Math_atan((+$74)));
  $76 = $8;
  $77 = ((($76)) + 8|0);
  HEAPF64[$77>>3] = $75;
  $78 = $4;
  $79 = $8;
  $80 = ((($79)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = (+Math_sin((+$81)));
  $83 = $78 / $82;
  $84 = $8;
  $85 = ((($84)) + 16|0);
  HEAPF64[$85>>3] = $83;
  $86 = $2;
  $87 = ((($86)) + 88|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $4;
  $90 = $88 * $89;
  $7 = $90;
  $91 = $2;
  $92 = ((($91)) + 88|0);
  $93 = +HEAPF64[$92>>3];
  $94 = 0.5 * $93;
  $95 = $8;
  $96 = ((($95)) + 16|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $94 * $97;
  $99 = $7;
  $100 = 1.0 + $99;
  $101 = $7;
  $102 = 1.0 - $101;
  $103 = $100 / $102;
  $104 = (+Math_log((+$103)));
  $105 = $98 * $104;
  $106 = $8;
  $107 = ((($106)) + 16|0);
  $108 = +HEAPF64[$107>>3];
  $109 = -$108;
  $110 = $2;
  $111 = ((($110)) + 128|0);
  $112 = +HEAPF64[$111>>3];
  $113 = 0.5 * $112;
  $114 = 0.78539816339744828 + $113;
  $115 = (+Math_tan((+$114)));
  $116 = (+Math_log((+$115)));
  $117 = $109 * $116;
  $118 = $105 + $117;
  $119 = $8;
  $120 = ((($119)) + 8|0);
  $121 = +HEAPF64[$120>>3];
  $122 = 0.5 * $121;
  $123 = 0.78539816339744828 + $122;
  $124 = (+Math_tan((+$123)));
  $125 = (+Math_log((+$124)));
  $126 = $118 + $125;
  $127 = $8;
  $128 = ((($127)) + 24|0);
  HEAPF64[$128>>3] = $126;
  $129 = $3;
  $130 = $3;
  $131 = $129 + $130;
  $7 = $131;
  $132 = $7;
  $133 = (+Math_cos((+$132)));
  $134 = 1.0 - $133;
  $135 = $8;
  $136 = +HEAPF64[$135>>3];
  $137 = 12.0 * $136;
  $138 = $8;
  $139 = +HEAPF64[$138>>3];
  $140 = $137 * $139;
  $141 = 1.0 / $140;
  $142 = $8;
  $143 = ((($142)) + 40|0);
  HEAPF64[$143>>3] = $141;
  $144 = $134 * $141;
  $145 = $8;
  $146 = ((($145)) + 32|0);
  HEAPF64[$146>>3] = $144;
  $147 = $7;
  $148 = (+Math_sin((+$147)));
  $149 = $8;
  $150 = ((($149)) + 40|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $151 * $148;
  HEAPF64[$150>>3] = $152;
  $153 = $8;
  $154 = ((($153)) + 32|0);
  $155 = +HEAPF64[$154>>3];
  $156 = $8;
  $157 = ((($156)) + 32|0);
  $158 = +HEAPF64[$157>>3];
  $159 = $155 * $158;
  $160 = $8;
  $161 = ((($160)) + 40|0);
  $162 = +HEAPF64[$161>>3];
  $163 = $8;
  $164 = ((($163)) + 40|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $162 * $165;
  $167 = $159 - $166;
  $168 = 3.0 * $167;
  $169 = $8;
  $170 = ((($169)) + 48|0);
  HEAPF64[$170>>3] = $168;
  $171 = $8;
  $172 = ((($171)) + 32|0);
  $173 = +HEAPF64[$172>>3];
  $174 = 6.0 * $173;
  $175 = $8;
  $176 = ((($175)) + 40|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $174 * $177;
  $179 = $8;
  $180 = ((($179)) + 56|0);
  HEAPF64[$180>>3] = $178;
  $181 = $2;
  $182 = ((($181)) + 8|0);
  HEAP32[$182>>2] = 249;
  $183 = $2;
  $184 = ((($183)) + 4|0);
  HEAP32[$184>>2] = 250;
  $185 = $2;
  $1 = $185;
  $186 = $1;
  STACKTOP = sp;return ($186|0);
 }
 return (0)|0;
}
function _freeup_154($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_155($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_155($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_158($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0;
 var $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $4 = sp + 152|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $26 = $3;
 $27 = ((($26)) + 416|0);
 $28 = HEAP32[$27>>2]|0;
 $5 = $28;
 $29 = +HEAPF64[$1>>3];
 $30 = +HEAPF64[$1>>3];
 $31 = $29 * $30;
 $6 = $31;
 $32 = ((($1)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = ((($1)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $33 * $35;
 $7 = $36;
 $37 = +HEAPF64[$1>>3];
 $38 = 3.0 * $37;
 $39 = $7;
 $40 = $38 * $39;
 $41 = +HEAPF64[$1>>3];
 $42 = $6;
 $43 = $41 * $42;
 $44 = $40 - $43;
 $8 = $44;
 $45 = ((($1)) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $7;
 $48 = $46 * $47;
 $49 = $6;
 $50 = 3.0 * $49;
 $51 = ((($1)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $50 * $52;
 $54 = $48 - $53;
 $9 = $54;
 $55 = +HEAPF64[$1>>3];
 $56 = $7;
 $57 = 5.0 * $56;
 $58 = $7;
 $59 = $57 * $58;
 $60 = $6;
 $61 = $7;
 $62 = -10.0 * $61;
 $63 = $6;
 $64 = $62 + $63;
 $65 = $60 * $64;
 $66 = $59 + $65;
 $67 = $55 * $66;
 $10 = $67;
 $68 = ((($1)) + 8|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $6;
 $71 = 5.0 * $70;
 $72 = $6;
 $73 = $71 * $72;
 $74 = $7;
 $75 = $6;
 $76 = -10.0 * $75;
 $77 = $7;
 $78 = $76 + $77;
 $79 = $74 * $78;
 $80 = $73 + $79;
 $81 = $69 * $80;
 $11 = $81;
 $82 = $5;
 $83 = ((($82)) + 32|0);
 $84 = +HEAPF64[$83>>3];
 $85 = -$84;
 $86 = $8;
 $87 = $85 * $86;
 $88 = $5;
 $89 = ((($88)) + 40|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $9;
 $92 = $90 * $91;
 $93 = $87 - $92;
 $94 = $5;
 $95 = ((($94)) + 48|0);
 $96 = +HEAPF64[$95>>3];
 $97 = $10;
 $98 = $96 * $97;
 $99 = $93 + $98;
 $100 = $5;
 $101 = ((($100)) + 56|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $11;
 $104 = $102 * $103;
 $105 = $99 + $104;
 $106 = +HEAPF64[$1>>3];
 $107 = $106 + $105;
 HEAPF64[$1>>3] = $107;
 $108 = $5;
 $109 = ((($108)) + 40|0);
 $110 = +HEAPF64[$109>>3];
 $111 = $8;
 $112 = $110 * $111;
 $113 = $5;
 $114 = ((($113)) + 32|0);
 $115 = +HEAPF64[$114>>3];
 $116 = $9;
 $117 = $115 * $116;
 $118 = $112 - $117;
 $119 = $5;
 $120 = ((($119)) + 56|0);
 $121 = +HEAPF64[$120>>3];
 $122 = $10;
 $123 = $121 * $122;
 $124 = $118 - $123;
 $125 = $5;
 $126 = ((($125)) + 48|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $11;
 $129 = $127 * $128;
 $130 = $124 + $129;
 $131 = ((($1)) + 8|0);
 $132 = +HEAPF64[$131>>3];
 $133 = $132 + $130;
 HEAPF64[$131>>3] = $133;
 $134 = $5;
 $135 = ((($134)) + 8|0);
 $136 = +HEAPF64[$135>>3];
 $137 = ((($1)) + 8|0);
 $138 = +HEAPF64[$137>>3];
 $139 = $5;
 $140 = +HEAPF64[$139>>3];
 $141 = $138 / $140;
 $142 = $136 + $141;
 $14 = $142;
 $143 = $14;
 $144 = $3;
 $145 = ((($144)) + 128|0);
 $146 = +HEAPF64[$145>>3];
 $147 = $143 + $146;
 $148 = $5;
 $149 = ((($148)) + 8|0);
 $150 = +HEAPF64[$149>>3];
 $151 = $147 - $150;
 $15 = $151;
 $25 = 20;
 while(1) {
  $152 = $25;
  $153 = ($152|0)!=(0);
  if (!($153)) {
   break;
  }
  $154 = $5;
  $155 = ((($154)) + 16|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $15;
  $158 = 0.5 * $157;
  $159 = 0.78539816339744828 + $158;
  $160 = (+Math_tan((+$159)));
  $161 = (+Math_log((+$160)));
  $162 = $156 * $161;
  $8 = $162;
  $163 = $3;
  $164 = ((($163)) + 88|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $15;
  $167 = (+Math_sin((+$166)));
  $168 = $165 * $167;
  $16 = $168;
  $169 = $3;
  $170 = ((($169)) + 88|0);
  $171 = +HEAPF64[$170>>3];
  $172 = 0.5 * $171;
  $173 = $5;
  $174 = ((($173)) + 16|0);
  $175 = +HEAPF64[$174>>3];
  $176 = $172 * $175;
  $177 = $16;
  $178 = 1.0 + $177;
  $179 = $16;
  $180 = 1.0 - $179;
  $181 = $178 / $180;
  $182 = (+Math_log((+$181)));
  $183 = $176 * $182;
  $9 = $183;
  $184 = $14;
  $185 = $8;
  $186 = $9;
  $187 = $185 - $186;
  $188 = $5;
  $189 = ((($188)) + 24|0);
  $190 = +HEAPF64[$189>>3];
  $191 = $187 + $190;
  $192 = (+Math_exp((+$191)));
  $193 = (+Math_atan((+$192)));
  $194 = $193 - 0.78539816339744828;
  $195 = 2.0 * $194;
  $196 = $184 - $195;
  $12 = $196;
  $197 = $12;
  $198 = $15;
  $199 = $198 + $197;
  $15 = $199;
  $200 = $12;
  $201 = (+Math_abs((+$200)));
  $202 = $201 < 1.0E-10;
  if ($202) {
   break;
  }
  $203 = $25;
  $204 = (($203) + -1)|0;
  $25 = $204;
 }
 $205 = $3;
 $206 = ((($205)) + 88|0);
 $207 = +HEAPF64[$206>>3];
 $208 = $15;
 $209 = (+Math_sin((+$208)));
 $210 = $207 * $209;
 $12 = $210;
 $211 = $12;
 $212 = $12;
 $213 = $211 * $212;
 $214 = 1.0 - $213;
 $12 = $214;
 $215 = $3;
 $216 = ((($215)) + 104|0);
 $217 = +HEAPF64[$216>>3];
 $218 = $12;
 $219 = $12;
 $220 = (+Math_sqrt((+$219)));
 $221 = $218 * $220;
 $222 = $217 / $221;
 $24 = $222;
 $223 = $14;
 $224 = (+Math_tan((+$223)));
 $12 = $224;
 $225 = $12;
 $226 = $12;
 $227 = $225 * $226;
 $13 = $227;
 $228 = $5;
 $229 = +HEAPF64[$228>>3];
 $230 = $5;
 $231 = +HEAPF64[$230>>3];
 $232 = $229 * $231;
 $17 = $232;
 $233 = $24;
 $234 = $3;
 $235 = ((($234)) + 152|0);
 $236 = +HEAPF64[$235>>3];
 $237 = $233 * $236;
 $238 = $5;
 $239 = +HEAPF64[$238>>3];
 $240 = $237 * $239;
 $23 = $240;
 $241 = $12;
 $242 = $23;
 $243 = 2.0 * $242;
 $244 = $241 / $243;
 $18 = $244;
 $245 = $12;
 $246 = $13;
 $247 = 3.0 * $246;
 $248 = 5.0 + $247;
 $249 = $245 * $248;
 $250 = $23;
 $251 = 24.0 * $250;
 $252 = $17;
 $253 = $251 * $252;
 $254 = $249 / $253;
 $19 = $254;
 $255 = $14;
 $256 = (+Math_cos((+$255)));
 $257 = $5;
 $258 = +HEAPF64[$257>>3];
 $259 = $256 * $258;
 $260 = $5;
 $261 = ((($260)) + 16|0);
 $262 = +HEAPF64[$261>>3];
 $263 = $259 * $262;
 $23 = $263;
 $264 = $23;
 $265 = 1.0 / $264;
 $20 = $265;
 $266 = $17;
 $267 = $23;
 $268 = $267 * $266;
 $23 = $268;
 $269 = $13;
 $270 = 2.0 * $269;
 $271 = 1.0 + $270;
 $272 = $23;
 $273 = 6.0 * $272;
 $274 = $271 / $273;
 $21 = $274;
 $275 = $13;
 $276 = $13;
 $277 = 24.0 * $276;
 $278 = 28.0 + $277;
 $279 = $275 * $278;
 $280 = 5.0 + $279;
 $281 = $23;
 $282 = 120.0 * $281;
 $283 = $17;
 $284 = $282 * $283;
 $285 = $280 / $284;
 $22 = $285;
 $286 = +HEAPF64[$1>>3];
 $287 = +HEAPF64[$1>>3];
 $288 = $286 * $287;
 $6 = $288;
 $289 = $15;
 $290 = $6;
 $291 = $18;
 $292 = -$291;
 $293 = $19;
 $294 = $6;
 $295 = $293 * $294;
 $296 = $292 + $295;
 $297 = $290 * $296;
 $298 = $289 + $297;
 $299 = ((($4)) + 8|0);
 HEAPF64[$299>>3] = $298;
 $300 = +HEAPF64[$1>>3];
 $301 = $20;
 $302 = $6;
 $303 = $21;
 $304 = -$303;
 $305 = $6;
 $306 = $22;
 $307 = $305 * $306;
 $308 = $304 + $307;
 $309 = $302 * $308;
 $310 = $301 + $309;
 $311 = $300 * $310;
 HEAPF64[$4>>3] = $311;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_159($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0;
 var $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 128|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $22 = $3;
 $23 = ((($22)) + 416|0);
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $5;
 $26 = ((($25)) + 16|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = 0.5 * $29;
 $31 = 0.78539816339744828 + $30;
 $32 = (+Math_tan((+$31)));
 $33 = (+Math_log((+$32)));
 $34 = $27 * $33;
 $6 = $34;
 $35 = $3;
 $36 = ((($35)) + 88|0);
 $37 = +HEAPF64[$36>>3];
 $38 = ((($1)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = (+Math_sin((+$39)));
 $41 = $37 * $40;
 $21 = $41;
 $42 = $3;
 $43 = ((($42)) + 88|0);
 $44 = +HEAPF64[$43>>3];
 $45 = 0.5 * $44;
 $46 = $5;
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $45 * $48;
 $50 = $21;
 $51 = 1.0 + $50;
 $52 = $21;
 $53 = 1.0 - $52;
 $54 = $51 / $53;
 $55 = (+Math_log((+$54)));
 $56 = $49 * $55;
 $7 = $56;
 $57 = $6;
 $58 = $7;
 $59 = $57 - $58;
 $60 = $5;
 $61 = ((($60)) + 24|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $59 + $62;
 $64 = (+Math_exp((+$63)));
 $65 = (+Math_atan((+$64)));
 $66 = $65 - 0.78539816339744828;
 $67 = 2.0 * $66;
 $8 = $67;
 $68 = $8;
 $69 = $5;
 $70 = ((($69)) + 8|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $68 - $71;
 $13 = $72;
 $73 = $8;
 $74 = (+Math_cos((+$73)));
 $10 = $74;
 $75 = $10;
 $76 = $10;
 $77 = $75 * $76;
 $12 = $77;
 $78 = $8;
 $79 = (+Math_sin((+$78)));
 $9 = $79;
 $80 = $9;
 $81 = $9;
 $82 = $80 * $81;
 $11 = $82;
 $83 = $5;
 $84 = ((($83)) + 16|0);
 $85 = +HEAPF64[$84>>3];
 $86 = $10;
 $87 = $85 * $86;
 $16 = $87;
 $88 = $5;
 $89 = ((($88)) + 16|0);
 $90 = +HEAPF64[$89>>3];
 $91 = 0.5 * $90;
 $92 = $16;
 $93 = $91 * $92;
 $94 = $9;
 $95 = $93 * $94;
 $14 = $95;
 $96 = $14;
 $97 = $5;
 $98 = ((($97)) + 16|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $96 * $99;
 $101 = $5;
 $102 = ((($101)) + 16|0);
 $103 = +HEAPF64[$102>>3];
 $104 = $100 * $103;
 $105 = $12;
 $106 = 5.0 * $105;
 $107 = $11;
 $108 = $106 - $107;
 $109 = $104 * $108;
 $110 = $109 / 12.0;
 $15 = $110;
 $111 = $16;
 $112 = $5;
 $113 = ((($112)) + 16|0);
 $114 = +HEAPF64[$113>>3];
 $115 = $111 * $114;
 $116 = $5;
 $117 = ((($116)) + 16|0);
 $118 = +HEAPF64[$117>>3];
 $119 = $115 * $118;
 $18 = $119;
 $120 = $18;
 $121 = $12;
 $122 = $11;
 $123 = $121 - $122;
 $124 = $120 * $123;
 $125 = $124 / 6.0;
 $17 = $125;
 $126 = $5;
 $127 = ((($126)) + 16|0);
 $128 = +HEAPF64[$127>>3];
 $129 = $5;
 $130 = ((($129)) + 16|0);
 $131 = +HEAPF64[$130>>3];
 $132 = $128 * $131;
 $133 = $12;
 $134 = 5.0 * $133;
 $135 = $12;
 $136 = $134 * $135;
 $137 = $11;
 $138 = $11;
 $139 = $12;
 $140 = 18.0 * $139;
 $141 = $138 - $140;
 $142 = $137 * $141;
 $143 = $136 + $142;
 $144 = $132 * $143;
 $145 = $144 / 120.0;
 $146 = $18;
 $147 = $146 * $145;
 $18 = $147;
 $148 = +HEAPF64[$1>>3];
 $149 = +HEAPF64[$1>>3];
 $150 = $148 * $149;
 $21 = $150;
 $151 = $5;
 $152 = +HEAPF64[$151>>3];
 $153 = +HEAPF64[$1>>3];
 $154 = $152 * $153;
 $155 = $16;
 $156 = $21;
 $157 = $17;
 $158 = $21;
 $159 = $18;
 $160 = $158 * $159;
 $161 = $157 + $160;
 $162 = $156 * $161;
 $163 = $155 + $162;
 $164 = $154 * $163;
 HEAPF64[$4>>3] = $164;
 $165 = $5;
 $166 = +HEAPF64[$165>>3];
 $167 = $13;
 $168 = $21;
 $169 = $14;
 $170 = $21;
 $171 = $15;
 $172 = $170 * $171;
 $173 = $169 + $172;
 $174 = $168 * $173;
 $175 = $167 + $174;
 $176 = $166 * $175;
 $177 = ((($4)) + 8|0);
 HEAPF64[$177>>3] = $176;
 $178 = +HEAPF64[$4>>3];
 $179 = +HEAPF64[$4>>3];
 $180 = $178 * $179;
 $19 = $180;
 $181 = ((($4)) + 8|0);
 $182 = +HEAPF64[$181>>3];
 $183 = ((($4)) + 8|0);
 $184 = +HEAPF64[$183>>3];
 $185 = $182 * $184;
 $20 = $185;
 $186 = +HEAPF64[$4>>3];
 $187 = 3.0 * $186;
 $188 = $20;
 $189 = $187 * $188;
 $190 = +HEAPF64[$4>>3];
 $191 = $19;
 $192 = $190 * $191;
 $193 = $189 - $192;
 $6 = $193;
 $194 = ((($4)) + 8|0);
 $195 = +HEAPF64[$194>>3];
 $196 = $20;
 $197 = $195 * $196;
 $198 = $19;
 $199 = 3.0 * $198;
 $200 = ((($4)) + 8|0);
 $201 = +HEAPF64[$200>>3];
 $202 = $199 * $201;
 $203 = $197 - $202;
 $7 = $203;
 $204 = $5;
 $205 = ((($204)) + 32|0);
 $206 = +HEAPF64[$205>>3];
 $207 = $6;
 $208 = $206 * $207;
 $209 = $5;
 $210 = ((($209)) + 40|0);
 $211 = +HEAPF64[$210>>3];
 $212 = $7;
 $213 = $211 * $212;
 $214 = $208 + $213;
 $215 = +HEAPF64[$4>>3];
 $216 = $215 + $214;
 HEAPF64[$4>>3] = $216;
 $217 = $5;
 $218 = ((($217)) + 32|0);
 $219 = +HEAPF64[$218>>3];
 $220 = $7;
 $221 = $219 * $220;
 $222 = $5;
 $223 = ((($222)) + 40|0);
 $224 = +HEAPF64[$223>>3];
 $225 = $6;
 $226 = $224 * $225;
 $227 = $221 - $226;
 $228 = ((($4)) + 8|0);
 $229 = +HEAPF64[$228>>3];
 $230 = $229 + $227;
 HEAPF64[$228>>3] = $230;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_lsat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lsat($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 251;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11024;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lsat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $12 = (_pj_calloc(1,120)|0);
 $9 = $12;
 $13 = $9;
 $14 = (0|0)==($13|0);
 if ($14) {
  $15 = $2;
  $16 = (_freeup_new_161($15)|0);
  $1 = $16;
  $220 = $1;
  STACKTOP = sp;return ($220|0);
 }
 $17 = $9;
 $18 = $2;
 $19 = ((($18)) + 416|0);
 HEAP32[$19>>2] = $17;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 _pj_param($10,$21,$24,11077);
 $25 = HEAP32[$10>>2]|0;
 $3 = $25;
 $26 = $3;
 $27 = ($26|0)<=(0);
 $28 = $3;
 $29 = ($28|0)>(5);
 $or$cond = $27 | $29;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 if ($or$cond) {
  _pj_ctx_set_errno($31,-28);
  $32 = $2;
  _freeup_160($32);
  $1 = 0;
  $220 = $1;
  STACKTOP = sp;return ($220|0);
 }
 $33 = $2;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 _pj_param($11,$31,$35,11127);
 $36 = HEAP32[$11>>2]|0;
 $4 = $36;
 $37 = $4;
 $38 = ($37|0)<=(0);
 if (!($38)) {
  $39 = $4;
  $40 = $3;
  $41 = ($40|0)<=(3);
  $42 = $41 ? 251 : 233;
  $43 = ($39|0)>($42|0);
  if (!($43)) {
   $47 = $3;
   $48 = ($47|0)<=(3);
   $49 = $4;
   $50 = (+($49|0));
   if ($48) {
    $51 = 0.025032610785576042 * $50;
    $52 = 2.2492058070450924 - $51;
    $53 = $2;
    $54 = ((($53)) + 120|0);
    HEAPF64[$54>>3] = $52;
    $55 = $9;
    $56 = ((($55)) + 72|0);
    HEAPF64[$56>>3] = 103.26693229999999;
    $6 = 1.729481662386221;
   } else {
    $57 = 0.026966460545835135 * $50;
    $58 = 2.2567107228286685 - $57;
    $59 = $2;
    $60 = ((($59)) + 120|0);
    HEAPF64[$60>>3] = $58;
    $61 = $9;
    $62 = ((($61)) + 72|0);
    HEAPF64[$62>>3] = 98.884120199999998;
    $6 = 1.7139133254584316;
   }
   $63 = $9;
   $64 = ((($63)) + 72|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $65 / 1440.0;
   HEAPF64[$64>>3] = $66;
   $67 = $6;
   $68 = (+Math_sin((+$67)));
   $69 = $9;
   $70 = ((($69)) + 80|0);
   HEAPF64[$70>>3] = $68;
   $71 = $6;
   $72 = (+Math_cos((+$71)));
   $73 = $9;
   $74 = ((($73)) + 88|0);
   HEAPF64[$74>>3] = $72;
   $75 = $9;
   $76 = ((($75)) + 88|0);
   $77 = +HEAPF64[$76>>3];
   $78 = (+Math_abs((+$77)));
   $79 = $78 < 1.0000000000000001E-9;
   if ($79) {
    $80 = $9;
    $81 = ((($80)) + 88|0);
    HEAPF64[$81>>3] = 1.0000000000000001E-9;
   }
   $82 = $2;
   $83 = ((($82)) + 72|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $9;
   $86 = ((($85)) + 88|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $84 * $87;
   $89 = $9;
   $90 = ((($89)) + 88|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $88 * $91;
   $7 = $92;
   $93 = $2;
   $94 = ((($93)) + 72|0);
   $95 = +HEAPF64[$94>>3];
   $96 = $9;
   $97 = ((($96)) + 80|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $95 * $98;
   $100 = $9;
   $101 = ((($100)) + 80|0);
   $102 = +HEAPF64[$101>>3];
   $103 = $99 * $102;
   $8 = $103;
   $104 = $7;
   $105 = 1.0 - $104;
   $106 = $2;
   $107 = ((($106)) + 112|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $105 * $108;
   $110 = $9;
   $111 = ((($110)) + 64|0);
   HEAPF64[$111>>3] = $109;
   $112 = $9;
   $113 = ((($112)) + 64|0);
   $114 = +HEAPF64[$113>>3];
   $115 = $9;
   $116 = ((($115)) + 64|0);
   $117 = +HEAPF64[$116>>3];
   $118 = $114 * $117;
   $119 = $118 - 1.0;
   $120 = $9;
   $121 = ((($120)) + 64|0);
   HEAPF64[$121>>3] = $119;
   $122 = $8;
   $123 = $2;
   $124 = ((($123)) + 112|0);
   $125 = +HEAPF64[$124>>3];
   $126 = $122 * $125;
   $127 = $9;
   $128 = ((($127)) + 40|0);
   HEAPF64[$128>>3] = $126;
   $129 = $8;
   $130 = $2;
   $131 = ((($130)) + 72|0);
   $132 = +HEAPF64[$131>>3];
   $133 = 2.0 - $132;
   $134 = $129 * $133;
   $135 = $2;
   $136 = ((($135)) + 112|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $134 * $137;
   $139 = $2;
   $140 = ((($139)) + 112|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $138 * $141;
   $143 = $9;
   $144 = ((($143)) + 48|0);
   HEAPF64[$144>>3] = $142;
   $145 = $7;
   $146 = $2;
   $147 = ((($146)) + 112|0);
   $148 = +HEAPF64[$147>>3];
   $149 = $145 * $148;
   $150 = $9;
   $151 = ((($150)) + 56|0);
   HEAPF64[$151>>3] = $149;
   $152 = $2;
   $153 = ((($152)) + 104|0);
   $154 = +HEAPF64[$153>>3];
   $155 = $2;
   $156 = ((($155)) + 104|0);
   $157 = +HEAPF64[$156>>3];
   $158 = $154 * $157;
   $159 = $2;
   $160 = ((($159)) + 104|0);
   $161 = +HEAPF64[$160>>3];
   $162 = $158 * $161;
   $163 = $9;
   $164 = ((($163)) + 96|0);
   HEAPF64[$164>>3] = $162;
   $165 = $9;
   $166 = ((($165)) + 104|0);
   HEAPF64[$166>>3] = 1.6341348883592068;
   $167 = $9;
   $168 = ((($167)) + 104|0);
   $169 = +HEAPF64[$168>>3];
   $170 = $169 + 6.2831853071795862;
   $171 = $9;
   $172 = ((($171)) + 112|0);
   HEAPF64[$172>>3] = $170;
   $173 = $9;
   $174 = ((($173)) + 32|0);
   HEAPF64[$174>>3] = 0.0;
   $175 = $9;
   $176 = ((($175)) + 24|0);
   HEAPF64[$176>>3] = 0.0;
   $177 = $9;
   $178 = ((($177)) + 16|0);
   HEAPF64[$178>>3] = 0.0;
   $179 = $9;
   $180 = ((($179)) + 8|0);
   HEAPF64[$180>>3] = 0.0;
   $181 = $9;
   HEAPF64[$181>>3] = 0.0;
   $182 = $2;
   _seraz0(0.0,1.0,$182);
   $5 = 9.0;
   while(1) {
    $183 = $5;
    $184 = $183 <= 81.000100000000003;
    if (!($184)) {
     break;
    }
    $185 = $5;
    $186 = $2;
    _seraz0($185,4.0,$186);
    $187 = $5;
    $188 = $187 + 18.0;
    $5 = $188;
   }
   $5 = 18.0;
   while(1) {
    $189 = $5;
    $190 = $189 <= 72.000100000000003;
    if (!($190)) {
     break;
    }
    $191 = $5;
    $192 = $2;
    _seraz0($191,2.0,$192);
    $193 = $5;
    $194 = $193 + 18.0;
    $5 = $194;
   }
   $195 = $2;
   _seraz0(90.0,1.0,$195);
   $196 = $9;
   $197 = +HEAPF64[$196>>3];
   $198 = $197 / 30.0;
   HEAPF64[$196>>3] = $198;
   $199 = $9;
   $200 = ((($199)) + 8|0);
   $201 = +HEAPF64[$200>>3];
   $202 = $201 / 60.0;
   HEAPF64[$200>>3] = $202;
   $203 = $9;
   $204 = ((($203)) + 16|0);
   $205 = +HEAPF64[$204>>3];
   $206 = $205 / 30.0;
   HEAPF64[$204>>3] = $206;
   $207 = $9;
   $208 = ((($207)) + 24|0);
   $209 = +HEAPF64[$208>>3];
   $210 = $209 / 15.0;
   HEAPF64[$208>>3] = $210;
   $211 = $9;
   $212 = ((($211)) + 32|0);
   $213 = +HEAPF64[$212>>3];
   $214 = $213 / 45.0;
   HEAPF64[$212>>3] = $214;
   $215 = $2;
   $216 = ((($215)) + 8|0);
   HEAP32[$216>>2] = 252;
   $217 = $2;
   $218 = ((($217)) + 4|0);
   HEAP32[$218>>2] = 253;
   $219 = $2;
   $1 = $219;
   $220 = $1;
   STACKTOP = sp;return ($220|0);
  }
 }
 $44 = $2;
 $45 = HEAP32[$44>>2]|0;
 _pj_ctx_set_errno($45,-29);
 $46 = $2;
 _freeup_160($46);
 $1 = 0;
 $220 = $1;
 STACKTOP = sp;return ($220|0);
}
function _freeup_160($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_161($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_161($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _seraz0($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $6 = $16;
 $13 = 0.0;
 $17 = $3;
 $18 = $17 * 0.017453292519943295;
 $3 = $18;
 $19 = $3;
 $20 = (+Math_sin((+$19)));
 $11 = $20;
 $21 = $11;
 $22 = $11;
 $23 = $21 * $22;
 $7 = $23;
 $24 = $6;
 $25 = ((($24)) + 72|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $6;
 $28 = ((($27)) + 80|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 * $29;
 $31 = $3;
 $32 = (+Math_cos((+$31)));
 $33 = $30 * $32;
 $34 = $6;
 $35 = ((($34)) + 48|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $7;
 $38 = $36 * $37;
 $39 = 1.0 + $38;
 $40 = $6;
 $41 = ((($40)) + 64|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $7;
 $44 = $42 * $43;
 $45 = 1.0 + $44;
 $46 = $6;
 $47 = ((($46)) + 40|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $7;
 $50 = $48 * $49;
 $51 = 1.0 + $50;
 $52 = $45 * $51;
 $53 = $39 / $52;
 $54 = (+Math_sqrt((+$53)));
 $55 = $33 * $54;
 $9 = $55;
 $56 = $6;
 $57 = ((($56)) + 40|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $7;
 $60 = $58 * $59;
 $61 = 1.0 + $60;
 $62 = $6;
 $63 = ((($62)) + 64|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $7;
 $66 = $64 * $65;
 $67 = 1.0 + $66;
 $68 = $61 / $67;
 $69 = (+Math_sqrt((+$68)));
 $70 = $6;
 $71 = ((($70)) + 64|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $7;
 $74 = $72 * $73;
 $75 = 1.0 + $74;
 $76 = $13;
 $77 = $13;
 $78 = $76 * $77;
 $79 = $75 / $78;
 $80 = $6;
 $81 = ((($80)) + 72|0);
 $82 = +HEAPF64[$81>>3];
 $83 = $6;
 $84 = ((($83)) + 88|0);
 $85 = +HEAPF64[$84>>3];
 $86 = $82 * $85;
 $87 = $79 - $86;
 $88 = $69 * $87;
 $8 = $88;
 $89 = $6;
 $90 = ((($89)) + 96|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $6;
 $93 = ((($92)) + 96|0);
 $94 = +HEAPF64[$93>>3];
 $95 = $91 * $94;
 $96 = $9;
 $97 = $9;
 $98 = $96 * $97;
 $99 = $95 + $98;
 $100 = (+Math_sqrt((+$99)));
 $12 = $100;
 $101 = $4;
 $102 = $8;
 $103 = $6;
 $104 = ((($103)) + 96|0);
 $105 = +HEAPF64[$104>>3];
 $106 = $102 * $105;
 $107 = $9;
 $108 = $9;
 $109 = $107 * $108;
 $110 = $106 - $109;
 $111 = $101 * $110;
 $112 = $12;
 $113 = $111 / $112;
 $10 = $113;
 $114 = $10;
 $115 = $6;
 $116 = ((($115)) + 16|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $117 + $114;
 HEAPF64[$116>>3] = $118;
 $119 = $10;
 $120 = $3;
 $121 = $3;
 $122 = $120 + $121;
 $123 = (+Math_cos((+$122)));
 $124 = $119 * $123;
 $125 = $6;
 $126 = +HEAPF64[$125>>3];
 $127 = $126 + $124;
 HEAPF64[$125>>3] = $127;
 $128 = $10;
 $129 = $3;
 $130 = $129 * 4.0;
 $131 = (+Math_cos((+$130)));
 $132 = $128 * $131;
 $133 = $6;
 $134 = ((($133)) + 8|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $135 + $132;
 HEAPF64[$134>>3] = $136;
 $137 = $4;
 $138 = $9;
 $139 = $137 * $138;
 $140 = $8;
 $141 = $6;
 $142 = ((($141)) + 96|0);
 $143 = +HEAPF64[$142>>3];
 $144 = $140 + $143;
 $145 = $139 * $144;
 $146 = $12;
 $147 = $145 / $146;
 $10 = $147;
 $148 = $10;
 $149 = $3;
 $150 = (+Math_cos((+$149)));
 $151 = $148 * $150;
 $152 = $6;
 $153 = ((($152)) + 24|0);
 $154 = +HEAPF64[$153>>3];
 $155 = $154 + $151;
 HEAPF64[$153>>3] = $155;
 $156 = $10;
 $157 = $3;
 $158 = $157 * 3.0;
 $159 = (+Math_cos((+$158)));
 $160 = $156 * $159;
 $161 = $6;
 $162 = ((($161)) + 32|0);
 $163 = +HEAPF64[$162>>3];
 $164 = $163 + $160;
 HEAPF64[$162>>3] = $164;
 STACKTOP = sp;return;
}
function _e_inverse_164($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 104|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $20 = $3;
 $21 = ((($20)) + 416|0);
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = +HEAPF64[$1>>3];
 $24 = $5;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 / $26;
 $10 = $27;
 $6 = 50;
 while(1) {
  $28 = $10;
  $18 = $28;
  $29 = $10;
  $30 = (+Math_sin((+$29)));
  $14 = $30;
  $31 = $14;
  $32 = $14;
  $33 = $31 * $32;
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 72|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = ((($37)) + 80|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $36 * $39;
  $41 = $10;
  $42 = (+Math_cos((+$41)));
  $43 = $40 * $42;
  $44 = $5;
  $45 = ((($44)) + 48|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $8;
  $48 = $46 * $47;
  $49 = 1.0 + $48;
  $50 = $5;
  $51 = ((($50)) + 64|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $8;
  $54 = $52 * $53;
  $55 = 1.0 + $54;
  $56 = $5;
  $57 = ((($56)) + 40|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $8;
  $60 = $58 * $59;
  $61 = 1.0 + $60;
  $62 = $55 * $61;
  $63 = $49 / $62;
  $64 = (+Math_sqrt((+$63)));
  $65 = $43 * $64;
  $9 = $65;
  $66 = +HEAPF64[$1>>3];
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $9;
  $70 = $68 * $69;
  $71 = $5;
  $72 = ((($71)) + 96|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $70 / $73;
  $75 = $66 + $74;
  $76 = $5;
  $77 = +HEAPF64[$76>>3];
  $78 = $10;
  $79 = 2.0 * $78;
  $80 = (+Math_sin((+$79)));
  $81 = $77 * $80;
  $82 = $75 - $81;
  $83 = $5;
  $84 = ((($83)) + 8|0);
  $85 = +HEAPF64[$84>>3];
  $86 = $10;
  $87 = $86 * 4.0;
  $88 = (+Math_sin((+$87)));
  $89 = $85 * $88;
  $90 = $82 - $89;
  $91 = $9;
  $92 = $5;
  $93 = ((($92)) + 96|0);
  $94 = +HEAPF64[$93>>3];
  $95 = $91 / $94;
  $96 = $5;
  $97 = ((($96)) + 24|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $10;
  $100 = (+Math_sin((+$99)));
  $101 = $98 * $100;
  $102 = $5;
  $103 = ((($102)) + 32|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $10;
  $106 = $105 * 3.0;
  $107 = (+Math_sin((+$106)));
  $108 = $104 * $107;
  $109 = $101 + $108;
  $110 = $95 * $109;
  $111 = $90 - $110;
  $10 = $111;
  $112 = $5;
  $113 = ((($112)) + 16|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $10;
  $116 = $115 / $114;
  $10 = $116;
  $117 = $10;
  $118 = $18;
  $119 = $117 - $118;
  $120 = (+Math_abs((+$119)));
  $121 = $120 >= 9.9999999999999995E-8;
  if (!($121)) {
   break;
  }
  $122 = $6;
  $123 = (($122) + -1)|0;
  $6 = $123;
  $124 = ($123|0)!=(0);
  if (!($124)) {
   break;
  }
 }
 $125 = $10;
 $126 = (+Math_sin((+$125)));
 $15 = $126;
 $127 = $9;
 $128 = $9;
 $129 = $127 * $128;
 $130 = $5;
 $131 = ((($130)) + 96|0);
 $132 = +HEAPF64[$131>>3];
 $133 = $129 / $132;
 $134 = $5;
 $135 = ((($134)) + 96|0);
 $136 = +HEAPF64[$135>>3];
 $137 = $133 / $136;
 $138 = 1.0 + $137;
 $139 = (+Math_sqrt((+$138)));
 $140 = ((($1)) + 8|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $5;
 $143 = ((($142)) + 24|0);
 $144 = +HEAPF64[$143>>3];
 $145 = $15;
 $146 = $144 * $145;
 $147 = $141 - $146;
 $148 = $5;
 $149 = ((($148)) + 32|0);
 $150 = +HEAPF64[$149>>3];
 $151 = $10;
 $152 = $151 * 3.0;
 $153 = (+Math_sin((+$152)));
 $154 = $150 * $153;
 $155 = $147 - $154;
 $156 = $139 * $155;
 $157 = (+Math_exp((+$156)));
 $16 = $157;
 $158 = $16;
 $159 = (+Math_atan((+$158)));
 $160 = $159 - 0.78539816339744828;
 $161 = 2.0 * $160;
 $11 = $161;
 $162 = $15;
 $163 = $15;
 $164 = $162 * $163;
 $13 = $164;
 $165 = $10;
 $166 = (+Math_cos((+$165)));
 $167 = (+Math_abs((+$166)));
 $168 = $167 < 9.9999999999999995E-8;
 if ($168) {
  $169 = $10;
  $170 = $169 - 9.9999999999999995E-8;
  $10 = $170;
 }
 $171 = $11;
 $172 = (+Math_sin((+$171)));
 $19 = $172;
 $173 = $19;
 $174 = $19;
 $175 = $173 * $174;
 $12 = $175;
 $176 = $12;
 $177 = $3;
 $178 = ((($177)) + 112|0);
 $179 = +HEAPF64[$178>>3];
 $180 = $176 * $179;
 $181 = 1.0 - $180;
 $182 = $10;
 $183 = (+Math_tan((+$182)));
 $184 = $181 * $183;
 $185 = $5;
 $186 = ((($185)) + 88|0);
 $187 = +HEAPF64[$186>>3];
 $188 = $184 * $187;
 $189 = $19;
 $190 = $5;
 $191 = ((($190)) + 80|0);
 $192 = +HEAPF64[$191>>3];
 $193 = $189 * $192;
 $194 = $5;
 $195 = ((($194)) + 40|0);
 $196 = +HEAPF64[$195>>3];
 $197 = $13;
 $198 = $196 * $197;
 $199 = 1.0 + $198;
 $200 = $12;
 $201 = 1.0 - $200;
 $202 = $199 * $201;
 $203 = $12;
 $204 = $5;
 $205 = ((($204)) + 56|0);
 $206 = +HEAPF64[$205>>3];
 $207 = $203 * $206;
 $208 = $202 - $207;
 $209 = (+Math_sqrt((+$208)));
 $210 = $193 * $209;
 $211 = $10;
 $212 = (+Math_cos((+$211)));
 $213 = $210 / $212;
 $214 = $188 - $213;
 $215 = $12;
 $216 = $5;
 $217 = ((($216)) + 56|0);
 $218 = +HEAPF64[$217>>3];
 $219 = 1.0 + $218;
 $220 = $215 * $219;
 $221 = 1.0 - $220;
 $222 = $214 / $221;
 $223 = (+Math_atan((+$222)));
 $7 = $223;
 $224 = $7;
 $225 = $224 >= 0.0;
 $226 = $225 ? 1.0 : -1.0;
 $15 = $226;
 $227 = $10;
 $228 = (+Math_cos((+$227)));
 $229 = $228 >= 0.0;
 $230 = $229 ? 1.0 : -1.0;
 $17 = $230;
 $231 = $17;
 $232 = 1.0 - $231;
 $233 = 1.5707963267948966 * $232;
 $234 = $15;
 $235 = $233 * $234;
 $236 = $7;
 $237 = $236 - $235;
 $7 = $237;
 $238 = $7;
 $239 = $5;
 $240 = ((($239)) + 72|0);
 $241 = +HEAPF64[$240>>3];
 $242 = $10;
 $243 = $241 * $242;
 $244 = $238 - $243;
 HEAPF64[$4>>3] = $244;
 $245 = $5;
 $246 = ((($245)) + 80|0);
 $247 = +HEAPF64[$246>>3];
 $248 = (+Math_abs((+$247)));
 $249 = $248 < 9.9999999999999995E-8;
 if ($249) {
  $250 = $3;
  $251 = HEAP32[$250>>2]|0;
  $252 = $19;
  $253 = $3;
  $254 = ((($253)) + 104|0);
  $255 = +HEAPF64[$254>>3];
  $256 = $3;
  $257 = ((($256)) + 104|0);
  $258 = +HEAPF64[$257>>3];
  $259 = $255 * $258;
  $260 = $3;
  $261 = ((($260)) + 72|0);
  $262 = +HEAPF64[$261>>3];
  $263 = $12;
  $264 = $262 * $263;
  $265 = $259 + $264;
  $266 = (+Math_sqrt((+$265)));
  $267 = $252 / $266;
  $268 = (+_aasin($251,$267));
  $269 = ((($4)) + 8|0);
  HEAPF64[$269>>3] = $268;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $270 = $10;
  $271 = (+Math_tan((+$270)));
  $272 = $7;
  $273 = (+Math_cos((+$272)));
  $274 = $271 * $273;
  $275 = $5;
  $276 = ((($275)) + 88|0);
  $277 = +HEAPF64[$276>>3];
  $278 = $7;
  $279 = (+Math_sin((+$278)));
  $280 = $277 * $279;
  $281 = $274 - $280;
  $282 = $3;
  $283 = ((($282)) + 104|0);
  $284 = +HEAPF64[$283>>3];
  $285 = $5;
  $286 = ((($285)) + 80|0);
  $287 = +HEAPF64[$286>>3];
  $288 = $284 * $287;
  $289 = $281 / $288;
  $290 = (+Math_atan((+$289)));
  $291 = ((($4)) + 8|0);
  HEAPF64[$291>>3] = $290;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_165($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 136|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $25 = $3;
 $26 = ((($25)) + 416|0);
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 > 1.5707963267948966;
 $31 = ((($1)) + 8|0);
 if ($30) {
  HEAPF64[$31>>3] = 1.5707963267948966;
 } else {
  $32 = +HEAPF64[$31>>3];
  $33 = $32 < -1.5707963267948966;
  if ($33) {
   $34 = ((($1)) + 8|0);
   HEAPF64[$34>>3] = -1.5707963267948966;
  }
 }
 $35 = ((($1)) + 8|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 >= 0.0;
 $38 = $37 ? 1.5707963267948966 : 4.7123889803846897;
 $16 = $38;
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = (+Math_tan((+$40)));
 $24 = $41;
 $7 = 0;
 while(1) {
  $42 = $16;
  $23 = $42;
  $43 = +HEAPF64[$1>>3];
  $44 = $5;
  $45 = ((($44)) + 72|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $16;
  $48 = $46 * $47;
  $49 = $43 + $48;
  $18 = $49;
  $50 = $18;
  $51 = (+Math_cos((+$50)));
  $19 = $51;
  $52 = $19;
  $53 = (+Math_abs((+$52)));
  $54 = $53 < 9.9999999999999995E-8;
  if ($54) {
   $55 = $18;
   $56 = $55 - 9.9999999999999995E-8;
   $18 = $56;
  }
  $57 = $16;
  $58 = $16;
  $59 = (+Math_sin((+$58)));
  $60 = $19;
  $61 = $60 < 0.0;
  $62 = $61 ? -1.5707963267948966 : 1.5707963267948966;
  $63 = $59 * $62;
  $64 = $57 - $63;
  $22 = $64;
  $6 = 50;
  while(1) {
   $65 = $6;
   $66 = ($65|0)!=(0);
   if (!($66)) {
    break;
   }
   $67 = +HEAPF64[$1>>3];
   $68 = $5;
   $69 = ((($68)) + 72|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $23;
   $72 = $70 * $71;
   $73 = $67 + $72;
   $8 = $73;
   $74 = $8;
   $75 = (+Math_cos((+$74)));
   $11 = $75;
   $76 = $11;
   $77 = (+Math_abs((+$76)));
   $78 = $77 < 9.9999999999999995E-8;
   if ($78) {
    $79 = $8;
    $80 = $79 - 9.9999999999999995E-8;
    $8 = $80;
   }
   $81 = $3;
   $82 = ((($81)) + 104|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $24;
   $85 = $83 * $84;
   $86 = $5;
   $87 = ((($86)) + 80|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $85 * $88;
   $90 = $8;
   $91 = (+Math_sin((+$90)));
   $92 = $5;
   $93 = ((($92)) + 88|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $91 * $94;
   $96 = $89 + $95;
   $97 = $11;
   $98 = $96 / $97;
   $9 = $98;
   $99 = $9;
   $100 = (+Math_atan((+$99)));
   $101 = $22;
   $102 = $100 + $101;
   $14 = $102;
   $103 = $23;
   $104 = (+Math_abs((+$103)));
   $105 = $14;
   $106 = (+Math_abs((+$105)));
   $107 = $104 - $106;
   $108 = (+Math_abs((+$107)));
   $109 = $108 < 9.9999999999999995E-8;
   if ($109) {
    break;
   }
   $110 = $14;
   $23 = $110;
   $111 = $6;
   $112 = (($111) + -1)|0;
   $6 = $112;
  }
  $113 = $6;
  $114 = ($113|0)!=(0);
  if (!($114)) {
   break;
  }
  $115 = $7;
  $116 = (($115) + 1)|0;
  $7 = $116;
  $117 = ($116|0)>=(3);
  if ($117) {
   break;
  }
  $118 = $14;
  $119 = $5;
  $120 = ((($119)) + 104|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $118 > $121;
  if ($122) {
   $123 = $14;
   $124 = $5;
   $125 = ((($124)) + 112|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $123 < $126;
   if ($127) {
    break;
   }
  }
  $128 = $14;
  $129 = $5;
  $130 = ((($129)) + 104|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $128 <= $131;
  if ($132) {
   $16 = 7.8539816339744828;
   continue;
  }
  $133 = $14;
  $134 = $5;
  $135 = ((($134)) + 112|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $133 >= $136;
  if (!($137)) {
   continue;
  }
  $16 = 1.5707963267948966;
 }
 $138 = $6;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = ((($1)) + 8|0);
  $141 = +HEAPF64[$140>>3];
  $142 = (+Math_sin((+$141)));
  $21 = $142;
  $143 = $3;
  $144 = HEAP32[$143>>2]|0;
  $145 = $3;
  $146 = ((($145)) + 104|0);
  $147 = +HEAPF64[$146>>3];
  $148 = $5;
  $149 = ((($148)) + 88|0);
  $150 = +HEAPF64[$149>>3];
  $151 = $147 * $150;
  $152 = $21;
  $153 = $151 * $152;
  $154 = $5;
  $155 = ((($154)) + 80|0);
  $156 = +HEAPF64[$155>>3];
  $157 = ((($1)) + 8|0);
  $158 = +HEAPF64[$157>>3];
  $159 = (+Math_cos((+$158)));
  $160 = $156 * $159;
  $161 = $8;
  $162 = (+Math_sin((+$161)));
  $163 = $160 * $162;
  $164 = $153 - $163;
  $165 = $3;
  $166 = ((($165)) + 72|0);
  $167 = +HEAPF64[$166>>3];
  $168 = $21;
  $169 = $167 * $168;
  $170 = $21;
  $171 = $169 * $170;
  $172 = 1.0 - $171;
  $173 = (+Math_sqrt((+$172)));
  $174 = $164 / $173;
  $175 = (+_aasin($144,$174));
  $15 = $175;
  $176 = $15;
  $177 = 0.5 * $176;
  $178 = 0.78539816339744828 + $177;
  $179 = (+Math_tan((+$178)));
  $180 = (+Math_log((+$179)));
  $17 = $180;
  $181 = $14;
  $182 = (+Math_sin((+$181)));
  $20 = $182;
  $183 = $20;
  $184 = $20;
  $185 = $183 * $184;
  $10 = $185;
  $186 = $5;
  $187 = ((($186)) + 72|0);
  $188 = +HEAPF64[$187>>3];
  $189 = $5;
  $190 = ((($189)) + 80|0);
  $191 = +HEAPF64[$190>>3];
  $192 = $188 * $191;
  $193 = $14;
  $194 = (+Math_cos((+$193)));
  $195 = $192 * $194;
  $196 = $5;
  $197 = ((($196)) + 48|0);
  $198 = +HEAPF64[$197>>3];
  $199 = $10;
  $200 = $198 * $199;
  $201 = 1.0 + $200;
  $202 = $5;
  $203 = ((($202)) + 64|0);
  $204 = +HEAPF64[$203>>3];
  $205 = $10;
  $206 = $204 * $205;
  $207 = 1.0 + $206;
  $208 = $5;
  $209 = ((($208)) + 40|0);
  $210 = +HEAPF64[$209>>3];
  $211 = $10;
  $212 = $210 * $211;
  $213 = 1.0 + $212;
  $214 = $207 * $213;
  $215 = $201 / $214;
  $216 = (+Math_sqrt((+$215)));
  $217 = $195 * $216;
  $13 = $217;
  $218 = $5;
  $219 = ((($218)) + 96|0);
  $220 = +HEAPF64[$219>>3];
  $221 = $5;
  $222 = ((($221)) + 96|0);
  $223 = +HEAPF64[$222>>3];
  $224 = $220 * $223;
  $225 = $13;
  $226 = $13;
  $227 = $225 * $226;
  $228 = $224 + $227;
  $229 = (+Math_sqrt((+$228)));
  $12 = $229;
  $230 = $5;
  $231 = ((($230)) + 16|0);
  $232 = +HEAPF64[$231>>3];
  $233 = $14;
  $234 = $232 * $233;
  $235 = $5;
  $236 = +HEAPF64[$235>>3];
  $237 = $14;
  $238 = 2.0 * $237;
  $239 = (+Math_sin((+$238)));
  $240 = $236 * $239;
  $241 = $234 + $240;
  $242 = $5;
  $243 = ((($242)) + 8|0);
  $244 = +HEAPF64[$243>>3];
  $245 = $14;
  $246 = $245 * 4.0;
  $247 = (+Math_sin((+$246)));
  $248 = $244 * $247;
  $249 = $241 + $248;
  $250 = $17;
  $251 = $13;
  $252 = $250 * $251;
  $253 = $12;
  $254 = $252 / $253;
  $255 = $249 - $254;
  HEAPF64[$4>>3] = $255;
  $256 = $5;
  $257 = ((($256)) + 24|0);
  $258 = +HEAPF64[$257>>3];
  $259 = $20;
  $260 = $258 * $259;
  $261 = $5;
  $262 = ((($261)) + 32|0);
  $263 = +HEAPF64[$262>>3];
  $264 = $14;
  $265 = $264 * 3.0;
  $266 = (+Math_sin((+$265)));
  $267 = $263 * $266;
  $268 = $260 + $267;
  $269 = $17;
  $270 = $5;
  $271 = ((($270)) + 96|0);
  $272 = +HEAPF64[$271>>3];
  $273 = $269 * $272;
  $274 = $12;
  $275 = $273 / $274;
  $276 = $268 + $275;
  $277 = ((($4)) + 8|0);
  HEAPF64[$277>>3] = $276;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $278 = ((($4)) + 8|0);
  HEAPF64[$278>>3] = inf;
  HEAPF64[$4>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_misrsom($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_misrsom($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 254;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11083;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_misrsom($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $2 = $0;
 $10 = (_pj_calloc(1,120)|0);
 $8 = $10;
 $11 = $8;
 $12 = (0|0)==($11|0);
 if ($12) {
  $13 = $2;
  $14 = (_freeup_new_167($13)|0);
  $1 = $14;
  $192 = $1;
  STACKTOP = sp;return ($192|0);
 }
 $15 = $8;
 $16 = $2;
 $17 = ((($16)) + 416|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 _pj_param($9,$19,$22,11127);
 $23 = HEAP32[$9>>2]|0;
 $3 = $23;
 $24 = $3;
 $25 = ($24|0)<=(0);
 $26 = $3;
 $27 = ($26|0)>(233);
 $or$cond = $25 | $27;
 if ($or$cond) {
  $28 = $2;
  $29 = HEAP32[$28>>2]|0;
  _pj_ctx_set_errno($29,-29);
  $30 = $2;
  _freeup_166($30);
  $1 = 0;
  $192 = $1;
  STACKTOP = sp;return ($192|0);
 }
 $31 = $3;
 $32 = (+($31|0));
 $33 = 0.026966460545835135 * $32;
 $34 = 2.2568084612667798 - $33;
 $35 = $2;
 $36 = ((($35)) + 120|0);
 HEAPF64[$36>>3] = $34;
 $5 = 1.7157253262878522;
 $37 = $8;
 $38 = ((($37)) + 72|0);
 HEAPF64[$38>>3] = 0.068666666666666668;
 $39 = $5;
 $40 = (+Math_sin((+$39)));
 $41 = $8;
 $42 = ((($41)) + 80|0);
 HEAPF64[$42>>3] = $40;
 $43 = $5;
 $44 = (+Math_cos((+$43)));
 $45 = $8;
 $46 = ((($45)) + 88|0);
 HEAPF64[$46>>3] = $44;
 $47 = $8;
 $48 = ((($47)) + 88|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_abs((+$49)));
 $51 = $50 < 1.0000000000000001E-9;
 if ($51) {
  $52 = $8;
  $53 = ((($52)) + 88|0);
  HEAPF64[$53>>3] = 1.0000000000000001E-9;
 }
 $54 = $2;
 $55 = ((($54)) + 72|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $8;
 $58 = ((($57)) + 88|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $56 * $59;
 $61 = $8;
 $62 = ((($61)) + 88|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $60 * $63;
 $6 = $64;
 $65 = $2;
 $66 = ((($65)) + 72|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $8;
 $69 = ((($68)) + 80|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $67 * $70;
 $72 = $8;
 $73 = ((($72)) + 80|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $71 * $74;
 $7 = $75;
 $76 = $6;
 $77 = 1.0 - $76;
 $78 = $2;
 $79 = ((($78)) + 112|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $77 * $80;
 $82 = $8;
 $83 = ((($82)) + 64|0);
 HEAPF64[$83>>3] = $81;
 $84 = $8;
 $85 = ((($84)) + 64|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $8;
 $88 = ((($87)) + 64|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $86 * $89;
 $91 = $90 - 1.0;
 $92 = $8;
 $93 = ((($92)) + 64|0);
 HEAPF64[$93>>3] = $91;
 $94 = $7;
 $95 = $2;
 $96 = ((($95)) + 112|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $94 * $97;
 $99 = $8;
 $100 = ((($99)) + 40|0);
 HEAPF64[$100>>3] = $98;
 $101 = $7;
 $102 = $2;
 $103 = ((($102)) + 72|0);
 $104 = +HEAPF64[$103>>3];
 $105 = 2.0 - $104;
 $106 = $101 * $105;
 $107 = $2;
 $108 = ((($107)) + 112|0);
 $109 = +HEAPF64[$108>>3];
 $110 = $106 * $109;
 $111 = $2;
 $112 = ((($111)) + 112|0);
 $113 = +HEAPF64[$112>>3];
 $114 = $110 * $113;
 $115 = $8;
 $116 = ((($115)) + 48|0);
 HEAPF64[$116>>3] = $114;
 $117 = $6;
 $118 = $2;
 $119 = ((($118)) + 112|0);
 $120 = +HEAPF64[$119>>3];
 $121 = $117 * $120;
 $122 = $8;
 $123 = ((($122)) + 56|0);
 HEAPF64[$123>>3] = $121;
 $124 = $2;
 $125 = ((($124)) + 104|0);
 $126 = +HEAPF64[$125>>3];
 $127 = $2;
 $128 = ((($127)) + 104|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $126 * $129;
 $131 = $2;
 $132 = ((($131)) + 104|0);
 $133 = +HEAPF64[$132>>3];
 $134 = $130 * $133;
 $135 = $8;
 $136 = ((($135)) + 96|0);
 HEAPF64[$136>>3] = $134;
 $137 = $8;
 $138 = ((($137)) + 104|0);
 HEAPF64[$138>>3] = 0.0;
 $139 = $8;
 $140 = ((($139)) + 104|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $141 + 6.2831853071795862;
 $143 = $8;
 $144 = ((($143)) + 112|0);
 HEAPF64[$144>>3] = $142;
 $145 = $8;
 $146 = ((($145)) + 32|0);
 HEAPF64[$146>>3] = 0.0;
 $147 = $8;
 $148 = ((($147)) + 24|0);
 HEAPF64[$148>>3] = 0.0;
 $149 = $8;
 $150 = ((($149)) + 16|0);
 HEAPF64[$150>>3] = 0.0;
 $151 = $8;
 $152 = ((($151)) + 8|0);
 HEAPF64[$152>>3] = 0.0;
 $153 = $8;
 HEAPF64[$153>>3] = 0.0;
 $154 = $2;
 _seraz0_169(0.0,1.0,$154);
 $4 = 9.0;
 while(1) {
  $155 = $4;
  $156 = $155 <= 81.000100000000003;
  if (!($156)) {
   break;
  }
  $157 = $4;
  $158 = $2;
  _seraz0_169($157,4.0,$158);
  $159 = $4;
  $160 = $159 + 18.0;
  $4 = $160;
 }
 $4 = 18.0;
 while(1) {
  $161 = $4;
  $162 = $161 <= 72.000100000000003;
  if (!($162)) {
   break;
  }
  $163 = $4;
  $164 = $2;
  _seraz0_169($163,2.0,$164);
  $165 = $4;
  $166 = $165 + 18.0;
  $4 = $166;
 }
 $167 = $2;
 _seraz0_169(90.0,1.0,$167);
 $168 = $8;
 $169 = +HEAPF64[$168>>3];
 $170 = $169 / 30.0;
 HEAPF64[$168>>3] = $170;
 $171 = $8;
 $172 = ((($171)) + 8|0);
 $173 = +HEAPF64[$172>>3];
 $174 = $173 / 60.0;
 HEAPF64[$172>>3] = $174;
 $175 = $8;
 $176 = ((($175)) + 16|0);
 $177 = +HEAPF64[$176>>3];
 $178 = $177 / 30.0;
 HEAPF64[$176>>3] = $178;
 $179 = $8;
 $180 = ((($179)) + 24|0);
 $181 = +HEAPF64[$180>>3];
 $182 = $181 / 15.0;
 HEAPF64[$180>>3] = $182;
 $183 = $8;
 $184 = ((($183)) + 32|0);
 $185 = +HEAPF64[$184>>3];
 $186 = $185 / 45.0;
 HEAPF64[$184>>3] = $186;
 $187 = $2;
 $188 = ((($187)) + 8|0);
 HEAP32[$188>>2] = 255;
 $189 = $2;
 $190 = ((($189)) + 4|0);
 HEAP32[$190>>2] = 256;
 $191 = $2;
 $1 = $191;
 $192 = $1;
 STACKTOP = sp;return ($192|0);
}
function _freeup_166($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_167($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_167($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _seraz0_169($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $6 = $16;
 $17 = $3;
 $18 = $17 * 0.017453292519943295;
 $3 = $18;
 $19 = $3;
 $20 = (+Math_sin((+$19)));
 $11 = $20;
 $21 = $11;
 $22 = $11;
 $23 = $21 * $22;
 $7 = $23;
 $24 = $6;
 $25 = ((($24)) + 72|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $6;
 $28 = ((($27)) + 80|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 * $29;
 $31 = $3;
 $32 = (+Math_cos((+$31)));
 $33 = $30 * $32;
 $34 = $6;
 $35 = ((($34)) + 48|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $7;
 $38 = $36 * $37;
 $39 = 1.0 + $38;
 $40 = $6;
 $41 = ((($40)) + 64|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $7;
 $44 = $42 * $43;
 $45 = 1.0 + $44;
 $46 = $6;
 $47 = ((($46)) + 40|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $7;
 $50 = $48 * $49;
 $51 = 1.0 + $50;
 $52 = $45 * $51;
 $53 = $39 / $52;
 $54 = (+Math_sqrt((+$53)));
 $55 = $33 * $54;
 $9 = $55;
 $56 = $6;
 $57 = ((($56)) + 40|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $7;
 $60 = $58 * $59;
 $61 = 1.0 + $60;
 $13 = $61;
 $62 = $6;
 $63 = ((($62)) + 40|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $7;
 $66 = $64 * $65;
 $67 = 1.0 + $66;
 $68 = $6;
 $69 = ((($68)) + 64|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $7;
 $72 = $70 * $71;
 $73 = 1.0 + $72;
 $74 = $67 / $73;
 $75 = (+Math_sqrt((+$74)));
 $76 = $6;
 $77 = ((($76)) + 64|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $7;
 $80 = $78 * $79;
 $81 = 1.0 + $80;
 $82 = $13;
 $83 = $13;
 $84 = $82 * $83;
 $85 = $81 / $84;
 $86 = $6;
 $87 = ((($86)) + 72|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $6;
 $90 = ((($89)) + 88|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $88 * $91;
 $93 = $85 - $92;
 $94 = $75 * $93;
 $8 = $94;
 $95 = $6;
 $96 = ((($95)) + 96|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $6;
 $99 = ((($98)) + 96|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $97 * $100;
 $102 = $9;
 $103 = $9;
 $104 = $102 * $103;
 $105 = $101 + $104;
 $106 = (+Math_sqrt((+$105)));
 $12 = $106;
 $107 = $4;
 $108 = $8;
 $109 = $6;
 $110 = ((($109)) + 96|0);
 $111 = +HEAPF64[$110>>3];
 $112 = $108 * $111;
 $113 = $9;
 $114 = $9;
 $115 = $113 * $114;
 $116 = $112 - $115;
 $117 = $107 * $116;
 $118 = $12;
 $119 = $117 / $118;
 $10 = $119;
 $120 = $6;
 $121 = ((($120)) + 16|0);
 $122 = +HEAPF64[$121>>3];
 $123 = $122 + $119;
 HEAPF64[$121>>3] = $123;
 $124 = $10;
 $125 = $3;
 $126 = $3;
 $127 = $125 + $126;
 $128 = (+Math_cos((+$127)));
 $129 = $124 * $128;
 $130 = $6;
 $131 = +HEAPF64[$130>>3];
 $132 = $131 + $129;
 HEAPF64[$130>>3] = $132;
 $133 = $10;
 $134 = $3;
 $135 = $134 * 4.0;
 $136 = (+Math_cos((+$135)));
 $137 = $133 * $136;
 $138 = $6;
 $139 = ((($138)) + 8|0);
 $140 = +HEAPF64[$139>>3];
 $141 = $140 + $137;
 HEAPF64[$139>>3] = $141;
 $142 = $4;
 $143 = $9;
 $144 = $142 * $143;
 $145 = $8;
 $146 = $6;
 $147 = ((($146)) + 96|0);
 $148 = +HEAPF64[$147>>3];
 $149 = $145 + $148;
 $150 = $144 * $149;
 $151 = $12;
 $152 = $150 / $151;
 $10 = $152;
 $153 = $10;
 $154 = $3;
 $155 = (+Math_cos((+$154)));
 $156 = $153 * $155;
 $157 = $6;
 $158 = ((($157)) + 24|0);
 $159 = +HEAPF64[$158>>3];
 $160 = $159 + $156;
 HEAPF64[$158>>3] = $160;
 $161 = $10;
 $162 = $3;
 $163 = $162 * 3.0;
 $164 = (+Math_cos((+$163)));
 $165 = $161 * $164;
 $166 = $6;
 $167 = ((($166)) + 32|0);
 $168 = +HEAPF64[$167>>3];
 $169 = $168 + $165;
 HEAPF64[$167>>3] = $169;
 STACKTOP = sp;return;
}
function _e_inverse_170($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 104|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $20 = $3;
 $21 = ((($20)) + 416|0);
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = +HEAPF64[$1>>3];
 $24 = $5;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 / $26;
 $10 = $27;
 $6 = 50;
 while(1) {
  $28 = $10;
  $18 = $28;
  $29 = $10;
  $30 = (+Math_sin((+$29)));
  $14 = $30;
  $31 = $14;
  $32 = $14;
  $33 = $31 * $32;
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 72|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = ((($37)) + 80|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $36 * $39;
  $41 = $10;
  $42 = (+Math_cos((+$41)));
  $43 = $40 * $42;
  $44 = $5;
  $45 = ((($44)) + 48|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $8;
  $48 = $46 * $47;
  $49 = 1.0 + $48;
  $50 = $5;
  $51 = ((($50)) + 64|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $8;
  $54 = $52 * $53;
  $55 = 1.0 + $54;
  $56 = $5;
  $57 = ((($56)) + 40|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $8;
  $60 = $58 * $59;
  $61 = 1.0 + $60;
  $62 = $55 * $61;
  $63 = $49 / $62;
  $64 = (+Math_sqrt((+$63)));
  $65 = $43 * $64;
  $9 = $65;
  $66 = +HEAPF64[$1>>3];
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $9;
  $70 = $68 * $69;
  $71 = $5;
  $72 = ((($71)) + 96|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $70 / $73;
  $75 = $66 + $74;
  $76 = $5;
  $77 = +HEAPF64[$76>>3];
  $78 = $10;
  $79 = 2.0 * $78;
  $80 = (+Math_sin((+$79)));
  $81 = $77 * $80;
  $82 = $75 - $81;
  $83 = $5;
  $84 = ((($83)) + 8|0);
  $85 = +HEAPF64[$84>>3];
  $86 = $10;
  $87 = $86 * 4.0;
  $88 = (+Math_sin((+$87)));
  $89 = $85 * $88;
  $90 = $82 - $89;
  $91 = $9;
  $92 = $5;
  $93 = ((($92)) + 96|0);
  $94 = +HEAPF64[$93>>3];
  $95 = $91 / $94;
  $96 = $5;
  $97 = ((($96)) + 24|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $10;
  $100 = (+Math_sin((+$99)));
  $101 = $98 * $100;
  $102 = $5;
  $103 = ((($102)) + 32|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $10;
  $106 = $105 * 3.0;
  $107 = (+Math_sin((+$106)));
  $108 = $104 * $107;
  $109 = $101 + $108;
  $110 = $95 * $109;
  $111 = $90 - $110;
  $10 = $111;
  $112 = $5;
  $113 = ((($112)) + 16|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $10;
  $116 = $115 / $114;
  $10 = $116;
  $117 = $10;
  $118 = $18;
  $119 = $117 - $118;
  $120 = (+Math_abs((+$119)));
  $121 = $120 >= 9.9999999999999995E-8;
  if (!($121)) {
   break;
  }
  $122 = $6;
  $123 = (($122) + -1)|0;
  $6 = $123;
  $124 = ($123|0)!=(0);
  if (!($124)) {
   break;
  }
 }
 $125 = $10;
 $126 = (+Math_sin((+$125)));
 $15 = $126;
 $127 = $9;
 $128 = $9;
 $129 = $127 * $128;
 $130 = $5;
 $131 = ((($130)) + 96|0);
 $132 = +HEAPF64[$131>>3];
 $133 = $129 / $132;
 $134 = $5;
 $135 = ((($134)) + 96|0);
 $136 = +HEAPF64[$135>>3];
 $137 = $133 / $136;
 $138 = 1.0 + $137;
 $139 = (+Math_sqrt((+$138)));
 $140 = ((($1)) + 8|0);
 $141 = +HEAPF64[$140>>3];
 $142 = $5;
 $143 = ((($142)) + 24|0);
 $144 = +HEAPF64[$143>>3];
 $145 = $15;
 $146 = $144 * $145;
 $147 = $141 - $146;
 $148 = $5;
 $149 = ((($148)) + 32|0);
 $150 = +HEAPF64[$149>>3];
 $151 = $10;
 $152 = $151 * 3.0;
 $153 = (+Math_sin((+$152)));
 $154 = $150 * $153;
 $155 = $147 - $154;
 $156 = $139 * $155;
 $157 = (+Math_exp((+$156)));
 $16 = $157;
 $158 = $16;
 $159 = (+Math_atan((+$158)));
 $160 = $159 - 0.78539816339744828;
 $161 = 2.0 * $160;
 $11 = $161;
 $162 = $15;
 $163 = $15;
 $164 = $162 * $163;
 $13 = $164;
 $165 = $10;
 $166 = (+Math_cos((+$165)));
 $167 = (+Math_abs((+$166)));
 $168 = $167 < 9.9999999999999995E-8;
 if ($168) {
  $169 = $10;
  $170 = $169 - 9.9999999999999995E-8;
  $10 = $170;
 }
 $171 = $11;
 $172 = (+Math_sin((+$171)));
 $19 = $172;
 $173 = $19;
 $174 = $19;
 $175 = $173 * $174;
 $12 = $175;
 $176 = $12;
 $177 = $3;
 $178 = ((($177)) + 112|0);
 $179 = +HEAPF64[$178>>3];
 $180 = $176 * $179;
 $181 = 1.0 - $180;
 $182 = $10;
 $183 = (+Math_tan((+$182)));
 $184 = $181 * $183;
 $185 = $5;
 $186 = ((($185)) + 88|0);
 $187 = +HEAPF64[$186>>3];
 $188 = $184 * $187;
 $189 = $19;
 $190 = $5;
 $191 = ((($190)) + 80|0);
 $192 = +HEAPF64[$191>>3];
 $193 = $189 * $192;
 $194 = $5;
 $195 = ((($194)) + 40|0);
 $196 = +HEAPF64[$195>>3];
 $197 = $13;
 $198 = $196 * $197;
 $199 = 1.0 + $198;
 $200 = $12;
 $201 = 1.0 - $200;
 $202 = $199 * $201;
 $203 = $12;
 $204 = $5;
 $205 = ((($204)) + 56|0);
 $206 = +HEAPF64[$205>>3];
 $207 = $203 * $206;
 $208 = $202 - $207;
 $209 = (+Math_sqrt((+$208)));
 $210 = $193 * $209;
 $211 = $10;
 $212 = (+Math_cos((+$211)));
 $213 = $210 / $212;
 $214 = $188 - $213;
 $215 = $12;
 $216 = $5;
 $217 = ((($216)) + 56|0);
 $218 = +HEAPF64[$217>>3];
 $219 = 1.0 + $218;
 $220 = $215 * $219;
 $221 = 1.0 - $220;
 $222 = $214 / $221;
 $223 = (+Math_atan((+$222)));
 $7 = $223;
 $224 = $7;
 $225 = $224 >= 0.0;
 $226 = $225 ? 1.0 : -1.0;
 $15 = $226;
 $227 = $10;
 $228 = (+Math_cos((+$227)));
 $229 = $228 >= 0.0;
 $230 = $229 ? 1.0 : -1.0;
 $17 = $230;
 $231 = $17;
 $232 = 1.0 - $231;
 $233 = 1.5707963267948966 * $232;
 $234 = $15;
 $235 = $233 * $234;
 $236 = $7;
 $237 = $236 - $235;
 $7 = $237;
 $238 = $7;
 $239 = $5;
 $240 = ((($239)) + 72|0);
 $241 = +HEAPF64[$240>>3];
 $242 = $10;
 $243 = $241 * $242;
 $244 = $238 - $243;
 HEAPF64[$4>>3] = $244;
 $245 = $5;
 $246 = ((($245)) + 80|0);
 $247 = +HEAPF64[$246>>3];
 $248 = (+Math_abs((+$247)));
 $249 = $248 < 9.9999999999999995E-8;
 if ($249) {
  $250 = $3;
  $251 = HEAP32[$250>>2]|0;
  $252 = $19;
  $253 = $3;
  $254 = ((($253)) + 104|0);
  $255 = +HEAPF64[$254>>3];
  $256 = $3;
  $257 = ((($256)) + 104|0);
  $258 = +HEAPF64[$257>>3];
  $259 = $255 * $258;
  $260 = $3;
  $261 = ((($260)) + 72|0);
  $262 = +HEAPF64[$261>>3];
  $263 = $12;
  $264 = $262 * $263;
  $265 = $259 + $264;
  $266 = (+Math_sqrt((+$265)));
  $267 = $252 / $266;
  $268 = (+_aasin($251,$267));
  $269 = ((($4)) + 8|0);
  HEAPF64[$269>>3] = $268;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $270 = $10;
  $271 = (+Math_tan((+$270)));
  $272 = $7;
  $273 = (+Math_cos((+$272)));
  $274 = $271 * $273;
  $275 = $5;
  $276 = ((($275)) + 88|0);
  $277 = +HEAPF64[$276>>3];
  $278 = $7;
  $279 = (+Math_sin((+$278)));
  $280 = $277 * $279;
  $281 = $274 - $280;
  $282 = $3;
  $283 = ((($282)) + 104|0);
  $284 = +HEAPF64[$283>>3];
  $285 = $5;
  $286 = ((($285)) + 80|0);
  $287 = +HEAPF64[$286>>3];
  $288 = $284 * $287;
  $289 = $281 / $288;
  $290 = (+Math_atan((+$289)));
  $291 = ((($4)) + 8|0);
  HEAPF64[$291>>3] = $290;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_171($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 136|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $25 = $3;
 $26 = ((($25)) + 416|0);
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 > 1.5707963267948966;
 $31 = ((($1)) + 8|0);
 if ($30) {
  HEAPF64[$31>>3] = 1.5707963267948966;
 } else {
  $32 = +HEAPF64[$31>>3];
  $33 = $32 < -1.5707963267948966;
  if ($33) {
   $34 = ((($1)) + 8|0);
   HEAPF64[$34>>3] = -1.5707963267948966;
  }
 }
 $35 = ((($1)) + 8|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 >= 0.0;
 $38 = $37 ? 1.5707963267948966 : 4.7123889803846897;
 $16 = $38;
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = (+Math_tan((+$40)));
 $24 = $41;
 $7 = 0;
 while(1) {
  $42 = $16;
  $23 = $42;
  $43 = +HEAPF64[$1>>3];
  $44 = $5;
  $45 = ((($44)) + 72|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $16;
  $48 = $46 * $47;
  $49 = $43 + $48;
  $18 = $49;
  $50 = $18;
  $51 = (+Math_cos((+$50)));
  $19 = $51;
  $52 = $19;
  $53 = (+Math_abs((+$52)));
  $54 = $53 < 9.9999999999999995E-8;
  if ($54) {
   $55 = $18;
   $56 = $55 - 9.9999999999999995E-8;
   $18 = $56;
  }
  $57 = $16;
  $58 = $16;
  $59 = (+Math_sin((+$58)));
  $60 = $19;
  $61 = $60 < 0.0;
  $62 = $61 ? -1.5707963267948966 : 1.5707963267948966;
  $63 = $59 * $62;
  $64 = $57 - $63;
  $22 = $64;
  $6 = 50;
  while(1) {
   $65 = $6;
   $66 = ($65|0)!=(0);
   if (!($66)) {
    break;
   }
   $67 = +HEAPF64[$1>>3];
   $68 = $5;
   $69 = ((($68)) + 72|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $23;
   $72 = $70 * $71;
   $73 = $67 + $72;
   $8 = $73;
   $74 = $8;
   $75 = (+Math_cos((+$74)));
   $11 = $75;
   $76 = (+Math_abs((+$75)));
   $77 = $76 < 9.9999999999999995E-8;
   if ($77) {
    $78 = $8;
    $79 = $78 - 9.9999999999999995E-8;
    $8 = $79;
   }
   $80 = $3;
   $81 = ((($80)) + 104|0);
   $82 = +HEAPF64[$81>>3];
   $83 = $24;
   $84 = $82 * $83;
   $85 = $5;
   $86 = ((($85)) + 80|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $84 * $87;
   $89 = $8;
   $90 = (+Math_sin((+$89)));
   $91 = $5;
   $92 = ((($91)) + 88|0);
   $93 = +HEAPF64[$92>>3];
   $94 = $90 * $93;
   $95 = $88 + $94;
   $96 = $11;
   $97 = $95 / $96;
   $9 = $97;
   $98 = $9;
   $99 = (+Math_atan((+$98)));
   $100 = $22;
   $101 = $99 + $100;
   $14 = $101;
   $102 = $23;
   $103 = (+Math_abs((+$102)));
   $104 = $14;
   $105 = (+Math_abs((+$104)));
   $106 = $103 - $105;
   $107 = (+Math_abs((+$106)));
   $108 = $107 < 9.9999999999999995E-8;
   if ($108) {
    break;
   }
   $109 = $14;
   $23 = $109;
   $110 = $6;
   $111 = (($110) + -1)|0;
   $6 = $111;
  }
  $112 = $6;
  $113 = ($112|0)!=(0);
  if (!($113)) {
   break;
  }
  $114 = $7;
  $115 = (($114) + 1)|0;
  $7 = $115;
  $116 = ($115|0)>=(3);
  if ($116) {
   break;
  }
  $117 = $14;
  $118 = $5;
  $119 = ((($118)) + 104|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $117 > $120;
  if ($121) {
   $122 = $14;
   $123 = $5;
   $124 = ((($123)) + 112|0);
   $125 = +HEAPF64[$124>>3];
   $126 = $122 < $125;
   if ($126) {
    break;
   }
  }
  $127 = $14;
  $128 = $5;
  $129 = ((($128)) + 104|0);
  $130 = +HEAPF64[$129>>3];
  $131 = $127 <= $130;
  if ($131) {
   $16 = 7.8539816339744828;
   continue;
  }
  $132 = $14;
  $133 = $5;
  $134 = ((($133)) + 112|0);
  $135 = +HEAPF64[$134>>3];
  $136 = $132 >= $135;
  if (!($136)) {
   continue;
  }
  $16 = 1.5707963267948966;
 }
 $137 = $6;
 $138 = ($137|0)!=(0);
 if ($138) {
  $139 = ((($1)) + 8|0);
  $140 = +HEAPF64[$139>>3];
  $141 = (+Math_sin((+$140)));
  $21 = $141;
  $142 = $3;
  $143 = HEAP32[$142>>2]|0;
  $144 = $3;
  $145 = ((($144)) + 104|0);
  $146 = +HEAPF64[$145>>3];
  $147 = $5;
  $148 = ((($147)) + 88|0);
  $149 = +HEAPF64[$148>>3];
  $150 = $146 * $149;
  $151 = $21;
  $152 = $150 * $151;
  $153 = $5;
  $154 = ((($153)) + 80|0);
  $155 = +HEAPF64[$154>>3];
  $156 = ((($1)) + 8|0);
  $157 = +HEAPF64[$156>>3];
  $158 = (+Math_cos((+$157)));
  $159 = $155 * $158;
  $160 = $8;
  $161 = (+Math_sin((+$160)));
  $162 = $159 * $161;
  $163 = $152 - $162;
  $164 = $3;
  $165 = ((($164)) + 72|0);
  $166 = +HEAPF64[$165>>3];
  $167 = $21;
  $168 = $166 * $167;
  $169 = $21;
  $170 = $168 * $169;
  $171 = 1.0 - $170;
  $172 = (+Math_sqrt((+$171)));
  $173 = $163 / $172;
  $174 = (+_aasin($143,$173));
  $15 = $174;
  $175 = $15;
  $176 = 0.5 * $175;
  $177 = 0.78539816339744828 + $176;
  $178 = (+Math_tan((+$177)));
  $179 = (+Math_log((+$178)));
  $17 = $179;
  $180 = $14;
  $181 = (+Math_sin((+$180)));
  $20 = $181;
  $182 = $20;
  $183 = $20;
  $184 = $182 * $183;
  $10 = $184;
  $185 = $5;
  $186 = ((($185)) + 72|0);
  $187 = +HEAPF64[$186>>3];
  $188 = $5;
  $189 = ((($188)) + 80|0);
  $190 = +HEAPF64[$189>>3];
  $191 = $187 * $190;
  $192 = $14;
  $193 = (+Math_cos((+$192)));
  $194 = $191 * $193;
  $195 = $5;
  $196 = ((($195)) + 48|0);
  $197 = +HEAPF64[$196>>3];
  $198 = $10;
  $199 = $197 * $198;
  $200 = 1.0 + $199;
  $201 = $5;
  $202 = ((($201)) + 64|0);
  $203 = +HEAPF64[$202>>3];
  $204 = $10;
  $205 = $203 * $204;
  $206 = 1.0 + $205;
  $207 = $5;
  $208 = ((($207)) + 40|0);
  $209 = +HEAPF64[$208>>3];
  $210 = $10;
  $211 = $209 * $210;
  $212 = 1.0 + $211;
  $213 = $206 * $212;
  $214 = $200 / $213;
  $215 = (+Math_sqrt((+$214)));
  $216 = $194 * $215;
  $13 = $216;
  $217 = $5;
  $218 = ((($217)) + 96|0);
  $219 = +HEAPF64[$218>>3];
  $220 = $5;
  $221 = ((($220)) + 96|0);
  $222 = +HEAPF64[$221>>3];
  $223 = $219 * $222;
  $224 = $13;
  $225 = $13;
  $226 = $224 * $225;
  $227 = $223 + $226;
  $228 = (+Math_sqrt((+$227)));
  $12 = $228;
  $229 = $5;
  $230 = ((($229)) + 16|0);
  $231 = +HEAPF64[$230>>3];
  $232 = $14;
  $233 = $231 * $232;
  $234 = $5;
  $235 = +HEAPF64[$234>>3];
  $236 = $14;
  $237 = 2.0 * $236;
  $238 = (+Math_sin((+$237)));
  $239 = $235 * $238;
  $240 = $233 + $239;
  $241 = $5;
  $242 = ((($241)) + 8|0);
  $243 = +HEAPF64[$242>>3];
  $244 = $14;
  $245 = $244 * 4.0;
  $246 = (+Math_sin((+$245)));
  $247 = $243 * $246;
  $248 = $240 + $247;
  $249 = $17;
  $250 = $13;
  $251 = $249 * $250;
  $252 = $12;
  $253 = $251 / $252;
  $254 = $248 - $253;
  HEAPF64[$4>>3] = $254;
  $255 = $5;
  $256 = ((($255)) + 24|0);
  $257 = +HEAPF64[$256>>3];
  $258 = $20;
  $259 = $257 * $258;
  $260 = $5;
  $261 = ((($260)) + 32|0);
  $262 = +HEAPF64[$261>>3];
  $263 = $14;
  $264 = $263 * 3.0;
  $265 = (+Math_sin((+$264)));
  $266 = $262 * $265;
  $267 = $259 + $266;
  $268 = $17;
  $269 = $5;
  $270 = ((($269)) + 96|0);
  $271 = +HEAPF64[$270>>3];
  $272 = $268 * $271;
  $273 = $12;
  $274 = $272 / $273;
  $275 = $267 + $274;
  $276 = ((($4)) + 8|0);
  HEAPF64[$276>>3] = $275;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $277 = ((($4)) + 8|0);
  HEAPF64[$277>>3] = inf;
  HEAPF64[$4>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_merc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_merc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 257;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11133;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_merc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $6 = sp;
 $2 = $0;
 $3 = 0.0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 _pj_param($5,$8,$11,11165);
 $12 = HEAP32[$5>>2]|0;
 $4 = $12;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  _pj_param($6,$15,$18,15033);
  $19 = +HEAPF64[$6>>3];
  $20 = (+Math_abs((+$19)));
  $3 = $20;
  $21 = $3;
  $22 = $21 >= 1.5707963267948966;
  if ($22) {
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   _pj_ctx_set_errno($24,-24);
   $25 = $2;
   _freeup_172($25);
   $1 = 0;
   $55 = $1;
   STACKTOP = sp;return ($55|0);
  }
 }
 $26 = $2;
 $27 = ((($26)) + 72|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 != 0.0;
 $30 = $4;
 $31 = ($30|0)!=(0);
 if ($29) {
  if ($31) {
   $32 = $3;
   $33 = (+Math_sin((+$32)));
   $34 = $3;
   $35 = (+Math_cos((+$34)));
   $36 = $2;
   $37 = ((($36)) + 72|0);
   $38 = +HEAPF64[$37>>3];
   $39 = (+_pj_msfn($33,$35,$38));
   $40 = $2;
   $41 = ((($40)) + 152|0);
   HEAPF64[$41>>3] = $39;
  }
  $42 = $2;
  $43 = ((($42)) + 8|0);
  HEAP32[$43>>2] = 258;
  $44 = $2;
  $45 = ((($44)) + 4|0);
  HEAP32[$45>>2] = 259;
 } else {
  if ($31) {
   $46 = $3;
   $47 = (+Math_cos((+$46)));
   $48 = $2;
   $49 = ((($48)) + 152|0);
   HEAPF64[$49>>3] = $47;
  }
  $50 = $2;
  $51 = ((($50)) + 8|0);
  HEAP32[$51>>2] = 260;
  $52 = $2;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = 261;
 }
 $54 = $2;
 $1 = $54;
 $55 = $1;
 STACKTOP = sp;return ($55|0);
}
function _freeup_172($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_pj_dealloc($2)|0);
 STACKTOP = sp;return;
}
function _e_inverse_175($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = -$8;
 $10 = $3;
 $11 = ((($10)) + 152|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 / $12;
 $14 = (+Math_exp((+$13)));
 $15 = $3;
 $16 = ((($15)) + 88|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+_pj_phi2($6,$14,$17));
 $19 = ((($4)) + 8|0);
 HEAPF64[$19>>3] = $18;
 $20 = $18 == inf;
 if ($20) {
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  _pj_ctx_set_errno($22,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $23 = +HEAPF64[$1>>3];
  $24 = $3;
  $25 = ((($24)) + 152|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $23 / $26;
  HEAPF64[$4>>3] = $27;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_176($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_abs((+$6)));
 $8 = $7 - 1.5707963267948966;
 $9 = (+Math_abs((+$8)));
 $10 = $9 <= 1.0E-10;
 $11 = $3;
 if ($10) {
  $12 = HEAP32[$11>>2]|0;
  _pj_ctx_set_errno($12,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $13 = ((($11)) + 152|0);
  $14 = +HEAPF64[$13>>3];
  $15 = +HEAPF64[$1>>3];
  $16 = $14 * $15;
  HEAPF64[$4>>3] = $16;
  $17 = $3;
  $18 = ((($17)) + 152|0);
  $19 = +HEAPF64[$18>>3];
  $20 = -$19;
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (+Math_sin((+$24)));
  $26 = $3;
  $27 = ((($26)) + 88|0);
  $28 = +HEAPF64[$27>>3];
  $29 = (+_pj_tsfn($22,$25,$28));
  $30 = (+Math_log((+$29)));
  $31 = $20 * $30;
  $32 = ((($4)) + 8|0);
  HEAPF64[$32>>3] = $31;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_inverse_177($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = -$6;
 $8 = $3;
 $9 = ((($8)) + 152|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 / $10;
 $12 = (+Math_exp((+$11)));
 $13 = (+Math_atan((+$12)));
 $14 = 2.0 * $13;
 $15 = 1.5707963267948966 - $14;
 $16 = ((($4)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = +HEAPF64[$1>>3];
 $18 = $3;
 $19 = ((($18)) + 152|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 / $20;
 HEAPF64[$4>>3] = $21;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_178($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_abs((+$6)));
 $8 = $7 - 1.5707963267948966;
 $9 = (+Math_abs((+$8)));
 $10 = $9 <= 1.0E-10;
 $11 = $3;
 if ($10) {
  $12 = HEAP32[$11>>2]|0;
  _pj_ctx_set_errno($12,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $13 = ((($11)) + 152|0);
  $14 = +HEAPF64[$13>>3];
  $15 = +HEAPF64[$1>>3];
  $16 = $14 * $15;
  HEAPF64[$4>>3] = $16;
  $17 = $3;
  $18 = ((($17)) + 152|0);
  $19 = +HEAPF64[$18>>3];
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = 0.5 * $21;
  $23 = 0.78539816339744828 + $22;
  $24 = (+Math_tan((+$23)));
  $25 = (+Math_log((+$24)));
  $26 = $19 * $25;
  $27 = ((($4)) + 8|0);
  HEAPF64[$27>>3] = $26;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_mill($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mill($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 262;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11173;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mill($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 263;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 264;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_179($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_180($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_180($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_181($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $5;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = 0.80000000000000004 * $7;
 $9 = (+Math_exp((+$8)));
 $10 = (+Math_atan((+$9)));
 $11 = $10 - 0.78539816339744828;
 $12 = 2.5 * $11;
 $13 = ((($4)) + 8|0);
 HEAPF64[$13>>3] = $12;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_182($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $5;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 * 0.40000000000000002;
 $9 = 0.78539816339744828 + $8;
 $10 = (+Math_tan((+$9)));
 $11 = (+Math_log((+$10)));
 $12 = $11 * 1.25;
 $13 = ((($4)) + 8|0);
 HEAPF64[$13>>3] = $12;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_ocea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_ocea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 265;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11202;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_ocea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $14 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $2 = $0;
 $3 = 0.0;
 $18 = (_pj_calloc(1,48)|0);
 $10 = $18;
 $19 = $10;
 $20 = (0|0)==($19|0);
 if ($20) {
  $21 = $2;
  $22 = (_freeup_new_184($21)|0);
  $1 = $22;
  $191 = $1;
  STACKTOP = sp;return ($191|0);
 }
 $23 = $10;
 $24 = $2;
 $25 = ((($24)) + 416|0);
 HEAP32[$25>>2] = $23;
 $26 = $2;
 $27 = ((($26)) + 56|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $2;
 $30 = ((($29)) + 152|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $28 / $31;
 $33 = $10;
 HEAPF64[$33>>3] = $32;
 $34 = $2;
 $35 = ((($34)) + 56|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $2;
 $38 = ((($37)) + 152|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 * $39;
 $41 = $10;
 $42 = ((($41)) + 8|0);
 HEAPF64[$42>>3] = $40;
 $43 = $2;
 $44 = HEAP32[$43>>2]|0;
 $45 = $2;
 $46 = ((($45)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 _pj_param($11,$44,$47,11398);
 $48 = HEAP32[$11>>2]|0;
 $49 = ($48|0)!=(0);
 $50 = $2;
 $51 = HEAP32[$50>>2]|0;
 $52 = $2;
 $53 = ((($52)) + 32|0);
 $54 = HEAP32[$53>>2]|0;
 if ($49) {
  _pj_param($12,$51,$54,14852);
  $55 = +HEAPF64[$12>>3];
  $9 = $55;
  $56 = $2;
  $57 = HEAP32[$56>>2]|0;
  $58 = $2;
  $59 = ((($58)) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  _pj_param($13,$57,$60,11419);
  $61 = +HEAPF64[$13>>3];
  $8 = $61;
  $62 = $9;
  $63 = (+Math_cos((+$62)));
  $64 = -$63;
  $65 = $3;
  $66 = (+Math_sin((+$65)));
  $67 = -$66;
  $68 = $9;
  $69 = (+Math_sin((+$68)));
  $70 = $67 * $69;
  $71 = $64 / $70;
  $72 = (+Math_atan((+$71)));
  $73 = $8;
  $74 = $72 + $73;
  $75 = $10;
  $76 = ((($75)) + 32|0);
  HEAPF64[$76>>3] = $74;
  $77 = $3;
  $78 = (+Math_cos((+$77)));
  $79 = $9;
  $80 = (+Math_sin((+$79)));
  $81 = $78 * $80;
  $82 = (+Math_asin((+$81)));
  $83 = $10;
  $84 = ((($83)) + 16|0);
  HEAPF64[$84>>3] = $82;
 } else {
  _pj_param($14,$51,$54,15081);
  $85 = +HEAPF64[$14>>3];
  $4 = $85;
  $86 = $2;
  $87 = HEAP32[$86>>2]|0;
  $88 = $2;
  $89 = ((($88)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  _pj_param($15,$87,$90,12667);
  $91 = +HEAPF64[$15>>3];
  $5 = $91;
  $92 = $2;
  $93 = HEAP32[$92>>2]|0;
  $94 = $2;
  $95 = ((($94)) + 32|0);
  $96 = HEAP32[$95>>2]|0;
  _pj_param($16,$93,$96,12660);
  $97 = +HEAPF64[$16>>3];
  $6 = $97;
  $98 = $2;
  $99 = HEAP32[$98>>2]|0;
  $100 = $2;
  $101 = ((($100)) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  _pj_param($17,$99,$102,12674);
  $103 = +HEAPF64[$17>>3];
  $7 = $103;
  $104 = $4;
  $105 = (+Math_cos((+$104)));
  $106 = $5;
  $107 = (+Math_sin((+$106)));
  $108 = $105 * $107;
  $109 = $6;
  $110 = (+Math_cos((+$109)));
  $111 = $108 * $110;
  $112 = $4;
  $113 = (+Math_sin((+$112)));
  $114 = $5;
  $115 = (+Math_cos((+$114)));
  $116 = $113 * $115;
  $117 = $7;
  $118 = (+Math_cos((+$117)));
  $119 = $116 * $118;
  $120 = $111 - $119;
  $121 = $4;
  $122 = (+Math_sin((+$121)));
  $123 = $5;
  $124 = (+Math_cos((+$123)));
  $125 = $122 * $124;
  $126 = $7;
  $127 = (+Math_sin((+$126)));
  $128 = $125 * $127;
  $129 = $4;
  $130 = (+Math_cos((+$129)));
  $131 = $5;
  $132 = (+Math_sin((+$131)));
  $133 = $130 * $132;
  $134 = $6;
  $135 = (+Math_sin((+$134)));
  $136 = $133 * $135;
  $137 = $128 - $136;
  $138 = (+Math_atan2((+$120),(+$137)));
  $139 = $10;
  $140 = ((($139)) + 32|0);
  HEAPF64[$140>>3] = $138;
  $141 = $10;
  $142 = ((($141)) + 32|0);
  $143 = +HEAPF64[$142>>3];
  $144 = $6;
  $145 = $143 - $144;
  $146 = (+Math_cos((+$145)));
  $147 = -$146;
  $148 = $4;
  $149 = (+Math_tan((+$148)));
  $150 = $147 / $149;
  $151 = (+Math_atan((+$150)));
  $152 = $10;
  $153 = ((($152)) + 16|0);
  HEAPF64[$153>>3] = $151;
 }
 $154 = $10;
 $155 = ((($154)) + 32|0);
 $156 = +HEAPF64[$155>>3];
 $157 = $156 + 1.5707963267948966;
 $158 = $2;
 $159 = ((($158)) + 120|0);
 HEAPF64[$159>>3] = $157;
 $160 = $10;
 $161 = ((($160)) + 16|0);
 $162 = +HEAPF64[$161>>3];
 $163 = (+Math_cos((+$162)));
 $164 = $10;
 $165 = ((($164)) + 24|0);
 HEAPF64[$165>>3] = $163;
 $166 = $10;
 $167 = ((($166)) + 16|0);
 $168 = +HEAPF64[$167>>3];
 $169 = (+Math_sin((+$168)));
 $170 = $10;
 $171 = ((($170)) + 16|0);
 HEAPF64[$171>>3] = $169;
 $172 = $10;
 $173 = ((($172)) + 32|0);
 $174 = +HEAPF64[$173>>3];
 $175 = (+Math_cos((+$174)));
 $176 = $10;
 $177 = ((($176)) + 40|0);
 HEAPF64[$177>>3] = $175;
 $178 = $10;
 $179 = ((($178)) + 32|0);
 $180 = +HEAPF64[$179>>3];
 $181 = (+Math_sin((+$180)));
 $182 = $10;
 $183 = ((($182)) + 32|0);
 HEAPF64[$183>>3] = $181;
 $184 = $2;
 $185 = ((($184)) + 8|0);
 HEAP32[$185>>2] = 266;
 $186 = $2;
 $187 = ((($186)) + 4|0);
 HEAP32[$187>>2] = 267;
 $188 = $2;
 $189 = ((($188)) + 72|0);
 HEAPF64[$189>>3] = 0.0;
 $190 = $2;
 $1 = $190;
 $191 = $1;
 STACKTOP = sp;return ($191|0);
}
function _freeup_183($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_184($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_184($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_192($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = +HEAPF64[$11>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 / $12;
 HEAPF64[$13>>3] = $15;
 $16 = $5;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = +HEAPF64[$1>>3];
 $20 = $19 / $18;
 HEAPF64[$1>>3] = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = ((($1)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $22 * $24;
 $26 = 1.0 - $25;
 $27 = (+Math_sqrt((+$26)));
 $6 = $27;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $5;
 $31 = ((($30)) + 16|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $29 * $32;
 $34 = $6;
 $35 = $5;
 $36 = ((($35)) + 24|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 * $37;
 $39 = +HEAPF64[$1>>3];
 $40 = (+Math_sin((+$39)));
 $7 = $40;
 $41 = $38 * $40;
 $42 = $33 + $41;
 $43 = (+Math_asin((+$42)));
 $44 = ((($4)) + 8|0);
 HEAPF64[$44>>3] = $43;
 $45 = $6;
 $46 = $5;
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $45 * $48;
 $50 = $7;
 $51 = $49 * $50;
 $52 = ((($1)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $5;
 $55 = ((($54)) + 24|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $53 * $56;
 $58 = $51 - $57;
 $59 = $6;
 $60 = +HEAPF64[$1>>3];
 $61 = (+Math_cos((+$60)));
 $62 = $59 * $61;
 $63 = (+Math_atan2((+$58),(+$62)));
 HEAPF64[$4>>3] = $63;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_193($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = +HEAPF64[$1>>3];
 $11 = (+Math_sin((+$10)));
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = +HEAPF64[$1>>3];
 $14 = (+Math_cos((+$13)));
 $6 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_tan((+$16)));
 $18 = $5;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 * $20;
 $22 = $5;
 $23 = ((($22)) + 16|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($4)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $24 * $26;
 $28 = $21 + $27;
 $29 = $6;
 $30 = $28 / $29;
 $31 = (+Math_atan((+$30)));
 HEAPF64[$4>>3] = $31;
 $32 = $6;
 $33 = $32 < 0.0;
 if ($33) {
  $34 = +HEAPF64[$4>>3];
  $35 = $34 + 3.1415926535897931;
  HEAPF64[$4>>3] = $35;
 }
 $36 = $5;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = +HEAPF64[$4>>3];
 $40 = $39 * $38;
 HEAPF64[$4>>3] = $40;
 $41 = $5;
 $42 = +HEAPF64[$41>>3];
 $43 = $5;
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = ((($1)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = (+Math_sin((+$47)));
 $49 = $45 * $48;
 $50 = $5;
 $51 = ((($50)) + 24|0);
 $52 = +HEAPF64[$51>>3];
 $53 = ((($1)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = (+Math_cos((+$54)));
 $56 = $52 * $55;
 $57 = ((($4)) + 8|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $56 * $58;
 $60 = $49 - $59;
 $61 = $42 * $60;
 $62 = ((($4)) + 8|0);
 HEAPF64[$62>>3] = $61;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_omerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_omerc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 268;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11287;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_omerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0;
 var $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0;
 var $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0;
 var $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0.0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0;
 var $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0.0;
 var $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0;
 var $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0.0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0;
 var $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $25 = sp + 104|0;
 $26 = sp + 96|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $33 = sp + 40|0;
 $34 = sp + 32|0;
 $35 = sp + 24|0;
 $36 = sp + 16|0;
 $37 = sp + 8|0;
 $38 = sp;
 $2 = $0;
 $13 = 0.0;
 $15 = 0.0;
 $16 = 0.0;
 $17 = 0.0;
 $18 = 0.0;
 $19 = 0.0;
 $20 = 0.0;
 $23 = 0;
 $39 = (_pj_calloc(1,120)|0);
 $24 = $39;
 $40 = $24;
 $41 = (0|0)==($40|0);
 if ($41) {
  $42 = $2;
  $43 = (_freeup_new_195($42)|0);
  $1 = $43;
  $537 = $1;
  STACKTOP = sp;return ($537|0);
 }
 $44 = $24;
 $45 = $2;
 $46 = ((($45)) + 416|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 $49 = $2;
 $50 = ((($49)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 _pj_param($25,$48,$51,11390);
 $52 = HEAP32[$25>>2]|0;
 $53 = $24;
 $54 = ((($53)) + 112|0);
 HEAP32[$54>>2] = $52;
 $55 = $2;
 $56 = HEAP32[$55>>2]|0;
 $57 = $2;
 $58 = ((($57)) + 32|0);
 $59 = HEAP32[$58>>2]|0;
 _pj_param($26,$56,$59,11398);
 $60 = HEAP32[$26>>2]|0;
 $21 = $60;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $2;
  $63 = HEAP32[$62>>2]|0;
  $64 = $2;
  $65 = ((($64)) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  _pj_param($27,$63,$66,14852);
  $67 = +HEAPF64[$27>>3];
  $20 = $67;
 }
 $68 = $2;
 $69 = HEAP32[$68>>2]|0;
 $70 = $2;
 $71 = ((($70)) + 32|0);
 $72 = HEAP32[$71>>2]|0;
 _pj_param($28,$69,$72,11405);
 $73 = HEAP32[$28>>2]|0;
 $22 = $73;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $2;
  $76 = HEAP32[$75>>2]|0;
  $77 = $2;
  $78 = ((($77)) + 32|0);
  $79 = HEAP32[$78>>2]|0;
  _pj_param($29,$76,$79,11412);
  $80 = +HEAPF64[$29>>3];
  $13 = $80;
 }
 $81 = $21;
 $82 = ($81|0)!=(0);
 $83 = $22;
 $84 = ($83|0)!=(0);
 $or$cond = $82 | $84;
 $85 = $2;
 $86 = HEAP32[$85>>2]|0;
 $87 = $2;
 $88 = ((($87)) + 32|0);
 $89 = HEAP32[$88>>2]|0;
 do {
  if ($or$cond) {
   _pj_param($30,$86,$89,11419);
   $90 = +HEAPF64[$30>>3];
   $15 = $90;
   $91 = $2;
   $92 = HEAP32[$91>>2]|0;
   $93 = $2;
   $94 = ((($93)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   _pj_param($31,$92,$95,11425);
   $96 = HEAP32[$31>>2]|0;
   $97 = ($96|0)!=(0);
   if ($97) {
    $106 = 1;
   } else {
    $98 = $2;
    $99 = HEAP32[$98>>2]|0;
    $100 = $2;
    $101 = ((($100)) + 32|0);
    $102 = HEAP32[$101>>2]|0;
    _pj_param($32,$99,$102,11433);
    $103 = HEAP32[$32>>2]|0;
    $104 = ($103|0)!=(0);
    $106 = $104;
   }
   $105 = $106&1;
   $23 = $105;
   $107 = $23;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $2;
    $110 = HEAP32[$109>>2]|0;
    $111 = $2;
    $112 = ((($111)) + 32|0);
    $113 = HEAP32[$112>>2]|0;
    _pj_param($33,$110,$113,11442);
    $114 = $2;
    $115 = HEAP32[$114>>2]|0;
    $116 = $2;
    $117 = ((($116)) + 32|0);
    $118 = HEAP32[$117>>2]|0;
    _pj_param($34,$115,$118,11451);
   }
  } else {
   _pj_param($35,$86,$89,12660);
   $119 = +HEAPF64[$35>>3];
   $16 = $119;
   $120 = $2;
   $121 = HEAP32[$120>>2]|0;
   $122 = $2;
   $123 = ((($122)) + 32|0);
   $124 = HEAP32[$123>>2]|0;
   _pj_param($36,$121,$124,15081);
   $125 = +HEAPF64[$36>>3];
   $18 = $125;
   $126 = $2;
   $127 = HEAP32[$126>>2]|0;
   $128 = $2;
   $129 = ((($128)) + 32|0);
   $130 = HEAP32[$129>>2]|0;
   _pj_param($37,$127,$130,12674);
   $131 = +HEAPF64[$37>>3];
   $17 = $131;
   $132 = $2;
   $133 = HEAP32[$132>>2]|0;
   $134 = $2;
   $135 = ((($134)) + 32|0);
   $136 = HEAP32[$135>>2]|0;
   _pj_param($38,$133,$136,12667);
   $137 = +HEAPF64[$38>>3];
   $19 = $137;
   $138 = $18;
   $139 = $19;
   $140 = $138 - $139;
   $141 = (+Math_abs((+$140)));
   $142 = $141 <= 9.9999999999999995E-8;
   if (!($142)) {
    $143 = $18;
    $144 = (+Math_abs((+$143)));
    $3 = $144;
    $145 = $144 <= 9.9999999999999995E-8;
    if (!($145)) {
     $146 = $3;
     $147 = $146 - 1.5707963267948966;
     $148 = (+Math_abs((+$147)));
     $149 = $148 <= 9.9999999999999995E-8;
     if (!($149)) {
      $150 = $2;
      $151 = ((($150)) + 128|0);
      $152 = +HEAPF64[$151>>3];
      $153 = (+Math_abs((+$152)));
      $154 = $153 - 1.5707963267948966;
      $155 = (+Math_abs((+$154)));
      $156 = $155 <= 9.9999999999999995E-8;
      if (!($156)) {
       $157 = $19;
       $158 = (+Math_abs((+$157)));
       $159 = $158 - 1.5707963267948966;
       $160 = (+Math_abs((+$159)));
       $161 = $160 <= 9.9999999999999995E-8;
       if (!($161)) {
        break;
       }
      }
     }
    }
   }
   $162 = $2;
   $163 = HEAP32[$162>>2]|0;
   _pj_ctx_set_errno($163,-33);
   $164 = $2;
   _freeup_194($164);
   $1 = 0;
   $537 = $1;
   STACKTOP = sp;return ($537|0);
  }
 } while(0);
 $165 = $2;
 $166 = ((($165)) + 104|0);
 $167 = +HEAPF64[$166>>3];
 $168 = (+Math_sqrt((+$167)));
 $4 = $168;
 $169 = $2;
 $170 = ((($169)) + 128|0);
 $171 = +HEAPF64[$170>>3];
 $172 = (+Math_abs((+$171)));
 $173 = $172 > 1.0E-10;
 if ($173) {
  $174 = $2;
  $175 = ((($174)) + 128|0);
  $176 = +HEAPF64[$175>>3];
  $177 = (+Math_sin((+$176)));
  $10 = $177;
  $178 = $2;
  $179 = ((($178)) + 128|0);
  $180 = +HEAPF64[$179>>3];
  $181 = (+Math_cos((+$180)));
  $5 = $181;
  $182 = $2;
  $183 = ((($182)) + 72|0);
  $184 = +HEAPF64[$183>>3];
  $185 = $10;
  $186 = $184 * $185;
  $187 = $10;
  $188 = $186 * $187;
  $189 = 1.0 - $188;
  $3 = $189;
  $190 = $5;
  $191 = $5;
  $192 = $190 * $191;
  $193 = $24;
  $194 = ((($193)) + 8|0);
  HEAPF64[$194>>3] = $192;
  $195 = $2;
  $196 = ((($195)) + 72|0);
  $197 = +HEAPF64[$196>>3];
  $198 = $24;
  $199 = ((($198)) + 8|0);
  $200 = +HEAPF64[$199>>3];
  $201 = $197 * $200;
  $202 = $24;
  $203 = ((($202)) + 8|0);
  $204 = +HEAPF64[$203>>3];
  $205 = $201 * $204;
  $206 = $2;
  $207 = ((($206)) + 104|0);
  $208 = +HEAPF64[$207>>3];
  $209 = $205 / $208;
  $210 = 1.0 + $209;
  $211 = (+Math_sqrt((+$210)));
  $212 = $24;
  $213 = ((($212)) + 8|0);
  HEAPF64[$213>>3] = $211;
  $214 = $24;
  $215 = ((($214)) + 8|0);
  $216 = +HEAPF64[$215>>3];
  $217 = $2;
  $218 = ((($217)) + 152|0);
  $219 = +HEAPF64[$218>>3];
  $220 = $216 * $219;
  $221 = $4;
  $222 = $220 * $221;
  $223 = $3;
  $224 = $222 / $223;
  $225 = $24;
  HEAPF64[$225>>3] = $224;
  $226 = $24;
  $227 = ((($226)) + 8|0);
  $228 = +HEAPF64[$227>>3];
  $229 = $4;
  $230 = $228 * $229;
  $231 = $5;
  $232 = $3;
  $233 = (+Math_sqrt((+$232)));
  $234 = $231 * $233;
  $235 = $230 / $234;
  $6 = $235;
  $236 = $6;
  $237 = $6;
  $238 = $236 * $237;
  $239 = $238 - 1.0;
  $7 = $239;
  $240 = $239 <= 0.0;
  if ($240) {
   $7 = 0.0;
  } else {
   $241 = $7;
   $242 = (+Math_sqrt((+$241)));
   $7 = $242;
   $243 = $2;
   $244 = ((($243)) + 128|0);
   $245 = +HEAPF64[$244>>3];
   $246 = $245 < 0.0;
   if ($246) {
    $247 = $7;
    $248 = -$247;
    $7 = $248;
   }
  }
  $249 = $6;
  $250 = $7;
  $251 = $250 + $249;
  $7 = $251;
  $252 = $24;
  $253 = ((($252)) + 16|0);
  HEAPF64[$253>>3] = $251;
  $254 = $2;
  $255 = ((($254)) + 128|0);
  $256 = +HEAPF64[$255>>3];
  $257 = $10;
  $258 = $2;
  $259 = ((($258)) + 88|0);
  $260 = +HEAPF64[$259>>3];
  $261 = (+_pj_tsfn($256,$257,$260));
  $262 = $24;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF64[$263>>3];
  $265 = (+Math_pow((+$261),(+$264)));
  $266 = $24;
  $267 = ((($266)) + 16|0);
  $268 = +HEAPF64[$267>>3];
  $269 = $268 * $265;
  HEAPF64[$267>>3] = $269;
 } else {
  $270 = $4;
  $271 = 1.0 / $270;
  $272 = $24;
  $273 = ((($272)) + 8|0);
  HEAPF64[$273>>3] = $271;
  $274 = $2;
  $275 = ((($274)) + 152|0);
  $276 = +HEAPF64[$275>>3];
  $277 = $24;
  HEAPF64[$277>>3] = $276;
  $7 = 1.0;
  $6 = 1.0;
  $278 = $24;
  $279 = ((($278)) + 16|0);
  HEAPF64[$279>>3] = 1.0;
 }
 $280 = $21;
 $281 = ($280|0)!=(0);
 $282 = $22;
 $283 = ($282|0)!=(0);
 $or$cond3 = $281 | $283;
 do {
  if ($or$cond3) {
   $284 = $21;
   $285 = ($284|0)!=(0);
   if ($285) {
    $286 = $20;
    $287 = (+Math_sin((+$286)));
    $288 = $6;
    $289 = $287 / $288;
    $290 = (+Math_asin((+$289)));
    $14 = $290;
    $291 = $22;
    $292 = ($291|0)!=(0);
    if (!($292)) {
     $293 = $20;
     $13 = $293;
    }
   } else {
    $294 = $6;
    $295 = $13;
    $14 = $295;
    $296 = (+Math_sin((+$295)));
    $297 = $294 * $296;
    $298 = (+Math_asin((+$297)));
    $20 = $298;
   }
   $299 = $20;
   $300 = (+Math_abs((+$299)));
   $3 = $300;
   $301 = $300 <= 9.9999999999999995E-8;
   if (!($301)) {
    $302 = $3;
    $303 = $302 - 3.1415926535897931;
    $304 = (+Math_abs((+$303)));
    $305 = $304 <= 9.9999999999999995E-8;
    if (!($305)) {
     $306 = $2;
     $307 = ((($306)) + 128|0);
     $308 = +HEAPF64[$307>>3];
     $309 = (+Math_abs((+$308)));
     $310 = $309 - 1.5707963267948966;
     $311 = (+Math_abs((+$310)));
     $312 = $311 <= 9.9999999999999995E-8;
     if (!($312)) {
      $316 = $15;
      $317 = $7;
      $318 = $7;
      $319 = 1.0 / $318;
      $320 = $317 - $319;
      $321 = 0.5 * $320;
      $322 = $14;
      $323 = (+Math_tan((+$322)));
      $324 = $321 * $323;
      $325 = (+Math_asin((+$324)));
      $326 = $24;
      $327 = ((($326)) + 8|0);
      $328 = +HEAPF64[$327>>3];
      $329 = $325 / $328;
      $330 = $316 - $329;
      $331 = $2;
      $332 = ((($331)) + 120|0);
      HEAPF64[$332>>3] = $330;
      break;
     }
    }
   }
   $313 = $2;
   $314 = HEAP32[$313>>2]|0;
   _pj_ctx_set_errno($314,-32);
   $315 = $2;
   _freeup_194($315);
   $1 = 0;
   $537 = $1;
   STACKTOP = sp;return ($537|0);
  } else {
   $333 = $18;
   $334 = $18;
   $335 = (+Math_sin((+$334)));
   $336 = $2;
   $337 = ((($336)) + 88|0);
   $338 = +HEAPF64[$337>>3];
   $339 = (+_pj_tsfn($333,$335,$338));
   $340 = $24;
   $341 = ((($340)) + 8|0);
   $342 = +HEAPF64[$341>>3];
   $343 = (+Math_pow((+$339),(+$342)));
   $8 = $343;
   $344 = $19;
   $345 = $19;
   $346 = (+Math_sin((+$345)));
   $347 = $2;
   $348 = ((($347)) + 88|0);
   $349 = +HEAPF64[$348>>3];
   $350 = (+_pj_tsfn($344,$346,$349));
   $351 = $24;
   $352 = ((($351)) + 8|0);
   $353 = +HEAPF64[$352>>3];
   $354 = (+Math_pow((+$350),(+$353)));
   $9 = $354;
   $355 = $24;
   $356 = ((($355)) + 16|0);
   $357 = +HEAPF64[$356>>3];
   $358 = $8;
   $359 = $357 / $358;
   $7 = $359;
   $360 = $9;
   $361 = $8;
   $362 = $360 - $361;
   $363 = $9;
   $364 = $8;
   $365 = $363 + $364;
   $366 = $362 / $365;
   $11 = $366;
   $367 = $24;
   $368 = ((($367)) + 16|0);
   $369 = +HEAPF64[$368>>3];
   $370 = $24;
   $371 = ((($370)) + 16|0);
   $372 = +HEAPF64[$371>>3];
   $373 = $369 * $372;
   $12 = $373;
   $374 = $12;
   $375 = $9;
   $376 = $8;
   $377 = $375 * $376;
   $378 = $374 - $377;
   $379 = $12;
   $380 = $9;
   $381 = $8;
   $382 = $380 * $381;
   $383 = $379 + $382;
   $384 = $378 / $383;
   $12 = $384;
   $385 = $16;
   $386 = $17;
   $387 = $385 - $386;
   $3 = $387;
   $388 = $387 < -3.1415926535897931;
   if ($388) {
    $389 = $17;
    $390 = $389 - 6.2831853071795862;
    $17 = $390;
   } else {
    $391 = $3;
    $392 = $391 > 3.1415926535897931;
    if ($392) {
     $393 = $17;
     $394 = $393 + 6.2831853071795862;
     $17 = $394;
    }
   }
   $395 = $16;
   $396 = $17;
   $397 = $395 + $396;
   $398 = 0.5 * $397;
   $399 = $12;
   $400 = $24;
   $401 = ((($400)) + 8|0);
   $402 = +HEAPF64[$401>>3];
   $403 = 0.5 * $402;
   $404 = $16;
   $405 = $17;
   $406 = $404 - $405;
   $407 = $403 * $406;
   $408 = (+Math_tan((+$407)));
   $409 = $399 * $408;
   $410 = $11;
   $411 = $409 / $410;
   $412 = (+Math_atan((+$411)));
   $413 = $24;
   $414 = ((($413)) + 8|0);
   $415 = +HEAPF64[$414>>3];
   $416 = $412 / $415;
   $417 = $398 - $416;
   $418 = (+_adjlon($417));
   $419 = $2;
   $420 = ((($419)) + 120|0);
   HEAPF64[$420>>3] = $418;
   $421 = $24;
   $422 = ((($421)) + 8|0);
   $423 = +HEAPF64[$422>>3];
   $424 = $16;
   $425 = $2;
   $426 = ((($425)) + 120|0);
   $427 = +HEAPF64[$426>>3];
   $428 = $424 - $427;
   $429 = (+_adjlon($428));
   $430 = $423 * $429;
   $431 = (+Math_sin((+$430)));
   $432 = 2.0 * $431;
   $433 = $7;
   $434 = $7;
   $435 = 1.0 / $434;
   $436 = $433 - $435;
   $437 = $432 / $436;
   $438 = (+Math_atan((+$437)));
   $14 = $438;
   $439 = $6;
   $440 = $14;
   $441 = (+Math_sin((+$440)));
   $442 = $439 * $441;
   $443 = (+Math_asin((+$442)));
   $20 = $443;
   $13 = $443;
  }
 } while(0);
 $444 = $14;
 $445 = (+Math_sin((+$444)));
 $446 = $24;
 $447 = ((($446)) + 56|0);
 HEAPF64[$447>>3] = $445;
 $448 = $14;
 $449 = (+Math_cos((+$448)));
 $450 = $24;
 $451 = ((($450)) + 64|0);
 HEAPF64[$451>>3] = $449;
 $452 = $13;
 $453 = (+Math_sin((+$452)));
 $454 = $24;
 $455 = ((($454)) + 72|0);
 HEAPF64[$455>>3] = $453;
 $456 = $13;
 $457 = (+Math_cos((+$456)));
 $458 = $24;
 $459 = ((($458)) + 80|0);
 HEAPF64[$459>>3] = $457;
 $460 = $24;
 $461 = +HEAPF64[$460>>3];
 $462 = $24;
 $463 = ((($462)) + 8|0);
 $464 = +HEAPF64[$463>>3];
 $465 = 1.0 / $464;
 $466 = $24;
 $467 = ((($466)) + 48|0);
 HEAPF64[$467>>3] = $465;
 $468 = $461 * $465;
 $469 = $24;
 $470 = ((($469)) + 32|0);
 HEAPF64[$470>>3] = $468;
 $471 = 1.0 / $468;
 $472 = $24;
 $473 = ((($472)) + 40|0);
 HEAPF64[$473>>3] = $471;
 $474 = $24;
 $475 = +HEAPF64[$474>>3];
 $476 = $24;
 $477 = ((($476)) + 8|0);
 $478 = +HEAPF64[$477>>3];
 $479 = $475 * $478;
 $480 = $24;
 $481 = ((($480)) + 24|0);
 HEAPF64[$481>>3] = $479;
 $482 = $23;
 $483 = ($482|0)!=(0);
 $484 = $24;
 if ($483) {
  $485 = ((($484)) + 104|0);
  HEAPF64[$485>>3] = 0.0;
 } else {
  $486 = ((($484)) + 32|0);
  $487 = +HEAPF64[$486>>3];
  $488 = $6;
  $489 = $6;
  $490 = $488 * $489;
  $491 = $490 - 1.0;
  $492 = (+Math_sqrt((+$491)));
  $493 = $20;
  $494 = (+Math_cos((+$493)));
  $495 = (+Math_atan2((+$492),(+$494)));
  $496 = $487 * $495;
  $497 = (+Math_abs((+$496)));
  $498 = $24;
  $499 = ((($498)) + 104|0);
  HEAPF64[$499>>3] = $497;
  $500 = $2;
  $501 = ((($500)) + 128|0);
  $502 = +HEAPF64[$501>>3];
  $503 = $502 < 0.0;
  if ($503) {
   $504 = $24;
   $505 = ((($504)) + 104|0);
   $506 = +HEAPF64[$505>>3];
   $507 = -$506;
   $508 = $24;
   $509 = ((($508)) + 104|0);
   HEAPF64[$509>>3] = $507;
  }
 }
 $510 = $14;
 $511 = 0.5 * $510;
 $7 = $511;
 $512 = $24;
 $513 = ((($512)) + 32|0);
 $514 = +HEAPF64[$513>>3];
 $515 = $7;
 $516 = 0.78539816339744828 - $515;
 $517 = (+Math_tan((+$516)));
 $518 = (+Math_log((+$517)));
 $519 = $514 * $518;
 $520 = $24;
 $521 = ((($520)) + 88|0);
 HEAPF64[$521>>3] = $519;
 $522 = $24;
 $523 = ((($522)) + 32|0);
 $524 = +HEAPF64[$523>>3];
 $525 = $7;
 $526 = 0.78539816339744828 + $525;
 $527 = (+Math_tan((+$526)));
 $528 = (+Math_log((+$527)));
 $529 = $524 * $528;
 $530 = $24;
 $531 = ((($530)) + 96|0);
 HEAPF64[$531>>3] = $529;
 $532 = $2;
 $533 = ((($532)) + 8|0);
 HEAP32[$533>>2] = 269;
 $534 = $2;
 $535 = ((($534)) + 4|0);
 HEAP32[$535>>2] = 270;
 $536 = $2;
 $1 = $536;
 $537 = $1;
 STACKTOP = sp;return ($537|0);
}
function _freeup_194($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_195($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_195($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_210($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $5;
 $17 = ((($16)) + 112|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $7 = $21;
  $22 = +HEAPF64[$1>>3];
  $6 = $22;
 } else {
  $23 = +HEAPF64[$1>>3];
  $24 = $5;
  $25 = ((($24)) + 80|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $23 * $26;
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $5;
  $31 = ((($30)) + 72|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $29 * $32;
  $34 = $27 - $33;
  $7 = $34;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = ((($37)) + 80|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $36 * $39;
  $41 = +HEAPF64[$1>>3];
  $42 = $5;
  $43 = ((($42)) + 72|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $41 * $44;
  $46 = $40 + $45;
  $47 = $5;
  $48 = ((($47)) + 104|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $46 + $49;
  $6 = $50;
 }
 $51 = $5;
 $52 = ((($51)) + 40|0);
 $53 = +HEAPF64[$52>>3];
 $54 = -$53;
 $55 = $7;
 $56 = $54 * $55;
 $57 = (+Math_exp((+$56)));
 $8 = $57;
 $58 = $8;
 $59 = $8;
 $60 = 1.0 / $59;
 $61 = $58 - $60;
 $62 = 0.5 * $61;
 $9 = $62;
 $63 = $8;
 $64 = $8;
 $65 = 1.0 / $64;
 $66 = $63 + $65;
 $67 = 0.5 * $66;
 $10 = $67;
 $68 = $5;
 $69 = ((($68)) + 40|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $6;
 $72 = $70 * $71;
 $73 = (+Math_sin((+$72)));
 $11 = $73;
 $74 = $11;
 $75 = $5;
 $76 = ((($75)) + 64|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $74 * $77;
 $79 = $9;
 $80 = $5;
 $81 = ((($80)) + 56|0);
 $82 = +HEAPF64[$81>>3];
 $83 = $79 * $82;
 $84 = $78 + $83;
 $85 = $10;
 $86 = $84 / $85;
 $12 = $86;
 $87 = $12;
 $88 = (+Math_abs((+$87)));
 $89 = $88 - 1.0;
 $90 = (+Math_abs((+$89)));
 $91 = $90 < 1.0E-10;
 do {
  if ($91) {
   HEAPF64[$4>>3] = 0.0;
   $92 = $12;
   $93 = $92 < 0.0;
   $94 = $93 ? -1.5707963267948966 : 1.5707963267948966;
   $95 = ((($4)) + 8|0);
   HEAPF64[$95>>3] = $94;
  } else {
   $96 = $5;
   $97 = ((($96)) + 16|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $12;
   $100 = 1.0 + $99;
   $101 = $12;
   $102 = 1.0 - $101;
   $103 = $100 / $102;
   $104 = (+Math_sqrt((+$103)));
   $105 = $98 / $104;
   $106 = ((($4)) + 8|0);
   HEAPF64[$106>>3] = $105;
   $107 = $3;
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($4)) + 8|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $5;
   $112 = ((($111)) + 8|0);
   $113 = +HEAPF64[$112>>3];
   $114 = 1.0 / $113;
   $115 = (+Math_pow((+$110),(+$114)));
   $116 = $3;
   $117 = ((($116)) + 88|0);
   $118 = +HEAPF64[$117>>3];
   $119 = (+_pj_phi2($108,$115,$118));
   $120 = ((($4)) + 8|0);
   HEAPF64[$120>>3] = $119;
   $121 = $119 == inf;
   if (!($121)) {
    $124 = $5;
    $125 = ((($124)) + 48|0);
    $126 = +HEAPF64[$125>>3];
    $127 = -$126;
    $128 = $9;
    $129 = $5;
    $130 = ((($129)) + 64|0);
    $131 = +HEAPF64[$130>>3];
    $132 = $128 * $131;
    $133 = $11;
    $134 = $5;
    $135 = ((($134)) + 56|0);
    $136 = +HEAPF64[$135>>3];
    $137 = $133 * $136;
    $138 = $132 - $137;
    $139 = $5;
    $140 = ((($139)) + 40|0);
    $141 = +HEAPF64[$140>>3];
    $142 = $6;
    $143 = $141 * $142;
    $144 = (+Math_cos((+$143)));
    $145 = (+Math_atan2((+$138),(+$144)));
    $146 = $127 * $145;
    HEAPF64[$4>>3] = $146;
    break;
   }
   $122 = $3;
   $123 = HEAP32[$122>>2]|0;
   _pj_ctx_set_errno($123,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_211($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = $3;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_abs((+$18)));
 $20 = $19 - 1.5707963267948966;
 $21 = (+Math_abs((+$20)));
 $22 = $21 > 1.0E-10;
 do {
  if ($22) {
   $23 = $5;
   $24 = ((($23)) + 16|0);
   $25 = +HEAPF64[$24>>3];
   $26 = ((($1)) + 8|0);
   $27 = +HEAPF64[$26>>3];
   $28 = ((($1)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = (+Math_sin((+$29)));
   $31 = $3;
   $32 = ((($31)) + 88|0);
   $33 = +HEAPF64[$32>>3];
   $34 = (+_pj_tsfn($27,$30,$33));
   $35 = $5;
   $36 = ((($35)) + 8|0);
   $37 = +HEAPF64[$36>>3];
   $38 = (+Math_pow((+$34),(+$37)));
   $39 = $25 / $38;
   $10 = $39;
   $40 = $10;
   $41 = 1.0 / $40;
   $11 = $41;
   $42 = $10;
   $43 = $11;
   $44 = $42 - $43;
   $45 = 0.5 * $44;
   $6 = $45;
   $46 = $10;
   $47 = $11;
   $48 = $46 + $47;
   $49 = 0.5 * $48;
   $7 = $49;
   $50 = $5;
   $51 = ((($50)) + 8|0);
   $52 = +HEAPF64[$51>>3];
   $53 = +HEAPF64[$1>>3];
   $54 = $52 * $53;
   $55 = (+Math_sin((+$54)));
   $9 = $55;
   $56 = $6;
   $57 = $5;
   $58 = ((($57)) + 56|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $56 * $59;
   $61 = $9;
   $62 = $5;
   $63 = ((($62)) + 64|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $61 * $64;
   $66 = $60 - $65;
   $67 = $7;
   $68 = $66 / $67;
   $8 = $68;
   $69 = $8;
   $70 = (+Math_abs((+$69)));
   $71 = $70 - 1.0;
   $72 = (+Math_abs((+$71)));
   $73 = $72 < 1.0E-10;
   if ($73) {
    $74 = $3;
    $75 = HEAP32[$74>>2]|0;
    _pj_ctx_set_errno($75,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $76 = $5;
   $77 = ((($76)) + 32|0);
   $78 = +HEAPF64[$77>>3];
   $79 = 0.5 * $78;
   $80 = $8;
   $81 = 1.0 - $80;
   $82 = $8;
   $83 = 1.0 + $82;
   $84 = $81 / $83;
   $85 = (+Math_log((+$84)));
   $86 = $79 * $85;
   $13 = $86;
   $87 = $5;
   $88 = ((($87)) + 8|0);
   $89 = +HEAPF64[$88>>3];
   $90 = +HEAPF64[$1>>3];
   $91 = $89 * $90;
   $92 = (+Math_cos((+$91)));
   $11 = $92;
   $93 = $11;
   $94 = (+Math_abs((+$93)));
   $95 = $94 < 9.9999999999999995E-8;
   $96 = $5;
   if ($95) {
    $97 = +HEAPF64[$96>>3];
    $98 = +HEAPF64[$1>>3];
    $99 = $97 * $98;
    $12 = $99;
    break;
   } else {
    $100 = ((($96)) + 32|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $6;
    $103 = $5;
    $104 = ((($103)) + 64|0);
    $105 = +HEAPF64[$104>>3];
    $106 = $102 * $105;
    $107 = $9;
    $108 = $5;
    $109 = ((($108)) + 56|0);
    $110 = +HEAPF64[$109>>3];
    $111 = $107 * $110;
    $112 = $106 + $111;
    $113 = $11;
    $114 = (+Math_atan2((+$112),(+$113)));
    $115 = $101 * $114;
    $12 = $115;
    break;
   }
  } else {
   $116 = ((($1)) + 8|0);
   $117 = +HEAPF64[$116>>3];
   $118 = $117 > 0.0;
   $119 = $5;
   if ($118) {
    $120 = ((($119)) + 88|0);
    $121 = +HEAPF64[$120>>3];
    $124 = $121;
   } else {
    $122 = ((($119)) + 96|0);
    $123 = +HEAPF64[$122>>3];
    $124 = $123;
   }
   $13 = $124;
   $125 = $5;
   $126 = ((($125)) + 32|0);
   $127 = +HEAPF64[$126>>3];
   $128 = ((($1)) + 8|0);
   $129 = +HEAPF64[$128>>3];
   $130 = $127 * $129;
   $12 = $130;
  }
 } while(0);
 $131 = $5;
 $132 = ((($131)) + 112|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = $12;
  HEAPF64[$4>>3] = $135;
  $136 = $13;
  $137 = ((($4)) + 8|0);
  HEAPF64[$137>>3] = $136;
 } else {
  $138 = $5;
  $139 = ((($138)) + 104|0);
  $140 = +HEAPF64[$139>>3];
  $141 = $12;
  $142 = $141 - $140;
  $12 = $142;
  $143 = $13;
  $144 = $5;
  $145 = ((($144)) + 80|0);
  $146 = +HEAPF64[$145>>3];
  $147 = $143 * $146;
  $148 = $12;
  $149 = $5;
  $150 = ((($149)) + 72|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $148 * $151;
  $153 = $147 + $152;
  HEAPF64[$4>>3] = $153;
  $154 = $12;
  $155 = $5;
  $156 = ((($155)) + 80|0);
  $157 = +HEAPF64[$156>>3];
  $158 = $154 * $157;
  $159 = $13;
  $160 = $5;
  $161 = ((($160)) + 72|0);
  $162 = +HEAPF64[$161>>3];
  $163 = $159 * $162;
  $164 = $158 - $163;
  $165 = ((($4)) + 8|0);
  HEAPF64[$165>>3] = $164;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_somerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_somerc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 271;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11459;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_somerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $7 = (_pj_calloc(1,48)|0);
 $6 = $7;
 $8 = $6;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_freeup_new_213($10)|0);
  $1 = $11;
  $114 = $1;
  STACKTOP = sp;return ($114|0);
 } else {
  $12 = $6;
  $13 = $2;
  $14 = ((($13)) + 416|0);
  HEAP32[$14>>2] = $12;
  $15 = $2;
  $16 = ((($15)) + 88|0);
  $17 = +HEAPF64[$16>>3];
  $18 = 0.5 * $17;
  $19 = $6;
  $20 = ((($19)) + 16|0);
  HEAPF64[$20>>3] = $18;
  $21 = $2;
  $22 = ((($21)) + 128|0);
  $23 = +HEAPF64[$22>>3];
  $24 = (+Math_cos((+$23)));
  $3 = $24;
  $25 = $3;
  $26 = $3;
  $27 = $26 * $25;
  $3 = $27;
  $28 = $2;
  $29 = ((($28)) + 72|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $3;
  $32 = $30 * $31;
  $33 = $3;
  $34 = $32 * $33;
  $35 = $2;
  $36 = ((($35)) + 112|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $34 * $37;
  $39 = 1.0 + $38;
  $40 = (+Math_sqrt((+$39)));
  $41 = $6;
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = $40;
  $43 = $2;
  $44 = ((($43)) + 128|0);
  $45 = +HEAPF64[$44>>3];
  $46 = (+Math_sin((+$45)));
  $5 = $46;
  $47 = $2;
  $48 = HEAP32[$47>>2]|0;
  $49 = $5;
  $50 = $6;
  $51 = ((($50)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $49 / $52;
  $54 = $6;
  $55 = ((($54)) + 40|0);
  HEAPF64[$55>>3] = $53;
  $56 = (+_aasin($48,$53));
  $4 = $56;
  $57 = (+Math_cos((+$56)));
  $58 = $6;
  $59 = ((($58)) + 32|0);
  HEAPF64[$59>>3] = $57;
  $60 = $2;
  $61 = ((($60)) + 88|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $5;
  $64 = $63 * $62;
  $5 = $64;
  $65 = $4;
  $66 = 0.5 * $65;
  $67 = 0.78539816339744828 + $66;
  $68 = (+Math_tan((+$67)));
  $69 = (+Math_log((+$68)));
  $70 = $6;
  $71 = ((($70)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $2;
  $74 = ((($73)) + 128|0);
  $75 = +HEAPF64[$74>>3];
  $76 = 0.5 * $75;
  $77 = 0.78539816339744828 + $76;
  $78 = (+Math_tan((+$77)));
  $79 = (+Math_log((+$78)));
  $80 = $6;
  $81 = ((($80)) + 16|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $5;
  $84 = 1.0 + $83;
  $85 = $5;
  $86 = 1.0 - $85;
  $87 = $84 / $86;
  $88 = (+Math_log((+$87)));
  $89 = $82 * $88;
  $90 = $79 - $89;
  $91 = $72 * $90;
  $92 = $69 - $91;
  $93 = $6;
  HEAPF64[$93>>3] = $92;
  $94 = $2;
  $95 = ((($94)) + 152|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $2;
  $98 = ((($97)) + 104|0);
  $99 = +HEAPF64[$98>>3];
  $100 = (+Math_sqrt((+$99)));
  $101 = $96 * $100;
  $102 = $5;
  $103 = $5;
  $104 = $102 * $103;
  $105 = 1.0 - $104;
  $106 = $101 / $105;
  $107 = $6;
  $108 = ((($107)) + 24|0);
  HEAPF64[$108>>3] = $106;
  $109 = $2;
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = 272;
  $111 = $2;
  $112 = ((($111)) + 4|0);
  HEAP32[$112>>2] = 273;
  $113 = $2;
  $1 = $113;
  $114 = $1;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function _freeup_212($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_213($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_213($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_214($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $5;
 $21 = ((($20)) + 24|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 / $22;
 $24 = (+Math_exp((+$23)));
 $25 = (+Math_atan((+$24)));
 $26 = $25 - 0.78539816339744828;
 $27 = 2.0 * $26;
 $8 = $27;
 $28 = +HEAPF64[$1>>3];
 $29 = $5;
 $30 = ((($29)) + 24|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $28 / $31;
 $9 = $32;
 $33 = $8;
 $34 = (+Math_cos((+$33)));
 $10 = $34;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $5;
 $38 = ((($37)) + 32|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $8;
 $41 = (+Math_sin((+$40)));
 $42 = $39 * $41;
 $43 = $5;
 $44 = ((($43)) + 40|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $10;
 $47 = $45 * $46;
 $48 = $9;
 $49 = (+Math_cos((+$48)));
 $50 = $47 * $49;
 $51 = $42 + $50;
 $52 = (+_aasin($36,$51));
 $6 = $52;
 $53 = $3;
 $54 = HEAP32[$53>>2]|0;
 $55 = $10;
 $56 = $9;
 $57 = (+Math_sin((+$56)));
 $58 = $55 * $57;
 $59 = $6;
 $60 = (+Math_cos((+$59)));
 $61 = $58 / $60;
 $62 = (+_aasin($54,$61));
 $7 = $62;
 $63 = $5;
 $64 = +HEAPF64[$63>>3];
 $65 = $6;
 $66 = 0.5 * $65;
 $67 = 0.78539816339744828 + $66;
 $68 = (+Math_tan((+$67)));
 $69 = (+Math_log((+$68)));
 $70 = $64 - $69;
 $71 = $5;
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $70 / $73;
 $12 = $74;
 $14 = 6;
 while(1) {
  $75 = $14;
  $76 = ($75|0)!=(0);
  if (!($76)) {
   break;
  }
  $77 = $3;
  $78 = ((($77)) + 88|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $6;
  $81 = (+Math_sin((+$80)));
  $82 = $79 * $81;
  $11 = $82;
  $83 = $12;
  $84 = $6;
  $85 = 0.5 * $84;
  $86 = 0.78539816339744828 + $85;
  $87 = (+Math_tan((+$86)));
  $88 = (+Math_log((+$87)));
  $89 = $83 + $88;
  $90 = $5;
  $91 = ((($90)) + 16|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $11;
  $94 = 1.0 + $93;
  $95 = $11;
  $96 = 1.0 - $95;
  $97 = $94 / $96;
  $98 = (+Math_log((+$97)));
  $99 = $92 * $98;
  $100 = $89 - $99;
  $101 = $11;
  $102 = $11;
  $103 = $101 * $102;
  $104 = 1.0 - $103;
  $105 = $100 * $104;
  $106 = $6;
  $107 = (+Math_cos((+$106)));
  $108 = $105 * $107;
  $109 = $3;
  $110 = ((($109)) + 112|0);
  $111 = +HEAPF64[$110>>3];
  $112 = $108 * $111;
  $13 = $112;
  $113 = $13;
  $114 = $6;
  $115 = $114 - $113;
  $6 = $115;
  $116 = $13;
  $117 = (+Math_abs((+$116)));
  $118 = $117 < 1.0E-10;
  if ($118) {
   break;
  }
  $119 = $14;
  $120 = (($119) + -1)|0;
  $14 = $120;
 }
 $121 = $14;
 $122 = ($121|0)!=(0);
 if ($122) {
  $123 = $6;
  $124 = ((($4)) + 8|0);
  HEAPF64[$124>>3] = $123;
  $125 = $7;
  $126 = $5;
  $127 = ((($126)) + 8|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $125 / $128;
  HEAPF64[$4>>3] = $129;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $130 = $3;
  $131 = HEAP32[$130>>2]|0;
  _pj_ctx_set_errno($131,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_215($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = $3;
 $16 = ((($15)) + 88|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_sin((+$19)));
 $21 = $17 * $20;
 $9 = $21;
 $22 = $11;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = 0.5 * $26;
 $28 = 0.78539816339744828 + $27;
 $29 = (+Math_tan((+$28)));
 $30 = (+Math_log((+$29)));
 $31 = $11;
 $32 = ((($31)) + 16|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $9;
 $35 = 1.0 + $34;
 $36 = $9;
 $37 = 1.0 - $36;
 $38 = $35 / $37;
 $39 = (+Math_log((+$38)));
 $40 = $33 * $39;
 $41 = $30 - $40;
 $42 = $24 * $41;
 $43 = $11;
 $44 = +HEAPF64[$43>>3];
 $45 = $42 + $44;
 $46 = (+Math_exp((+$45)));
 $47 = (+Math_atan((+$46)));
 $48 = 2.0 * $47;
 $49 = $48 - 1.5707963267948966;
 $5 = $49;
 $50 = $11;
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = +HEAPF64[$1>>3];
 $54 = $52 * $53;
 $6 = $54;
 $55 = $5;
 $56 = (+Math_cos((+$55)));
 $10 = $56;
 $57 = $3;
 $58 = HEAP32[$57>>2]|0;
 $59 = $11;
 $60 = ((($59)) + 32|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $5;
 $63 = (+Math_sin((+$62)));
 $64 = $61 * $63;
 $65 = $11;
 $66 = ((($65)) + 40|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $10;
 $69 = $67 * $68;
 $70 = $6;
 $71 = (+Math_cos((+$70)));
 $72 = $69 * $71;
 $73 = $64 - $72;
 $74 = (+_aasin($58,$73));
 $7 = $74;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = $10;
 $78 = $6;
 $79 = (+Math_sin((+$78)));
 $80 = $77 * $79;
 $81 = $7;
 $82 = (+Math_cos((+$81)));
 $83 = $80 / $82;
 $84 = (+_aasin($76,$83));
 $8 = $84;
 $85 = $11;
 $86 = ((($85)) + 24|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $8;
 $89 = $87 * $88;
 HEAPF64[$4>>3] = $89;
 $90 = $11;
 $91 = ((($90)) + 24|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $7;
 $94 = 0.5 * $93;
 $95 = 0.78539816339744828 + $94;
 $96 = (+Math_tan((+$95)));
 $97 = (+Math_log((+$96)));
 $98 = $92 * $97;
 $99 = ((($4)) + 8|0);
 HEAPF64[$99>>3] = $98;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_tcc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tcc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 274;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11502;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tcc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 275;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_216($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_217($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_217($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_218($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_cos((+$8)));
 $10 = +HEAPF64[$1>>3];
 $11 = (+Math_sin((+$10)));
 $12 = $9 * $11;
 $5 = $12;
 $13 = $5;
 $14 = $5;
 $15 = $13 * $14;
 $16 = 1.0 - $15;
 $6 = $16;
 $17 = $16 < 1.0E-10;
 if ($17) {
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  _pj_ctx_set_errno($19,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $20 = $5;
  $21 = $6;
  $22 = (+Math_sqrt((+$21)));
  $23 = $20 / $22;
  HEAPF64[$4>>3] = $23;
  $24 = ((($1)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+Math_tan((+$25)));
  $27 = +HEAPF64[$1>>3];
  $28 = (+Math_cos((+$27)));
  $29 = (+Math_atan2((+$26),(+$28)));
  $30 = ((($4)) + 8|0);
  HEAPF64[$30>>3] = $29;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_tcea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tcea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 276;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11552;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tcea($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 277;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 278;
 $6 = $1;
 $7 = ((($6)) + 72|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_219($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_220($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_220($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_221($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $3;
 $9 = ((($8)) + 152|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 / $10;
 $12 = $3;
 $13 = ((($12)) + 128|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 + $14;
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = $3;
 $18 = ((($17)) + 152|0);
 $19 = +HEAPF64[$18>>3];
 $20 = +HEAPF64[$1>>3];
 $21 = $20 * $19;
 HEAPF64[$1>>3] = $21;
 $22 = +HEAPF64[$1>>3];
 $23 = +HEAPF64[$1>>3];
 $24 = $22 * $23;
 $25 = 1.0 - $24;
 $26 = (+Math_sqrt((+$25)));
 $5 = $26;
 $27 = $5;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+Math_sin((+$29)));
 $31 = $27 * $30;
 $32 = (+Math_asin((+$31)));
 $33 = ((($4)) + 8|0);
 HEAPF64[$33>>3] = $32;
 $34 = +HEAPF64[$1>>3];
 $35 = $5;
 $36 = ((($1)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = (+Math_cos((+$37)));
 $39 = $35 * $38;
 $40 = (+Math_atan2((+$34),(+$39)));
 HEAPF64[$4>>3] = $40;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_222($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_cos((+$6)));
 $8 = +HEAPF64[$1>>3];
 $9 = (+Math_sin((+$8)));
 $10 = $7 * $9;
 $11 = $3;
 $12 = ((($11)) + 152|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 / $13;
 HEAPF64[$4>>3] = $14;
 $15 = $3;
 $16 = ((($15)) + 152|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_tan((+$19)));
 $21 = +HEAPF64[$1>>3];
 $22 = (+Math_cos((+$21)));
 $23 = (+Math_atan2((+$20),(+$22)));
 $24 = $3;
 $25 = ((($24)) + 128|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 - $26;
 $28 = $17 * $27;
 $29 = ((($4)) + 8|0);
 HEAPF64[$29>>3] = $28;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_times($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_times($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 279;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11596;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_times($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 280;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 281;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_223($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_224($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_224($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_225($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $3 = $2;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 / 1.7071099999999999;
 $4 = $10;
 $11 = $4;
 $12 = 0.78539816339744828 * $11;
 $13 = (+Math_sin((+$12)));
 $5 = $13;
 $14 = $5;
 $15 = $5;
 $16 = $14 * $15;
 $6 = $16;
 $17 = +HEAPF64[$1>>3];
 $18 = $6;
 $19 = 0.34588000000000002 * $18;
 $20 = 0.74482000000000004 - $19;
 $21 = $17 / $20;
 HEAPF64[$7>>3] = $21;
 $22 = $4;
 $23 = (+Math_atan((+$22)));
 $24 = 2.0 * $23;
 $25 = ((($7)) + 8|0);
 HEAPF64[$25>>3] = $24;
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_226($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $3 = $2;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 / 2.0;
 $11 = (+Math_tan((+$10)));
 $4 = $11;
 $12 = $4;
 $13 = 0.78539816339744828 * $12;
 $14 = (+Math_sin((+$13)));
 $5 = $14;
 $15 = $5;
 $16 = $5;
 $17 = $15 * $16;
 $6 = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = $6;
 $20 = 0.34588000000000002 * $19;
 $21 = 0.74482000000000004 - $20;
 $22 = $18 * $21;
 HEAPF64[$7>>3] = $22;
 $23 = $4;
 $24 = 1.7071099999999999 * $23;
 $25 = ((($7)) + 8|0);
 HEAPF64[$25>>3] = $24;
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_tmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tmerc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 282;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11612;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_228($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_229($12)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freeup_227($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_228($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_228($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  (_pj_dealloc($14)|0);
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  (_pj_dealloc($17)|0);
  $18 = $2;
  $19 = (_pj_dealloc($18)|0);
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _setup_229($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 416|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $2;
 $8 = ((($7)) + 72|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 != 0.0;
 $11 = $2;
 do {
  if ($10) {
   $12 = ((($11)) + 72|0);
   $13 = +HEAPF64[$12>>3];
   $14 = (_pj_enfn($13)|0);
   $15 = $3;
   $16 = ((($15)) + 16|0);
   HEAP32[$16>>2] = $14;
   $17 = ($14|0)!=(0|0);
   $18 = $2;
   if ($17) {
    $19 = ((($18)) + 128|0);
    $20 = +HEAPF64[$19>>3];
    $21 = $2;
    $22 = ((($21)) + 128|0);
    $23 = +HEAPF64[$22>>3];
    $24 = (+Math_sin((+$23)));
    $25 = $2;
    $26 = ((($25)) + 128|0);
    $27 = +HEAPF64[$26>>3];
    $28 = (+Math_cos((+$27)));
    $29 = $3;
    $30 = ((($29)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (+_pj_mlfn($20,$24,$28,$31));
    $33 = $3;
    $34 = ((($33)) + 8|0);
    HEAPF64[$34>>3] = $32;
    $35 = $2;
    $36 = ((($35)) + 72|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $2;
    $39 = ((($38)) + 72|0);
    $40 = +HEAPF64[$39>>3];
    $41 = 1.0 - $40;
    $42 = $37 / $41;
    $43 = $3;
    HEAPF64[$43>>3] = $42;
    $44 = $2;
    $45 = ((($44)) + 8|0);
    HEAP32[$45>>2] = 283;
    $46 = $2;
    $47 = ((($46)) + 4|0);
    HEAP32[$47>>2] = 284;
    break;
   }
   _freeup_227($18);
   $1 = 0;
   $61 = $1;
   STACKTOP = sp;return ($61|0);
  } else {
   $48 = ((($11)) + 152|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $3;
   HEAPF64[$50>>3] = $49;
   $51 = $3;
   $52 = +HEAPF64[$51>>3];
   $53 = 0.5 * $52;
   $54 = $3;
   $55 = ((($54)) + 8|0);
   HEAPF64[$55>>3] = $53;
   $56 = $2;
   $57 = ((($56)) + 8|0);
   HEAP32[$57>>2] = 285;
   $58 = $2;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = 286;
  }
 } while(0);
 $60 = $2;
 $1 = $60;
 $61 = $1;
 STACKTOP = sp;return ($61|0);
}
function _e_inverse_230($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $19 = 0, $20 = 0.0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $3;
 $24 = ((($23)) + 152|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 / $25;
 $27 = $20 + $26;
 $28 = $3;
 $29 = ((($28)) + 72|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $5;
 $32 = ((($31)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (+_pj_inv_mlfn($17,$27,$30,$33));
 $35 = ((($4)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = ((($4)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = (+Math_abs((+$37)));
 $39 = $38 >= 1.5707963267948966;
 if ($39) {
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 < 0.0;
  $43 = $42 ? -1.5707963267948966 : 1.5707963267948966;
  $44 = ((($4)) + 8|0);
  HEAPF64[$44>>3] = $43;
  HEAPF64[$4>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $45 = ((($4)) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = (+Math_sin((+$46)));
 $11 = $47;
 $48 = ((($4)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_cos((+$49)));
 $8 = $50;
 $51 = $8;
 $52 = (+Math_abs((+$51)));
 $53 = $52 > 1.0E-10;
 if ($53) {
  $54 = $11;
  $55 = $8;
  $56 = $54 / $55;
  $57 = $56;
 } else {
  $57 = 0.0;
 }
 $12 = $57;
 $58 = $5;
 $59 = +HEAPF64[$58>>3];
 $60 = $8;
 $61 = $59 * $60;
 $62 = $8;
 $63 = $61 * $62;
 $6 = $63;
 $64 = +HEAPF64[$1>>3];
 $65 = $3;
 $66 = ((($65)) + 72|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $11;
 $69 = $67 * $68;
 $70 = $11;
 $71 = $69 * $70;
 $72 = 1.0 - $71;
 $7 = $72;
 $73 = (+Math_sqrt((+$72)));
 $74 = $64 * $73;
 $75 = $3;
 $76 = ((($75)) + 152|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $74 / $77;
 $9 = $78;
 $79 = $12;
 $80 = $7;
 $81 = $80 * $79;
 $7 = $81;
 $82 = $12;
 $83 = $12;
 $84 = $83 * $82;
 $12 = $84;
 $85 = $9;
 $86 = $9;
 $87 = $85 * $86;
 $10 = $87;
 $88 = $7;
 $89 = $10;
 $90 = $88 * $89;
 $91 = $3;
 $92 = ((($91)) + 72|0);
 $93 = +HEAPF64[$92>>3];
 $94 = 1.0 - $93;
 $95 = $90 / $94;
 $96 = $95 * 0.5;
 $97 = $10;
 $98 = $97 * 0.083333333333333329;
 $99 = $12;
 $100 = $6;
 $101 = 9.0 * $100;
 $102 = 3.0 - $101;
 $103 = $99 * $102;
 $104 = 5.0 + $103;
 $105 = $6;
 $106 = $6;
 $107 = 4.0 * $106;
 $108 = 1.0 - $107;
 $109 = $105 * $108;
 $110 = $104 + $109;
 $111 = $10;
 $112 = $111 * 0.033333333333333333;
 $113 = $12;
 $114 = $6;
 $115 = 252.0 * $114;
 $116 = 90.0 - $115;
 $117 = $12;
 $118 = 45.0 * $117;
 $119 = $116 + $118;
 $120 = $113 * $119;
 $121 = 61.0 + $120;
 $122 = $6;
 $123 = 46.0 * $122;
 $124 = $121 + $123;
 $125 = $10;
 $126 = $125 * 0.017857142857142856;
 $127 = $12;
 $128 = $12;
 $129 = $12;
 $130 = 1574.0 * $129;
 $131 = 4095.0 + $130;
 $132 = $128 * $131;
 $133 = 3633.0 + $132;
 $134 = $127 * $133;
 $135 = 1385.0 + $134;
 $136 = $126 * $135;
 $137 = $124 - $136;
 $138 = $112 * $137;
 $139 = $110 - $138;
 $140 = $98 * $139;
 $141 = 1.0 - $140;
 $142 = $96 * $141;
 $143 = ((($4)) + 8|0);
 $144 = +HEAPF64[$143>>3];
 $145 = $144 - $142;
 HEAPF64[$143>>3] = $145;
 $146 = $9;
 $147 = $10;
 $148 = $147 * 0.16666666666666666;
 $149 = $12;
 $150 = 2.0 * $149;
 $151 = 1.0 + $150;
 $152 = $6;
 $153 = $151 + $152;
 $154 = $10;
 $155 = $154 * 0.050000000000000003;
 $156 = $12;
 $157 = $12;
 $158 = 24.0 * $157;
 $159 = 28.0 + $158;
 $160 = $6;
 $161 = 8.0 * $160;
 $162 = $159 + $161;
 $163 = $156 * $162;
 $164 = 5.0 + $163;
 $165 = $6;
 $166 = 6.0 * $165;
 $167 = $164 + $166;
 $168 = $10;
 $169 = $168 * 0.023809523809523808;
 $170 = $12;
 $171 = $12;
 $172 = $12;
 $173 = 720.0 * $172;
 $174 = 1320.0 + $173;
 $175 = $171 * $174;
 $176 = 662.0 + $175;
 $177 = $170 * $176;
 $178 = 61.0 + $177;
 $179 = $169 * $178;
 $180 = $167 - $179;
 $181 = $155 * $180;
 $182 = $153 - $181;
 $183 = $148 * $182;
 $184 = 1.0 - $183;
 $185 = $146 * $184;
 $186 = $8;
 $187 = $185 / $186;
 HEAPF64[$4>>3] = $187;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_231($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = +HEAPF64[$1>>3];
 $16 = $15 < -1.5707963267948966;
 if (!($16)) {
  $17 = +HEAPF64[$1>>3];
  $18 = $17 > 1.5707963267948966;
  if (!($18)) {
   $22 = ((($1)) + 8|0);
   $23 = +HEAPF64[$22>>3];
   $24 = (+Math_sin((+$23)));
   $10 = $24;
   $25 = ((($1)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (+Math_cos((+$26)));
   $9 = $27;
   $28 = $9;
   $29 = (+Math_abs((+$28)));
   $30 = $29 > 1.0E-10;
   if ($30) {
    $31 = $10;
    $32 = $9;
    $33 = $31 / $32;
    $34 = $33;
   } else {
    $34 = 0.0;
   }
   $11 = $34;
   $35 = $11;
   $36 = $11;
   $37 = $36 * $35;
   $11 = $37;
   $38 = $9;
   $39 = +HEAPF64[$1>>3];
   $40 = $38 * $39;
   $6 = $40;
   $41 = $6;
   $42 = $6;
   $43 = $41 * $42;
   $7 = $43;
   $44 = $3;
   $45 = ((($44)) + 72|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $10;
   $48 = $46 * $47;
   $49 = $10;
   $50 = $48 * $49;
   $51 = 1.0 - $50;
   $52 = (+Math_sqrt((+$51)));
   $53 = $6;
   $54 = $53 / $52;
   $6 = $54;
   $55 = $5;
   $56 = +HEAPF64[$55>>3];
   $57 = $9;
   $58 = $56 * $57;
   $59 = $9;
   $60 = $58 * $59;
   $8 = $60;
   $61 = $3;
   $62 = ((($61)) + 152|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $6;
   $65 = $63 * $64;
   $66 = $7;
   $67 = 0.16666666666666666 * $66;
   $68 = $11;
   $69 = 1.0 - $68;
   $70 = $8;
   $71 = $69 + $70;
   $72 = $7;
   $73 = 0.050000000000000003 * $72;
   $74 = $11;
   $75 = $11;
   $76 = $75 - 18.0;
   $77 = $74 * $76;
   $78 = 5.0 + $77;
   $79 = $8;
   $80 = $11;
   $81 = 58.0 * $80;
   $82 = 14.0 - $81;
   $83 = $79 * $82;
   $84 = $78 + $83;
   $85 = $7;
   $86 = 0.023809523809523808 * $85;
   $87 = $11;
   $88 = $11;
   $89 = $11;
   $90 = 179.0 - $89;
   $91 = $88 * $90;
   $92 = $91 - 479.0;
   $93 = $87 * $92;
   $94 = 61.0 + $93;
   $95 = $86 * $94;
   $96 = $84 + $95;
   $97 = $73 * $96;
   $98 = $71 + $97;
   $99 = $67 * $98;
   $100 = 1.0 + $99;
   $101 = $65 * $100;
   HEAPF64[$4>>3] = $101;
   $102 = $3;
   $103 = ((($102)) + 152|0);
   $104 = +HEAPF64[$103>>3];
   $105 = ((($1)) + 8|0);
   $106 = +HEAPF64[$105>>3];
   $107 = $10;
   $108 = $9;
   $109 = $5;
   $110 = ((($109)) + 16|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (+_pj_mlfn($106,$107,$108,$111));
   $113 = $5;
   $114 = ((($113)) + 8|0);
   $115 = +HEAPF64[$114>>3];
   $116 = $112 - $115;
   $117 = $10;
   $118 = $6;
   $119 = $117 * $118;
   $120 = +HEAPF64[$1>>3];
   $121 = $119 * $120;
   $122 = $121 * 0.5;
   $123 = $7;
   $124 = 0.083333333333333329 * $123;
   $125 = $11;
   $126 = 5.0 - $125;
   $127 = $8;
   $128 = $8;
   $129 = 4.0 * $128;
   $130 = 9.0 + $129;
   $131 = $127 * $130;
   $132 = $126 + $131;
   $133 = $7;
   $134 = 0.033333333333333333 * $133;
   $135 = $11;
   $136 = $11;
   $137 = $136 - 58.0;
   $138 = $135 * $137;
   $139 = 61.0 + $138;
   $140 = $8;
   $141 = $11;
   $142 = 330.0 * $141;
   $143 = 270.0 - $142;
   $144 = $140 * $143;
   $145 = $139 + $144;
   $146 = $7;
   $147 = 0.017857142857142856 * $146;
   $148 = $11;
   $149 = $11;
   $150 = $11;
   $151 = 543.0 - $150;
   $152 = $149 * $151;
   $153 = $152 - 3111.0;
   $154 = $148 * $153;
   $155 = 1385.0 + $154;
   $156 = $147 * $155;
   $157 = $145 + $156;
   $158 = $134 * $157;
   $159 = $132 + $158;
   $160 = $124 * $159;
   $161 = 1.0 + $160;
   $162 = $122 * $161;
   $163 = $116 + $162;
   $164 = $104 * $163;
   $165 = ((($4)) + 8|0);
   HEAPF64[$165>>3] = $164;
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 HEAPF64[$4>>3] = inf;
 $19 = ((($4)) + 8|0);
 HEAPF64[$19>>3] = inf;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 _pj_ctx_set_errno($21,-14);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_232($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = +HEAPF64[$1>>3];
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = +HEAPF64[$10>>3];
 $12 = $7 / $11;
 $13 = (+Math_exp((+$12)));
 $5 = $13;
 $14 = $5;
 $15 = $5;
 $16 = 1.0 / $15;
 $17 = $14 - $16;
 $18 = 0.5 * $17;
 $6 = $18;
 $19 = $3;
 $20 = ((($19)) + 128|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $3;
 $25 = ((($24)) + 416|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = +HEAPF64[$26>>3];
 $28 = $23 / $27;
 $29 = $21 + $28;
 $30 = (+Math_cos((+$29)));
 $5 = $30;
 $31 = $5;
 $32 = $5;
 $33 = $31 * $32;
 $34 = 1.0 - $33;
 $35 = $6;
 $36 = $6;
 $37 = $35 * $36;
 $38 = 1.0 + $37;
 $39 = $34 / $38;
 $40 = (+Math_sqrt((+$39)));
 $41 = (+Math_asin((+$40)));
 $42 = ((($4)) + 8|0);
 HEAPF64[$42>>3] = $41;
 $43 = ((($1)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 < 0.0;
 if ($45) {
  $46 = ((($4)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = -$47;
  $49 = ((($4)) + 8|0);
  HEAPF64[$49>>3] = $48;
 }
 $50 = $6;
 $51 = $50 != 0.0;
 $52 = $5;
 $53 = $52 != 0.0;
 $or$cond = $51 | $53;
 if (!($or$cond)) {
  $57 = 0.0;
  HEAPF64[$4>>3] = $57;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $54 = $6;
 $55 = $5;
 $56 = (+Math_atan2((+$54),(+$55)));
 $57 = $56;
 HEAPF64[$4>>3] = $57;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_233($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = +HEAPF64[$1>>3];
 $8 = $7 < -1.5707963267948966;
 if (!($8)) {
  $9 = +HEAPF64[$1>>3];
  $10 = $9 > 1.5707963267948966;
  if (!($10)) {
   $14 = ((($1)) + 8|0);
   $15 = +HEAPF64[$14>>3];
   $16 = (+Math_cos((+$15)));
   $6 = $16;
   $17 = $6;
   $18 = +HEAPF64[$1>>3];
   $19 = (+Math_sin((+$18)));
   $20 = $17 * $19;
   $5 = $20;
   $21 = $5;
   $22 = (+Math_abs((+$21)));
   $23 = $22 - 1.0;
   $24 = (+Math_abs((+$23)));
   $25 = $24 <= 1.0E-10;
   $26 = $3;
   if ($25) {
    $27 = HEAP32[$26>>2]|0;
    _pj_ctx_set_errno($27,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $28 = ((($26)) + 416|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $5;
   $33 = 1.0 + $32;
   $34 = $5;
   $35 = 1.0 - $34;
   $36 = $33 / $35;
   $37 = (+Math_log((+$36)));
   $38 = $31 * $37;
   HEAPF64[$4>>3] = $38;
   $39 = $6;
   $40 = +HEAPF64[$1>>3];
   $41 = (+Math_cos((+$40)));
   $42 = $39 * $41;
   $43 = $5;
   $44 = $5;
   $45 = $43 * $44;
   $46 = 1.0 - $45;
   $47 = (+Math_sqrt((+$46)));
   $48 = $42 / $47;
   $49 = ((($4)) + 8|0);
   HEAPF64[$49>>3] = $48;
   $50 = ((($4)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = (+Math_abs((+$51)));
   $5 = $52;
   $53 = $5;
   $54 = $53 >= 1.0;
   do {
    if ($54) {
     $55 = $5;
     $56 = $55 - 1.0;
     $57 = $56 > 1.0E-10;
     if (!($57)) {
      $60 = ((($4)) + 8|0);
      HEAPF64[$60>>3] = 0.0;
      break;
     }
     $58 = $3;
     $59 = HEAP32[$58>>2]|0;
     _pj_ctx_set_errno($59,-20);
     ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
     STACKTOP = sp;return;
    } else {
     $61 = ((($4)) + 8|0);
     $62 = +HEAPF64[$61>>3];
     $63 = (+Math_acos((+$62)));
     $64 = ((($4)) + 8|0);
     HEAPF64[$64>>3] = $63;
    }
   } while(0);
   $65 = ((($1)) + 8|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $66 < 0.0;
   if ($67) {
    $68 = ((($4)) + 8|0);
    $69 = +HEAPF64[$68>>3];
    $70 = -$69;
    $71 = ((($4)) + 8|0);
    HEAPF64[$71>>3] = $70;
   }
   $72 = $3;
   $73 = ((($72)) + 416|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = +HEAPF64[$74>>3];
   $76 = ((($4)) + 8|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $3;
   $79 = ((($78)) + 128|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $77 - $80;
   $82 = $75 * $81;
   $83 = ((($4)) + 8|0);
   HEAPF64[$83>>3] = $82;
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 HEAPF64[$4>>3] = inf;
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = inf;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 _pj_ctx_set_errno($13,-14);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_airy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_airy($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 287;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11646;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_airy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $6 = sp;
 $2 = $0;
 $7 = (_pj_calloc(1,40)|0);
 $4 = $7;
 $8 = $4;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_freeup_new_235($10)|0);
  $1 = $11;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 $12 = $4;
 $13 = $2;
 $14 = ((($13)) + 416|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _pj_param($5,$16,$19,11685);
 $20 = HEAP32[$5>>2]|0;
 $21 = $4;
 $22 = ((($21)) + 36|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = HEAP32[$23>>2]|0;
 $25 = $2;
 $26 = ((($25)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 _pj_param($6,$24,$27,11693);
 $28 = +HEAPF64[$6>>3];
 $29 = 1.5707963267948966 - $28;
 $30 = 0.5 * $29;
 $3 = $30;
 $31 = $3;
 $32 = (+Math_abs((+$31)));
 $33 = $32 < 1.0E-10;
 if ($33) {
  $34 = $4;
  $35 = ((($34)) + 24|0);
  HEAPF64[$35>>3] = -0.5;
 } else {
  $36 = $3;
  $37 = (+Math_tan((+$36)));
  $38 = 1.0 / $37;
  $39 = $4;
  $40 = ((($39)) + 24|0);
  HEAPF64[$40>>3] = $38;
  $41 = $4;
  $42 = ((($41)) + 24|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $3;
  $45 = (+Math_cos((+$44)));
  $46 = (+Math_log((+$45)));
  $47 = $43 * $46;
  $48 = $4;
  $49 = ((($48)) + 24|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * $47;
  HEAPF64[$49>>3] = $51;
 }
 $52 = $2;
 $53 = ((($52)) + 128|0);
 $54 = +HEAPF64[$53>>3];
 $55 = (+Math_abs((+$54)));
 $56 = $55 - 1.5707963267948966;
 $57 = (+Math_abs((+$56)));
 $58 = $57 < 1.0E-10;
 $59 = $2;
 $60 = ((($59)) + 128|0);
 $61 = +HEAPF64[$60>>3];
 do {
  if ($58) {
   $62 = $61 < 0.0;
   $63 = $4;
   if ($62) {
    HEAPF64[$63>>3] = -1.5707963267948966;
    $64 = $4;
    $65 = ((($64)) + 32|0);
    HEAP32[$65>>2] = 1;
    break;
   } else {
    HEAPF64[$63>>3] = 1.5707963267948966;
    $66 = $4;
    $67 = ((($66)) + 32|0);
    HEAP32[$67>>2] = 0;
    break;
   }
  } else {
   $68 = (+Math_abs((+$61)));
   $69 = $68 < 1.0E-10;
   $70 = $4;
   $71 = ((($70)) + 32|0);
   if ($69) {
    HEAP32[$71>>2] = 2;
    break;
   } else {
    HEAP32[$71>>2] = 3;
    $72 = $2;
    $73 = ((($72)) + 128|0);
    $74 = +HEAPF64[$73>>3];
    $75 = (+Math_sin((+$74)));
    $76 = $4;
    $77 = ((($76)) + 8|0);
    HEAPF64[$77>>3] = $75;
    $78 = $2;
    $79 = ((($78)) + 128|0);
    $80 = +HEAPF64[$79>>3];
    $81 = (+Math_cos((+$80)));
    $82 = $4;
    $83 = ((($82)) + 16|0);
    HEAPF64[$83>>3] = $81;
    break;
   }
  }
 } while(0);
 $84 = $2;
 $85 = ((($84)) + 4|0);
 HEAP32[$85>>2] = 288;
 $86 = $2;
 $87 = ((($86)) + 72|0);
 HEAPF64[$87>>3] = 0.0;
 $88 = $2;
 $1 = $88;
 $89 = $1;
 STACKTOP = sp;return ($89|0);
}
function _freeup_234($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_235($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_235($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_238($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = $3;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = +HEAPF64[$1>>3];
 $18 = (+Math_sin((+$17)));
 $6 = $18;
 $19 = +HEAPF64[$1>>3];
 $20 = (+Math_cos((+$19)));
 $7 = $20;
 $21 = $5;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 L1: do {
  switch ($23|0) {
  case 3: case 2:  {
   $24 = ((($1)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $26 = (+Math_sin((+$25)));
   $9 = $26;
   $27 = ((($1)) + 8|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (+Math_cos((+$28)));
   $8 = $29;
   $30 = $8;
   $31 = $7;
   $32 = $30 * $31;
   $13 = $32;
   $33 = $5;
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(3);
   if ($36) {
    $37 = $5;
    $38 = ((($37)) + 8|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $9;
    $41 = $39 * $40;
    $42 = $5;
    $43 = ((($42)) + 16|0);
    $44 = +HEAPF64[$43>>3];
    $45 = $13;
    $46 = $44 * $45;
    $47 = $41 + $46;
    $13 = $47;
   }
   $48 = $5;
   $49 = ((($48)) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   $52 = $13;
   $53 = $52 < -1.0E-10;
   $or$cond = $51 & $53;
   if ($or$cond) {
    $54 = $3;
    $55 = HEAP32[$54>>2]|0;
    _pj_ctx_set_errno($55,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $56 = $13;
   $57 = 1.0 - $56;
   $11 = $57;
   $58 = (+Math_abs((+$57)));
   $59 = $58 > 1.0E-10;
   if ($59) {
    $60 = $13;
    $61 = 1.0 + $60;
    $62 = 0.5 * $61;
    $10 = $62;
    $63 = $10;
    $64 = (+Math_log((+$63)));
    $65 = -$64;
    $66 = $11;
    $67 = $65 / $66;
    $68 = $5;
    $69 = ((($68)) + 24|0);
    $70 = +HEAPF64[$69>>3];
    $71 = $10;
    $72 = $70 / $71;
    $73 = $67 - $72;
    $12 = $73;
   } else {
    $74 = $5;
    $75 = ((($74)) + 24|0);
    $76 = +HEAPF64[$75>>3];
    $77 = 0.5 - $76;
    $12 = $77;
   }
   $78 = $12;
   $79 = $8;
   $80 = $78 * $79;
   $81 = $6;
   $82 = $80 * $81;
   HEAPF64[$4>>3] = $82;
   $83 = $5;
   $84 = ((($83)) + 32|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(3);
   $87 = $12;
   if ($86) {
    $88 = $5;
    $89 = ((($88)) + 16|0);
    $90 = +HEAPF64[$89>>3];
    $91 = $9;
    $92 = $90 * $91;
    $93 = $5;
    $94 = ((($93)) + 8|0);
    $95 = +HEAPF64[$94>>3];
    $96 = $8;
    $97 = $95 * $96;
    $98 = $7;
    $99 = $97 * $98;
    $100 = $92 - $99;
    $101 = $87 * $100;
    $102 = ((($4)) + 8|0);
    HEAPF64[$102>>3] = $101;
    break L1;
   } else {
    $103 = $9;
    $104 = $87 * $103;
    $105 = ((($4)) + 8|0);
    HEAPF64[$105>>3] = $104;
    break L1;
   }
   break;
  }
  case 0: case 1:  {
   $106 = $5;
   $107 = +HEAPF64[$106>>3];
   $108 = ((($1)) + 8|0);
   $109 = +HEAPF64[$108>>3];
   $110 = $107 - $109;
   $111 = (+Math_abs((+$110)));
   $112 = ((($1)) + 8|0);
   HEAPF64[$112>>3] = $111;
   $113 = $5;
   $114 = ((($113)) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($115|0)!=(0);
   if (!($116)) {
    $117 = ((($1)) + 8|0);
    $118 = +HEAPF64[$117>>3];
    $119 = $118 - 1.0E-10;
    $120 = $119 > 1.5707963267948966;
    if ($120) {
     $121 = $3;
     $122 = HEAP32[$121>>2]|0;
     _pj_ctx_set_errno($122,-20);
     ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
   $123 = ((($1)) + 8|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $124 * 0.5;
   HEAPF64[$123>>3] = $125;
   $126 = $125 > 1.0E-10;
   if (!($126)) {
    $158 = ((($4)) + 8|0);
    HEAPF64[$158>>3] = 0.0;
    HEAPF64[$4>>3] = 0.0;
    break L1;
   }
   $127 = ((($1)) + 8|0);
   $128 = +HEAPF64[$127>>3];
   $129 = (+Math_tan((+$128)));
   $10 = $129;
   $130 = ((($1)) + 8|0);
   $131 = +HEAPF64[$130>>3];
   $132 = (+Math_cos((+$131)));
   $133 = (+Math_log((+$132)));
   $134 = $10;
   $135 = $133 / $134;
   $136 = $10;
   $137 = $5;
   $138 = ((($137)) + 24|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $136 * $139;
   $141 = $135 + $140;
   $142 = -2.0 * $141;
   $12 = $142;
   $143 = $12;
   $144 = $6;
   $145 = $143 * $144;
   HEAPF64[$4>>3] = $145;
   $146 = $12;
   $147 = $7;
   $148 = $146 * $147;
   $149 = ((($4)) + 8|0);
   HEAPF64[$149>>3] = $148;
   $150 = $5;
   $151 = ((($150)) + 32|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)==(0);
   if ($153) {
    $154 = ((($4)) + 8|0);
    $155 = +HEAPF64[$154>>3];
    $156 = -$155;
    $157 = ((($4)) + 8|0);
    HEAPF64[$157>>3] = $156;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_aitoff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_aitoff($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 289;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11700;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_aitoff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_240($7)|0);
  $1 = $8;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 8|0);
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = (_setup_241($14)|0);
  $1 = $15;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _freeup_239($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_240($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_240($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_241($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 290;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 291;
 $6 = $1;
 $7 = ((($6)) + 72|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _s_inverse_242($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer = sp + 152|0;
 $4 = sp + 136|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $27 = $3;
 $28 = ((($27)) + 416|0);
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $7 = 10;
 $8 = 0;
 $9 = 20;
 $10 = 9.9999999999999998E-13;
 $30 = +HEAPF64[$1>>3];
 $31 = (+Math_abs((+$30)));
 $32 = $10;
 $33 = $31 < $32;
 if ($33) {
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = (+Math_abs((+$35)));
  $37 = $10;
  $38 = $36 < $37;
  if ($38) {
   $39 = ((($4)) + 8|0);
   HEAPF64[$39>>3] = 0.0;
   HEAPF64[$4>>3] = 0.0;
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $40 = ((($1)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = ((($4)) + 8|0);
 HEAPF64[$42>>3] = $41;
 $43 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $43;
 while(1) {
  $6 = 0;
  while(1) {
   $44 = +HEAPF64[$4>>3];
   $45 = $44 * 0.5;
   $46 = (+Math_sin((+$45)));
   $21 = $46;
   $47 = +HEAPF64[$4>>3];
   $48 = $47 * 0.5;
   $49 = (+Math_cos((+$48)));
   $24 = $49;
   $50 = ((($4)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = (+Math_sin((+$51)));
   $22 = $52;
   $53 = ((($4)) + 8|0);
   $54 = +HEAPF64[$53>>3];
   $55 = (+Math_cos((+$54)));
   $23 = $55;
   $56 = $23;
   $57 = $24;
   $58 = $56 * $57;
   $11 = $58;
   $59 = $11;
   $60 = $11;
   $61 = $59 * $60;
   $62 = 1.0 - $61;
   $12 = $62;
   $63 = $11;
   $64 = (+Math_acos((+$63)));
   $65 = $12;
   $66 = (+Math_pow((+$65),1.5));
   $67 = $64 / $66;
   $11 = $67;
   $68 = $11;
   $69 = 2.0 * $68;
   $70 = $12;
   $71 = $69 * $70;
   $72 = $23;
   $73 = $71 * $72;
   $74 = $21;
   $75 = $73 * $74;
   $13 = $75;
   $76 = $11;
   $77 = $12;
   $78 = $76 * $77;
   $79 = $22;
   $80 = $78 * $79;
   $14 = $80;
   $81 = $21;
   $82 = $24;
   $83 = $81 * $82;
   $84 = $22;
   $85 = $83 * $84;
   $86 = $23;
   $87 = $85 * $86;
   $88 = $12;
   $89 = $87 / $88;
   $90 = $11;
   $91 = $22;
   $92 = $90 * $91;
   $93 = $21;
   $94 = $92 * $93;
   $95 = $89 - $94;
   $96 = 2.0 * $95;
   $15 = $96;
   $97 = $23;
   $98 = $23;
   $99 = $97 * $98;
   $100 = $21;
   $101 = $99 * $100;
   $102 = $21;
   $103 = $101 * $102;
   $104 = $12;
   $105 = $103 / $104;
   $106 = $11;
   $107 = $23;
   $108 = $106 * $107;
   $109 = $24;
   $110 = $108 * $109;
   $111 = $22;
   $112 = $110 * $111;
   $113 = $22;
   $114 = $112 * $113;
   $115 = $105 + $114;
   $16 = $115;
   $116 = $22;
   $117 = $22;
   $118 = $116 * $117;
   $119 = $24;
   $120 = $118 * $119;
   $121 = $12;
   $122 = $120 / $121;
   $123 = $11;
   $124 = $21;
   $125 = $123 * $124;
   $126 = $21;
   $127 = $125 * $126;
   $128 = $23;
   $129 = $127 * $128;
   $130 = $122 + $129;
   $17 = $130;
   $131 = $22;
   $132 = $23;
   $133 = $131 * $132;
   $134 = $21;
   $135 = $133 * $134;
   $136 = $12;
   $137 = $135 / $136;
   $138 = $11;
   $139 = $22;
   $140 = $138 * $139;
   $141 = $23;
   $142 = $140 * $141;
   $143 = $23;
   $144 = $142 * $143;
   $145 = $21;
   $146 = $144 * $145;
   $147 = $24;
   $148 = $146 * $147;
   $149 = $137 - $148;
   $150 = 0.5 * $149;
   $18 = $150;
   $151 = $5;
   $152 = ((($151)) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)!=(0);
   if ($154) {
    $155 = $13;
    $156 = +HEAPF64[$4>>3];
    $157 = $5;
    $158 = +HEAPF64[$157>>3];
    $159 = $156 * $158;
    $160 = $155 + $159;
    $161 = 0.5 * $160;
    $13 = $161;
    $162 = $14;
    $163 = ((($4)) + 8|0);
    $164 = +HEAPF64[$163>>3];
    $165 = $162 + $164;
    $166 = 0.5 * $165;
    $14 = $166;
    $167 = $15;
    $168 = $167 * 0.5;
    $15 = $168;
    $169 = $16;
    $170 = $5;
    $171 = +HEAPF64[$170>>3];
    $172 = $169 + $171;
    $173 = 0.5 * $172;
    $16 = $173;
    $174 = $17;
    $175 = $174 + 1.0;
    $176 = 0.5 * $175;
    $17 = $176;
    $177 = $18;
    $178 = $177 * 0.5;
    $18 = $178;
   }
   $179 = +HEAPF64[$1>>3];
   $180 = $13;
   $181 = $180 - $179;
   $13 = $181;
   $182 = ((($1)) + 8|0);
   $183 = +HEAPF64[$182>>3];
   $184 = $14;
   $185 = $184 - $183;
   $14 = $185;
   $186 = $14;
   $187 = $15;
   $188 = $186 * $187;
   $189 = $13;
   $190 = $17;
   $191 = $189 * $190;
   $192 = $188 - $191;
   $193 = $15;
   $194 = $18;
   $195 = $193 * $194;
   $196 = $17;
   $197 = $16;
   $198 = $196 * $197;
   $199 = $195 - $198;
   $19 = $199;
   $200 = $192 / $199;
   $20 = $200;
   $201 = $13;
   $202 = $18;
   $203 = $201 * $202;
   $204 = $14;
   $205 = $16;
   $206 = $204 * $205;
   $207 = $203 - $206;
   $208 = $19;
   $209 = $207 / $208;
   $19 = $209;
   while(1) {
    $210 = $20;
    $211 = $210 > 3.1415926535897931;
    if (!($211)) {
     break;
    }
    $212 = $20;
    $213 = $212 - 3.1415926535897931;
    $20 = $213;
   }
   while(1) {
    $214 = $20;
    $215 = $214 < -3.1415926535897931;
    if (!($215)) {
     break;
    }
    $216 = $20;
    $217 = $216 + 3.1415926535897931;
    $20 = $217;
   }
   $218 = $19;
   $219 = ((($4)) + 8|0);
   $220 = +HEAPF64[$219>>3];
   $221 = $220 - $218;
   HEAPF64[$219>>3] = $221;
   $222 = $20;
   $223 = +HEAPF64[$4>>3];
   $224 = $223 - $222;
   HEAPF64[$4>>3] = $224;
   $225 = $19;
   $226 = (+Math_abs((+$225)));
   $227 = $10;
   $228 = $226 > $227;
   if (!($228)) {
    $229 = $20;
    $230 = (+Math_abs((+$229)));
    $231 = $10;
    $232 = $230 > $231;
    if (!($232)) {
     break;
    }
   }
   $233 = $6;
   $234 = (($233) + 1)|0;
   $6 = $234;
   $235 = $7;
   $236 = ($233|0)<($235|0);
   if (!($236)) {
    break;
   }
  }
  $237 = ((($4)) + 8|0);
  $238 = +HEAPF64[$237>>3];
  $239 = $238 > 1.5707963267948966;
  if ($239) {
   $240 = ((($4)) + 8|0);
   $241 = +HEAPF64[$240>>3];
   $242 = $241 - 1.5707963267948966;
   $243 = 2.0 * $242;
   $244 = ((($4)) + 8|0);
   $245 = +HEAPF64[$244>>3];
   $246 = $245 - $243;
   HEAPF64[$244>>3] = $246;
  }
  $247 = ((($4)) + 8|0);
  $248 = +HEAPF64[$247>>3];
  $249 = $248 < -1.5707963267948966;
  if ($249) {
   $250 = ((($4)) + 8|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $251 + 1.5707963267948966;
   $253 = 2.0 * $252;
   $254 = ((($4)) + 8|0);
   $255 = +HEAPF64[$254>>3];
   $256 = $255 - $253;
   HEAPF64[$254>>3] = $256;
  }
  $257 = ((($4)) + 8|0);
  $258 = +HEAPF64[$257>>3];
  $259 = (+Math_abs((+$258)));
  $260 = $259 - 1.5707963267948966;
  $261 = (+Math_abs((+$260)));
  $262 = $10;
  $263 = $261 < $262;
  if ($263) {
   $264 = $5;
   $265 = ((($264)) + 8|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAPF64[$4>>3] = 0.0;
   }
  }
  $268 = ((($4)) + 8|0);
  $269 = +HEAPF64[$268>>3];
  $270 = (+Math_cos((+$269)));
  $271 = +HEAPF64[$4>>3];
  $272 = 0.5 * $271;
  $12 = $272;
  $273 = (+Math_cos((+$272)));
  $274 = $270 * $273;
  $275 = (+Math_acos((+$274)));
  $11 = $275;
  $276 = $275 != 0.0;
  if ($276) {
   $277 = $11;
   $278 = 2.0 * $277;
   $279 = ((($4)) + 8|0);
   $280 = +HEAPF64[$279>>3];
   $281 = (+Math_cos((+$280)));
   $282 = $278 * $281;
   $283 = $12;
   $284 = (+Math_sin((+$283)));
   $285 = $282 * $284;
   $286 = $11;
   $287 = (+Math_sin((+$286)));
   $288 = 1.0 / $287;
   $26 = $288;
   $289 = $285 * $288;
   $25 = $289;
   $290 = $11;
   $291 = ((($4)) + 8|0);
   $292 = +HEAPF64[$291>>3];
   $293 = (+Math_sin((+$292)));
   $294 = $290 * $293;
   $295 = $26;
   $296 = $295 * $294;
   $26 = $296;
  } else {
   $26 = 0.0;
   $25 = 0.0;
  }
  $297 = $5;
  $298 = ((($297)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = ($299|0)!=(0);
  if ($300) {
   $301 = $25;
   $302 = +HEAPF64[$4>>3];
   $303 = $5;
   $304 = +HEAPF64[$303>>3];
   $305 = $302 * $304;
   $306 = $301 + $305;
   $307 = $306 * 0.5;
   $25 = $307;
   $308 = $26;
   $309 = ((($4)) + 8|0);
   $310 = +HEAPF64[$309>>3];
   $311 = $308 + $310;
   $312 = $311 * 0.5;
   $26 = $312;
  }
  $313 = +HEAPF64[$1>>3];
  $314 = $25;
  $315 = $313 - $314;
  $316 = (+Math_abs((+$315)));
  $317 = $10;
  $318 = $316 > $317;
  if (!($318)) {
   $319 = ((($1)) + 8|0);
   $320 = +HEAPF64[$319>>3];
   $321 = $26;
   $322 = $320 - $321;
   $323 = (+Math_abs((+$322)));
   $324 = $10;
   $325 = $323 > $324;
   if (!($325)) {
    break;
   }
  }
  $326 = $8;
  $327 = (($326) + 1)|0;
  $8 = $327;
  $328 = $9;
  $329 = ($326|0)<($328|0);
  if (!($329)) {
   break;
  }
 }
 $330 = $6;
 $331 = $7;
 $332 = ($330|0)==($331|0);
 if ($332) {
  $333 = $8;
  $334 = $9;
  $335 = ($333|0)==($334|0);
  if ($335) {
   $336 = HEAP32[2195]|0;
   $337 = $19;
   $338 = $20;
   HEAPF64[$vararg_buffer>>3] = $337;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAPF64[$vararg_ptr2>>3] = $338;
   (_fprintf($336,11748,$vararg_buffer)|0);
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_243($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_cos((+$12)));
 $14 = +HEAPF64[$1>>3];
 $15 = 0.5 * $14;
 $6 = $15;
 $16 = (+Math_cos((+$15)));
 $17 = $13 * $16;
 $18 = (+Math_acos((+$17)));
 $7 = $18;
 $19 = $18 != 0.0;
 if ($19) {
  $20 = $7;
  $21 = 2.0 * $20;
  $22 = ((($1)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = (+Math_cos((+$23)));
  $25 = $21 * $24;
  $26 = $6;
  $27 = (+Math_sin((+$26)));
  $28 = $25 * $27;
  $29 = $7;
  $30 = (+Math_sin((+$29)));
  $31 = 1.0 / $30;
  $32 = ((($4)) + 8|0);
  HEAPF64[$32>>3] = $31;
  $33 = $28 * $31;
  HEAPF64[$4>>3] = $33;
  $34 = $7;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = (+Math_sin((+$36)));
  $38 = $34 * $37;
  $39 = ((($4)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 * $38;
  HEAPF64[$39>>3] = $41;
 } else {
  $42 = ((($4)) + 8|0);
  HEAPF64[$42>>3] = 0.0;
  HEAPF64[$4>>3] = 0.0;
 }
 $43 = $5;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $47 = +HEAPF64[$4>>3];
 $48 = +HEAPF64[$1>>3];
 $49 = $5;
 $50 = +HEAPF64[$49>>3];
 $51 = $48 * $50;
 $52 = $47 + $51;
 $53 = $52 * 0.5;
 HEAPF64[$4>>3] = $53;
 $54 = ((($4)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = ((($1)) + 8|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $55 + $57;
 $59 = $58 * 0.5;
 $60 = ((($4)) + 8|0);
 HEAPF64[$60>>3] = $59;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wintri($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wintri($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 289;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11717;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wintri($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,16)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_240($9)|0);
  $1 = $10;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 1;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 _pj_param($4,$17,$20,11826);
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  _pj_param($5,$24,$27,15081);
  $28 = +HEAPF64[$5>>3];
  $29 = (+Math_cos((+$28)));
  $30 = $3;
  HEAPF64[$30>>3] = $29;
  $31 = $29 == 0.0;
  if ($31) {
   $32 = $2;
   $33 = HEAP32[$32>>2]|0;
   _pj_ctx_set_errno($33,-22);
   $34 = $2;
   _freeup_239($34);
   $1 = 0;
   $38 = $1;
   STACKTOP = sp;return ($38|0);
  }
 } else {
  $35 = $3;
  HEAPF64[$35>>3] = 0.63661977236758138;
 }
 $36 = $2;
 $37 = (_setup_241($36)|0);
 $1 = $37;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _pj_august($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_august($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 292;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11833;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_august($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 293;
 $6 = $1;
 $7 = ((($6)) + 72|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_247($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_248($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_248($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_249($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 0.5 * $13;
 $15 = (+Math_tan((+$14)));
 $5 = $15;
 $16 = $5;
 $17 = $5;
 $18 = $16 * $17;
 $19 = 1.0 - $18;
 $20 = (+Math_sqrt((+$19)));
 $6 = $20;
 $21 = $6;
 $22 = +HEAPF64[$1>>3];
 $23 = $22 * 0.5;
 HEAPF64[$1>>3] = $23;
 $24 = (+Math_cos((+$23)));
 $25 = $21 * $24;
 $26 = 1.0 + $25;
 $7 = $26;
 $27 = +HEAPF64[$1>>3];
 $28 = (+Math_sin((+$27)));
 $29 = $6;
 $30 = $28 * $29;
 $31 = $7;
 $32 = $30 / $31;
 $8 = $32;
 $33 = $5;
 $34 = $7;
 $35 = $33 / $34;
 $10 = $35;
 $36 = $8;
 $37 = 1.333333333333333 * $36;
 $38 = $8;
 $39 = $8;
 $40 = $38 * $39;
 $9 = $40;
 $41 = 3.0 + $40;
 $42 = $10;
 $43 = $10;
 $44 = $42 * $43;
 $11 = $44;
 $45 = 3.0 * $44;
 $46 = $41 - $45;
 $47 = $37 * $46;
 HEAPF64[$4>>3] = $47;
 $48 = $10;
 $49 = 1.333333333333333 * $48;
 $50 = $9;
 $51 = 3.0 * $50;
 $52 = 3.0 + $51;
 $53 = $11;
 $54 = $52 - $53;
 $55 = $49 * $54;
 $56 = ((($4)) + 8|0);
 HEAPF64[$56>>3] = $55;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_bacon($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_bacon($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 294;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11872;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_bacon($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_251($7)|0);
  $1 = $8;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAP32[$12>>2] = 1;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = 0;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 295;
  $19 = $2;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _freeup_250($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_251($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_251($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_252($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 if ($13) {
  $16 = (+Math_sin((+$15)));
  $17 = 1.5707963267948966 * $16;
  $19 = $17;
 } else {
  $19 = $15;
 }
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $19;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_abs((+$20)));
 $6 = $21;
 $22 = $21 >= 1.0E-10;
 if ($22) {
  $23 = $5;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0);
  $27 = $6;
  $28 = $27 >= 1.5707963267948966;
  $or$cond = $26 & $28;
  if ($or$cond) {
   $29 = ((($1)) + 8|0);
   $30 = +HEAPF64[$29>>3];
   $31 = ((($1)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $30 * $32;
   $34 = 2.4674011002723395 - $33;
   $35 = $34 + 1.0E-10;
   $36 = (+Math_sqrt((+$35)));
   $37 = $6;
   $38 = $36 + $37;
   $39 = $38 - 1.5707963267948966;
   HEAPF64[$4>>3] = $39;
  } else {
   $40 = $6;
   $41 = 2.4674011002723395 / $40;
   $42 = $6;
   $43 = $41 + $42;
   $44 = 0.5 * $43;
   $7 = $44;
   $45 = $6;
   $46 = $7;
   $47 = $45 - $46;
   $48 = $7;
   $49 = $7;
   $50 = $48 * $49;
   $51 = ((($4)) + 8|0);
   $52 = +HEAPF64[$51>>3];
   $53 = ((($4)) + 8|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $52 * $54;
   $56 = $50 - $55;
   $57 = (+Math_sqrt((+$56)));
   $58 = $47 + $57;
   HEAPF64[$4>>3] = $58;
  }
  $59 = +HEAPF64[$1>>3];
  $60 = $59 < 0.0;
  if ($60) {
   $61 = +HEAPF64[$4>>3];
   $62 = -$61;
   HEAPF64[$4>>3] = $62;
  }
 } else {
  HEAPF64[$4>>3] = 0.0;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_apian($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_apian($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 294;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11906;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_apian($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_251($7)|0);
  $1 = $8;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 4|0);
  HEAP32[$13>>2] = 0;
  $14 = $3;
  HEAP32[$14>>2] = 0;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 295;
  $19 = $2;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pj_ortel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_ortel($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 294;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11942;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_ortel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_251($7)|0);
  $1 = $8;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAP32[$12>>2] = 0;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = 1;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 295;
  $19 = $2;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pj_chamb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_chamb($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 296;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 11975;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_chamb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $5 = sp + 64|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp;
 $2 = $0;
 $10 = (_pj_calloc(1,256)|0);
 $6 = $10;
 $11 = $6;
 $12 = (0|0)==($11|0);
 if ($12) {
  $13 = $2;
  $14 = (_freeup_new_254($13)|0);
  $1 = $14;
  $236 = $1;
  STACKTOP = sp;return ($236|0);
 }
 $15 = $6;
 $16 = $2;
 $17 = ((($16)) + 416|0);
 HEAP32[$17>>2] = $15;
 $3 = 0;
 while(1) {
  $18 = $3;
  $19 = ($18|0)<(3);
  if (!($19)) {
   break;
  }
  $20 = $3;
  $21 = (($20) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $21;
  (_sprintf($5,12058,$vararg_buffer)|0);
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  _pj_param($7,$23,$26,$5);
  $27 = +HEAPF64[$7>>3];
  $28 = $3;
  $29 = $6;
  $30 = (($29) + (($28*72)|0)|0);
  HEAPF64[$30>>3] = $27;
  $31 = $3;
  $32 = (($31) + 1)|0;
  HEAP32[$vararg_buffer1>>2] = $32;
  (_sprintf($5,12066,$vararg_buffer1)|0);
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  $36 = ((($35)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  _pj_param($8,$34,$37,$5);
  $38 = +HEAPF64[$8>>3];
  $39 = $3;
  $40 = $6;
  $41 = (($40) + (($39*72)|0)|0);
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = $38;
  $43 = $3;
  $44 = $6;
  $45 = (($44) + (($43*72)|0)|0);
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $2;
  $49 = ((($48)) + 120|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $47 - $50;
  $52 = (+_adjlon($51));
  $53 = $3;
  $54 = $6;
  $55 = (($54) + (($53*72)|0)|0);
  $56 = ((($55)) + 8|0);
  HEAPF64[$56>>3] = $52;
  $57 = $3;
  $58 = $6;
  $59 = (($58) + (($57*72)|0)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = (+Math_cos((+$60)));
  $62 = $3;
  $63 = $6;
  $64 = (($63) + (($62*72)|0)|0);
  $65 = ((($64)) + 16|0);
  HEAPF64[$65>>3] = $61;
  $66 = $3;
  $67 = $6;
  $68 = (($67) + (($66*72)|0)|0);
  $69 = +HEAPF64[$68>>3];
  $70 = (+Math_sin((+$69)));
  $71 = $3;
  $72 = $6;
  $73 = (($72) + (($71*72)|0)|0);
  $74 = ((($73)) + 24|0);
  HEAPF64[$74>>3] = $70;
  $75 = $3;
  $76 = (($75) + 1)|0;
  $3 = $76;
 }
 $3 = 0;
 while(1) {
  $77 = $3;
  $78 = ($77|0)<(3);
  if (!($78)) {
   label = 11;
   break;
  }
  $79 = $3;
  $80 = ($79|0)==(2);
  $81 = $3;
  $82 = (($81) + 1)|0;
  $83 = $80 ? 0 : $82;
  $4 = $83;
  $84 = $3;
  $85 = $6;
  $86 = (($85) + (($84*72)|0)|0);
  $87 = ((($86)) + 32|0);
  $88 = $2;
  $89 = HEAP32[$88>>2]|0;
  $90 = $4;
  $91 = $6;
  $92 = (($91) + (($90*72)|0)|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $3;
  $95 = $6;
  $96 = (($95) + (($94*72)|0)|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $93 - $97;
  $99 = $3;
  $100 = $6;
  $101 = (($100) + (($99*72)|0)|0);
  $102 = ((($101)) + 16|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $3;
  $105 = $6;
  $106 = (($105) + (($104*72)|0)|0);
  $107 = ((($106)) + 24|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $4;
  $110 = $6;
  $111 = (($110) + (($109*72)|0)|0);
  $112 = ((($111)) + 16|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $4;
  $115 = $6;
  $116 = (($115) + (($114*72)|0)|0);
  $117 = ((($116)) + 24|0);
  $118 = +HEAPF64[$117>>3];
  $119 = $4;
  $120 = $6;
  $121 = (($120) + (($119*72)|0)|0);
  $122 = ((($121)) + 8|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $3;
  $125 = $6;
  $126 = (($125) + (($124*72)|0)|0);
  $127 = ((($126)) + 8|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $123 - $128;
  _vect($9,$89,$98,$103,$108,$113,$118,$129);
  ;HEAP32[$87>>2]=HEAP32[$9>>2]|0;HEAP32[$87+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$87+12>>2]=HEAP32[$9+12>>2]|0;
  $130 = $3;
  $131 = $6;
  $132 = (($131) + (($130*72)|0)|0);
  $133 = ((($132)) + 32|0);
  $134 = +HEAPF64[$133>>3];
  $135 = $134 != 0.0;
  if (!($135)) {
   label = 9;
   break;
  }
  $139 = $3;
  $140 = (($139) + 1)|0;
  $3 = $140;
 }
 if ((label|0) == 9) {
  $136 = $2;
  $137 = HEAP32[$136>>2]|0;
  _pj_ctx_set_errno($137,-25);
  $138 = $2;
  _freeup_253($138);
  $1 = 0;
  $236 = $1;
  STACKTOP = sp;return ($236|0);
 }
 else if ((label|0) == 11) {
  $141 = $2;
  $142 = HEAP32[$141>>2]|0;
  $143 = $6;
  $144 = ((($143)) + 32|0);
  $145 = +HEAPF64[$144>>3];
  $146 = $6;
  $147 = ((($146)) + 144|0);
  $148 = ((($147)) + 32|0);
  $149 = +HEAPF64[$148>>3];
  $150 = $6;
  $151 = ((($150)) + 72|0);
  $152 = ((($151)) + 32|0);
  $153 = +HEAPF64[$152>>3];
  $154 = (+_lc($142,$145,$149,$153));
  $155 = $6;
  $156 = ((($155)) + 232|0);
  HEAPF64[$156>>3] = $154;
  $157 = $2;
  $158 = HEAP32[$157>>2]|0;
  $159 = $6;
  $160 = ((($159)) + 32|0);
  $161 = +HEAPF64[$160>>3];
  $162 = $6;
  $163 = ((($162)) + 72|0);
  $164 = ((($163)) + 32|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $6;
  $167 = ((($166)) + 144|0);
  $168 = ((($167)) + 32|0);
  $169 = +HEAPF64[$168>>3];
  $170 = (+_lc($158,$161,$165,$169));
  $171 = $6;
  $172 = ((($171)) + 240|0);
  HEAPF64[$172>>3] = $170;
  $173 = $6;
  $174 = ((($173)) + 232|0);
  $175 = +HEAPF64[$174>>3];
  $176 = 3.1415926535897931 - $175;
  $177 = $6;
  $178 = ((($177)) + 248|0);
  HEAPF64[$178>>3] = $176;
  $179 = $6;
  $180 = ((($179)) + 144|0);
  $181 = ((($180)) + 32|0);
  $182 = +HEAPF64[$181>>3];
  $183 = $6;
  $184 = ((($183)) + 232|0);
  $185 = +HEAPF64[$184>>3];
  $186 = (+Math_sin((+$185)));
  $187 = $182 * $186;
  $188 = $6;
  $189 = ((($188)) + 72|0);
  $190 = ((($189)) + 48|0);
  $191 = ((($190)) + 8|0);
  HEAPF64[$191>>3] = $187;
  $192 = $6;
  $193 = ((($192)) + 48|0);
  $194 = ((($193)) + 8|0);
  HEAPF64[$194>>3] = $187;
  $195 = 2.0 * $187;
  $196 = $6;
  $197 = ((($196)) + 216|0);
  $198 = ((($197)) + 8|0);
  HEAPF64[$198>>3] = $195;
  $199 = $6;
  $200 = ((($199)) + 144|0);
  $201 = ((($200)) + 48|0);
  $202 = ((($201)) + 8|0);
  HEAPF64[$202>>3] = 0.0;
  $203 = $6;
  $204 = ((($203)) + 32|0);
  $205 = +HEAPF64[$204>>3];
  $206 = 0.5 * $205;
  $207 = $6;
  $208 = ((($207)) + 72|0);
  $209 = ((($208)) + 48|0);
  HEAPF64[$209>>3] = $206;
  $210 = -$206;
  $211 = $6;
  $212 = ((($211)) + 48|0);
  HEAPF64[$212>>3] = $210;
  $213 = $6;
  $214 = ((($213)) + 48|0);
  $215 = +HEAPF64[$214>>3];
  $216 = $6;
  $217 = ((($216)) + 144|0);
  $218 = ((($217)) + 32|0);
  $219 = +HEAPF64[$218>>3];
  $220 = $6;
  $221 = ((($220)) + 232|0);
  $222 = +HEAPF64[$221>>3];
  $223 = (+Math_cos((+$222)));
  $224 = $219 * $223;
  $225 = $215 + $224;
  $226 = $6;
  $227 = ((($226)) + 144|0);
  $228 = ((($227)) + 48|0);
  HEAPF64[$228>>3] = $225;
  $229 = $6;
  $230 = ((($229)) + 216|0);
  HEAPF64[$230>>3] = $225;
  $231 = $2;
  $232 = ((($231)) + 72|0);
  HEAPF64[$232>>3] = 0.0;
  $233 = $2;
  $234 = ((($233)) + 4|0);
  HEAP32[$234>>2] = 297;
  $235 = $2;
  $1 = $235;
  $236 = $1;
  STACKTOP = sp;return ($236|0);
 }
 return (0)|0;
}
function _freeup_253($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_254($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_254($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _vect($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $15 = sp + 24|0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $19 = $14;
 $20 = (+Math_cos((+$19)));
 $16 = $20;
 $21 = $9;
 $22 = (+Math_abs((+$21)));
 $23 = $22 > 1.0;
 if ($23) {
  label = 3;
 } else {
  $24 = $14;
  $25 = (+Math_abs((+$24)));
  $26 = $25 > 1.0;
  if ($26) {
   label = 3;
  } else {
   $38 = $9;
   $39 = 0.5 * $38;
   $40 = (+Math_sin((+$39)));
   $17 = $40;
   $41 = $14;
   $42 = 0.5 * $41;
   $43 = (+Math_sin((+$42)));
   $18 = $43;
   $44 = $8;
   $45 = $17;
   $46 = $17;
   $47 = $45 * $46;
   $48 = $10;
   $49 = $12;
   $50 = $48 * $49;
   $51 = $18;
   $52 = $50 * $51;
   $53 = $18;
   $54 = $52 * $53;
   $55 = $47 + $54;
   $56 = (+Math_sqrt((+$55)));
   $57 = (+_aasin($44,$56));
   $58 = 2.0 * $57;
   HEAPF64[$15>>3] = $58;
  }
 }
 if ((label|0) == 3) {
  $27 = $8;
  $28 = $11;
  $29 = $13;
  $30 = $28 * $29;
  $31 = $10;
  $32 = $12;
  $33 = $31 * $32;
  $34 = $16;
  $35 = $33 * $34;
  $36 = $30 + $35;
  $37 = (+_aacos($27,$36));
  HEAPF64[$15>>3] = $37;
 }
 $59 = +HEAPF64[$15>>3];
 $60 = (+Math_abs((+$59)));
 $61 = $60 > 1.0000000000000001E-9;
 if ($61) {
  $62 = $12;
  $63 = $14;
  $64 = (+Math_sin((+$63)));
  $65 = $62 * $64;
  $66 = $10;
  $67 = $13;
  $68 = $66 * $67;
  $69 = $11;
  $70 = $12;
  $71 = $69 * $70;
  $72 = $16;
  $73 = $71 * $72;
  $74 = $68 - $73;
  $75 = (+Math_atan2((+$65),(+$74)));
  $76 = ((($15)) + 8|0);
  HEAPF64[$76>>3] = $75;
  ;HEAP32[$0>>2]=HEAP32[$15>>2]|0;HEAP32[$0+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$15+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $77 = ((($15)) + 8|0);
  HEAPF64[$77>>3] = 0.0;
  HEAPF64[$15>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$15>>2]|0;HEAP32[$0+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$15+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _lc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $5;
 $11 = $9 * $10;
 $12 = $6;
 $13 = $6;
 $14 = $12 * $13;
 $15 = $11 + $14;
 $16 = $7;
 $17 = $7;
 $18 = $16 * $17;
 $19 = $15 - $18;
 $20 = 0.5 * $19;
 $21 = $5;
 $22 = $6;
 $23 = $21 * $22;
 $24 = $20 / $23;
 $25 = (+_aacos($8,$24));
 STACKTOP = sp;return (+$25);
}
function _s_forward_257($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 88|0;
 $9 = sp + 16|0;
 $12 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_sin((+$17)));
 $6 = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_cos((+$20)));
 $7 = $21;
 $10 = 0;
 while(1) {
  $22 = $10;
  $23 = ($22|0)<(3);
  if (!($23)) {
   break;
  }
  $24 = $10;
  $25 = (($9) + ($24<<4)|0);
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $10;
  $31 = $5;
  $32 = (($31) + (($30*72)|0)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $29 - $33;
  $35 = $10;
  $36 = $5;
  $37 = (($36) + (($35*72)|0)|0);
  $38 = ((($37)) + 16|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $10;
  $41 = $5;
  $42 = (($41) + (($40*72)|0)|0);
  $43 = ((($42)) + 24|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $7;
  $46 = $6;
  $47 = +HEAPF64[$1>>3];
  $48 = $10;
  $49 = $5;
  $50 = (($49) + (($48*72)|0)|0);
  $51 = ((($50)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $47 - $52;
  _vect($12,$27,$34,$39,$44,$45,$46,$53);
  ;HEAP32[$25>>2]=HEAP32[$12>>2]|0;HEAP32[$25+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$12+12>>2]|0;
  $54 = $10;
  $55 = (($9) + ($54<<4)|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 != 0.0;
  if (!($57)) {
   break;
  }
  $58 = $10;
  $59 = (($9) + ($58<<4)|0);
  $60 = ((($59)) + 8|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $10;
  $63 = $5;
  $64 = (($63) + (($62*72)|0)|0);
  $65 = ((($64)) + 32|0);
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $61 - $67;
  $69 = (+_adjlon($68));
  $70 = $10;
  $71 = (($9) + ($70<<4)|0);
  $72 = ((($71)) + 8|0);
  HEAPF64[$72>>3] = $69;
  $73 = $10;
  $74 = (($73) + 1)|0;
  $10 = $74;
 }
 $75 = $10;
 $76 = ($75|0)<(3);
 if ($76) {
  $77 = $10;
  $78 = $5;
  $79 = (($78) + (($77*72)|0)|0);
  $80 = ((($79)) + 48|0);
  ;HEAP32[$4>>2]=HEAP32[$80>>2]|0;HEAP32[$4+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$80+12>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $81 = $5;
 $82 = ((($81)) + 216|0);
 ;HEAP32[$4>>2]=HEAP32[$82>>2]|0;HEAP32[$4+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$82+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$82+12>>2]|0;
 $10 = 0;
 while(1) {
  $83 = $10;
  $84 = ($83|0)<(3);
  if (!($84)) {
   break;
  }
  $85 = $10;
  $86 = ($85|0)==(2);
  $87 = $10;
  $88 = (($87) + 1)|0;
  $89 = $86 ? 0 : $88;
  $11 = $89;
  $90 = $3;
  $91 = HEAP32[$90>>2]|0;
  $92 = $10;
  $93 = $5;
  $94 = (($93) + (($92*72)|0)|0);
  $95 = ((($94)) + 32|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $10;
  $98 = (($9) + ($97<<4)|0);
  $99 = +HEAPF64[$98>>3];
  $100 = $11;
  $101 = (($9) + ($100<<4)|0);
  $102 = +HEAPF64[$101>>3];
  $103 = (+_lc($91,$96,$99,$102));
  $8 = $103;
  $104 = $10;
  $105 = (($9) + ($104<<4)|0);
  $106 = ((($105)) + 8|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $107 < 0.0;
  if ($108) {
   $109 = $8;
   $110 = -$109;
   $8 = $110;
  }
  $111 = $10;
  $112 = ($111|0)!=(0);
  $113 = $10;
  do {
   if ($112) {
    $130 = ($113|0)==(1);
    $131 = $5;
    if ($130) {
     $132 = ((($131)) + 240|0);
     $133 = +HEAPF64[$132>>3];
     $134 = $8;
     $135 = $133 - $134;
     $8 = $135;
     $136 = $10;
     $137 = (($9) + ($136<<4)|0);
     $138 = +HEAPF64[$137>>3];
     $139 = $8;
     $140 = (+Math_cos((+$139)));
     $141 = $138 * $140;
     $142 = +HEAPF64[$4>>3];
     $143 = $142 - $141;
     HEAPF64[$4>>3] = $143;
     $144 = $10;
     $145 = (($9) + ($144<<4)|0);
     $146 = +HEAPF64[$145>>3];
     $147 = $8;
     $148 = (+Math_sin((+$147)));
     $149 = $146 * $148;
     $150 = ((($4)) + 8|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $151 - $149;
     HEAPF64[$150>>3] = $152;
     break;
    } else {
     $153 = ((($131)) + 248|0);
     $154 = +HEAPF64[$153>>3];
     $155 = $8;
     $156 = $154 - $155;
     $8 = $156;
     $157 = $10;
     $158 = (($9) + ($157<<4)|0);
     $159 = +HEAPF64[$158>>3];
     $160 = $8;
     $161 = (+Math_cos((+$160)));
     $162 = $159 * $161;
     $163 = +HEAPF64[$4>>3];
     $164 = $163 + $162;
     HEAPF64[$4>>3] = $164;
     $165 = $10;
     $166 = (($9) + ($165<<4)|0);
     $167 = +HEAPF64[$166>>3];
     $168 = $8;
     $169 = (+Math_sin((+$168)));
     $170 = $167 * $169;
     $171 = ((($4)) + 8|0);
     $172 = +HEAPF64[$171>>3];
     $173 = $172 + $170;
     HEAPF64[$171>>3] = $173;
     break;
    }
   } else {
    $114 = (($9) + ($113<<4)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $8;
    $117 = (+Math_cos((+$116)));
    $118 = $115 * $117;
    $119 = +HEAPF64[$4>>3];
    $120 = $119 + $118;
    HEAPF64[$4>>3] = $120;
    $121 = $10;
    $122 = (($9) + ($121<<4)|0);
    $123 = +HEAPF64[$122>>3];
    $124 = $8;
    $125 = (+Math_sin((+$124)));
    $126 = $123 * $125;
    $127 = ((($4)) + 8|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $128 - $126;
    HEAPF64[$127>>3] = $129;
   }
  } while(0);
  $174 = $10;
  $175 = (($174) + 1)|0;
  $10 = $175;
 }
 $176 = +HEAPF64[$4>>3];
 $177 = $176 * 0.33333333333333331;
 HEAPF64[$4>>3] = $177;
 $178 = ((($4)) + 8|0);
 $179 = +HEAPF64[$178>>3];
 $180 = $179 * 0.33333333333333331;
 HEAPF64[$178>>3] = $180;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_hammer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_hammer($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 298;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12074;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_hammer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $8 = (_pj_calloc(1,24)|0);
 $3 = $8;
 $9 = $3;
 $10 = (0|0)==($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_freeup_new_259($11)|0);
  $1 = $12;
  $77 = $1;
  STACKTOP = sp;return ($77|0);
 }
 $13 = $3;
 $14 = $2;
 $15 = ((($14)) + 416|0);
 HEAP32[$15>>2] = $13;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 _pj_param($4,$17,$20,12122);
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  _pj_param($5,$24,$27,12163);
  $28 = +HEAPF64[$5>>3];
  $29 = (+Math_abs((+$28)));
  $30 = $3;
  HEAPF64[$30>>3] = $29;
  $31 = $29 <= 0.0;
  if ($31) {
   $32 = $2;
   $33 = HEAP32[$32>>2]|0;
   _pj_ctx_set_errno($33,-27);
   $34 = $2;
   _freeup_258($34);
   $1 = 0;
   $77 = $1;
   STACKTOP = sp;return ($77|0);
  }
 } else {
  $35 = $3;
  HEAPF64[$35>>3] = 0.5;
 }
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 _pj_param($6,$37,$40,12125);
 $41 = HEAP32[$6>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $2;
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  $46 = ((($45)) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  _pj_param($7,$44,$47,12128);
  $48 = +HEAPF64[$7>>3];
  $49 = (+Math_abs((+$48)));
  $50 = $3;
  $51 = ((($50)) + 8|0);
  HEAPF64[$51>>3] = $49;
  $52 = $49 <= 0.0;
  if ($52) {
   $53 = $2;
   $54 = HEAP32[$53>>2]|0;
   _pj_ctx_set_errno($54,-27);
   $55 = $2;
   _freeup_258($55);
   $1 = 0;
   $77 = $1;
   STACKTOP = sp;return ($77|0);
  }
 } else {
  $56 = $3;
  $57 = ((($56)) + 8|0);
  HEAPF64[$57>>3] = 1.0;
 }
 $58 = $3;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = 1.0 / $60;
 $62 = $3;
 $63 = ((($62)) + 16|0);
 HEAPF64[$63>>3] = $61;
 $64 = $3;
 $65 = +HEAPF64[$64>>3];
 $66 = $3;
 $67 = ((($66)) + 8|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $68 / $65;
 HEAPF64[$67>>3] = $69;
 $70 = $2;
 $71 = ((($70)) + 72|0);
 HEAPF64[$71>>3] = 0.0;
 $72 = $2;
 $73 = ((($72)) + 4|0);
 HEAP32[$73>>2] = 299;
 $74 = $2;
 $75 = ((($74)) + 8|0);
 HEAP32[$75>>2] = 300;
 $76 = $2;
 $1 = $76;
 $77 = $1;
 STACKTOP = sp;return ($77|0);
}
function _freeup_258($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_259($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_259($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_264($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_cos((+$12)));
 $6 = $13;
 $14 = $5;
 $15 = +HEAPF64[$14>>3];
 $16 = +HEAPF64[$1>>3];
 $17 = $16 * $15;
 HEAPF64[$1>>3] = $17;
 $18 = (+Math_cos((+$17)));
 $19 = $13 * $18;
 $20 = 1.0 + $19;
 $21 = 2.0 / $20;
 $22 = (+Math_sqrt((+$21)));
 $7 = $22;
 $23 = $5;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $7;
 $27 = $25 * $26;
 $28 = $6;
 $29 = $27 * $28;
 $30 = +HEAPF64[$1>>3];
 $31 = (+Math_sin((+$30)));
 $32 = $29 * $31;
 HEAPF64[$4>>3] = $32;
 $33 = $5;
 $34 = ((($33)) + 16|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $7;
 $37 = $35 * $36;
 $38 = ((($1)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = (+Math_sin((+$39)));
 $41 = $37 * $40;
 $42 = ((($4)) + 8|0);
 HEAPF64[$42>>3] = $41;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_265($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = 0.25 * $11;
 $13 = $5;
 $14 = +HEAPF64[$13>>3];
 $15 = $12 * $14;
 $16 = +HEAPF64[$1>>3];
 $17 = $15 * $16;
 $18 = +HEAPF64[$1>>3];
 $19 = $17 * $18;
 $20 = 1.0 - $19;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = 0.25 * $22;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $23 * $25;
 $27 = $20 - $26;
 $28 = (+Math_sqrt((+$27)));
 $6 = $28;
 $29 = $6;
 $30 = 2.0 * $29;
 $31 = $6;
 $32 = $30 * $31;
 $33 = $32 - 1.0;
 $34 = (+Math_abs((+$33)));
 $35 = $34 < 1.0E-10;
 if ($35) {
  HEAPF64[$4>>3] = inf;
  $36 = ((($4)) + 8|0);
  HEAPF64[$36>>3] = inf;
  HEAP32[6054] = -14;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $37 = $5;
  $38 = +HEAPF64[$37>>3];
  $39 = +HEAPF64[$1>>3];
  $40 = $38 * $39;
  $41 = $6;
  $42 = $40 * $41;
  $43 = $6;
  $44 = 2.0 * $43;
  $45 = $6;
  $46 = $44 * $45;
  $47 = $46 - 1.0;
  $48 = (+_aatan2($42,$47));
  $49 = $5;
  $50 = +HEAPF64[$49>>3];
  $51 = $48 / $50;
  HEAPF64[$4>>3] = $51;
  $52 = $3;
  $53 = HEAP32[$52>>2]|0;
  $54 = $6;
  $55 = ((($1)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $54 * $56;
  $58 = (+_aasin($53,$57));
  $59 = ((($4)) + 8|0);
  HEAPF64[$59>>3] = $58;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_lagrng($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lagrng($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 301;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12131;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lagrng($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $6 = sp;
 $2 = $0;
 $7 = (_pj_calloc(1,24)|0);
 $4 = $7;
 $8 = $4;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_freeup_new_267($10)|0);
  $1 = $11;
  $72 = $1;
  STACKTOP = sp;return ($72|0);
 }
 $12 = $4;
 $13 = $2;
 $14 = ((($13)) + 416|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _pj_param($5,$16,$19,12163);
 $20 = +HEAPF64[$5>>3];
 $21 = $4;
 $22 = ((($21)) + 16|0);
 HEAPF64[$22>>3] = $20;
 $23 = $4;
 $24 = ((($23)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 <= 0.0;
 if ($26) {
  $27 = $2;
  $28 = HEAP32[$27>>2]|0;
  _pj_ctx_set_errno($28,-27);
  $29 = $2;
  _freeup_266($29);
  $1 = 0;
  $72 = $1;
  STACKTOP = sp;return ($72|0);
 }
 $30 = $4;
 $31 = ((($30)) + 16|0);
 $32 = +HEAPF64[$31>>3];
 $33 = 1.0 / $32;
 $34 = $4;
 $35 = ((($34)) + 16|0);
 HEAPF64[$35>>3] = $33;
 $36 = $4;
 $37 = ((($36)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = 0.5 * $38;
 $40 = $4;
 $41 = ((($40)) + 8|0);
 HEAPF64[$41>>3] = $39;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 $44 = $2;
 $45 = ((($44)) + 32|0);
 $46 = HEAP32[$45>>2]|0;
 _pj_param($6,$43,$46,15081);
 $47 = +HEAPF64[$6>>3];
 $48 = (+Math_sin((+$47)));
 $3 = $48;
 $49 = $3;
 $50 = (+Math_abs((+$49)));
 $51 = $50 - 1.0;
 $52 = (+Math_abs((+$51)));
 $53 = $52 < 1.0E-10;
 if ($53) {
  $54 = $2;
  $55 = HEAP32[$54>>2]|0;
  _pj_ctx_set_errno($55,-22);
  $56 = $2;
  _freeup_266($56);
  $1 = 0;
  $72 = $1;
  STACKTOP = sp;return ($72|0);
 } else {
  $57 = $3;
  $58 = 1.0 - $57;
  $59 = $3;
  $60 = 1.0 + $59;
  $61 = $58 / $60;
  $62 = $4;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = (+Math_pow((+$61),(+$64)));
  $66 = $4;
  HEAPF64[$66>>3] = $65;
  $67 = $2;
  $68 = ((($67)) + 72|0);
  HEAPF64[$68>>3] = 0.0;
  $69 = $2;
  $70 = ((($69)) + 4|0);
  HEAP32[$70>>2] = 302;
  $71 = $2;
  $1 = $71;
  $72 = $1;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _freeup_266($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_267($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_267($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_270($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 - 1.5707963267948966;
 $15 = (+Math_abs((+$14)));
 $16 = $15 < 1.0E-10;
 do {
  if ($16) {
   HEAPF64[$4>>3] = 0.0;
   $17 = ((($1)) + 8|0);
   $18 = +HEAPF64[$17>>3];
   $19 = $18 < 0.0;
   $20 = $19 ? -2.0 : 2.0;
   $21 = ((($4)) + 8|0);
   HEAPF64[$21>>3] = $20;
  } else {
   $22 = ((($1)) + 8|0);
   $23 = +HEAPF64[$22>>3];
   $24 = (+Math_sin((+$23)));
   $25 = ((($1)) + 8|0);
   HEAPF64[$25>>3] = $24;
   $26 = $5;
   $27 = +HEAPF64[$26>>3];
   $28 = ((($1)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = 1.0 + $29;
   $31 = ((($1)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = 1.0 - $32;
   $34 = $30 / $33;
   $35 = $5;
   $36 = ((($35)) + 8|0);
   $37 = +HEAPF64[$36>>3];
   $38 = (+Math_pow((+$34),(+$37)));
   $39 = $27 * $38;
   $6 = $39;
   $40 = $6;
   $41 = $6;
   $42 = 1.0 / $41;
   $43 = $40 + $42;
   $44 = 0.5 * $43;
   $45 = $5;
   $46 = ((($45)) + 16|0);
   $47 = +HEAPF64[$46>>3];
   $48 = +HEAPF64[$1>>3];
   $49 = $48 * $47;
   HEAPF64[$1>>3] = $49;
   $50 = (+Math_cos((+$49)));
   $51 = $44 + $50;
   $7 = $51;
   $52 = $51 < 1.0E-10;
   if (!($52)) {
    $55 = +HEAPF64[$1>>3];
    $56 = (+Math_sin((+$55)));
    $57 = 2.0 * $56;
    $58 = $7;
    $59 = $57 / $58;
    HEAPF64[$4>>3] = $59;
    $60 = $6;
    $61 = $6;
    $62 = 1.0 / $61;
    $63 = $60 - $62;
    $64 = $7;
    $65 = $63 / $64;
    $66 = ((($4)) + 8|0);
    HEAPF64[$66>>3] = $65;
    break;
   }
   $53 = $3;
   $54 = HEAP32[$53>>2]|0;
   _pj_ctx_set_errno($54,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_larr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_larr($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 303;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12166;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_larr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 304;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_271($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_272($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_272($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_forward_273($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.5 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_cos((+$8)));
 $10 = (+Math_sqrt((+$9)));
 $11 = 1.0 + $10;
 $12 = $6 * $11;
 HEAPF64[$4>>3] = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = 0.5 * $16;
 $18 = (+Math_cos((+$17)));
 $19 = +HEAPF64[$1>>3];
 $20 = 0.16666666666666666 * $19;
 $21 = (+Math_cos((+$20)));
 $22 = $18 * $21;
 $23 = $14 / $22;
 $24 = ((($4)) + 8|0);
 HEAPF64[$24>>3] = $23;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_lask($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lask($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 305;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12194;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lask($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 306;
 $4 = $1;
 $5 = ((($4)) + 72|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_274($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_275($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_275($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $5 = $2;
  $6 = ((($5)) + 416|0);
  $7 = HEAP32[$6>>2]|0;
  (_pj_dealloc($7)|0);
  $8 = $2;
  $9 = (_pj_dealloc($8)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _s_forward_276($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = +HEAPF64[$1>>3];
 $8 = +HEAPF64[$1>>3];
 $9 = $7 * $8;
 $5 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 * $13;
 $6 = $14;
 $15 = +HEAPF64[$1>>3];
 $16 = $6;
 $17 = $5;
 $18 = $17 * -0.0143059;
 $19 = -0.119161 + $18;
 $20 = $6;
 $21 = $20 * -0.054700899999999997;
 $22 = $19 + $21;
 $23 = $16 * $22;
 $24 = 0.97553400000000001 + $23;
 $25 = $15 * $24;
 HEAPF64[$4>>3] = $25;
 $26 = ((($1)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $5;
 $29 = $6;
 $30 = $29 * -0.028549999999999999;
 $31 = 0.080289399999999997 + $30;
 $32 = $5;
 $33 = $32 * 1.99025E-4;
 $34 = $31 + $33;
 $35 = $28 * $34;
 $36 = 1.0038400000000001 + $35;
 $37 = $6;
 $38 = $6;
 $39 = $38 * -0.0491032;
 $40 = 0.099890900000000005 + $39;
 $41 = $37 * $40;
 $42 = $36 + $41;
 $43 = $27 * $42;
 $44 = ((($4)) + 8|0);
 HEAPF64[$44>>3] = $43;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_nicol($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_nicol($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 307;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12223;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_nicol($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 308;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_277($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_278($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_278($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_forward_279($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = +HEAPF64[$1>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 < 1.0E-10;
 if ($14) {
  HEAPF64[$4>>3] = 0.0;
  $15 = ((($1)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = ((($4)) + 8|0);
  HEAPF64[$17>>3] = $16;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_abs((+$19)));
 $21 = $20 < 1.0E-10;
 $22 = +HEAPF64[$1>>3];
 if ($21) {
  HEAPF64[$4>>3] = $22;
  $23 = ((($4)) + 8|0);
  HEAPF64[$23>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $24 = (+Math_abs((+$22)));
 $25 = $24 - 1.5707963267948966;
 $26 = (+Math_abs((+$25)));
 $27 = $26 < 1.0E-10;
 if ($27) {
  $28 = +HEAPF64[$1>>3];
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_cos((+$30)));
  $32 = $28 * $31;
  HEAPF64[$4>>3] = $32;
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+Math_sin((+$34)));
  $36 = 1.5707963267948966 * $35;
  $37 = ((($4)) + 8|0);
  HEAPF64[$37>>3] = $36;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $38 = ((($1)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = (+Math_abs((+$39)));
 $41 = $40 - 1.5707963267948966;
 $42 = (+Math_abs((+$41)));
 $43 = $42 < 1.0E-10;
 if ($43) {
  HEAPF64[$4>>3] = 0.0;
  $44 = ((($1)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = ((($4)) + 8|0);
  HEAPF64[$46>>3] = $45;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $47 = +HEAPF64[$1>>3];
  $48 = 1.5707963267948966 / $47;
  $49 = +HEAPF64[$1>>3];
  $50 = $49 / 1.5707963267948966;
  $51 = $48 - $50;
  $5 = $51;
  $52 = ((($1)) + 8|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $53 / 1.5707963267948966;
  $6 = $54;
  $55 = $6;
  $56 = $6;
  $57 = $55 * $56;
  $58 = 1.0 - $57;
  $59 = ((($1)) + 8|0);
  $60 = +HEAPF64[$59>>3];
  $61 = (+Math_sin((+$60)));
  $11 = $61;
  $62 = $6;
  $63 = $61 - $62;
  $64 = $58 / $63;
  $7 = $64;
  $65 = $5;
  $66 = $7;
  $67 = $65 / $66;
  $10 = $67;
  $68 = $10;
  $69 = $10;
  $70 = $69 * $68;
  $10 = $70;
  $71 = $5;
  $72 = $11;
  $73 = $71 * $72;
  $74 = $7;
  $75 = $73 / $74;
  $76 = $5;
  $77 = 0.5 * $76;
  $78 = $75 - $77;
  $79 = $10;
  $80 = 1.0 + $79;
  $81 = $78 / $80;
  $8 = $81;
  $82 = $11;
  $83 = $10;
  $84 = $82 / $83;
  $85 = $7;
  $86 = 0.5 * $85;
  $87 = $84 + $86;
  $88 = $10;
  $89 = 1.0 / $88;
  $90 = 1.0 + $89;
  $91 = $87 / $90;
  $9 = $91;
  $92 = ((($1)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = (+Math_cos((+$93)));
  HEAPF64[$4>>3] = $94;
  $95 = $8;
  $96 = $8;
  $97 = $95 * $96;
  $98 = +HEAPF64[$4>>3];
  $99 = +HEAPF64[$4>>3];
  $100 = $98 * $99;
  $101 = $10;
  $102 = 1.0 + $101;
  $103 = $100 / $102;
  $104 = $97 + $103;
  $105 = (+Math_sqrt((+$104)));
  HEAPF64[$4>>3] = $105;
  $106 = $8;
  $107 = +HEAPF64[$1>>3];
  $108 = $107 < 0.0;
  $109 = +HEAPF64[$4>>3];
  $110 = -$109;
  $111 = $108 ? $110 : $109;
  $112 = $106 + $111;
  $113 = 1.5707963267948966 * $112;
  HEAPF64[$4>>3] = $113;
  $114 = $9;
  $115 = $9;
  $116 = $114 * $115;
  $117 = $11;
  $118 = $11;
  $119 = $117 * $118;
  $120 = $10;
  $121 = $119 / $120;
  $122 = $7;
  $123 = $11;
  $124 = $122 * $123;
  $125 = $121 + $124;
  $126 = $125 - 1.0;
  $127 = $10;
  $128 = 1.0 / $127;
  $129 = 1.0 + $128;
  $130 = $126 / $129;
  $131 = $116 - $130;
  $132 = (+Math_sqrt((+$131)));
  $133 = ((($4)) + 8|0);
  HEAPF64[$133>>3] = $132;
  $134 = $9;
  $135 = ((($1)) + 8|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $136 < 0.0;
  $138 = ((($4)) + 8|0);
  $139 = +HEAPF64[$138>>3];
  $140 = -$139;
  $141 = $137 ? $139 : $140;
  $142 = $134 + $141;
  $143 = 1.5707963267948966 * $142;
  $144 = ((($4)) + 8|0);
  HEAPF64[$144>>3] = $143;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_ob_tran($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_ob_tran($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 309;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12260;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_ob_tran($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $8 = sp + 152|0;
 $9 = sp + 144|0;
 $13 = sp + 112|0;
 $14 = sp + 104|0;
 $15 = sp + 96|0;
 $16 = sp + 88|0;
 $17 = sp + 80|0;
 $18 = sp + 72|0;
 $24 = sp + 24|0;
 $25 = sp + 16|0;
 $26 = sp + 8|0;
 $27 = sp;
 $2 = $0;
 $28 = (_pj_calloc(1,32)|0);
 $7 = $28;
 $29 = $7;
 $30 = (0|0)==($29|0);
 if ($30) {
  $31 = $2;
  $32 = (_freeup_new_281($31)|0);
  $1 = $32;
  $352 = $1;
  STACKTOP = sp;return ($352|0);
 }
 $33 = $7;
 $34 = $2;
 $35 = ((($34)) + 416|0);
 HEAP32[$35>>2] = $33;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 _pj_param($8,$37,$40,12442);
 $41 = HEAP32[$8>>2]|0;
 $5 = $41;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  $43 = $2;
  $44 = HEAP32[$43>>2]|0;
  _pj_ctx_set_errno($44,-26);
  $45 = $2;
  _freeup_280($45);
  $1 = 0;
  $352 = $1;
  STACKTOP = sp;return ($352|0);
 }
 $3 = 0;
 while(1) {
  $46 = $3;
  $47 = (6132 + (($46*12)|0)|0);
  $48 = HEAP32[$47>>2]|0;
  $6 = $48;
  $49 = ($48|0)!=(0|0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $6;
  $52 = (_strcmp($50,$51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   break;
  }
  $54 = $3;
  $55 = (($54) + 1)|0;
  $3 = $55;
 }
 $56 = $6;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = $3;
  $59 = (6132 + (($58*12)|0)|0);
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_ii[$61 & 255](0)|0);
  $63 = $7;
  HEAP32[$63>>2] = $62;
  $64 = ($62|0)!=(0|0);
  if ($64) {
   $68 = $2;
   $69 = ((($68)) + 72|0);
   HEAPF64[$69>>3] = 0.0;
   $70 = $2;
   $71 = ((($70)) + 32|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $7;
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 32|0);
   HEAP32[$75>>2] = $72;
   $76 = $2;
   $77 = HEAP32[$76>>2]|0;
   $78 = $7;
   $79 = HEAP32[$78>>2]|0;
   HEAP32[$79>>2] = $77;
   $80 = $2;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $7;
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 36|0);
   HEAP32[$85>>2] = $82;
   $86 = $2;
   $87 = ((($86)) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $7;
   $90 = HEAP32[$89>>2]|0;
   $91 = ((($90)) + 40|0);
   HEAP32[$91>>2] = $88;
   $92 = $2;
   $93 = ((($92)) + 56|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $7;
   $96 = HEAP32[$95>>2]|0;
   $97 = ((($96)) + 56|0);
   HEAPF64[$97>>3] = $94;
   $98 = $2;
   $99 = ((($98)) + 72|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $7;
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($102)) + 72|0);
   HEAPF64[$103>>3] = $100;
   $104 = $2;
   $105 = ((($104)) + 96|0);
   $106 = +HEAPF64[$105>>3];
   $107 = $7;
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($108)) + 96|0);
   HEAPF64[$109>>3] = $106;
   $110 = $2;
   $111 = ((($110)) + 120|0);
   $112 = +HEAPF64[$111>>3];
   $113 = $7;
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($114)) + 120|0);
   HEAPF64[$115>>3] = $112;
   $116 = $2;
   $117 = ((($116)) + 128|0);
   $118 = +HEAPF64[$117>>3];
   $119 = $7;
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 128|0);
   HEAPF64[$121>>3] = $118;
   $122 = $2;
   $123 = ((($122)) + 136|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $7;
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($126)) + 136|0);
   HEAPF64[$127>>3] = $124;
   $128 = $2;
   $129 = ((($128)) + 144|0);
   $130 = +HEAPF64[$129>>3];
   $131 = $7;
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($132)) + 144|0);
   HEAPF64[$133>>3] = $130;
   $134 = $2;
   $135 = ((($134)) + 152|0);
   $136 = +HEAPF64[$135>>3];
   $137 = $7;
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($138)) + 152|0);
   HEAPF64[$139>>3] = $136;
   $140 = $7;
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 112|0);
   HEAPF64[$142>>3] = 1.0;
   $143 = $7;
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($144)) + 104|0);
   HEAPF64[$145>>3] = 1.0;
   $146 = $7;
   $147 = HEAP32[$146>>2]|0;
   $148 = ((($147)) + 88|0);
   HEAPF64[$148>>3] = 0.0;
   $149 = $7;
   $150 = HEAP32[$149>>2]|0;
   $151 = ((($150)) + 72|0);
   HEAPF64[$151>>3] = 0.0;
   $152 = $3;
   $153 = (6132 + (($152*12)|0)|0);
   $154 = ((($153)) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $7;
   $157 = HEAP32[$156>>2]|0;
   $158 = (FUNCTION_TABLE_ii[$155 & 255]($157)|0);
   $159 = $7;
   HEAP32[$159>>2] = $158;
   $160 = ($158|0)!=(0|0);
   $161 = $2;
   if (!($160)) {
    $162 = (_freeup_new_281($161)|0);
    $1 = $162;
    $352 = $1;
    STACKTOP = sp;return ($352|0);
   }
   $163 = HEAP32[$161>>2]|0;
   $164 = $2;
   $165 = ((($164)) + 32|0);
   $166 = HEAP32[$165>>2]|0;
   _pj_param($9,$163,$166,12450);
   $167 = HEAP32[$9>>2]|0;
   $168 = ($167|0)!=(0);
   $169 = $2;
   $170 = HEAP32[$169>>2]|0;
   $171 = $2;
   $172 = ((($171)) + 32|0);
   $173 = HEAP32[$172>>2]|0;
   do {
    if ($168) {
     _pj_param($13,$170,$173,12459);
     $174 = +HEAPF64[$13>>3];
     $10 = $174;
     $175 = $2;
     $176 = HEAP32[$175>>2]|0;
     $177 = $2;
     $178 = ((($177)) + 32|0);
     $179 = HEAP32[$178>>2]|0;
     _pj_param($14,$176,$179,12468);
     $180 = +HEAPF64[$14>>3];
     $11 = $180;
     $181 = $2;
     $182 = HEAP32[$181>>2]|0;
     $183 = $2;
     $184 = ((($183)) + 32|0);
     $185 = HEAP32[$184>>2]|0;
     _pj_param($15,$182,$185,12477);
     $186 = +HEAPF64[$15>>3];
     $12 = $186;
     $187 = $11;
     $188 = (+Math_abs((+$187)));
     $189 = $188 - 1.5707963267948966;
     $190 = (+Math_abs((+$189)));
     $191 = $190 <= 1.0E-10;
     if (!($191)) {
      $195 = $10;
      $196 = $12;
      $197 = (+Math_cos((+$196)));
      $198 = -$197;
      $199 = $12;
      $200 = (+Math_sin((+$199)));
      $201 = -$200;
      $202 = $11;
      $203 = (+Math_sin((+$202)));
      $204 = $201 * $203;
      $205 = (+_aatan2($198,$204));
      $206 = $195 + $205;
      $207 = $7;
      $208 = ((($207)) + 8|0);
      HEAPF64[$208>>3] = $206;
      $209 = $2;
      $210 = HEAP32[$209>>2]|0;
      $211 = $11;
      $212 = (+Math_cos((+$211)));
      $213 = $12;
      $214 = (+Math_sin((+$213)));
      $215 = $212 * $214;
      $216 = (+_aasin($210,$215));
      $4 = $216;
      break;
     }
     $192 = $2;
     $193 = HEAP32[$192>>2]|0;
     _pj_ctx_set_errno($193,-32);
     $194 = $2;
     _freeup_280($194);
     $1 = 0;
     $352 = $1;
     STACKTOP = sp;return ($352|0);
    } else {
     _pj_param($16,$170,$173,12486);
     $217 = HEAP32[$16>>2]|0;
     $218 = ($217|0)!=(0);
     $219 = $2;
     $220 = HEAP32[$219>>2]|0;
     $221 = $2;
     $222 = ((($221)) + 32|0);
     $223 = HEAP32[$222>>2]|0;
     if ($218) {
      _pj_param($17,$220,$223,12495);
      $224 = +HEAPF64[$17>>3];
      $225 = $7;
      $226 = ((($225)) + 8|0);
      HEAPF64[$226>>3] = $224;
      $227 = $2;
      $228 = HEAP32[$227>>2]|0;
      $229 = $2;
      $230 = ((($229)) + 32|0);
      $231 = HEAP32[$230>>2]|0;
      _pj_param($18,$228,$231,12504);
      $232 = +HEAPF64[$18>>3];
      $4 = $232;
      break;
     }
     _pj_param($24,$220,$223,12513);
     $233 = +HEAPF64[$24>>3];
     $19 = $233;
     $234 = $2;
     $235 = HEAP32[$234>>2]|0;
     $236 = $2;
     $237 = ((($236)) + 32|0);
     $238 = HEAP32[$237>>2]|0;
     _pj_param($25,$235,$238,12522);
     $239 = +HEAPF64[$25>>3];
     $21 = $239;
     $240 = $2;
     $241 = HEAP32[$240>>2]|0;
     $242 = $2;
     $243 = ((($242)) + 32|0);
     $244 = HEAP32[$243>>2]|0;
     _pj_param($26,$241,$244,12531);
     $245 = +HEAPF64[$26>>3];
     $20 = $245;
     $246 = $2;
     $247 = HEAP32[$246>>2]|0;
     $248 = $2;
     $249 = ((($248)) + 32|0);
     $250 = HEAP32[$249>>2]|0;
     _pj_param($27,$247,$250,12540);
     $251 = +HEAPF64[$27>>3];
     $22 = $251;
     $252 = $21;
     $253 = $22;
     $254 = $252 - $253;
     $255 = (+Math_abs((+$254)));
     $256 = $255 <= 1.0E-10;
     if (!($256)) {
      $257 = $21;
      $258 = (+Math_abs((+$257)));
      $23 = $258;
      $259 = $258 <= 1.0E-10;
      if (!($259)) {
       $260 = $23;
       $261 = $260 - 1.5707963267948966;
       $262 = (+Math_abs((+$261)));
       $263 = $262 <= 1.0E-10;
       if (!($263)) {
        $264 = $22;
        $265 = (+Math_abs((+$264)));
        $266 = $265 - 1.5707963267948966;
        $267 = (+Math_abs((+$266)));
        $268 = $267 <= 1.0E-10;
        if (!($268)) {
         $272 = $21;
         $273 = (+Math_cos((+$272)));
         $274 = $22;
         $275 = (+Math_sin((+$274)));
         $276 = $273 * $275;
         $277 = $19;
         $278 = (+Math_cos((+$277)));
         $279 = $276 * $278;
         $280 = $21;
         $281 = (+Math_sin((+$280)));
         $282 = $22;
         $283 = (+Math_cos((+$282)));
         $284 = $281 * $283;
         $285 = $20;
         $286 = (+Math_cos((+$285)));
         $287 = $284 * $286;
         $288 = $279 - $287;
         $289 = $21;
         $290 = (+Math_sin((+$289)));
         $291 = $22;
         $292 = (+Math_cos((+$291)));
         $293 = $290 * $292;
         $294 = $20;
         $295 = (+Math_sin((+$294)));
         $296 = $293 * $295;
         $297 = $21;
         $298 = (+Math_cos((+$297)));
         $299 = $22;
         $300 = (+Math_sin((+$299)));
         $301 = $298 * $300;
         $302 = $19;
         $303 = (+Math_sin((+$302)));
         $304 = $301 * $303;
         $305 = $296 - $304;
         $306 = (+Math_atan2((+$288),(+$305)));
         $307 = $7;
         $308 = ((($307)) + 8|0);
         HEAPF64[$308>>3] = $306;
         $309 = $7;
         $310 = ((($309)) + 8|0);
         $311 = +HEAPF64[$310>>3];
         $312 = $19;
         $313 = $311 - $312;
         $314 = (+Math_cos((+$313)));
         $315 = -$314;
         $316 = $21;
         $317 = (+Math_tan((+$316)));
         $318 = $315 / $317;
         $319 = (+Math_atan((+$318)));
         $4 = $319;
         break;
        }
       }
      }
     }
     $269 = $2;
     $270 = HEAP32[$269>>2]|0;
     _pj_ctx_set_errno($270,-33);
     $271 = $2;
     _freeup_280($271);
     $1 = 0;
     $352 = $1;
     STACKTOP = sp;return ($352|0);
    }
   } while(0);
   $320 = $4;
   $321 = (+Math_abs((+$320)));
   $322 = $321 > 1.0E-10;
   if ($322) {
    $323 = $4;
    $324 = (+Math_cos((+$323)));
    $325 = $7;
    $326 = ((($325)) + 16|0);
    HEAPF64[$326>>3] = $324;
    $327 = $4;
    $328 = (+Math_sin((+$327)));
    $329 = $7;
    $330 = ((($329)) + 24|0);
    HEAPF64[$330>>3] = $328;
    $331 = $2;
    $332 = ((($331)) + 4|0);
    HEAP32[$332>>2] = 310;
    $333 = $7;
    $334 = HEAP32[$333>>2]|0;
    $335 = ((($334)) + 8|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)!=(0|0);
    $338 = $337 ? 311 : 0;
    $339 = $2;
    $340 = ((($339)) + 8|0);
    HEAP32[$340>>2] = $338;
   } else {
    $341 = $2;
    $342 = ((($341)) + 4|0);
    HEAP32[$342>>2] = 312;
    $343 = $7;
    $344 = HEAP32[$343>>2]|0;
    $345 = ((($344)) + 8|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = ($346|0)!=(0|0);
    $348 = $347 ? 313 : 0;
    $349 = $2;
    $350 = ((($349)) + 8|0);
    HEAP32[$350>>2] = $348;
   }
   $351 = $2;
   $1 = $351;
   $352 = $1;
   STACKTOP = sp;return ($352|0);
  }
 }
 $65 = $2;
 $66 = HEAP32[$65>>2]|0;
 _pj_ctx_set_errno($66,-37);
 $67 = $2;
 _freeup_280($67);
 $1 = 0;
 $352 = $1;
 STACKTOP = sp;return ($352|0);
}
function _freeup_280($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_281($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_281($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   }
   $11 = ((($9)) + 416|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   $15 = $2;
   $16 = ((($15)) + 416|0);
   $17 = HEAP32[$16>>2]|0;
   if ($14) {
    $18 = HEAP32[$17>>2]|0;
    $19 = (_pj_dealloc($18)|0);
    $1 = $19;
    break;
   } else {
    (_pj_dealloc($17)|0);
    $20 = $2;
    $21 = (_pj_dealloc($20)|0);
    $1 = $21;
    break;
   }
  }
 } while(0);
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function _o_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $3 = $2;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = +HEAPF64[$1>>3];
 $12 = (+Math_cos((+$11)));
 $5 = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_sin((+$14)));
 $6 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_cos((+$17)));
 $7 = $18;
 $19 = $7;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_sin((+$20)));
 $22 = $19 * $21;
 $23 = $4;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $7;
 $27 = $25 * $26;
 $28 = $5;
 $29 = $27 * $28;
 $30 = $4;
 $31 = ((($30)) + 16|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $6;
 $34 = $32 * $33;
 $35 = $29 + $34;
 $36 = (+_aatan2($22,$35));
 $37 = $4;
 $38 = ((($37)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 + $39;
 $41 = (+_adjlon($40));
 HEAPF64[$1>>3] = $41;
 $42 = $3;
 $43 = HEAP32[$42>>2]|0;
 $44 = $4;
 $45 = ((($44)) + 24|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $6;
 $48 = $46 * $47;
 $49 = $4;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $7;
 $53 = $51 * $52;
 $54 = $5;
 $55 = $53 * $54;
 $56 = $48 - $55;
 $57 = (+_aasin($43,$56));
 $58 = ((($1)) + 8|0);
 HEAPF64[$58>>3] = $57;
 $59 = $4;
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $4;
 $64 = HEAP32[$63>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 FUNCTION_TABLE_viii[$62 & 511]($0,$$byval_copy,$64);
 STACKTOP = sp;return;
}
function _o_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 56|0;
 $4 = sp + 40|0;
 $9 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = HEAP32[$17>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 FUNCTION_TABLE_viii[$16 & 511]($9,$$byval_copy,$18);
 ;HEAP32[$4>>2]=HEAP32[$9>>2]|0;HEAP32[$4+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$9+12>>2]|0;
 $19 = +HEAPF64[$4>>3];
 $20 = $19 != inf;
 if (!($20)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = +HEAPF64[$4>>3];
 $25 = $24 - $23;
 HEAPF64[$4>>3] = $25;
 $26 = (+Math_cos((+$25)));
 $6 = $26;
 $27 = ((($4)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_sin((+$28)));
 $7 = $29;
 $30 = ((($4)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (+Math_cos((+$31)));
 $8 = $32;
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $35 = $5;
 $36 = ((($35)) + 24|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $7;
 $39 = $37 * $38;
 $40 = $5;
 $41 = ((($40)) + 16|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $8;
 $44 = $42 * $43;
 $45 = $6;
 $46 = $44 * $45;
 $47 = $39 + $46;
 $48 = (+_aasin($34,$47));
 $49 = ((($4)) + 8|0);
 HEAPF64[$49>>3] = $48;
 $50 = $8;
 $51 = +HEAPF64[$4>>3];
 $52 = (+Math_sin((+$51)));
 $53 = $50 * $52;
 $54 = $5;
 $55 = ((($54)) + 24|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $8;
 $58 = $56 * $57;
 $59 = $6;
 $60 = $58 * $59;
 $61 = $5;
 $62 = ((($61)) + 16|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $7;
 $65 = $63 * $64;
 $66 = $60 - $65;
 $67 = (+_aatan2($53,$66));
 HEAPF64[$4>>3] = $67;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _t_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $3 = $2;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_cos((+$11)));
 $5 = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = (+Math_cos((+$13)));
 $6 = $14;
 $15 = $5;
 $16 = +HEAPF64[$1>>3];
 $17 = (+Math_sin((+$16)));
 $18 = $15 * $17;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_sin((+$20)));
 $22 = (+_aatan2($18,$21));
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 + $25;
 $27 = (+_adjlon($26));
 HEAPF64[$1>>3] = $27;
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $30 = $5;
 $31 = -$30;
 $32 = $6;
 $33 = $31 * $32;
 $34 = (+_aasin($29,$33));
 $35 = ((($1)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = HEAP32[$40>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 FUNCTION_TABLE_viii[$39 & 511]($0,$$byval_copy,$41);
 STACKTOP = sp;return;
}
function _t_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $4 = sp + 32|0;
 $8 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 FUNCTION_TABLE_viii[$15 & 511]($8,$$byval_copy,$17);
 ;HEAP32[$4>>2]=HEAP32[$8>>2]|0;HEAP32[$4+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$8+12>>2]|0;
 $18 = +HEAPF64[$4>>3];
 $19 = $18 != inf;
 if (!($19)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $20 = ((($4)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_cos((+$21)));
 $6 = $22;
 $23 = +HEAPF64[$4>>3];
 $24 = $5;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 - $26;
 $7 = $27;
 $28 = $6;
 $29 = $7;
 $30 = (+Math_sin((+$29)));
 $31 = $28 * $30;
 $32 = ((($4)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (+Math_sin((+$33)));
 $35 = -$34;
 $36 = (+_aatan2($31,$35));
 HEAPF64[$4>>3] = $36;
 $37 = $3;
 $38 = HEAP32[$37>>2]|0;
 $39 = $6;
 $40 = $7;
 $41 = (+Math_cos((+$40)));
 $42 = $39 * $41;
 $43 = (+_aasin($38,$42));
 $44 = ((($4)) + 8|0);
 HEAPF64[$44>>3] = $43;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_oea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_oea($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 314;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12549;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_oea($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $2 = $0;
 $7 = (_pj_calloc(1,88)|0);
 $3 = $7;
 $8 = $3;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_freeup_new_295($10)|0);
  $1 = $11;
  $98 = $1;
  STACKTOP = sp;return ($98|0);
 }
 $12 = $3;
 $13 = $2;
 $14 = ((($13)) + 416|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _pj_param($4,$16,$19,14943);
 $20 = +HEAPF64[$4>>3];
 $21 = $3;
 $22 = ((($21)) + 16|0);
 HEAPF64[$22>>3] = $20;
 $23 = $20 <= 0.0;
 if (!($23)) {
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  _pj_param($5,$25,$28,18337);
  $29 = +HEAPF64[$5>>3];
  $30 = $3;
  $31 = ((($30)) + 8|0);
  HEAPF64[$31>>3] = $29;
  $32 = $29 <= 0.0;
  if (!($32)) {
   $36 = $2;
   $37 = HEAP32[$36>>2]|0;
   $38 = $2;
   $39 = ((($38)) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   _pj_param($6,$37,$40,12592);
   $41 = +HEAPF64[$6>>3];
   $42 = $3;
   HEAPF64[$42>>3] = $41;
   $43 = $2;
   $44 = ((($43)) + 128|0);
   $45 = +HEAPF64[$44>>3];
   $46 = (+Math_sin((+$45)));
   $47 = $3;
   $48 = ((($47)) + 80|0);
   HEAPF64[$48>>3] = $46;
   $49 = $2;
   $50 = ((($49)) + 128|0);
   $51 = +HEAPF64[$50>>3];
   $52 = (+Math_cos((+$51)));
   $53 = $3;
   $54 = ((($53)) + 72|0);
   HEAPF64[$54>>3] = $52;
   $55 = $3;
   $56 = ((($55)) + 16|0);
   $57 = +HEAPF64[$56>>3];
   $58 = 1.0 / $57;
   $59 = $3;
   $60 = ((($59)) + 48|0);
   HEAPF64[$60>>3] = $58;
   $61 = $3;
   $62 = ((($61)) + 8|0);
   $63 = +HEAPF64[$62>>3];
   $64 = 1.0 / $63;
   $65 = $3;
   $66 = ((($65)) + 40|0);
   HEAPF64[$66>>3] = $64;
   $67 = $3;
   $68 = ((($67)) + 48|0);
   $69 = +HEAPF64[$68>>3];
   $70 = 2.0 * $69;
   $71 = $3;
   $72 = ((($71)) + 32|0);
   HEAPF64[$72>>3] = $70;
   $73 = $3;
   $74 = ((($73)) + 40|0);
   $75 = +HEAPF64[$74>>3];
   $76 = 2.0 * $75;
   $77 = $3;
   $78 = ((($77)) + 24|0);
   HEAPF64[$78>>3] = $76;
   $79 = $3;
   $80 = ((($79)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = 0.5 * $81;
   $83 = $3;
   $84 = ((($83)) + 56|0);
   HEAPF64[$84>>3] = $82;
   $85 = $3;
   $86 = ((($85)) + 16|0);
   $87 = +HEAPF64[$86>>3];
   $88 = 0.5 * $87;
   $89 = $3;
   $90 = ((($89)) + 64|0);
   HEAPF64[$90>>3] = $88;
   $91 = $2;
   $92 = ((($91)) + 4|0);
   HEAP32[$92>>2] = 315;
   $93 = $2;
   $94 = ((($93)) + 8|0);
   HEAP32[$94>>2] = 316;
   $95 = $2;
   $96 = ((($95)) + 72|0);
   HEAPF64[$96>>3] = 0.0;
   $97 = $2;
   $1 = $97;
   $98 = $1;
   STACKTOP = sp;return ($98|0);
  }
 }
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 _pj_ctx_set_errno($34,-39);
 $35 = $2;
 _freeup_294($35);
 $1 = 0;
 $98 = $1;
 STACKTOP = sp;return ($98|0);
}
function _freeup_294($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_295($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_295($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_299($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_cos((+$17)));
 $9 = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_sin((+$20)));
 $10 = $21;
 $22 = +HEAPF64[$1>>3];
 $23 = (+Math_cos((+$22)));
 $11 = $23;
 $24 = $9;
 $25 = +HEAPF64[$1>>3];
 $26 = (+Math_sin((+$25)));
 $27 = $24 * $26;
 $28 = $5;
 $29 = ((($28)) + 72|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $10;
 $32 = $30 * $31;
 $33 = $5;
 $34 = ((($33)) + 80|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $9;
 $37 = $35 * $36;
 $38 = $11;
 $39 = $37 * $38;
 $40 = $32 - $39;
 $41 = (+_aatan2($27,$40));
 $42 = $5;
 $43 = +HEAPF64[$42>>3];
 $44 = $41 + $43;
 $6 = $44;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $5;
 $48 = ((($47)) + 80|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $10;
 $51 = $49 * $50;
 $52 = $5;
 $53 = ((($52)) + 72|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $9;
 $56 = $54 * $55;
 $57 = $11;
 $58 = $56 * $57;
 $59 = $51 + $58;
 $60 = (+_aacos($46,$59));
 $61 = 0.5 * $60;
 $62 = (+Math_sin((+$61)));
 $12 = $62;
 $63 = $3;
 $64 = HEAP32[$63>>2]|0;
 $65 = $12;
 $66 = $6;
 $67 = (+Math_sin((+$66)));
 $68 = $65 * $67;
 $69 = (+_aasin($64,$68));
 $7 = $69;
 $70 = $3;
 $71 = HEAP32[$70>>2]|0;
 $72 = $12;
 $73 = $6;
 $74 = (+Math_cos((+$73)));
 $75 = $72 * $74;
 $76 = $7;
 $77 = (+Math_cos((+$76)));
 $78 = $75 * $77;
 $79 = $7;
 $80 = $5;
 $81 = ((($80)) + 24|0);
 $82 = +HEAPF64[$81>>3];
 $83 = $79 * $82;
 $84 = (+Math_cos((+$83)));
 $85 = $78 / $84;
 $86 = (+_aasin($71,$85));
 $8 = $86;
 $87 = $5;
 $88 = ((($87)) + 16|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $8;
 $91 = $5;
 $92 = ((($91)) + 32|0);
 $93 = +HEAPF64[$92>>3];
 $94 = $90 * $93;
 $95 = (+Math_sin((+$94)));
 $96 = $89 * $95;
 $97 = ((($4)) + 8|0);
 HEAPF64[$97>>3] = $96;
 $98 = $5;
 $99 = ((($98)) + 8|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $7;
 $102 = $5;
 $103 = ((($102)) + 24|0);
 $104 = +HEAPF64[$103>>3];
 $105 = $101 * $104;
 $106 = (+Math_sin((+$105)));
 $107 = $100 * $106;
 $108 = $8;
 $109 = (+Math_cos((+$108)));
 $110 = $107 * $109;
 $111 = $8;
 $112 = $5;
 $113 = ((($112)) + 32|0);
 $114 = +HEAPF64[$113>>3];
 $115 = $111 * $114;
 $116 = (+Math_cos((+$115)));
 $117 = $110 / $116;
 HEAPF64[$4>>3] = $117;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_300($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 72|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = $5;
 $19 = ((($18)) + 64|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($1)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 * $27;
 $29 = (+_aasin($22,$28));
 $30 = $20 * $29;
 $6 = $30;
 $31 = $5;
 $32 = ((($31)) + 56|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = +HEAPF64[$1>>3];
 $37 = $5;
 $38 = ((($37)) + 40|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 * $39;
 $41 = $6;
 $42 = $5;
 $43 = ((($42)) + 32|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $41 * $44;
 $46 = (+Math_cos((+$45)));
 $47 = $40 * $46;
 $48 = $6;
 $49 = (+Math_cos((+$48)));
 $50 = $47 / $49;
 $51 = (+_aasin($35,$50));
 $52 = $33 * $51;
 $7 = $52;
 $53 = $7;
 $54 = (+Math_sin((+$53)));
 $55 = 2.0 * $54;
 $8 = $55;
 $56 = $6;
 $57 = (+Math_sin((+$56)));
 $58 = 2.0 * $57;
 $59 = $7;
 $60 = $5;
 $61 = ((($60)) + 24|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $59 * $62;
 $64 = (+Math_cos((+$63)));
 $65 = $58 * $64;
 $66 = $7;
 $67 = (+Math_cos((+$66)));
 $68 = $65 / $67;
 $9 = $68;
 $69 = $8;
 $70 = $9;
 $71 = (+_aatan2($69,$70));
 $72 = $5;
 $73 = +HEAPF64[$72>>3];
 $74 = $71 - $73;
 $11 = $74;
 $75 = (+Math_cos((+$74)));
 $14 = $75;
 $76 = $3;
 $77 = HEAP32[$76>>2]|0;
 $78 = $8;
 $79 = $9;
 $80 = (+_hypot($78,$79));
 $81 = 0.5 * $80;
 $82 = (+_aasin($77,$81));
 $83 = 2.0 * $82;
 $10 = $83;
 $84 = $10;
 $85 = (+Math_sin((+$84)));
 $13 = $85;
 $86 = $10;
 $87 = (+Math_cos((+$86)));
 $12 = $87;
 $88 = $3;
 $89 = HEAP32[$88>>2]|0;
 $90 = $5;
 $91 = ((($90)) + 80|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $12;
 $94 = $92 * $93;
 $95 = $5;
 $96 = ((($95)) + 72|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $13;
 $99 = $97 * $98;
 $100 = $14;
 $101 = $99 * $100;
 $102 = $94 + $101;
 $103 = (+_aasin($89,$102));
 $104 = ((($4)) + 8|0);
 HEAPF64[$104>>3] = $103;
 $105 = $13;
 $106 = $11;
 $107 = (+Math_sin((+$106)));
 $108 = $105 * $107;
 $109 = $5;
 $110 = ((($109)) + 72|0);
 $111 = +HEAPF64[$110>>3];
 $112 = $12;
 $113 = $111 * $112;
 $114 = $5;
 $115 = ((($114)) + 80|0);
 $116 = +HEAPF64[$115>>3];
 $117 = $13;
 $118 = $116 * $117;
 $119 = $14;
 $120 = $118 * $119;
 $121 = $113 - $120;
 $122 = (+_aatan2($108,$121));
 HEAPF64[$4>>3] = $122;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_tpeqd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_tpeqd($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 317;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12599;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_tpeqd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0;
 var $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp;
 $2 = $0;
 $14 = (_pj_calloc(1,136)|0);
 $9 = $14;
 $15 = $9;
 $16 = (0|0)==($15|0);
 if ($16) {
  $17 = $2;
  $18 = (_freeup_new_302($17)|0);
  $1 = $18;
  $255 = $1;
  STACKTOP = sp;return ($255|0);
 }
 $19 = $9;
 $20 = $2;
 $21 = ((($20)) + 416|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 _pj_param($10,$23,$26,15081);
 $27 = +HEAPF64[$10>>3];
 $5 = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = $2;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _pj_param($11,$29,$32,12660);
 $33 = +HEAPF64[$11>>3];
 $3 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 _pj_param($12,$35,$38,12667);
 $39 = +HEAPF64[$12>>3];
 $6 = $39;
 $40 = $2;
 $41 = HEAP32[$40>>2]|0;
 $42 = $2;
 $43 = ((($42)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 _pj_param($13,$41,$44,12674);
 $45 = +HEAPF64[$13>>3];
 $4 = $45;
 $46 = $5;
 $47 = $6;
 $48 = $46 == $47;
 if ($48) {
  $49 = $3;
  $50 = $4;
  $51 = $49 == $50;
  if ($51) {
   $52 = $2;
   $53 = HEAP32[$52>>2]|0;
   _pj_ctx_set_errno($53,-25);
   $54 = $2;
   _freeup_301($54);
   $1 = 0;
   $255 = $1;
   STACKTOP = sp;return ($255|0);
  }
 }
 $55 = $3;
 $56 = $4;
 $57 = $55 + $56;
 $58 = 0.5 * $57;
 $59 = (+_adjlon($58));
 $60 = $2;
 $61 = ((($60)) + 120|0);
 HEAPF64[$61>>3] = $59;
 $62 = $4;
 $63 = $3;
 $64 = $62 - $63;
 $65 = (+_adjlon($64));
 $66 = $9;
 $67 = ((($66)) + 72|0);
 HEAPF64[$67>>3] = $65;
 $68 = $5;
 $69 = (+Math_cos((+$68)));
 $70 = $9;
 HEAPF64[$70>>3] = $69;
 $71 = $6;
 $72 = (+Math_cos((+$71)));
 $73 = $9;
 $74 = ((($73)) + 16|0);
 HEAPF64[$74>>3] = $72;
 $75 = $5;
 $76 = (+Math_sin((+$75)));
 $77 = $9;
 $78 = ((($77)) + 8|0);
 HEAPF64[$78>>3] = $76;
 $79 = $6;
 $80 = (+Math_sin((+$79)));
 $81 = $9;
 $82 = ((($81)) + 24|0);
 HEAPF64[$82>>3] = $80;
 $83 = $9;
 $84 = +HEAPF64[$83>>3];
 $85 = $9;
 $86 = ((($85)) + 24|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $84 * $87;
 $89 = $9;
 $90 = ((($89)) + 40|0);
 HEAPF64[$90>>3] = $88;
 $91 = $9;
 $92 = ((($91)) + 8|0);
 $93 = +HEAPF64[$92>>3];
 $94 = $9;
 $95 = ((($94)) + 16|0);
 $96 = +HEAPF64[$95>>3];
 $97 = $93 * $96;
 $98 = $9;
 $99 = ((($98)) + 48|0);
 HEAPF64[$99>>3] = $97;
 $100 = $9;
 $101 = +HEAPF64[$100>>3];
 $102 = $9;
 $103 = ((($102)) + 16|0);
 $104 = +HEAPF64[$103>>3];
 $105 = $101 * $104;
 $106 = $9;
 $107 = ((($106)) + 72|0);
 $108 = +HEAPF64[$107>>3];
 $109 = (+Math_sin((+$108)));
 $110 = $105 * $109;
 $111 = $9;
 $112 = ((($111)) + 32|0);
 HEAPF64[$112>>3] = $110;
 $113 = $2;
 $114 = HEAP32[$113>>2]|0;
 $115 = $9;
 $116 = ((($115)) + 8|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $9;
 $119 = ((($118)) + 24|0);
 $120 = +HEAPF64[$119>>3];
 $121 = $117 * $120;
 $122 = $9;
 $123 = +HEAPF64[$122>>3];
 $124 = $9;
 $125 = ((($124)) + 16|0);
 $126 = +HEAPF64[$125>>3];
 $127 = $123 * $126;
 $128 = $9;
 $129 = ((($128)) + 72|0);
 $130 = +HEAPF64[$129>>3];
 $131 = (+Math_cos((+$130)));
 $132 = $127 * $131;
 $133 = $121 + $132;
 $134 = (+_aacos($114,$133));
 $135 = $9;
 $136 = ((($135)) + 64|0);
 HEAPF64[$136>>3] = $134;
 $137 = $9;
 $138 = ((($137)) + 64|0);
 $139 = +HEAPF64[$138>>3];
 $140 = 0.5 * $139;
 $141 = $9;
 $142 = ((($141)) + 80|0);
 HEAPF64[$142>>3] = $140;
 $143 = $9;
 $144 = ((($143)) + 16|0);
 $145 = +HEAPF64[$144>>3];
 $146 = $9;
 $147 = ((($146)) + 72|0);
 $148 = +HEAPF64[$147>>3];
 $149 = (+Math_sin((+$148)));
 $150 = $145 * $149;
 $151 = $9;
 $152 = +HEAPF64[$151>>3];
 $153 = $9;
 $154 = ((($153)) + 24|0);
 $155 = +HEAPF64[$154>>3];
 $156 = $152 * $155;
 $157 = $9;
 $158 = ((($157)) + 8|0);
 $159 = +HEAPF64[$158>>3];
 $160 = $9;
 $161 = ((($160)) + 16|0);
 $162 = +HEAPF64[$161>>3];
 $163 = $159 * $162;
 $164 = $9;
 $165 = ((($164)) + 72|0);
 $166 = +HEAPF64[$165>>3];
 $167 = (+Math_cos((+$166)));
 $168 = $163 * $167;
 $169 = $156 - $168;
 $170 = (+Math_atan2((+$150),(+$169)));
 $7 = $170;
 $171 = $2;
 $172 = HEAP32[$171>>2]|0;
 $173 = $9;
 $174 = +HEAPF64[$173>>3];
 $175 = $7;
 $176 = (+Math_sin((+$175)));
 $177 = $174 * $176;
 $178 = (+_aasin($172,$177));
 $8 = $178;
 $179 = (+Math_cos((+$178)));
 $180 = $9;
 $181 = ((($180)) + 104|0);
 HEAPF64[$181>>3] = $179;
 $182 = $8;
 $183 = (+Math_sin((+$182)));
 $184 = $9;
 $185 = ((($184)) + 112|0);
 HEAPF64[$185>>3] = $183;
 $186 = $9;
 $187 = +HEAPF64[$186>>3];
 $188 = $7;
 $189 = (+Math_cos((+$188)));
 $190 = $187 * $189;
 $191 = $9;
 $192 = ((($191)) + 8|0);
 $193 = +HEAPF64[$192>>3];
 $194 = (+Math_atan2((+$190),(+$193)));
 $195 = $9;
 $196 = ((($195)) + 80|0);
 $197 = +HEAPF64[$196>>3];
 $198 = $194 - $197;
 $199 = (+_adjlon($198));
 $200 = $9;
 $201 = ((($200)) + 120|0);
 HEAPF64[$201>>3] = $199;
 $202 = $9;
 $203 = ((($202)) + 72|0);
 $204 = +HEAPF64[$203>>3];
 $205 = $204 * 0.5;
 HEAPF64[$203>>3] = $205;
 $206 = $7;
 $207 = (+Math_sin((+$206)));
 $208 = $9;
 $209 = ((($208)) + 8|0);
 $210 = +HEAPF64[$209>>3];
 $211 = $207 * $210;
 $212 = $7;
 $213 = (+Math_cos((+$212)));
 $214 = (+Math_atan2((+$211),(+$213)));
 $215 = 1.5707963267948966 - $214;
 $216 = $9;
 $217 = ((($216)) + 72|0);
 $218 = +HEAPF64[$217>>3];
 $219 = $215 - $218;
 $220 = $9;
 $221 = ((($220)) + 128|0);
 HEAPF64[$221>>3] = $219;
 $222 = $9;
 $223 = ((($222)) + 80|0);
 $224 = +HEAPF64[$223>>3];
 $225 = (+Math_tan((+$224)));
 $226 = $9;
 $227 = ((($226)) + 88|0);
 HEAPF64[$227>>3] = $225;
 $228 = $9;
 $229 = ((($228)) + 80|0);
 $230 = +HEAPF64[$229>>3];
 $231 = (+Math_sin((+$230)));
 $232 = 0.5 / $231;
 $233 = $9;
 $234 = ((($233)) + 96|0);
 HEAPF64[$234>>3] = $232;
 $235 = $9;
 $236 = ((($235)) + 64|0);
 $237 = +HEAPF64[$236>>3];
 $238 = 0.5 / $237;
 $239 = $9;
 $240 = ((($239)) + 56|0);
 HEAPF64[$240>>3] = $238;
 $241 = $9;
 $242 = ((($241)) + 64|0);
 $243 = +HEAPF64[$242>>3];
 $244 = $9;
 $245 = ((($244)) + 64|0);
 $246 = +HEAPF64[$245>>3];
 $247 = $246 * $243;
 HEAPF64[$245>>3] = $247;
 $248 = $2;
 $249 = ((($248)) + 8|0);
 HEAP32[$249>>2] = 318;
 $250 = $2;
 $251 = ((($250)) + 4|0);
 HEAP32[$251>>2] = 319;
 $252 = $2;
 $253 = ((($252)) + 72|0);
 HEAPF64[$253>>3] = 0.0;
 $254 = $2;
 $1 = $254;
 $255 = $1;
 STACKTOP = sp;return ($255|0);
}
function _freeup_301($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_302($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_302($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_307($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = $3;
 $13 = ((($12)) + 416|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = +HEAPF64[$1>>3];
 $18 = $5;
 $19 = ((($18)) + 80|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 + $20;
 $22 = (+_hypot($16,$21));
 $23 = (+Math_cos((+$22)));
 $6 = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = +HEAPF64[$1>>3];
 $27 = $5;
 $28 = ((($27)) + 80|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = (+_hypot($25,$30));
 $32 = (+Math_cos((+$31)));
 $7 = $32;
 $33 = $6;
 $34 = $7;
 $35 = $33 + $34;
 $8 = $35;
 $36 = $6;
 $37 = $7;
 $38 = $36 - $37;
 $9 = $38;
 $39 = $9;
 $40 = $8;
 $41 = $5;
 $42 = ((($41)) + 88|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $40 * $43;
 $45 = (+Math_atan2((+$39),(+$44)));
 $46 = -$45;
 HEAPF64[$4>>3] = $46;
 $47 = $3;
 $48 = HEAP32[$47>>2]|0;
 $49 = $5;
 $50 = ((($49)) + 88|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $8;
 $53 = $51 * $52;
 $54 = $9;
 $55 = (+_hypot($53,$54));
 $56 = $5;
 $57 = ((($56)) + 96|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $55 * $58;
 $60 = (+_aacos($48,$59));
 $61 = ((($4)) + 8|0);
 HEAPF64[$61>>3] = $60;
 $62 = ((($1)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $63 < 0.0;
 if ($64) {
  $65 = ((($4)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = -$66;
  $68 = ((($4)) + 8|0);
  HEAPF64[$68>>3] = $67;
 }
 $69 = ((($4)) + 8|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (+Math_sin((+$70)));
 $11 = $71;
 $72 = ((($4)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = (+Math_cos((+$73)));
 $10 = $74;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = ((($77)) + 112|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $11;
 $81 = $79 * $80;
 $82 = $5;
 $83 = ((($82)) + 104|0);
 $84 = +HEAPF64[$83>>3];
 $85 = $10;
 $86 = $84 * $85;
 $87 = $5;
 $88 = ((($87)) + 120|0);
 $89 = +HEAPF64[$88>>3];
 $90 = +HEAPF64[$4>>3];
 $91 = $90 - $89;
 HEAPF64[$4>>3] = $91;
 $92 = (+Math_cos((+$91)));
 $8 = $92;
 $93 = $86 * $92;
 $94 = $81 + $93;
 $95 = (+_aasin($76,$94));
 $96 = ((($4)) + 8|0);
 HEAPF64[$96>>3] = $95;
 $97 = $10;
 $98 = +HEAPF64[$4>>3];
 $99 = (+Math_sin((+$98)));
 $100 = $97 * $99;
 $101 = $5;
 $102 = ((($101)) + 112|0);
 $103 = +HEAPF64[$102>>3];
 $104 = $10;
 $105 = $103 * $104;
 $106 = $8;
 $107 = $105 * $106;
 $108 = $5;
 $109 = ((($108)) + 104|0);
 $110 = +HEAPF64[$109>>3];
 $111 = $11;
 $112 = $110 * $111;
 $113 = $107 - $112;
 $114 = (+Math_atan2((+$100),(+$113)));
 $115 = $5;
 $116 = ((($115)) + 128|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $114 + $117;
 HEAPF64[$4>>3] = $118;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_308($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_sin((+$17)));
 $11 = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_cos((+$20)));
 $12 = $21;
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $24 = $5;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $11;
 $28 = $26 * $27;
 $29 = $5;
 $30 = +HEAPF64[$29>>3];
 $31 = $12;
 $32 = $30 * $31;
 $33 = +HEAPF64[$1>>3];
 $34 = $5;
 $35 = ((($34)) + 72|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $33 + $36;
 $9 = $37;
 $38 = (+Math_cos((+$37)));
 $39 = $32 * $38;
 $40 = $28 + $39;
 $41 = (+_aacos($23,$40));
 $7 = $41;
 $42 = $3;
 $43 = HEAP32[$42>>2]|0;
 $44 = $5;
 $45 = ((($44)) + 24|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $11;
 $48 = $46 * $47;
 $49 = $5;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $12;
 $53 = $51 * $52;
 $54 = +HEAPF64[$1>>3];
 $55 = $5;
 $56 = ((($55)) + 72|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $54 - $57;
 $10 = $58;
 $59 = (+Math_cos((+$58)));
 $60 = $53 * $59;
 $61 = $48 + $60;
 $62 = (+_aacos($43,$61));
 $8 = $62;
 $63 = $7;
 $64 = $7;
 $65 = $64 * $63;
 $7 = $65;
 $66 = $8;
 $67 = $8;
 $68 = $67 * $66;
 $8 = $68;
 $69 = $5;
 $70 = ((($69)) + 56|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $7;
 $73 = $8;
 $74 = $72 - $73;
 $6 = $74;
 $75 = $71 * $74;
 HEAPF64[$4>>3] = $75;
 $76 = $5;
 $77 = ((($76)) + 64|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $6;
 $80 = $78 - $79;
 $6 = $80;
 $81 = $5;
 $82 = ((($81)) + 56|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $5;
 $85 = ((($84)) + 64|0);
 $86 = +HEAPF64[$85>>3];
 $87 = 4.0 * $86;
 $88 = $8;
 $89 = $87 * $88;
 $90 = $6;
 $91 = $6;
 $92 = $90 * $91;
 $93 = $89 - $92;
 $94 = (+_asqrt($93));
 $95 = $83 * $94;
 $96 = ((($4)) + 8|0);
 HEAPF64[$96>>3] = $95;
 $97 = $5;
 $98 = ((($97)) + 32|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $11;
 $101 = $99 * $100;
 $102 = $12;
 $103 = $5;
 $104 = ((($103)) + 40|0);
 $105 = +HEAPF64[$104>>3];
 $106 = $9;
 $107 = (+Math_sin((+$106)));
 $108 = $105 * $107;
 $109 = $5;
 $110 = ((($109)) + 48|0);
 $111 = +HEAPF64[$110>>3];
 $112 = $10;
 $113 = (+Math_sin((+$112)));
 $114 = $111 * $113;
 $115 = $108 - $114;
 $116 = $102 * $115;
 $117 = $101 - $116;
 $118 = $117 < 0.0;
 if (!($118)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $119 = ((($4)) + 8|0);
 $120 = +HEAPF64[$119>>3];
 $121 = -$120;
 $122 = ((($4)) + 8|0);
 HEAPF64[$122>>3] = $121;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_vandg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_vandg($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 320;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12681;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_vandg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 321;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 322;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_309($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_310($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_310($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_311($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0;
 var $172 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 104|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $18 = +HEAPF64[$1>>3];
 $19 = +HEAPF64[$1>>3];
 $20 = $18 * $19;
 $16 = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_abs((+$22)));
 $15 = $23;
 $24 = $23 < 1.0E-10;
 if ($24) {
  $25 = ((($4)) + 8|0);
  HEAPF64[$25>>3] = 0.0;
  $26 = $16;
  $27 = $16;
  $28 = $26 * $27;
  $29 = $16;
  $30 = $29 + 4.934802200544679;
  $31 = 19.739208802178716 * $30;
  $32 = $28 + $31;
  $5 = $32;
  $33 = +HEAPF64[$1>>3];
  $34 = (+Math_abs((+$33)));
  $35 = $34 <= 1.0E-10;
  if ($35) {
   $44 = 0.0;
  } else {
   $36 = $16;
   $37 = $36 - 9.869604401089358;
   $38 = $5;
   $39 = (+Math_sqrt((+$38)));
   $40 = $37 + $39;
   $41 = 0.5 * $40;
   $42 = +HEAPF64[$1>>3];
   $43 = $41 / $42;
   $44 = $43;
  }
  HEAPF64[$4>>3] = $44;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $45 = ((($1)) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = ((($1)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $46 * $48;
 $17 = $49;
 $50 = $16;
 $51 = $17;
 $52 = $50 + $51;
 $12 = $52;
 $53 = $12;
 $54 = $12;
 $55 = $53 * $54;
 $11 = $55;
 $56 = $15;
 $57 = -3.1415926535897931 * $56;
 $58 = $12;
 $59 = $58 + 9.869604401089358;
 $60 = $57 * $59;
 $7 = $60;
 $61 = $11;
 $62 = $15;
 $63 = $12;
 $64 = $62 * $63;
 $65 = $17;
 $66 = $15;
 $67 = $66 + 1.5707963267948966;
 $68 = 3.1415926535897931 * $67;
 $69 = $65 + $68;
 $70 = 3.1415926535897931 * $69;
 $71 = $64 + $70;
 $72 = 6.2831853071795862 * $71;
 $73 = $61 + $72;
 $9 = $73;
 $74 = $7;
 $75 = $12;
 $76 = $17;
 $77 = 3.0 * $76;
 $78 = $75 - $77;
 $79 = 9.869604401089358 * $78;
 $80 = $74 + $79;
 $8 = $80;
 $81 = $15;
 $82 = 3.1415926535897931 * $81;
 $6 = $82;
 $83 = $9;
 $84 = $8;
 $85 = $84 / $83;
 $8 = $85;
 $86 = $7;
 $87 = $9;
 $88 = $86 / $87;
 $89 = $8;
 $90 = 0.33333333333333331 * $89;
 $91 = $8;
 $92 = $90 * $91;
 $93 = $88 - $92;
 $10 = $93;
 $94 = $10;
 $95 = -0.33333333333333331 * $94;
 $96 = (+Math_sqrt((+$95)));
 $97 = 2.0 * $96;
 $13 = $97;
 $98 = $8;
 $99 = 0.07407407407407407 * $98;
 $100 = $8;
 $101 = $99 * $100;
 $102 = $8;
 $103 = $101 * $102;
 $104 = $6;
 $105 = $6;
 $106 = $104 * $105;
 $107 = $8;
 $108 = 0.33333333333333331 * $107;
 $109 = $7;
 $110 = $108 * $109;
 $111 = $106 - $110;
 $112 = $9;
 $113 = $111 / $112;
 $114 = $103 + $113;
 $14 = $114;
 $115 = $14;
 $116 = 3.0 * $115;
 $117 = $10;
 $118 = $13;
 $119 = $117 * $118;
 $120 = $116 / $119;
 $14 = $120;
 $121 = (+Math_abs((+$120)));
 $5 = $121;
 $122 = $121 - 1.0E-10;
 $123 = $122 <= 1.0;
 if (!($123)) {
  $171 = $3;
  $172 = HEAP32[$171>>2]|0;
  _pj_ctx_set_errno($172,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $124 = $5;
 $125 = $124 > 1.0;
 $126 = $14;
 if ($125) {
  $127 = $126 > 0.0;
  $128 = $127 ? 0.0 : 3.1415926535897931;
  $130 = $128;
 } else {
  $129 = (+Math_acos((+$126)));
  $130 = $129;
 }
 $14 = $130;
 $131 = $13;
 $132 = $14;
 $133 = $132 * 0.33333333333333331;
 $134 = $133 + 4.1887902047863914;
 $135 = (+Math_cos((+$134)));
 $136 = $131 * $135;
 $137 = $8;
 $138 = 0.33333333333333331 * $137;
 $139 = $136 - $138;
 $140 = 3.1415926535897931 * $139;
 $141 = ((($4)) + 8|0);
 HEAPF64[$141>>3] = $140;
 $142 = ((($1)) + 8|0);
 $143 = +HEAPF64[$142>>3];
 $144 = $143 < 0.0;
 if ($144) {
  $145 = ((($4)) + 8|0);
  $146 = +HEAPF64[$145>>3];
  $147 = -$146;
  $148 = ((($4)) + 8|0);
  HEAPF64[$148>>3] = $147;
 }
 $149 = $11;
 $150 = $16;
 $151 = $17;
 $152 = $150 - $151;
 $153 = $152 + 4.934802200544679;
 $154 = 19.739208802178716 * $153;
 $155 = $149 + $154;
 $5 = $155;
 $156 = +HEAPF64[$1>>3];
 $157 = (+Math_abs((+$156)));
 $158 = $157 <= 1.0E-10;
 if ($158) {
  $170 = 0.0;
 } else {
  $159 = $12;
  $160 = $159 - 9.869604401089358;
  $161 = $5;
  $162 = $161 <= 0.0;
  if ($162) {
   $166 = 0.0;
  } else {
   $163 = $5;
   $164 = (+Math_sqrt((+$163)));
   $166 = $164;
  }
  $165 = $160 + $166;
  $167 = 0.5 * $165;
  $168 = +HEAPF64[$1>>3];
  $169 = $167 / $168;
  $170 = $169;
 }
 HEAPF64[$4>>3] = $170;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_312($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 / 1.5707963267948966;
 $13 = (+Math_abs((+$12)));
 $9 = $13;
 $14 = $9;
 $15 = $14 - 1.0E-10;
 $16 = $15 > 1.0;
 if ($16) {
  $17 = $3;
  $18 = HEAP32[$17>>2]|0;
  _pj_ctx_set_errno($18,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $19 = $9;
 $20 = $19 > 1.0;
 if ($20) {
  $9 = 1.0;
 }
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_abs((+$22)));
 $24 = $23 <= 1.0E-10;
 $25 = +HEAPF64[$1>>3];
 do {
  if ($24) {
   HEAPF64[$4>>3] = $25;
   $26 = ((($4)) + 8|0);
   HEAPF64[$26>>3] = 0.0;
  } else {
   $27 = (+Math_abs((+$25)));
   $28 = $27 <= 1.0E-10;
   if (!($28)) {
    $29 = $9;
    $30 = $29 - 1.0;
    $31 = (+Math_abs((+$30)));
    $32 = $31 < 1.0E-10;
    if (!($32)) {
     $46 = +HEAPF64[$1>>3];
     $47 = 3.1415926535897931 / $46;
     $48 = +HEAPF64[$1>>3];
     $49 = $48 / 3.1415926535897931;
     $50 = $47 - $49;
     $51 = (+Math_abs((+$50)));
     $52 = 0.5 * $51;
     $5 = $52;
     $53 = $5;
     $54 = $5;
     $55 = $53 * $54;
     $6 = $55;
     $56 = $9;
     $57 = $9;
     $58 = $56 * $57;
     $59 = 1.0 - $58;
     $60 = (+Math_sqrt((+$59)));
     $7 = $60;
     $61 = $7;
     $62 = $9;
     $63 = $7;
     $64 = $62 + $63;
     $65 = $64 - 1.0;
     $66 = $61 / $65;
     $7 = $66;
     $67 = $7;
     $68 = $7;
     $69 = $67 * $68;
     $8 = $69;
     $70 = $7;
     $71 = $9;
     $72 = 2.0 / $71;
     $73 = $72 - 1.0;
     $74 = $70 * $73;
     $9 = $74;
     $75 = $9;
     $76 = $9;
     $77 = $75 * $76;
     $9 = $77;
     $78 = $7;
     $79 = $9;
     $80 = $78 - $79;
     HEAPF64[$4>>3] = $80;
     $81 = $9;
     $82 = $6;
     $83 = $81 + $82;
     $7 = $83;
     $84 = $5;
     $85 = +HEAPF64[$4>>3];
     $86 = $84 * $85;
     $87 = $6;
     $88 = +HEAPF64[$4>>3];
     $89 = $87 * $88;
     $90 = +HEAPF64[$4>>3];
     $91 = $89 * $90;
     $92 = $7;
     $93 = $8;
     $94 = $9;
     $95 = $93 - $94;
     $96 = $92 * $95;
     $97 = $91 - $96;
     $98 = (+Math_sqrt((+$97)));
     $99 = $86 + $98;
     $100 = 3.1415926535897931 * $99;
     $101 = $7;
     $102 = $100 / $101;
     HEAPF64[$4>>3] = $102;
     $103 = +HEAPF64[$1>>3];
     $104 = $103 < 0.0;
     if ($104) {
      $105 = +HEAPF64[$4>>3];
      $106 = -$105;
      HEAPF64[$4>>3] = $106;
     }
     $107 = +HEAPF64[$4>>3];
     $108 = $107 / 3.1415926535897931;
     $109 = (+Math_abs((+$108)));
     $110 = ((($4)) + 8|0);
     HEAPF64[$110>>3] = $109;
     $111 = ((($4)) + 8|0);
     $112 = +HEAPF64[$111>>3];
     $113 = ((($4)) + 8|0);
     $114 = +HEAPF64[$113>>3];
     $115 = $5;
     $116 = 2.0 * $115;
     $117 = $114 + $116;
     $118 = $112 * $117;
     $119 = 1.0 - $118;
     $120 = ((($4)) + 8|0);
     HEAPF64[$120>>3] = $119;
     $121 = ((($4)) + 8|0);
     $122 = +HEAPF64[$121>>3];
     $123 = $122 < -1.0E-10;
     if ($123) {
      $124 = $3;
      $125 = HEAP32[$124>>2]|0;
      _pj_ctx_set_errno($125,-20);
      ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
      STACKTOP = sp;return;
     }
     $126 = ((($4)) + 8|0);
     $127 = +HEAPF64[$126>>3];
     $128 = $127 < 0.0;
     $129 = ((($4)) + 8|0);
     if ($128) {
      HEAPF64[$129>>3] = 0.0;
      break;
     } else {
      $130 = +HEAPF64[$129>>3];
      $131 = (+Math_sqrt((+$130)));
      $132 = ((($1)) + 8|0);
      $133 = +HEAPF64[$132>>3];
      $134 = $133 < 0.0;
      $135 = $134 ? -3.1415926535897931 : 3.1415926535897931;
      $136 = $131 * $135;
      $137 = ((($4)) + 8|0);
      HEAPF64[$137>>3] = $136;
      break;
     }
    }
   }
   HEAPF64[$4>>3] = 0.0;
   $33 = $9;
   $34 = (+Math_asin((+$33)));
   $35 = 0.5 * $34;
   $36 = (+Math_tan((+$35)));
   $37 = 3.1415926535897931 * $36;
   $38 = ((($4)) + 8|0);
   HEAPF64[$38>>3] = $37;
   $39 = ((($1)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $40 < 0.0;
   if ($41) {
    $42 = ((($4)) + 8|0);
    $43 = +HEAPF64[$42>>3];
    $44 = -$43;
    $45 = ((($4)) + 8|0);
    HEAPF64[$45>>3] = $44;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_vandg2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_vandg2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 323;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12711;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_vandg2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,4)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_314($7)|0);
  $1 = $8;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAP32[$12>>2] = 0;
  $13 = $2;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = 324;
  $15 = $2;
  $1 = $15;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _freeup_313($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_314($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_314($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_315($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
 var $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 0.63661977236758138 * $14;
 $16 = (+Math_abs((+$15)));
 $8 = $16;
 $17 = $8;
 $18 = $8;
 $19 = $17 * $18;
 $20 = 1.0 - $19;
 $9 = $20;
 $21 = $20 < 0.0;
 if ($21) {
  $9 = 0.0;
 } else {
  $22 = $9;
  $23 = (+Math_sqrt((+$22)));
  $9 = $23;
 }
 $24 = +HEAPF64[$1>>3];
 $25 = (+Math_abs((+$24)));
 $26 = $25 < 1.0E-10;
 if ($26) {
  HEAPF64[$4>>3] = 0.0;
  $27 = ((($1)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $28 < 0.0;
  $30 = $8;
  $31 = -$30;
  $32 = $29 ? $31 : $30;
  $33 = 3.1415926535897931 * $32;
  $34 = $9;
  $35 = 1.0 + $34;
  $36 = $33 / $35;
  $37 = ((($4)) + 8|0);
  HEAPF64[$37>>3] = $36;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $38 = +HEAPF64[$1>>3];
 $39 = 3.1415926535897931 / $38;
 $40 = +HEAPF64[$1>>3];
 $41 = $40 / 3.1415926535897931;
 $42 = $39 - $41;
 $43 = (+Math_abs((+$42)));
 $44 = 0.5 * $43;
 $7 = $44;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $8;
  $49 = $9;
  $50 = 1.0 + $49;
  $51 = $48 / $50;
  $6 = $51;
  $52 = $7;
  $53 = $7;
  $54 = $52 * $53;
  $55 = $54 + 1.0;
  $56 = $6;
  $57 = $6;
  $58 = $56 * $57;
  $59 = $55 - $58;
  $60 = (+Math_sqrt((+$59)));
  $61 = $7;
  $62 = $60 - $61;
  $63 = 3.1415926535897931 * $62;
  HEAPF64[$4>>3] = $63;
  $64 = $6;
  $65 = 3.1415926535897931 * $64;
  $66 = ((($4)) + 8|0);
  HEAPF64[$66>>3] = $65;
 } else {
  $67 = $9;
  $68 = $7;
  $69 = $7;
  $70 = $68 * $69;
  $71 = 1.0 + $70;
  $72 = (+Math_sqrt((+$71)));
  $73 = $67 * $72;
  $74 = $7;
  $75 = $9;
  $76 = $74 * $75;
  $77 = $9;
  $78 = $76 * $77;
  $79 = $73 - $78;
  $80 = $7;
  $81 = $7;
  $82 = $80 * $81;
  $83 = $8;
  $84 = $82 * $83;
  $85 = $8;
  $86 = $84 * $85;
  $87 = 1.0 + $86;
  $88 = $79 / $87;
  $6 = $88;
  $89 = $6;
  $90 = 3.1415926535897931 * $89;
  HEAPF64[$4>>3] = $90;
  $91 = $6;
  $92 = $6;
  $93 = $7;
  $94 = 2.0 * $93;
  $95 = $92 + $94;
  $96 = $91 * $95;
  $97 = 1.0 - $96;
  $98 = $97 + 1.0E-10;
  $99 = (+Math_sqrt((+$98)));
  $100 = 3.1415926535897931 * $99;
  $101 = ((($4)) + 8|0);
  HEAPF64[$101>>3] = $100;
 }
 $102 = +HEAPF64[$1>>3];
 $103 = $102 < 0.0;
 if ($103) {
  $104 = +HEAPF64[$4>>3];
  $105 = -$104;
  HEAPF64[$4>>3] = $105;
 }
 $106 = ((($1)) + 8|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $107 < 0.0;
 if (!($108)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $109 = ((($4)) + 8|0);
 $110 = +HEAPF64[$109>>3];
 $111 = -$110;
 $112 = ((($4)) + 8|0);
 HEAPF64[$112>>3] = $111;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_vandg3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_vandg3($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 323;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12749;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_vandg3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,4)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_314($7)|0);
  $1 = $8;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAP32[$12>>2] = 1;
  $13 = $2;
  $14 = ((($13)) + 72|0);
  HEAPF64[$14>>3] = 0.0;
  $15 = $2;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 324;
  $17 = $2;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _pj_vandg4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_vandg4($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 325;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12788;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_vandg4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 326;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_316($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_317($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_317($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_forward_318($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 72|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_abs((+$15)));
 $17 = $16 < 1.0E-10;
 $18 = +HEAPF64[$1>>3];
 if ($17) {
  HEAPF64[$4>>3] = $18;
  $19 = ((($4)) + 8|0);
  HEAPF64[$19>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $20 = (+Math_abs((+$18)));
 $21 = $20 < 1.0E-10;
 if (!($21)) {
  $22 = ((($1)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = (+Math_abs((+$23)));
  $25 = $24 - 1.5707963267948966;
  $26 = (+Math_abs((+$25)));
  $27 = $26 < 1.0E-10;
  if (!($27)) {
   $31 = ((($1)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = 0.63661977236758138 * $32;
   $34 = (+Math_abs((+$33)));
   $7 = $34;
   $35 = $7;
   $36 = $7;
   $37 = $35 * $36;
   $10 = $37;
   $38 = $7;
   $39 = $7;
   $40 = $10;
   $41 = 2.0 + $40;
   $42 = $39 * $41;
   $43 = 8.0 - $42;
   $44 = $38 * $43;
   $45 = $44 - 5.0;
   $46 = 0.5 * $45;
   $47 = $10;
   $48 = $7;
   $49 = $48 - 1.0;
   $50 = $47 * $49;
   $51 = $46 / $50;
   $8 = $51;
   $52 = $8;
   $53 = $8;
   $54 = $52 * $53;
   $11 = $54;
   $55 = +HEAPF64[$1>>3];
   $56 = 0.63661977236758138 * $55;
   $12 = $56;
   $57 = $12;
   $58 = $12;
   $59 = 1.0 / $58;
   $60 = $57 + $59;
   $12 = $60;
   $61 = $12;
   $62 = $12;
   $63 = $61 * $62;
   $64 = $63 - 4.0;
   $65 = (+Math_sqrt((+$64)));
   $12 = $65;
   $66 = +HEAPF64[$1>>3];
   $67 = (+Math_abs((+$66)));
   $68 = $67 - 1.5707963267948966;
   $69 = $68 < 0.0;
   if ($69) {
    $70 = $12;
    $71 = -$70;
    $12 = $71;
   }
   $72 = $12;
   $73 = $12;
   $74 = $72 * $73;
   $13 = $74;
   $75 = $7;
   $76 = $8;
   $77 = $75 + $76;
   $5 = $77;
   $78 = $5;
   $79 = $5;
   $80 = $79 * $78;
   $5 = $80;
   $81 = $7;
   $82 = $8;
   $83 = 3.0 * $82;
   $84 = $81 + $83;
   $6 = $84;
   $85 = $5;
   $86 = $10;
   $87 = $11;
   $88 = $13;
   $89 = $87 * $88;
   $90 = $86 + $89;
   $91 = $90 - 1.0;
   $92 = $85 * $91;
   $93 = $10;
   $94 = 1.0 - $93;
   $95 = $10;
   $96 = $6;
   $97 = $6;
   $98 = $96 * $97;
   $99 = $11;
   $100 = 4.0 * $99;
   $101 = $98 + $100;
   $102 = $95 * $101;
   $103 = $11;
   $104 = $7;
   $105 = 12.0 * $104;
   $106 = $8;
   $107 = $105 * $106;
   $108 = $11;
   $109 = 4.0 * $108;
   $110 = $107 + $109;
   $111 = $103 * $110;
   $112 = $102 + $111;
   $113 = $94 * $112;
   $114 = $92 + $113;
   $9 = $114;
   $115 = $12;
   $116 = $5;
   $117 = $11;
   $118 = $116 + $117;
   $119 = $118 - 1.0;
   $120 = $115 * $119;
   $121 = $9;
   $122 = (+Math_sqrt((+$121)));
   $123 = 2.0 * $122;
   $124 = $120 + $123;
   $125 = $5;
   $126 = 4.0 * $125;
   $127 = $13;
   $128 = $126 + $127;
   $129 = $124 / $128;
   $5 = $129;
   $130 = $5;
   $131 = 1.5707963267948966 * $130;
   HEAPF64[$4>>3] = $131;
   $132 = $12;
   $133 = $5;
   $134 = (+Math_abs((+$133)));
   $135 = $132 * $134;
   $136 = 1.0 + $135;
   $137 = $5;
   $138 = $5;
   $139 = $137 * $138;
   $140 = $136 - $139;
   $141 = (+Math_sqrt((+$140)));
   $142 = 1.5707963267948966 * $141;
   $143 = ((($4)) + 8|0);
   HEAPF64[$143>>3] = $142;
   $144 = +HEAPF64[$1>>3];
   $145 = $144 < 0.0;
   if ($145) {
    $146 = +HEAPF64[$4>>3];
    $147 = -$146;
    HEAPF64[$4>>3] = $147;
   }
   $148 = ((($1)) + 8|0);
   $149 = +HEAPF64[$148>>3];
   $150 = $149 < 0.0;
   if (!($150)) {
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $151 = ((($4)) + 8|0);
   $152 = +HEAPF64[$151>>3];
   $153 = -$152;
   $154 = ((($4)) + 8|0);
   HEAPF64[$154>>3] = $153;
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 HEAPF64[$4>>3] = 0.0;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = ((($4)) + 8|0);
 HEAPF64[$30>>3] = $29;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wag7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag7($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 327;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12826;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag7($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 328;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 72|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_319($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_320($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_320($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_321($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_sin((+$9)));
 $11 = 0.90630778703664994 * $10;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = (+Math_asin((+$11)));
 $5 = $13;
 $14 = $5;
 $15 = (+Math_cos((+$14)));
 $6 = $15;
 $16 = 2.66723 * $15;
 $17 = +HEAPF64[$1>>3];
 $18 = $17 / 3.0;
 HEAPF64[$1>>3] = $18;
 $19 = (+Math_sin((+$18)));
 $20 = $16 * $19;
 HEAPF64[$4>>3] = $20;
 $21 = $6;
 $22 = +HEAPF64[$1>>3];
 $23 = (+Math_cos((+$22)));
 $24 = $21 * $23;
 $25 = 1.0 + $24;
 $26 = 0.5 * $25;
 $27 = (+Math_sqrt((+$26)));
 $28 = 1.0 / $27;
 $7 = $28;
 $29 = 1.2410399999999999 * $28;
 $30 = ((($4)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $31 * $29;
 HEAPF64[$30>>3] = $32;
 $33 = $7;
 $34 = +HEAPF64[$4>>3];
 $35 = $34 * $33;
 HEAPF64[$4>>3] = $35;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_lcca($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lcca($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 329;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12856;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lcca($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp;
 $2 = $0;
 $9 = (_pj_calloc(1,40)|0);
 $7 = $9;
 $10 = $7;
 $11 = (0|0)==($10|0);
 if ($11) {
  $12 = $2;
  $13 = (_freeup_new_323($12)|0);
  $1 = $13;
  $105 = $1;
  STACKTOP = sp;return ($105|0);
 }
 $14 = $7;
 $15 = $2;
 $16 = ((($15)) + 416|0);
 HEAP32[$16>>2] = $14;
 $17 = $2;
 $18 = ((($17)) + 72|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (_pj_enfn($19)|0);
 $21 = $7;
 HEAP32[$21>>2] = $20;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = $2;
 if (!($24)) {
  _freeup_322($25);
  $1 = 0;
  $105 = $1;
  STACKTOP = sp;return ($105|0);
 }
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 _pj_param($8,$26,$29,12916);
 $30 = HEAP32[$8>>2]|0;
 $31 = ($30|0)!=(0);
 $32 = $2;
 if (!($31)) {
  $33 = HEAP32[$32>>2]|0;
  _pj_ctx_set_errno($33,50);
  $34 = $2;
  _freeup_322($34);
  $1 = 0;
  $105 = $1;
  STACKTOP = sp;return ($105|0);
 }
 $35 = ((($32)) + 128|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 == 0.0;
 $38 = $2;
 if ($37) {
  $39 = HEAP32[$38>>2]|0;
  _pj_ctx_set_errno($39,51);
  $40 = $2;
  _freeup_322($40);
  $1 = 0;
  $105 = $1;
  STACKTOP = sp;return ($105|0);
 } else {
  $41 = ((($38)) + 128|0);
  $42 = +HEAPF64[$41>>3];
  $43 = (+Math_sin((+$42)));
  $44 = $7;
  $45 = ((($44)) + 16|0);
  HEAPF64[$45>>3] = $43;
  $46 = $2;
  $47 = ((($46)) + 128|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $7;
  $50 = ((($49)) + 16|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $2;
  $53 = ((($52)) + 128|0);
  $54 = +HEAPF64[$53>>3];
  $55 = (+Math_cos((+$54)));
  $56 = $7;
  $57 = HEAP32[$56>>2]|0;
  $58 = (+_pj_mlfn($48,$51,$55,$57));
  $59 = $7;
  $60 = ((($59)) + 24|0);
  HEAPF64[$60>>3] = $58;
  $61 = $7;
  $62 = ((($61)) + 16|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $7;
  $65 = ((($64)) + 16|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $63 * $66;
  $3 = $67;
  $68 = $2;
  $69 = ((($68)) + 72|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $3;
  $72 = $70 * $71;
  $73 = 1.0 - $72;
  $74 = 1.0 / $73;
  $5 = $74;
  $75 = $5;
  $76 = (+Math_sqrt((+$75)));
  $4 = $76;
  $77 = $2;
  $78 = ((($77)) + 104|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $4;
  $81 = $79 * $80;
  $82 = $5;
  $83 = $82 * $81;
  $5 = $83;
  $84 = $2;
  $85 = ((($84)) + 128|0);
  $86 = +HEAPF64[$85>>3];
  $87 = (+Math_tan((+$86)));
  $6 = $87;
  $88 = $4;
  $89 = $6;
  $90 = $88 / $89;
  $91 = $7;
  $92 = ((($91)) + 8|0);
  HEAPF64[$92>>3] = $90;
  $93 = $5;
  $94 = 6.0 * $93;
  $95 = $4;
  $96 = $94 * $95;
  $97 = 1.0 / $96;
  $98 = $7;
  $99 = ((($98)) + 32|0);
  HEAPF64[$99>>3] = $97;
  $100 = $2;
  $101 = ((($100)) + 8|0);
  HEAP32[$101>>2] = 330;
  $102 = $2;
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = 331;
  $104 = $2;
  $1 = $104;
  $105 = $1;
  STACKTOP = sp;return ($105|0);
 }
 return (0)|0;
}
function _freeup_322($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_323($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_323($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = ((($9)) + 416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  (_pj_dealloc($13)|0);
  $14 = $2;
  $15 = ((($14)) + 416|0);
  $16 = HEAP32[$15>>2]|0;
  (_pj_dealloc($16)|0);
  $17 = $2;
  $18 = (_pj_dealloc($17)|0);
  $1 = $18;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _e_inverse_325($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $3;
 $15 = ((($14)) + 152|0);
 $16 = +HEAPF64[$15>>3];
 $17 = +HEAPF64[$1>>3];
 $18 = $17 / $16;
 HEAPF64[$1>>3] = $18;
 $19 = $3;
 $20 = ((($19)) + 152|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 / $21;
 HEAPF64[$22>>3] = $24;
 $25 = +HEAPF64[$1>>3];
 $26 = $5;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 $32 = (+Math_atan2((+$25),(+$31)));
 $6 = $32;
 $33 = ((($1)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = +HEAPF64[$1>>3];
 $36 = $6;
 $37 = 0.5 * $36;
 $38 = (+Math_tan((+$37)));
 $39 = $35 * $38;
 $40 = $34 - $39;
 $7 = $40;
 $41 = $6;
 $42 = $5;
 $43 = ((($42)) + 16|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $41 / $44;
 HEAPF64[$4>>3] = $45;
 $46 = $7;
 $8 = $46;
 $10 = 10;
 while(1) {
  $47 = $10;
  $48 = ($47|0)!=(0);
  if (!($48)) {
   break;
  }
  $49 = $8;
  $50 = $5;
  $51 = ((($50)) + 32|0);
  $52 = +HEAPF64[$51>>3];
  $53 = (+_fS($49,$52));
  $54 = $7;
  $55 = $53 - $54;
  $56 = $8;
  $57 = $5;
  $58 = ((($57)) + 32|0);
  $59 = +HEAPF64[$58>>3];
  $60 = (+_fSp($56,$59));
  $61 = $55 / $60;
  $9 = $61;
  $62 = $8;
  $63 = $62 - $61;
  $8 = $63;
  $64 = $9;
  $65 = (+Math_abs((+$64)));
  $66 = $65 < 9.9999999999999998E-13;
  if ($66) {
   break;
  }
  $67 = $10;
  $68 = (($67) + -1)|0;
  $10 = $68;
 }
 $69 = $10;
 $70 = ($69|0)!=(0);
 $71 = $3;
 $72 = HEAP32[$71>>2]|0;
 if ($70) {
  $73 = $8;
  $74 = $5;
  $75 = ((($74)) + 24|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $73 + $76;
  $78 = $3;
  $79 = ((($78)) + 72|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $5;
  $82 = HEAP32[$81>>2]|0;
  $83 = (+_pj_inv_mlfn($72,$77,$80,$82));
  $84 = ((($4)) + 8|0);
  HEAPF64[$84>>3] = $83;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  _pj_ctx_set_errno($72,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_326($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_sin((+$15)));
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_cos((+$18)));
 $20 = $5;
 $21 = HEAP32[$20>>2]|0;
 $22 = (+_pj_mlfn($13,$16,$19,$21));
 $23 = $5;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 - $25;
 $6 = $26;
 $27 = $6;
 $28 = $5;
 $29 = ((($28)) + 32|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (+_fS($27,$30));
 $8 = $31;
 $32 = $5;
 $33 = ((($32)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $8;
 $36 = $34 - $35;
 $7 = $36;
 $37 = $3;
 $38 = ((($37)) + 152|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $7;
 $41 = $5;
 $42 = ((($41)) + 16|0);
 $43 = +HEAPF64[$42>>3];
 $44 = +HEAPF64[$1>>3];
 $45 = $44 * $43;
 HEAPF64[$1>>3] = $45;
 $46 = (+Math_sin((+$45)));
 $47 = $40 * $46;
 $48 = $39 * $47;
 HEAPF64[$4>>3] = $48;
 $49 = $3;
 $50 = ((($49)) + 152|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $5;
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $7;
 $56 = +HEAPF64[$1>>3];
 $57 = (+Math_cos((+$56)));
 $58 = $55 * $57;
 $59 = $54 - $58;
 $60 = $51 * $59;
 $61 = ((($4)) + 8|0);
 HEAPF64[$61>>3] = $60;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _fS($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $2;
 $6 = $2;
 $7 = $5 * $6;
 $8 = $3;
 $9 = $7 * $8;
 $10 = 1.0 + $9;
 $11 = $4 * $10;
 STACKTOP = sp;return (+$11);
}
function _fSp($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = 3.0 * $4;
 $6 = $2;
 $7 = $5 * $6;
 $8 = $3;
 $9 = $7 * $8;
 $10 = 1.0 + $9;
 STACKTOP = sp;return (+$10);
}
function _pj_geos($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_geos($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 332;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12923;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_geos($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,64)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_328($9)|0);
  $1 = $10;
  $131 = $1;
  STACKTOP = sp;return ($131|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 _pj_param($4,$15,$18,12970);
 $19 = +HEAPF64[$4>>3];
 $20 = $3;
 HEAPF64[$20>>3] = $19;
 $21 = $19 <= 0.0;
 $22 = $2;
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  _pj_ctx_set_errno($23,-30);
  $24 = $2;
  _freeup_327($24);
  $1 = 0;
  $131 = $1;
  STACKTOP = sp;return ($131|0);
 }
 $25 = ((($22)) + 128|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 != 0.0;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 if ($27) {
  _pj_ctx_set_errno($29,-46);
  $30 = $2;
  _freeup_327($30);
  $1 = 0;
  $131 = $1;
  STACKTOP = sp;return ($131|0);
 }
 $31 = $2;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 _pj_param($5,$29,$33,12973);
 $34 = HEAP32[$5>>2]|0;
 $35 = $3;
 $36 = ((($35)) + 56|0);
 HEAP32[$36>>2] = $34;
 $37 = $3;
 $38 = ((($37)) + 56|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 $41 = $3;
 L13: do {
  if ($40) {
   $42 = ((($41)) + 60|0);
   HEAP32[$42>>2] = 0;
  } else {
   $43 = ((($41)) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = ($47|0)!=(0);
   do {
    if (!($48)) {
     $49 = $3;
     $50 = ((($49)) + 56|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP8[$51>>0]|0;
     $53 = $52 << 24 >> 24;
     $54 = ($53|0)!=(120);
     if ($54) {
      $55 = $3;
      $56 = ((($55)) + 56|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = HEAP8[$57>>0]|0;
      $59 = $58 << 24 >> 24;
      $60 = ($59|0)!=(121);
      if ($60) {
       break;
      }
     }
     $64 = $3;
     $65 = ((($64)) + 56|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP8[$66>>0]|0;
     $68 = $67 << 24 >> 24;
     $69 = ($68|0)==(120);
     $70 = $3;
     $71 = ((($70)) + 60|0);
     if ($69) {
      HEAP32[$71>>2] = 1;
      break L13;
     } else {
      HEAP32[$71>>2] = 0;
      break L13;
     }
    }
   } while(0);
   $61 = $2;
   $62 = HEAP32[$61>>2]|0;
   _pj_ctx_set_errno($62,-49);
   $63 = $2;
   _freeup_327($63);
   $1 = 0;
   $131 = $1;
   STACKTOP = sp;return ($131|0);
  }
 } while(0);
 $72 = $3;
 $73 = +HEAPF64[$72>>3];
 $74 = $2;
 $75 = ((($74)) + 56|0);
 $76 = +HEAPF64[$75>>3];
 $77 = $73 / $76;
 $78 = $3;
 $79 = ((($78)) + 40|0);
 HEAPF64[$79>>3] = $77;
 $80 = $3;
 $81 = ((($80)) + 40|0);
 $82 = +HEAPF64[$81>>3];
 $83 = 1.0 + $82;
 $84 = $3;
 $85 = ((($84)) + 32|0);
 HEAPF64[$85>>3] = $83;
 $86 = $3;
 $87 = ((($86)) + 32|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $3;
 $90 = ((($89)) + 32|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $88 * $91;
 $93 = $92 - 1.0;
 $94 = $3;
 $95 = ((($94)) + 48|0);
 HEAPF64[$95>>3] = $93;
 $96 = $2;
 $97 = ((($96)) + 72|0);
 $98 = +HEAPF64[$97>>3];
 $99 = $98 != 0.0;
 if ($99) {
  $100 = $2;
  $101 = ((($100)) + 104|0);
  $102 = +HEAPF64[$101>>3];
  $103 = (+Math_sqrt((+$102)));
  $104 = $3;
  $105 = ((($104)) + 8|0);
  HEAPF64[$105>>3] = $103;
  $106 = $2;
  $107 = ((($106)) + 104|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $3;
  $110 = ((($109)) + 16|0);
  HEAPF64[$110>>3] = $108;
  $111 = $2;
  $112 = ((($111)) + 112|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $3;
  $115 = ((($114)) + 24|0);
  HEAPF64[$115>>3] = $113;
  $116 = $2;
  $117 = ((($116)) + 8|0);
  HEAP32[$117>>2] = 333;
  $118 = $2;
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = 334;
 } else {
  $120 = $3;
  $121 = ((($120)) + 24|0);
  HEAPF64[$121>>3] = 1.0;
  $122 = $3;
  $123 = ((($122)) + 16|0);
  HEAPF64[$123>>3] = 1.0;
  $124 = $3;
  $125 = ((($124)) + 8|0);
  HEAPF64[$125>>3] = 1.0;
  $126 = $2;
  $127 = ((($126)) + 8|0);
  HEAP32[$127>>2] = 335;
  $128 = $2;
  $129 = ((($128)) + 4|0);
  HEAP32[$129>>2] = 336;
 }
 $130 = $2;
 $1 = $130;
 $131 = $1;
 STACKTOP = sp;return ($131|0);
}
function _freeup_327($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_328($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_328($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_331($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $6 = -1.0;
 $16 = $5;
 $17 = ((($16)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 40|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $21 / $24;
  $26 = (+Math_tan((+$25)));
  $8 = $26;
  $27 = +HEAPF64[$1>>3];
  $28 = $5;
  $29 = ((($28)) + 40|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $27 / $30;
  $32 = (+Math_tan((+$31)));
  $33 = $8;
  $34 = (+_hypot(1.0,$33));
  $35 = $32 * $34;
  $7 = $35;
 } else {
  $36 = +HEAPF64[$1>>3];
  $37 = $5;
  $38 = ((($37)) + 40|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $36 / $39;
  $41 = (+Math_tan((+$40)));
  $7 = $41;
  $42 = ((($1)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $5;
  $45 = ((($44)) + 40|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $43 / $46;
  $48 = (+Math_tan((+$47)));
  $49 = $7;
  $50 = (+_hypot(1.0,$49));
  $51 = $48 * $50;
  $8 = $51;
 }
 $52 = $8;
 $53 = $5;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $52 / $55;
 $9 = $56;
 $57 = $7;
 $58 = $7;
 $59 = $57 * $58;
 $60 = $9;
 $61 = $9;
 $62 = $60 * $61;
 $63 = $59 + $62;
 $64 = $6;
 $65 = $6;
 $66 = $64 * $65;
 $67 = $63 + $66;
 $9 = $67;
 $68 = $5;
 $69 = ((($68)) + 32|0);
 $70 = +HEAPF64[$69>>3];
 $71 = 2.0 * $70;
 $72 = $6;
 $73 = $71 * $72;
 $10 = $73;
 $74 = $10;
 $75 = $10;
 $76 = $74 * $75;
 $77 = $9;
 $78 = 4.0 * $77;
 $79 = $5;
 $80 = ((($79)) + 48|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 * $81;
 $83 = $76 - $82;
 $11 = $83;
 $84 = $83 < 0.0;
 if ($84) {
  $85 = $3;
  $86 = HEAP32[$85>>2]|0;
  _pj_ctx_set_errno($86,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $87 = $10;
  $88 = -$87;
  $89 = $11;
  $90 = (+Math_sqrt((+$89)));
  $91 = $88 - $90;
  $92 = $9;
  $93 = 2.0 * $92;
  $94 = $91 / $93;
  $12 = $94;
  $95 = $5;
  $96 = ((($95)) + 32|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $12;
  $99 = $6;
  $100 = $98 * $99;
  $101 = $97 + $100;
  $6 = $101;
  $102 = $12;
  $103 = $7;
  $104 = $103 * $102;
  $7 = $104;
  $105 = $12;
  $106 = $8;
  $107 = $106 * $105;
  $8 = $107;
  $108 = $7;
  $109 = $6;
  $110 = (+Math_atan2((+$108),(+$109)));
  HEAPF64[$4>>3] = $110;
  $111 = $8;
  $112 = +HEAPF64[$4>>3];
  $113 = (+Math_cos((+$112)));
  $114 = $111 * $113;
  $115 = $6;
  $116 = $114 / $115;
  $117 = (+Math_atan((+$116)));
  $118 = ((($4)) + 8|0);
  HEAPF64[$118>>3] = $117;
  $119 = $5;
  $120 = ((($119)) + 24|0);
  $121 = +HEAPF64[$120>>3];
  $122 = ((($4)) + 8|0);
  $123 = +HEAPF64[$122>>3];
  $124 = (+Math_tan((+$123)));
  $125 = $121 * $124;
  $126 = (+Math_atan((+$125)));
  $127 = ((($4)) + 8|0);
  HEAPF64[$127>>3] = $126;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_332($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $5;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_tan((+$18)));
 $20 = $16 * $19;
 $21 = (+Math_atan((+$20)));
 $22 = ((($1)) + 8|0);
 HEAPF64[$22>>3] = $21;
 $23 = $5;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (+Math_cos((+$30)));
 $32 = $28 * $31;
 $33 = ((($1)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = (+Math_sin((+$34)));
 $36 = (+_hypot($32,$35));
 $37 = $25 / $36;
 $6 = $37;
 $38 = $6;
 $39 = +HEAPF64[$1>>3];
 $40 = (+Math_cos((+$39)));
 $41 = $38 * $40;
 $42 = ((($1)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = (+Math_cos((+$43)));
 $45 = $41 * $44;
 $7 = $45;
 $46 = $6;
 $47 = +HEAPF64[$1>>3];
 $48 = (+Math_sin((+$47)));
 $49 = $46 * $48;
 $50 = ((($1)) + 8|0);
 $51 = +HEAPF64[$50>>3];
 $52 = (+Math_cos((+$51)));
 $53 = $49 * $52;
 $8 = $53;
 $54 = $6;
 $55 = ((($1)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = (+Math_sin((+$56)));
 $58 = $54 * $57;
 $9 = $58;
 $59 = $5;
 $60 = ((($59)) + 32|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $7;
 $63 = $61 - $62;
 $64 = $7;
 $65 = $63 * $64;
 $66 = $8;
 $67 = $8;
 $68 = $66 * $67;
 $69 = $65 - $68;
 $70 = $9;
 $71 = $9;
 $72 = $70 * $71;
 $73 = $5;
 $74 = ((($73)) + 24|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $72 * $75;
 $77 = $69 - $76;
 $78 = $77 < 0.0;
 if ($78) {
  $79 = $3;
  $80 = HEAP32[$79>>2]|0;
  _pj_ctx_set_errno($80,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $81 = $5;
 $82 = ((($81)) + 32|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $7;
 $85 = $83 - $84;
 $10 = $85;
 $86 = $5;
 $87 = ((($86)) + 60|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0);
 $90 = $5;
 $91 = ((($90)) + 40|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $8;
 if ($89) {
  $94 = $9;
  $95 = $10;
  $96 = (+_hypot($94,$95));
  $97 = $93 / $96;
  $98 = (+Math_atan((+$97)));
  $99 = $92 * $98;
  HEAPF64[$4>>3] = $99;
  $100 = $5;
  $101 = ((($100)) + 40|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $9;
  $104 = $10;
  $105 = $103 / $104;
  $106 = (+Math_atan((+$105)));
  $107 = $102 * $106;
  $108 = ((($4)) + 8|0);
  HEAPF64[$108>>3] = $107;
 } else {
  $109 = $10;
  $110 = $93 / $109;
  $111 = (+Math_atan((+$110)));
  $112 = $92 * $111;
  HEAPF64[$4>>3] = $112;
  $113 = $5;
  $114 = ((($113)) + 40|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $9;
  $117 = $8;
  $118 = $10;
  $119 = (+_hypot($117,$118));
  $120 = $116 / $119;
  $121 = (+Math_atan((+$120)));
  $122 = $115 * $121;
  $123 = ((($4)) + 8|0);
  HEAPF64[$123>>3] = $122;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_inverse_333($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $6 = -1.0;
 $16 = $5;
 $17 = ((($16)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 32|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $24 - 1.0;
  $26 = $21 / $25;
  $27 = (+Math_tan((+$26)));
  $8 = $27;
  $28 = +HEAPF64[$1>>3];
  $29 = $5;
  $30 = ((($29)) + 32|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $31 - 1.0;
  $33 = $28 / $32;
  $34 = (+Math_tan((+$33)));
  $35 = $8;
  $36 = $8;
  $37 = $35 * $36;
  $38 = 1.0 + $37;
  $39 = (+Math_sqrt((+$38)));
  $40 = $34 * $39;
  $7 = $40;
 } else {
  $41 = +HEAPF64[$1>>3];
  $42 = $5;
  $43 = ((($42)) + 32|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $44 - 1.0;
  $46 = $41 / $45;
  $47 = (+Math_tan((+$46)));
  $7 = $47;
  $48 = ((($1)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $5;
  $51 = ((($50)) + 32|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 - 1.0;
  $54 = $49 / $53;
  $55 = (+Math_tan((+$54)));
  $56 = $7;
  $57 = $7;
  $58 = $56 * $57;
  $59 = 1.0 + $58;
  $60 = (+Math_sqrt((+$59)));
  $61 = $55 * $60;
  $8 = $61;
 }
 $62 = $7;
 $63 = $7;
 $64 = $62 * $63;
 $65 = $8;
 $66 = $8;
 $67 = $65 * $66;
 $68 = $64 + $67;
 $69 = $6;
 $70 = $6;
 $71 = $69 * $70;
 $72 = $68 + $71;
 $9 = $72;
 $73 = $5;
 $74 = ((($73)) + 32|0);
 $75 = +HEAPF64[$74>>3];
 $76 = 2.0 * $75;
 $77 = $6;
 $78 = $76 * $77;
 $10 = $78;
 $79 = $10;
 $80 = $10;
 $81 = $79 * $80;
 $82 = $9;
 $83 = 4.0 * $82;
 $84 = $5;
 $85 = ((($84)) + 48|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $83 * $86;
 $88 = $81 - $87;
 $11 = $88;
 $89 = $88 < 0.0;
 if ($89) {
  $90 = $3;
  $91 = HEAP32[$90>>2]|0;
  _pj_ctx_set_errno($91,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $92 = $10;
  $93 = -$92;
  $94 = $11;
  $95 = (+Math_sqrt((+$94)));
  $96 = $93 - $95;
  $97 = $9;
  $98 = 2.0 * $97;
  $99 = $96 / $98;
  $12 = $99;
  $100 = $5;
  $101 = ((($100)) + 32|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $12;
  $104 = $6;
  $105 = $103 * $104;
  $106 = $102 + $105;
  $6 = $106;
  $107 = $12;
  $108 = $7;
  $109 = $108 * $107;
  $7 = $109;
  $110 = $12;
  $111 = $8;
  $112 = $111 * $110;
  $8 = $112;
  $113 = $7;
  $114 = $6;
  $115 = (+Math_atan2((+$113),(+$114)));
  HEAPF64[$4>>3] = $115;
  $116 = $8;
  $117 = +HEAPF64[$4>>3];
  $118 = (+Math_cos((+$117)));
  $119 = $116 * $118;
  $120 = $6;
  $121 = $119 / $120;
  $122 = (+Math_atan((+$121)));
  $123 = ((($4)) + 8|0);
  HEAPF64[$123>>3] = $122;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_forward_334($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_cos((+$14)));
 $9 = $15;
 $16 = +HEAPF64[$1>>3];
 $17 = (+Math_cos((+$16)));
 $18 = $9;
 $19 = $17 * $18;
 $6 = $19;
 $20 = +HEAPF64[$1>>3];
 $21 = (+Math_sin((+$20)));
 $22 = $9;
 $23 = $21 * $22;
 $7 = $23;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_sin((+$25)));
 $8 = $26;
 $27 = $5;
 $28 = ((($27)) + 32|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $6;
 $31 = $29 - $30;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 60|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 $36 = $5;
 $37 = ((($36)) + 40|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $7;
 if ($35) {
  $40 = $8;
  $41 = $9;
  $42 = (+_hypot($40,$41));
  $43 = $39 / $42;
  $44 = (+Math_atan((+$43)));
  $45 = $38 * $44;
  HEAPF64[$4>>3] = $45;
  $46 = $5;
  $47 = ((($46)) + 40|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $8;
  $50 = $9;
  $51 = $49 / $50;
  $52 = (+Math_atan((+$51)));
  $53 = $48 * $52;
  $54 = ((($4)) + 8|0);
  HEAPF64[$54>>3] = $53;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $55 = $9;
  $56 = $39 / $55;
  $57 = (+Math_atan((+$56)));
  $58 = $38 * $57;
  HEAPF64[$4>>3] = $58;
  $59 = $5;
  $60 = ((($59)) + 40|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $8;
  $63 = $7;
  $64 = $9;
  $65 = (+_hypot($63,$64));
  $66 = $62 / $65;
  $67 = (+Math_atan((+$66)));
  $68 = $61 * $67;
  $69 = ((($4)) + 8|0);
  HEAPF64[$69>>3] = $68;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_etmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_etmerc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 337;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 12980;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_etmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,208)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_336($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_337($12)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freeup_335($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_336($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_336($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_337($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0.0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0.0;
 var $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $8 = $2;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $2;
 $12 = ((($11)) + 72|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 <= 0.0;
 $15 = $2;
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  _pj_ctx_set_errno($16,-34);
  $17 = $2;
  _freeup_335($17);
  $1 = 0;
  $398 = $1;
  STACKTOP = sp;return ($398|0);
 } else {
  $18 = ((($15)) + 72|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $2;
  $21 = ((($20)) + 72|0);
  $22 = +HEAPF64[$21>>3];
  $23 = 1.0 - $22;
  $24 = (+Math_sqrt((+$23)));
  $25 = 1.0 + $24;
  $26 = $19 / $25;
  $3 = $26;
  $27 = $3;
  $28 = $3;
  $29 = 2.0 - $28;
  $30 = $27 / $29;
  $4 = $30;
  $5 = $30;
  $31 = $4;
  $32 = $4;
  $33 = $4;
  $34 = $4;
  $35 = $4;
  $36 = $4;
  $37 = $36 * -4.228148148148148;
  $38 = 0.57777777777777772 + $37;
  $39 = $35 * $38;
  $40 = 2.5777777777777779 + $39;
  $41 = $34 * $40;
  $42 = -2.0 + $41;
  $43 = $33 * $42;
  $44 = -0.66666666666666663 + $43;
  $45 = $32 * $44;
  $46 = 2.0 + $45;
  $47 = $31 * $46;
  $48 = $7;
  $49 = ((($48)) + 16|0);
  HEAPF64[$49>>3] = $47;
  $50 = $4;
  $51 = $4;
  $52 = $4;
  $53 = $4;
  $54 = $4;
  $55 = $4;
  $56 = $55 * 0.98243386243386243;
  $57 = 0.71111111111111114 + $56;
  $58 = $54 * $57;
  $59 = -1.8222222222222222 + $58;
  $60 = $53 * $59;
  $61 = 1.3333333333333333 + $60;
  $62 = $52 * $61;
  $63 = 0.66666666666666663 + $62;
  $64 = $51 * $63;
  $65 = -2.0 + $64;
  $66 = $50 * $65;
  $67 = $7;
  $68 = ((($67)) + 64|0);
  HEAPF64[$68>>3] = $66;
  $69 = $4;
  $70 = $5;
  $71 = $70 * $69;
  $5 = $71;
  $72 = $5;
  $73 = $4;
  $74 = $4;
  $75 = $4;
  $76 = $4;
  $77 = $76 * 2.4582010582010581;
  $78 = 8.5841269841269838 + $77;
  $79 = $75 * $78;
  $80 = -5.0444444444444443 + $79;
  $81 = $74 * $80;
  $82 = -1.6000000000000001 + $81;
  $83 = $73 * $82;
  $84 = 2.3333333333333335 + $83;
  $85 = $72 * $84;
  $86 = $7;
  $87 = ((($86)) + 16|0);
  $88 = ((($87)) + 8|0);
  HEAPF64[$88>>3] = $85;
  $89 = $5;
  $90 = $4;
  $91 = $4;
  $92 = $4;
  $93 = $4;
  $94 = $93 * -1.6105820105820106;
  $95 = 2.8698412698412699 + $94;
  $96 = $92 * $95;
  $97 = -1.4444444444444444 + $96;
  $98 = $91 * $97;
  $99 = -1.0666666666666667 + $98;
  $100 = $90 * $99;
  $101 = 1.6666666666666667 + $100;
  $102 = $89 * $101;
  $103 = $7;
  $104 = ((($103)) + 64|0);
  $105 = ((($104)) + 8|0);
  HEAPF64[$105>>3] = $102;
  $106 = $4;
  $107 = $5;
  $108 = $107 * $106;
  $5 = $108;
  $109 = $5;
  $110 = $4;
  $111 = $4;
  $112 = $4;
  $113 = $112 * 26.03668430335097;
  $114 = -12.019047619047619 + $113;
  $115 = $111 * $114;
  $116 = -3.8857142857142857 + $115;
  $117 = $110 * $116;
  $118 = 3.7333333333333334 + $117;
  $119 = $109 * $118;
  $120 = $7;
  $121 = ((($120)) + 16|0);
  $122 = ((($121)) + 16|0);
  HEAPF64[$122>>3] = $119;
  $123 = $5;
  $124 = $4;
  $125 = $4;
  $126 = $4;
  $127 = $126 * -4.4747795414462077;
  $128 = 1.6000000000000001 + $127;
  $129 = $125 * $128;
  $130 = 1.6190476190476191 + $129;
  $131 = $124 * $130;
  $132 = -1.7333333333333334 + $131;
  $133 = $123 * $132;
  $134 = $7;
  $135 = ((($134)) + 64|0);
  $136 = ((($135)) + 16|0);
  HEAPF64[$136>>3] = $133;
  $137 = $4;
  $138 = $5;
  $139 = $138 * $137;
  $5 = $139;
  $140 = $5;
  $141 = $4;
  $142 = $4;
  $143 = $142 * -28.188500881834216;
  $144 = -9.4857142857142857 + $143;
  $145 = $141 * $144;
  $146 = 6.7920634920634919 + $145;
  $147 = $140 * $146;
  $148 = $7;
  $149 = ((($148)) + 16|0);
  $150 = ((($149)) + 24|0);
  HEAPF64[$150>>3] = $147;
  $151 = $5;
  $152 = $4;
  $153 = $4;
  $154 = $153 * -1.7518165784832451;
  $155 = -2.3999999999999999 + $154;
  $156 = $152 * $155;
  $157 = 1.9634920634920634 + $156;
  $158 = $151 * $157;
  $159 = $7;
  $160 = ((($159)) + 64|0);
  $161 = ((($160)) + 24|0);
  HEAPF64[$161>>3] = $158;
  $162 = $4;
  $163 = $5;
  $164 = $163 * $162;
  $5 = $164;
  $165 = $5;
  $166 = $4;
  $167 = $166 * -23.222382555715889;
  $168 = 13.250793650793652 + $167;
  $169 = $165 * $168;
  $170 = $7;
  $171 = ((($170)) + 16|0);
  $172 = ((($171)) + 32|0);
  HEAPF64[$172>>3] = $169;
  $173 = $5;
  $174 = $4;
  $175 = $174 * 3.5144460477793813;
  $176 = -2.3301587301587303 + $175;
  $177 = $173 * $176;
  $178 = $7;
  $179 = ((($178)) + 64|0);
  $180 = ((($179)) + 32|0);
  HEAPF64[$180>>3] = $177;
  $181 = $4;
  $182 = $5;
  $183 = $182 * $181;
  $5 = $183;
  $184 = $5;
  $185 = $184 * 27.011268237934903;
  $186 = $7;
  $187 = ((($186)) + 16|0);
  $188 = ((($187)) + 40|0);
  HEAPF64[$188>>3] = $185;
  $189 = $5;
  $190 = $189 * 2.8496841430174764;
  $191 = $7;
  $192 = ((($191)) + 64|0);
  $193 = ((($192)) + 40|0);
  HEAPF64[$193>>3] = $190;
  $194 = $4;
  $195 = $4;
  $196 = $194 * $195;
  $5 = $196;
  $197 = $2;
  $198 = ((($197)) + 152|0);
  $199 = +HEAPF64[$198>>3];
  $200 = $4;
  $201 = 1.0 + $200;
  $202 = $199 / $201;
  $203 = $5;
  $204 = $5;
  $205 = $5;
  $206 = $205 / 256.0;
  $207 = 0.015625 + $206;
  $208 = $204 * $207;
  $209 = 0.25 + $208;
  $210 = $203 * $209;
  $211 = 1.0 + $210;
  $212 = $202 * $211;
  $213 = $7;
  HEAPF64[$213>>3] = $212;
  $214 = $4;
  $215 = $4;
  $216 = $4;
  $217 = $4;
  $218 = $4;
  $219 = $4;
  $220 = $219 * -0.15905919312169312;
  $221 = 0.158203125 + $220;
  $222 = $218 * $221;
  $223 = 0.0027777777777777779 + $222;
  $224 = $217 * $223;
  $225 = -0.38541666666666669 + $224;
  $226 = $216 * $225;
  $227 = 0.66666666666666663 + $226;
  $228 = $215 * $227;
  $229 = -0.5 + $228;
  $230 = $214 * $229;
  $231 = $7;
  $232 = ((($231)) + 112|0);
  HEAPF64[$232>>3] = $230;
  $233 = $4;
  $234 = $4;
  $235 = $4;
  $236 = $4;
  $237 = $4;
  $238 = $4;
  $239 = $238 * 0.20875661375661375;
  $240 = -0.44097222222222221 + $239;
  $241 = $237 * $240;
  $242 = 0.22777777777777777 + $241;
  $243 = $236 * $242;
  $244 = 0.3125 + $243;
  $245 = $235 * $244;
  $246 = -0.66666666666666663 + $245;
  $247 = $234 * $246;
  $248 = 0.5 + $247;
  $249 = $233 * $248;
  $250 = $7;
  $251 = ((($250)) + 160|0);
  HEAPF64[$251>>3] = $249;
  $252 = $5;
  $253 = $4;
  $254 = $4;
  $255 = $4;
  $256 = $4;
  $257 = $256 * 0.28901883887235452;
  $258 = -0.43809523809523809 + $257;
  $259 = $255 * $258;
  $260 = 0.3034722222222222 + $259;
  $261 = $254 * $260;
  $262 = -0.066666666666666666 + $261;
  $263 = $253 * $262;
  $264 = -0.020833333333333332 + $263;
  $265 = $252 * $264;
  $266 = $7;
  $267 = ((($266)) + 112|0);
  $268 = ((($267)) + 8|0);
  HEAPF64[$268>>3] = $265;
  $269 = $5;
  $270 = $4;
  $271 = $4;
  $272 = $4;
  $273 = $4;
  $274 = $273 * -1.0248393063822752;
  $275 = 0.44603174603174606 + $274;
  $276 = $272 * $275;
  $277 = 0.38680555555555557 + $276;
  $278 = $271 * $277;
  $279 = -0.59999999999999998 + $278;
  $280 = $270 * $279;
  $281 = 0.27083333333333331 + $280;
  $282 = $269 * $281;
  $283 = $7;
  $284 = ((($283)) + 160|0);
  $285 = ((($284)) + 8|0);
  HEAPF64[$285>>3] = $282;
  $286 = $4;
  $287 = $5;
  $288 = $287 * $286;
  $5 = $288;
  $289 = $5;
  $290 = $4;
  $291 = $4;
  $292 = $4;
  $293 = $292 * -0.061386684303350973;
  $294 = 0.046651785714285715 + $293;
  $295 = $291 * $294;
  $296 = 0.044047619047619051 + $295;
  $297 = $290 * $296;
  $298 = -0.035416666666666666 + $297;
  $299 = $289 * $298;
  $300 = $7;
  $301 = ((($300)) + 112|0);
  $302 = ((($301)) + 16|0);
  HEAPF64[$302>>3] = $299;
  $303 = $5;
  $304 = $4;
  $305 = $4;
  $306 = $4;
  $307 = $306 * 0.9237378747795415;
  $308 = 0.56030505952380949 + $307;
  $309 = $305 * $308;
  $310 = -0.73571428571428577 + $309;
  $311 = $304 * $310;
  $312 = 0.25416666666666665 + $311;
  $313 = $303 * $312;
  $314 = $7;
  $315 = ((($314)) + 160|0);
  $316 = ((($315)) + 16|0);
  HEAPF64[$316>>3] = $313;
  $317 = $4;
  $318 = $5;
  $319 = $318 * $317;
  $5 = $319;
  $320 = $5;
  $321 = $4;
  $322 = $4;
  $323 = $322 * 0.11439745921516754;
  $324 = 0.021825396825396824 + $323;
  $325 = $321 * $324;
  $326 = -0.027263144841269842 + $325;
  $327 = $320 * $326;
  $328 = $7;
  $329 = ((($328)) + 112|0);
  $330 = ((($329)) + 24|0);
  HEAPF64[$330>>3] = $327;
  $331 = $5;
  $332 = $4;
  $333 = $4;
  $334 = $333 * 0.90962039792768956;
  $335 = -1.0654761904761905 + $334;
  $336 = $332 * $335;
  $337 = 0.30729786706349205 + $336;
  $338 = $331 * $337;
  $339 = $7;
  $340 = ((($339)) + 160|0);
  $341 = ((($340)) + 24|0);
  HEAPF64[$341>>3] = $338;
  $342 = $4;
  $343 = $5;
  $344 = $343 * $342;
  $5 = $344;
  $345 = $5;
  $346 = $4;
  $347 = $346 * 0.027268468414301746;
  $348 = -0.02841641865079365 + $347;
  $349 = $345 * $348;
  $350 = $7;
  $351 = ((($350)) + 112|0);
  $352 = ((($351)) + 32|0);
  HEAPF64[$352>>3] = $349;
  $353 = $5;
  $354 = $4;
  $355 = $354 * -1.713007555715889;
  $356 = 0.43066716269841271 + $355;
  $357 = $353 * $356;
  $358 = $7;
  $359 = ((($358)) + 160|0);
  $360 = ((($359)) + 32|0);
  HEAPF64[$360>>3] = $357;
  $361 = $4;
  $362 = $5;
  $363 = $362 * $361;
  $5 = $363;
  $364 = $5;
  $365 = $364 * -0.032330830940856981;
  $366 = $7;
  $367 = ((($366)) + 112|0);
  $368 = ((($367)) + 40|0);
  HEAPF64[$368>>3] = $365;
  $369 = $5;
  $370 = $369 * 0.66506753108966654;
  $371 = $7;
  $372 = ((($371)) + 160|0);
  $373 = ((($372)) + 40|0);
  HEAPF64[$373>>3] = $370;
  $374 = $7;
  $375 = ((($374)) + 64|0);
  $376 = $2;
  $377 = ((($376)) + 128|0);
  $378 = +HEAPF64[$377>>3];
  $379 = (+_gatg($375,6,$378));
  $6 = $379;
  $380 = $7;
  $381 = +HEAPF64[$380>>3];
  $382 = -$381;
  $383 = $6;
  $384 = $7;
  $385 = ((($384)) + 160|0);
  $386 = $6;
  $387 = 2.0 * $386;
  $388 = (+_clens($385,6,$387));
  $389 = $383 + $388;
  $390 = $382 * $389;
  $391 = $7;
  $392 = ((($391)) + 8|0);
  HEAPF64[$392>>3] = $390;
  $393 = $2;
  $394 = ((($393)) + 8|0);
  HEAP32[$394>>2] = 338;
  $395 = $2;
  $396 = ((($395)) + 4|0);
  HEAP32[$396>>2] = 339;
  $397 = $2;
  $1 = $397;
  $398 = $1;
  STACKTOP = sp;return ($398|0);
 }
 return (0)|0;
}
function _gatg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $9 = 0.0;
 $11 = $5;
 $12 = 2.0 * $11;
 $13 = (+Math_cos((+$12)));
 $14 = 2.0 * $13;
 $10 = $14;
 $15 = $3;
 $16 = $4;
 $17 = (($15) + ($16<<3)|0);
 $6 = $17;
 $18 = $6;
 $19 = ((($18)) + -8|0);
 $6 = $19;
 $20 = +HEAPF64[$19>>3];
 $8 = $20;
 while(1) {
  $21 = $6;
  $22 = $3;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = (($25|0) / 8)&-1;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
  $28 = $9;
  $29 = -$28;
  $30 = $10;
  $31 = $8;
  $32 = $30 * $31;
  $33 = $29 + $32;
  $34 = $6;
  $35 = ((($34)) + -8|0);
  $6 = $35;
  $36 = +HEAPF64[$35>>3];
  $37 = $33 + $36;
  $7 = $37;
  $38 = $8;
  $9 = $38;
  $39 = $7;
  $8 = $39;
 }
 $40 = $5;
 $41 = $7;
 $42 = $5;
 $43 = 2.0 * $42;
 $44 = (+Math_sin((+$43)));
 $45 = $41 * $44;
 $46 = $40 + $45;
 STACKTOP = sp;return (+$46);
}
function _clens($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = $4;
 $14 = (($12) + ($13<<3)|0);
 $6 = $14;
 $15 = $5;
 $16 = (+Math_cos((+$15)));
 $11 = $16;
 $17 = $11;
 $18 = 2.0 * $17;
 $7 = $18;
 $9 = 0.0;
 $19 = $6;
 $20 = ((($19)) + -8|0);
 $6 = $20;
 $21 = +HEAPF64[$20>>3];
 $8 = $21;
 while(1) {
  $22 = $3;
  $23 = $6;
  $24 = $22;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = (($26|0) / 8)&-1;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $9;
  $10 = $29;
  $30 = $8;
  $9 = $30;
  $31 = $10;
  $32 = -$31;
  $33 = $7;
  $34 = $9;
  $35 = $33 * $34;
  $36 = $32 + $35;
  $37 = $6;
  $38 = ((($37)) + -8|0);
  $6 = $38;
  $39 = +HEAPF64[$38>>3];
  $40 = $36 + $39;
  $8 = $40;
 }
 $41 = $5;
 $42 = (+Math_sin((+$41)));
 $43 = $8;
 $44 = $42 * $43;
 STACKTOP = sp;return (+$44);
}
function _e_inverse_338($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = $3;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $12 = $18;
 $19 = +HEAPF64[$1>>3];
 $13 = $19;
 $20 = $12;
 $21 = $5;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 - $23;
 $25 = $5;
 $26 = +HEAPF64[$25>>3];
 $27 = $24 / $26;
 $12 = $27;
 $28 = $13;
 $29 = $5;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 / $30;
 $13 = $31;
 $32 = $13;
 $33 = (+Math_abs((+$32)));
 $34 = $33 <= 2.6233951627779999;
 if ($34) {
  $35 = $5;
  $36 = ((($35)) + 112|0);
  $37 = $12;
  $38 = 2.0 * $37;
  $39 = $13;
  $40 = 2.0 * $39;
  $41 = (+_clenS($36,6,$38,$40,$10,$11));
  $42 = $12;
  $43 = $42 + $41;
  $12 = $43;
  $44 = +HEAPF64[$11>>3];
  $45 = $13;
  $46 = $45 + $44;
  $13 = $46;
  $47 = $13;
  $48 = (+_sinh($47));
  $49 = (+Math_atan((+$48)));
  $13 = $49;
  $50 = $12;
  $51 = (+Math_sin((+$50)));
  $6 = $51;
  $52 = $12;
  $53 = (+Math_cos((+$52)));
  $7 = $53;
  $54 = $13;
  $55 = (+Math_sin((+$54)));
  $9 = $55;
  $56 = $13;
  $57 = (+Math_cos((+$56)));
  $8 = $57;
  $58 = $9;
  $59 = $8;
  $60 = $7;
  $61 = $59 * $60;
  $62 = (+Math_atan2((+$58),(+$61)));
  $13 = $62;
  $63 = $6;
  $64 = $8;
  $65 = $63 * $64;
  $66 = $9;
  $67 = $8;
  $68 = $7;
  $69 = $67 * $68;
  $70 = (+_hypot($66,$69));
  $71 = (+Math_atan2((+$65),(+$70)));
  $12 = $71;
  $72 = $5;
  $73 = ((($72)) + 16|0);
  $74 = $12;
  $75 = (+_gatg($73,6,$74));
  $76 = ((($4)) + 8|0);
  HEAPF64[$76>>3] = $75;
  $77 = $13;
  HEAPF64[$4>>3] = $77;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAPF64[$4>>3] = inf;
  $78 = ((($4)) + 8|0);
  HEAPF64[$78>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _e_forward_339($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $14 = $3;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $12 = $18;
 $19 = +HEAPF64[$1>>3];
 $13 = $19;
 $20 = $5;
 $21 = ((($20)) + 64|0);
 $22 = $12;
 $23 = (+_gatg($21,6,$22));
 $12 = $23;
 $24 = $12;
 $25 = (+Math_sin((+$24)));
 $6 = $25;
 $26 = $12;
 $27 = (+Math_cos((+$26)));
 $7 = $27;
 $28 = $13;
 $29 = (+Math_sin((+$28)));
 $9 = $29;
 $30 = $13;
 $31 = (+Math_cos((+$30)));
 $8 = $31;
 $32 = $6;
 $33 = $8;
 $34 = $7;
 $35 = $33 * $34;
 $36 = (+Math_atan2((+$32),(+$35)));
 $12 = $36;
 $37 = $9;
 $38 = $7;
 $39 = $37 * $38;
 $40 = $6;
 $41 = $7;
 $42 = $8;
 $43 = $41 * $42;
 $44 = (+_hypot($40,$43));
 $45 = (+Math_atan2((+$39),(+$44)));
 $13 = $45;
 $46 = $13;
 $47 = (+Math_tan((+$46)));
 $48 = (+_asinhy($47));
 $13 = $48;
 $49 = $5;
 $50 = ((($49)) + 160|0);
 $51 = $12;
 $52 = 2.0 * $51;
 $53 = $13;
 $54 = 2.0 * $53;
 $55 = (+_clenS($50,6,$52,$54,$10,$11));
 $56 = $12;
 $57 = $56 + $55;
 $12 = $57;
 $58 = +HEAPF64[$11>>3];
 $59 = $13;
 $60 = $59 + $58;
 $13 = $60;
 $61 = $13;
 $62 = (+Math_abs((+$61)));
 $63 = $62 <= 2.6233951627779999;
 if ($63) {
  $64 = $5;
  $65 = +HEAPF64[$64>>3];
  $66 = $12;
  $67 = $65 * $66;
  $68 = $5;
  $69 = ((($68)) + 8|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $67 + $70;
  $72 = ((($4)) + 8|0);
  HEAPF64[$72>>3] = $71;
  $73 = $5;
  $74 = +HEAPF64[$73>>3];
  $75 = $13;
  $76 = $74 * $75;
  HEAPF64[$4>>3] = $76;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $77 = ((($4)) + 8|0);
  HEAPF64[$77>>3] = inf;
  HEAPF64[$4>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _asinhy($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+Math_abs((+$3)));
 $2 = $4;
 $5 = $2;
 $6 = $2;
 $7 = $2;
 $8 = (+_hypot(1.0,$7));
 $9 = $8 + 1.0;
 $10 = $6 / $9;
 $11 = 1.0 + $10;
 $12 = $5 * $11;
 $13 = (+_log1py($12));
 $2 = $13;
 $14 = $1;
 $15 = $14 < 0.0;
 $16 = $2;
 $17 = -$16;
 $18 = $15 ? $17 : $16;
 STACKTOP = sp;return (+$18);
}
function _clenS($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $25 = $6;
 $26 = $7;
 $27 = (($25) + ($26<<3)|0);
 $12 = $27;
 $28 = $8;
 $29 = (+Math_sin((+$28)));
 $21 = $29;
 $30 = $8;
 $31 = (+Math_cos((+$30)));
 $22 = $31;
 $32 = $9;
 $33 = (+_sinh($32));
 $23 = $33;
 $34 = $9;
 $35 = (+_cosh($34));
 $24 = $35;
 $36 = $22;
 $37 = 2.0 * $36;
 $38 = $24;
 $39 = $37 * $38;
 $13 = $39;
 $40 = $21;
 $41 = -2.0 * $40;
 $42 = $23;
 $43 = $41 * $42;
 $14 = $43;
 $18 = 0.0;
 $16 = 0.0;
 $19 = 0.0;
 $44 = $12;
 $45 = ((($44)) + -8|0);
 $12 = $45;
 $46 = +HEAPF64[$45>>3];
 $15 = $46;
 while(1) {
  $47 = $6;
  $48 = $12;
  $49 = $47;
  $50 = $48;
  $51 = (($49) - ($50))|0;
  $52 = (($51|0) / 8)&-1;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   break;
  }
  $54 = $16;
  $17 = $54;
  $55 = $19;
  $20 = $55;
  $56 = $15;
  $16 = $56;
  $57 = $18;
  $19 = $57;
  $58 = $17;
  $59 = -$58;
  $60 = $13;
  $61 = $16;
  $62 = $60 * $61;
  $63 = $59 + $62;
  $64 = $14;
  $65 = $19;
  $66 = $64 * $65;
  $67 = $63 - $66;
  $68 = $12;
  $69 = ((($68)) + -8|0);
  $12 = $69;
  $70 = +HEAPF64[$69>>3];
  $71 = $67 + $70;
  $15 = $71;
  $72 = $20;
  $73 = -$72;
  $74 = $14;
  $75 = $16;
  $76 = $74 * $75;
  $77 = $73 + $76;
  $78 = $13;
  $79 = $19;
  $80 = $78 * $79;
  $81 = $77 + $80;
  $18 = $81;
 }
 $82 = $21;
 $83 = $24;
 $84 = $82 * $83;
 $13 = $84;
 $85 = $22;
 $86 = $23;
 $87 = $85 * $86;
 $14 = $87;
 $88 = $13;
 $89 = $15;
 $90 = $88 * $89;
 $91 = $14;
 $92 = $18;
 $93 = $91 * $92;
 $94 = $90 - $93;
 $95 = $10;
 HEAPF64[$95>>3] = $94;
 $96 = $13;
 $97 = $18;
 $98 = $96 * $97;
 $99 = $14;
 $100 = $15;
 $101 = $99 * $100;
 $102 = $98 + $101;
 $103 = $11;
 HEAPF64[$103>>3] = $102;
 $104 = $10;
 $105 = +HEAPF64[$104>>3];
 STACKTOP = sp;return (+$105);
}
function _log1py($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = 1.0 + $4;
 $2 = $5;
 $6 = $2;
 $7 = $6 - 1.0;
 $3 = $7;
 $8 = $3;
 $9 = $8 == 0.0;
 $10 = $1;
 if ($9) {
  $16 = $10;
  STACKTOP = sp;return (+$16);
 }
 $11 = $2;
 $12 = (+Math_log((+$11)));
 $13 = $10 * $12;
 $14 = $3;
 $15 = $13 / $14;
 $16 = $15;
 STACKTOP = sp;return (+$16);
}
function _pj_utm($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_utm($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 337;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13041;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_utm($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $8 = (_pj_calloc(1,208)|0);
 $4 = $8;
 $9 = $4;
 $10 = (0|0)==($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_freeup_new_336($11)|0);
  $1 = $12;
  $79 = $1;
  STACKTOP = sp;return ($79|0);
 }
 $13 = $4;
 $14 = $2;
 $15 = ((($14)) + 416|0);
 HEAP32[$15>>2] = $13;
 $16 = $2;
 $17 = ((($16)) + 72|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $18 != 0.0;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 if (!($19)) {
  _pj_ctx_set_errno($21,-34);
  $22 = $2;
  _freeup_335($22);
  $1 = 0;
  $79 = $1;
  STACKTOP = sp;return ($79|0);
 }
 $23 = $2;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _pj_param($5,$21,$25,13100);
 $26 = HEAP32[$5>>2]|0;
 $27 = ($26|0)!=(0);
 $28 = $27 ? 1.0E+7 : 0.0;
 $29 = $2;
 $30 = ((($29)) + 144|0);
 HEAPF64[$30>>3] = $28;
 $31 = $2;
 $32 = ((($31)) + 136|0);
 HEAPF64[$32>>3] = 5.0E+5;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $2;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 _pj_param($6,$34,$37,13107);
 $38 = HEAP32[$6>>2]|0;
 $39 = ($38|0)!=(0);
 $40 = $2;
 do {
  if ($39) {
   $41 = HEAP32[$40>>2]|0;
   $42 = $2;
   $43 = ((($42)) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   _pj_param($7,$41,$44,13113);
   $45 = HEAP32[$7>>2]|0;
   $3 = $45;
   $46 = ($45|0)>(0);
   $47 = $3;
   $48 = ($47|0)<=(60);
   $or$cond = $46 & $48;
   if ($or$cond) {
    $49 = $3;
    $50 = (($49) + -1)|0;
    $3 = $50;
    break;
   }
   $51 = $2;
   $52 = HEAP32[$51>>2]|0;
   _pj_ctx_set_errno($52,-35);
   $53 = $2;
   _freeup_335($53);
   $1 = 0;
   $79 = $1;
   STACKTOP = sp;return ($79|0);
  } else {
   $54 = ((($40)) + 120|0);
   $55 = +HEAPF64[$54>>3];
   $56 = (+_adjlon($55));
   $57 = $56 + 3.1415926535897931;
   $58 = $57 * 30.0;
   $59 = $58 / 3.1415926535897931;
   $60 = (+Math_floor((+$59)));
   $61 = (~~(($60)));
   $3 = $61;
   $62 = ($61|0)<(0);
   if ($62) {
    $3 = 0;
    break;
   }
   $63 = $3;
   $64 = ($63|0)>=(60);
   if ($64) {
    $3 = 59;
   }
  }
 } while(0);
 $65 = $3;
 $66 = (+($65|0));
 $67 = $66 + 0.5;
 $68 = $67 * 3.1415926535897931;
 $69 = $68 / 30.0;
 $70 = $69 - 3.1415926535897931;
 $71 = $2;
 $72 = ((($71)) + 120|0);
 HEAPF64[$72>>3] = $70;
 $73 = $2;
 $74 = ((($73)) + 152|0);
 HEAPF64[$74>>3] = 0.99960000000000004;
 $75 = $2;
 $76 = ((($75)) + 128|0);
 HEAPF64[$76>>3] = 0.0;
 $77 = $2;
 $78 = (_setup_337($77)|0);
 $1 = $78;
 $79 = $1;
 STACKTOP = sp;return ($79|0);
}
function _pj_boggs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_boggs($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 340;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13119;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_boggs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 341;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_343($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_344($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_344($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_345($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 - 1.5707963267948966;
 $15 = (+Math_abs((+$14)));
 $16 = $15 < 9.9999999999999995E-8;
 if ($16) {
  HEAPF64[$4>>3] = 0.0;
 } else {
  $17 = $5;
  $18 = (+Math_sin((+$17)));
  $19 = $18 * 3.1415926535897931;
  $7 = $19;
  $8 = 20;
  while(1) {
   $20 = $8;
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $5;
   $23 = $5;
   $24 = (+Math_sin((+$23)));
   $25 = $22 + $24;
   $26 = $7;
   $27 = $25 - $26;
   $28 = $5;
   $29 = (+Math_cos((+$28)));
   $30 = 1.0 + $29;
   $31 = $27 / $30;
   $6 = $31;
   $32 = $5;
   $33 = $32 - $31;
   $5 = $33;
   $34 = $6;
   $35 = (+Math_abs((+$34)));
   $36 = $35 < 9.9999999999999995E-8;
   if ($36) {
    break;
   }
   $37 = $8;
   $38 = (($37) + -1)|0;
   $8 = $38;
  }
  $39 = $5;
  $40 = $39 * 0.5;
  $5 = $40;
  $41 = +HEAPF64[$1>>3];
  $42 = 2.0027599999999999 * $41;
  $43 = ((($1)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = (+Math_cos((+$44)));
  $46 = 1.0 / $45;
  $47 = $5;
  $48 = (+Math_cos((+$47)));
  $49 = 1.1107199999999999 / $48;
  $50 = $46 + $49;
  $51 = $42 / $50;
  HEAPF64[$4>>3] = $51;
 }
 $52 = ((($1)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $5;
 $55 = (+Math_sin((+$54)));
 $56 = 1.4142135623730951 * $55;
 $57 = $53 + $56;
 $58 = 0.49930999999999998 * $57;
 $59 = ((($4)) + 8|0);
 HEAPF64[$59>>3] = $58;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_collg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_collg($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 342;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13157;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_collg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 343;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 344;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_346($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_347($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_347($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_348($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 1.7724538509055161;
 $8 = $7 - 1.0;
 $9 = ((($4)) + 8|0);
 HEAPF64[$9>>3] = $8;
 $10 = ((($4)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($4)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 * $13;
 $15 = 1.0 - $14;
 $16 = ((($4)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = (+Math_abs((+$15)));
 $18 = $17 < 1.0;
 $19 = ((($4)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 do {
  if ($18) {
   $21 = (+Math_asin((+$20)));
   $22 = ((($4)) + 8|0);
   HEAPF64[$22>>3] = $21;
  } else {
   $23 = (+Math_abs((+$20)));
   $24 = $23 > 1.0000001000000001;
   if (!($24)) {
    $27 = ((($4)) + 8|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $28 < 0.0;
    $30 = $29 ? -1.5707963267948966 : 1.5707963267948966;
    $31 = ((($4)) + 8|0);
    HEAPF64[$31>>3] = $30;
    break;
   }
   $25 = $3;
   $26 = HEAP32[$25>>2]|0;
   _pj_ctx_set_errno($26,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $32 = ((($4)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (+Math_sin((+$33)));
 $35 = 1.0 - $34;
 HEAPF64[$4>>3] = $35;
 $36 = $35 <= 0.0;
 if ($36) {
  HEAPF64[$4>>3] = 0.0;
 } else {
  $37 = +HEAPF64[$1>>3];
  $38 = +HEAPF64[$4>>3];
  $39 = (+Math_sqrt((+$38)));
  $40 = 1.1283791670955126 * $39;
  $41 = $37 / $40;
  HEAPF64[$4>>3] = $41;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_349($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_sin((+$6)));
 $8 = 1.0 - $7;
 $9 = ((($4)) + 8|0);
 HEAPF64[$9>>3] = $8;
 $10 = $8 <= 0.0;
 $11 = ((($4)) + 8|0);
 if ($10) {
  HEAPF64[$11>>3] = 0.0;
 } else {
  $12 = +HEAPF64[$11>>3];
  $13 = (+Math_sqrt((+$12)));
  $14 = ((($4)) + 8|0);
  HEAPF64[$14>>3] = $13;
 }
 $15 = +HEAPF64[$1>>3];
 $16 = 1.1283791670955126 * $15;
 $17 = ((($4)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 * $18;
 HEAPF64[$4>>3] = $19;
 $20 = ((($4)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = 1.0 - $21;
 $23 = 1.7724538509055161 * $22;
 $24 = ((($4)) + 8|0);
 HEAPF64[$24>>3] = $23;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_comill($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_comill($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 345;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13179;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_comill($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 346;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 347;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_350($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_351($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_351($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_352($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 > 1.8850208335653647;
 $13 = ((($1)) + 8|0);
 if ($12) {
  HEAPF64[$13>>3] = 1.8850208335653647;
 } else {
  $14 = +HEAPF64[$13>>3];
  $15 = $14 < -1.8850208335653647;
  if ($15) {
   $16 = ((($1)) + 8|0);
   HEAPF64[$16>>3] = -1.8850208335653647;
  }
 }
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $5 = $18;
 while(1) {
  $19 = $5;
  $20 = $5;
  $21 = $19 * $20;
  $7 = $21;
  $22 = $5;
  $23 = $7;
  $24 = $7;
  $25 = -0.030540000000000001 * $24;
  $26 = 0.16039999999999999 + $25;
  $27 = $23 * $26;
  $28 = 0.99019999999999997 + $27;
  $29 = $22 * $28;
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $29 - $31;
  $8 = $32;
  $33 = $7;
  $34 = $7;
  $35 = -0.1527 * $34;
  $36 = 0.48119999999999996 + $35;
  $37 = $33 * $36;
  $38 = 0.99019999999999997 + $37;
  $9 = $38;
  $39 = $8;
  $40 = $9;
  $41 = $39 / $40;
  $6 = $41;
  $42 = $5;
  $43 = $42 - $41;
  $5 = $43;
  $44 = $6;
  $45 = (+Math_abs((+$44)));
  $46 = $45 < 9.9999999999999993E-12;
  if ($46) {
   break;
  }
 }
 $47 = $5;
 $48 = ((($4)) + 8|0);
 HEAPF64[$48>>3] = $47;
 $49 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $49;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_353($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $5 = $10;
 $11 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $5;
 $15 = $5;
 $16 = -0.030540000000000001 * $15;
 $17 = 0.16039999999999999 + $16;
 $18 = $14 * $17;
 $19 = 0.99019999999999997 + $18;
 $20 = $13 * $19;
 $21 = ((($4)) + 8|0);
 HEAPF64[$21>>3] = $20;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_crast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_crast($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 348;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13206;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_crast($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 349;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 350;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_354($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_355($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_355($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_356($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 * 0.32573500793527993;
 $8 = (+Math_asin((+$7)));
 $9 = 3.0 * $8;
 $10 = ((($4)) + 8|0);
 HEAPF64[$10>>3] = $9;
 $11 = +HEAPF64[$1>>3];
 $12 = $11 * 1.0233267079464885;
 $13 = ((($4)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($4)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 + $16;
 $18 = $17 * 0.33333333333333331;
 $19 = (+Math_cos((+$18)));
 $20 = 2.0 * $19;
 $21 = $20 - 1.0;
 $22 = $12 / $21;
 HEAPF64[$4>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_357($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 * 0.33333333333333331;
 HEAPF64[$5>>3] = $7;
 $8 = +HEAPF64[$1>>3];
 $9 = 0.97720502380583985 * $8;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 + $13;
 $15 = (+Math_cos((+$14)));
 $16 = 2.0 * $15;
 $17 = $16 - 1.0;
 $18 = $9 * $17;
 HEAPF64[$4>>3] = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_sin((+$20)));
 $22 = 3.0699801238394655 * $21;
 $23 = ((($4)) + 8|0);
 HEAPF64[$23>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_denoy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_denoy($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 351;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13250;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_denoy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 352;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _freeup_358($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_359($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_359($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_360($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = (+Math_abs((+$9)));
 HEAPF64[$1>>3] = $10;
 $11 = +HEAPF64[$1>>3];
 $12 = +HEAPF64[$1>>3];
 $13 = +HEAPF64[$1>>3];
 $14 = $12 * $13;
 $15 = $14 * 0.0016666666666666666;
 $16 = -0.083333333333333329 + $15;
 $17 = $11 * $16;
 $18 = 0.94999999999999996 + $17;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = 0.029999999999999999 * $22;
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $23 * $25;
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $26 * $28;
 $30 = ((($1)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $29 * $31;
 $33 = 0.90000000000000002 + $32;
 $34 = $20 * $33;
 $35 = $18 * $34;
 $36 = (+Math_cos((+$35)));
 $37 = +HEAPF64[$4>>3];
 $38 = $37 * $36;
 HEAPF64[$4>>3] = $38;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_eck1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 353;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13296;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 354;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 355;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_361($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_362($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_362($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_363($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 0.92131773192356126;
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = +HEAPF64[$1>>3];
 $10 = ((($4)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_abs((+$11)));
 $13 = 0.31830988618379069 * $12;
 $14 = 1.0 - $13;
 $15 = 0.92131773192356126 * $14;
 $16 = $9 / $15;
 HEAPF64[$4>>3] = $16;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_364($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.92131773192356126 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $10 = 0.31830988618379069 * $9;
 $11 = 1.0 - $10;
 $12 = $6 * $11;
 HEAPF64[$4>>3] = $12;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 0.92131773192356126 * $14;
 $16 = ((($4)) + 8|0);
 HEAPF64[$16>>3] = $15;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_eck2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 356;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13318;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 357;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 358;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_365($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_366($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_366($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_367($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = (+Math_abs((+$7)));
 $9 = $8 / 1.4472025091165353;
 $10 = 2.0 - $9;
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = $10;
 $12 = 0.46065886596178063 * $10;
 $13 = $5 / $12;
 HEAPF64[$4>>3] = $13;
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($4)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $15 * $17;
 $19 = 4.0 - $18;
 $20 = $19 * 0.33333333333333331;
 $21 = ((($4)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_abs((+$23)));
 $25 = $24 >= 1.0;
 $26 = ((($4)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 do {
  if ($25) {
   $28 = (+Math_abs((+$27)));
   $29 = $28 > 1.0000001000000001;
   if (!($29)) {
    $32 = ((($4)) + 8|0);
    $33 = +HEAPF64[$32>>3];
    $34 = $33 < 0.0;
    $35 = $34 ? -1.5707963267948966 : 1.5707963267948966;
    $36 = ((($4)) + 8|0);
    HEAPF64[$36>>3] = $35;
    break;
   }
   $30 = $3;
   $31 = HEAP32[$30>>2]|0;
   _pj_ctx_set_errno($31,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $37 = (+Math_asin((+$27)));
   $38 = ((($4)) + 8|0);
   HEAPF64[$38>>3] = $37;
  }
 } while(0);
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 < 0.0;
 if ($41) {
  $42 = ((($4)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = -$43;
  $45 = ((($4)) + 8|0);
  HEAPF64[$45>>3] = $44;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_368($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.46065886596178063 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $10 = (+Math_sin((+$9)));
 $11 = 3.0 * $10;
 $12 = 4.0 - $11;
 $13 = (+Math_sqrt((+$12)));
 $14 = ((($4)) + 8|0);
 HEAPF64[$14>>3] = $13;
 $15 = $6 * $13;
 HEAPF64[$4>>3] = $15;
 $16 = ((($4)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = 2.0 - $17;
 $19 = 1.4472025091165353 * $18;
 $20 = ((($4)) + 8|0);
 HEAPF64[$20>>3] = $19;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 < 0.0;
 if (!($23)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $24 = ((($4)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = -$25;
 $27 = ((($4)) + 8|0);
 HEAPF64[$27>>3] = $26;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_eck3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck3($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 359;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13340;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_370($7)|0);
  $1 = $8;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.42223820031577119;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 0.84447640063154239;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = 1.0;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 0.4052847345693511;
  $19 = $2;
  $20 = (_setup_371($19)|0);
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _freeup_369($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_370($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_370($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_371($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 360;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 361;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _s_inverse_372($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $5;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 / $13;
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = +HEAPF64[$1>>3];
 $17 = $5;
 $18 = +HEAPF64[$17>>3];
 $19 = $5;
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $5;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($4)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $24 * $26;
 $28 = ((($4)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $27 * $29;
 $31 = 1.0 - $30;
 $32 = (+_asqrt($31));
 $33 = $21 + $32;
 $34 = $18 * $33;
 $35 = $16 / $34;
 HEAPF64[$4>>3] = $35;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_373($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 * $13;
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = $5;
 $17 = +HEAPF64[$16>>3];
 $18 = +HEAPF64[$1>>3];
 $19 = $17 * $18;
 $20 = $5;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $5;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF64[$24>>3];
 $26 = ((($1)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $25 * $27;
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $28 * $30;
 $32 = 1.0 - $31;
 $33 = (+_asqrt($32));
 $34 = $22 + $33;
 $35 = $19 * $34;
 HEAPF64[$4>>3] = $35;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_kav7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_kav7($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 359;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13363;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_kav7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_370($7)|0);
  $1 = $8;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.86602540378439996;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 1.0;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 0.30396355092701333;
  $19 = $2;
  $20 = (_setup_371($19)|0);
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pj_wag6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag6($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 359;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13389;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_370($7)|0);
  $1 = $8;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 8|0);
  HEAPF64[$13>>3] = 0.94745000000000001;
  $14 = $3;
  HEAPF64[$14>>3] = 0.94745000000000001;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 0.30396355092701333;
  $19 = $2;
  $20 = (_setup_371($19)|0);
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pj_putp1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 359;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13411;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_370($7)|0);
  $1 = $8;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 1.8949;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 0.94745000000000001;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = -0.5;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 0.30396355092701333;
  $19 = $2;
  $20 = (_setup_371($19)|0);
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pj_eck4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck4($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 362;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13434;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 363;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 364;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_374($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_375($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_375($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_376($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 / 1.3265004281770023;
 $11 = (+_aasin($7,$10));
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = +HEAPF64[$1>>3];
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_cos((+$15)));
 $5 = $16;
 $17 = 1.0 + $16;
 $18 = 0.42223820031577119 * $17;
 $19 = $13 / $18;
 HEAPF64[$4>>3] = $19;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($4)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_sin((+$25)));
 $27 = $5;
 $28 = $27 + 2.0;
 $29 = $26 * $28;
 $30 = $23 + $29;
 $31 = $30 / 3.5707963267948966;
 $32 = (+_aasin($21,$31));
 $33 = ((($4)) + 8|0);
 HEAPF64[$33>>3] = $32;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_377($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_sin((+$11)));
 $13 = 3.5707963267948966 * $12;
 $5 = $13;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $15 * $17;
 $6 = $18;
 $19 = $6;
 $20 = $6;
 $21 = $20 * 0.0082680900000000005;
 $22 = 0.021884899999999999 + $21;
 $23 = $19 * $22;
 $24 = 0.89516799999999996 + $23;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 * $24;
 HEAPF64[$25>>3] = $27;
 $9 = 6;
 while(1) {
  $28 = $9;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_cos((+$31)));
  $8 = $32;
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+Math_sin((+$34)));
  $7 = $35;
  $36 = ((($1)) + 8|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $7;
  $39 = $8;
  $40 = $39 + 2.0;
  $41 = $38 * $40;
  $42 = $37 + $41;
  $43 = $5;
  $44 = $42 - $43;
  $45 = $8;
  $46 = $8;
  $47 = $46 + 2.0;
  $48 = $45 * $47;
  $49 = 1.0 + $48;
  $50 = $7;
  $51 = $7;
  $52 = $50 * $51;
  $53 = $49 - $52;
  $54 = $44 / $53;
  $6 = $54;
  $55 = ((($1)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 - $54;
  HEAPF64[$55>>3] = $57;
  $58 = $6;
  $59 = (+Math_abs((+$58)));
  $60 = $59 < 9.9999999999999995E-8;
  if ($60) {
   break;
  }
  $61 = $9;
  $62 = (($61) + -1)|0;
  $9 = $62;
 }
 $63 = $9;
 $64 = ($63|0)!=(0);
 $65 = +HEAPF64[$1>>3];
 $66 = 0.42223820031577119 * $65;
 if ($64) {
  $72 = ((($1)) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = (+Math_cos((+$73)));
  $75 = 1.0 + $74;
  $76 = $66 * $75;
  HEAPF64[$4>>3] = $76;
  $77 = ((($1)) + 8|0);
  $78 = +HEAPF64[$77>>3];
  $79 = (+Math_sin((+$78)));
  $80 = 1.3265004281770023 * $79;
  $81 = ((($4)) + 8|0);
  HEAPF64[$81>>3] = $80;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAPF64[$4>>3] = $66;
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $68 < 0.0;
  $70 = $69 ? -1.3265004281770023 : 1.3265004281770023;
  $71 = ((($4)) + 8|0);
  HEAPF64[$71>>3] = $70;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_eck5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck5($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 365;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13456;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck5($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 366;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 367;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_378($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_379($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_379($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_380($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 2.2675080272382262 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 1.1337540136191131 * $8;
 $10 = ((($4)) + 8|0);
 HEAPF64[$10>>3] = $9;
 $11 = (+Math_cos((+$9)));
 $12 = 1.0 + $11;
 $13 = $6 / $12;
 HEAPF64[$4>>3] = $13;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_381($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_cos((+$6)));
 $8 = 1.0 + $7;
 $9 = 0.4410127717245515 * $8;
 $10 = +HEAPF64[$1>>3];
 $11 = $9 * $10;
 HEAPF64[$4>>3] = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 0.882025543449103 * $13;
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = $14;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_fahey($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_fahey($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 368;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13477;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_fahey($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 369;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 370;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_382($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_383($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_383($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_384($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 1.8191520000000001;
 HEAPF64[$5>>3] = $7;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_atan((+$9)));
 $11 = 2.0 * $10;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 * $16;
 $18 = 1.0 - $17;
 $19 = ((($1)) + 8|0);
 HEAPF64[$19>>3] = $18;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_abs((+$21)));
 $23 = $22 < 9.9999999999999995E-7;
 if ($23) {
  $30 = 0.0;
  HEAPF64[$4>>3] = $30;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $24 = +HEAPF64[$1>>3];
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+Math_sqrt((+$26)));
 $28 = 0.81915199999999999 * $27;
 $29 = $24 / $28;
 $30 = $29;
 HEAPF64[$4>>3] = $30;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_385($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = 0.5 * $6;
 $8 = (+Math_tan((+$7)));
 HEAPF64[$4>>3] = $8;
 $9 = +HEAPF64[$4>>3];
 $10 = 1.8191520000000001 * $9;
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = $10;
 $12 = +HEAPF64[$1>>3];
 $13 = 0.81915199999999999 * $12;
 $14 = +HEAPF64[$4>>3];
 $15 = +HEAPF64[$4>>3];
 $16 = $14 * $15;
 $17 = 1.0 - $16;
 $18 = (+_asqrt($17));
 $19 = $13 * $18;
 HEAPF64[$4>>3] = $19;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_fouc_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_fouc_s($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 371;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13495;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_fouc_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,16)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_387($8)|0);
  $1 = $9;
  $41 = $1;
  STACKTOP = sp;return ($41|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pj_param($4,$14,$17,14943);
 $18 = +HEAPF64[$4>>3];
 $19 = $3;
 HEAPF64[$19>>3] = $18;
 $20 = $3;
 $21 = +HEAPF64[$20>>3];
 $22 = $21 < 0.0;
 if (!($22)) {
  $23 = $3;
  $24 = +HEAPF64[$23>>3];
  $25 = $24 > 1.0;
  if (!($25)) {
   $29 = $3;
   $30 = +HEAPF64[$29>>3];
   $31 = 1.0 - $30;
   $32 = $3;
   $33 = ((($32)) + 8|0);
   HEAPF64[$33>>3] = $31;
   $34 = $2;
   $35 = ((($34)) + 72|0);
   HEAPF64[$35>>3] = 0.0;
   $36 = $2;
   $37 = ((($36)) + 8|0);
   HEAP32[$37>>2] = 372;
   $38 = $2;
   $39 = ((($38)) + 4|0);
   HEAP32[$39>>2] = 373;
   $40 = $2;
   $1 = $40;
   $41 = $1;
   STACKTOP = sp;return ($41|0);
  }
 }
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 _pj_ctx_set_errno($27,-99);
 $28 = $2;
 _freeup_386($28);
 $1 = 0;
 $41 = $1;
 STACKTOP = sp;return ($41|0);
}
function _freeup_386($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_387($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_387($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_389($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = +HEAPF64[$11>>3];
 $13 = $12 != 0.0;
 if ($13) {
  $14 = ((($1)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = ((($4)) + 8|0);
  HEAPF64[$16>>3] = $15;
  $7 = 10;
  while(1) {
   $17 = $7;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $5;
   $20 = +HEAPF64[$19>>3];
   $21 = ((($4)) + 8|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $20 * $22;
   $24 = $5;
   $25 = ((($24)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = ((($4)) + 8|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (+Math_sin((+$28)));
   $30 = $26 * $29;
   $31 = $23 + $30;
   $32 = ((($1)) + 8|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $31 - $33;
   $35 = $5;
   $36 = +HEAPF64[$35>>3];
   $37 = $5;
   $38 = ((($37)) + 8|0);
   $39 = +HEAPF64[$38>>3];
   $40 = ((($4)) + 8|0);
   $41 = +HEAPF64[$40>>3];
   $42 = (+Math_cos((+$41)));
   $43 = $39 * $42;
   $44 = $36 + $43;
   $45 = $34 / $44;
   $6 = $45;
   $46 = ((($4)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = $47 - $45;
   HEAPF64[$46>>3] = $48;
   $49 = $6;
   $50 = (+Math_abs((+$49)));
   $51 = $50 < 9.9999999999999995E-8;
   if ($51) {
    break;
   }
   $52 = $7;
   $53 = (($52) + -1)|0;
   $7 = $53;
  }
  $54 = $7;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = ((($1)) + 8|0);
   $57 = +HEAPF64[$56>>3];
   $58 = $57 < 0.0;
   $59 = $58 ? -1.5707963267948966 : 1.5707963267948966;
   $60 = ((($4)) + 8|0);
   HEAPF64[$60>>3] = $59;
  }
 } else {
  $61 = $3;
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($1)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = (+_aasin($62,$64));
  $66 = ((($4)) + 8|0);
  HEAPF64[$66>>3] = $65;
 }
 $67 = ((($4)) + 8|0);
 $68 = +HEAPF64[$67>>3];
 $69 = (+Math_cos((+$68)));
 $6 = $69;
 $70 = +HEAPF64[$1>>3];
 $71 = $5;
 $72 = +HEAPF64[$71>>3];
 $73 = $5;
 $74 = ((($73)) + 8|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $6;
 $77 = $75 * $76;
 $78 = $72 + $77;
 $79 = $70 * $78;
 $80 = $6;
 $81 = $79 / $80;
 HEAPF64[$4>>3] = $81;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_390($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_cos((+$11)));
 $6 = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = $6;
 $15 = $13 * $14;
 $16 = $5;
 $17 = +HEAPF64[$16>>3];
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $6;
 $22 = $20 * $21;
 $23 = $17 + $22;
 $24 = $15 / $23;
 HEAPF64[$4>>3] = $24;
 $25 = $5;
 $26 = +HEAPF64[$25>>3];
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $26 * $28;
 $30 = $5;
 $31 = ((($30)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($1)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = (+Math_sin((+$34)));
 $36 = $32 * $35;
 $37 = $29 + $36;
 $38 = ((($4)) + 8|0);
 HEAPF64[$38>>3] = $37;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_gins8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gins8($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 374;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13527;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gins8($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 375;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_391($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_392($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_392($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_forward_393($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $5;
 $14 = $13 * 0.083333333333333329;
 $15 = 1.0 + $14;
 $16 = $12 * $15;
 $17 = ((($4)) + 8|0);
 HEAPF64[$17>>3] = $16;
 $18 = +HEAPF64[$1>>3];
 $19 = $5;
 $20 = 0.162388 * $19;
 $21 = 1.0 - $20;
 $22 = $18 * $21;
 HEAPF64[$4>>3] = $22;
 $23 = +HEAPF64[$1>>3];
 $24 = +HEAPF64[$1>>3];
 $25 = $23 * $24;
 $5 = $25;
 $26 = $5;
 $27 = 9.5242600000000003E-4 * $26;
 $28 = $5;
 $29 = $27 * $28;
 $30 = 0.87 - $29;
 $31 = +HEAPF64[$4>>3];
 $32 = $31 * $30;
 HEAPF64[$4>>3] = $32;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_gstmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gstmerc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 376;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13574;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gstmerc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,56)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_395($7)|0);
  $1 = $8;
  $119 = $1;
  STACKTOP = sp;return ($119|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = ((($12)) + 120|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $3;
  HEAPF64[$15>>3] = $14;
  $16 = $2;
  $17 = ((($16)) + 72|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $2;
  $20 = ((($19)) + 128|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+Math_cos((+$21)));
  $23 = (+Math_pow((+$22),4.0));
  $24 = $18 * $23;
  $25 = $2;
  $26 = ((($25)) + 72|0);
  $27 = +HEAPF64[$26>>3];
  $28 = 1.0 - $27;
  $29 = $24 / $28;
  $30 = 1.0 + $29;
  $31 = (+Math_sqrt((+$30)));
  $32 = $3;
  $33 = ((($32)) + 24|0);
  HEAPF64[$33>>3] = $31;
  $34 = $2;
  $35 = ((($34)) + 128|0);
  $36 = +HEAPF64[$35>>3];
  $37 = (+Math_sin((+$36)));
  $38 = $3;
  $39 = ((($38)) + 24|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $37 / $40;
  $42 = (+Math_asin((+$41)));
  $43 = $3;
  $44 = ((($43)) + 8|0);
  HEAPF64[$44>>3] = $42;
  $45 = $3;
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = -1.0 * $47;
  $49 = (+_pj_tsfn($48,0.0,0.0));
  $50 = (+Math_log((+$49)));
  $51 = $3;
  $52 = ((($51)) + 24|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $2;
  $55 = ((($54)) + 128|0);
  $56 = +HEAPF64[$55>>3];
  $57 = -1.0 * $56;
  $58 = $2;
  $59 = ((($58)) + 128|0);
  $60 = +HEAPF64[$59>>3];
  $61 = (+Math_sin((+$60)));
  $62 = -1.0 * $61;
  $63 = $2;
  $64 = ((($63)) + 88|0);
  $65 = +HEAPF64[$64>>3];
  $66 = (+_pj_tsfn($57,$62,$65));
  $67 = (+Math_log((+$66)));
  $68 = $53 * $67;
  $69 = $50 - $68;
  $70 = $3;
  $71 = ((($70)) + 16|0);
  HEAPF64[$71>>3] = $69;
  $72 = $2;
  $73 = ((($72)) + 152|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $2;
  $76 = ((($75)) + 56|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $74 * $77;
  $79 = $2;
  $80 = ((($79)) + 72|0);
  $81 = +HEAPF64[$80>>3];
  $82 = 1.0 - $81;
  $83 = (+Math_sqrt((+$82)));
  $84 = $78 * $83;
  $85 = $2;
  $86 = ((($85)) + 72|0);
  $87 = +HEAPF64[$86>>3];
  $88 = $2;
  $89 = ((($88)) + 128|0);
  $90 = +HEAPF64[$89>>3];
  $91 = (+Math_sin((+$90)));
  $92 = $87 * $91;
  $93 = $2;
  $94 = ((($93)) + 128|0);
  $95 = +HEAPF64[$94>>3];
  $96 = (+Math_sin((+$95)));
  $97 = $92 * $96;
  $98 = 1.0 - $97;
  $99 = $84 / $98;
  $100 = $3;
  $101 = ((($100)) + 32|0);
  HEAPF64[$101>>3] = $99;
  $102 = $3;
  $103 = ((($102)) + 40|0);
  HEAPF64[$103>>3] = 0.0;
  $104 = $3;
  $105 = ((($104)) + 32|0);
  $106 = +HEAPF64[$105>>3];
  $107 = -1.0 * $106;
  $108 = $3;
  $109 = ((($108)) + 8|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $107 * $110;
  $112 = $3;
  $113 = ((($112)) + 48|0);
  HEAPF64[$113>>3] = $111;
  $114 = $2;
  $115 = ((($114)) + 8|0);
  HEAP32[$115>>2] = 377;
  $116 = $2;
  $117 = ((($116)) + 4|0);
  HEAP32[$117>>2] = 378;
  $118 = $2;
  $1 = $118;
  $119 = $1;
  STACKTOP = sp;return ($119|0);
 }
 return (0)|0;
}
function _freeup_394($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_395($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_395($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_396($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = $3;
 $14 = ((($13)) + 56|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 * $15;
 $17 = $5;
 $18 = ((($17)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 - $19;
 $21 = $5;
 $22 = ((($21)) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 / $23;
 $25 = (+_sinh($24));
 $26 = ((($1)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $3;
 $29 = ((($28)) + 56|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $27 * $30;
 $32 = $5;
 $33 = ((($32)) + 48|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $31 - $34;
 $36 = $5;
 $37 = ((($36)) + 32|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $35 / $38;
 $40 = (+Math_cos((+$39)));
 $41 = $25 / $40;
 $42 = (+Math_atan((+$41)));
 $6 = $42;
 $43 = ((($1)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $3;
 $46 = ((($45)) + 56|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $44 * $47;
 $49 = $5;
 $50 = ((($49)) + 48|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $48 - $51;
 $53 = $5;
 $54 = ((($53)) + 32|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $52 / $55;
 $57 = (+Math_sin((+$56)));
 $58 = +HEAPF64[$1>>3];
 $59 = $3;
 $60 = ((($59)) + 56|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $58 * $61;
 $63 = $5;
 $64 = ((($63)) + 40|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $62 - $65;
 $67 = $5;
 $68 = ((($67)) + 32|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $66 / $69;
 $71 = (+_cosh($70));
 $72 = $57 / $71;
 $8 = $72;
 $73 = $8;
 $74 = (+Math_asin((+$73)));
 $75 = -1.0 * $74;
 $76 = (+_pj_tsfn($75,0.0,0.0));
 $77 = (+Math_log((+$76)));
 $7 = $77;
 $78 = $6;
 $79 = $5;
 $80 = ((($79)) + 24|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 / $81;
 HEAPF64[$4>>3] = $82;
 $83 = $3;
 $84 = HEAP32[$83>>2]|0;
 $85 = $7;
 $86 = $5;
 $87 = ((($86)) + 16|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $85 - $88;
 $90 = $5;
 $91 = ((($90)) + 24|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $89 / $92;
 $94 = (+Math_exp((+$93)));
 $95 = $3;
 $96 = ((($95)) + 88|0);
 $97 = +HEAPF64[$96>>3];
 $98 = (+_pj_phi2($84,$94,$97));
 $99 = -1.0 * $98;
 $100 = ((($4)) + 8|0);
 HEAPF64[$100>>3] = $99;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_397($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $5;
 $14 = ((($13)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = +HEAPF64[$1>>3];
 $17 = $15 * $16;
 $6 = $17;
 $18 = $5;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $5;
 $22 = ((($21)) + 24|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = -1.0 * $25;
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_sin((+$28)));
 $30 = -1.0 * $29;
 $31 = $3;
 $32 = ((($31)) + 88|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (+_pj_tsfn($26,$30,$33));
 $35 = (+Math_log((+$34)));
 $36 = $23 * $35;
 $37 = $20 + $36;
 $7 = $37;
 $38 = $6;
 $39 = (+Math_sin((+$38)));
 $40 = $7;
 $41 = (+_cosh($40));
 $42 = $39 / $41;
 $8 = $42;
 $43 = $8;
 $44 = (+Math_asin((+$43)));
 $45 = -1.0 * $44;
 $46 = (+_pj_tsfn($45,0.0,0.0));
 $47 = (+Math_log((+$46)));
 $9 = $47;
 $48 = $5;
 $49 = ((($48)) + 40|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $5;
 $52 = ((($51)) + 32|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $9;
 $55 = $53 * $54;
 $56 = $50 + $55;
 $57 = $3;
 $58 = ((($57)) + 96|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $56 * $59;
 HEAPF64[$4>>3] = $60;
 $61 = $5;
 $62 = ((($61)) + 48|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $5;
 $65 = ((($64)) + 32|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $7;
 $68 = (+_sinh($67));
 $69 = $6;
 $70 = (+Math_cos((+$69)));
 $71 = $68 / $70;
 $72 = (+Math_atan((+$71)));
 $73 = $66 * $72;
 $74 = $63 + $73;
 $75 = $3;
 $76 = ((($75)) + 96|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $74 * $77;
 $79 = ((($4)) + 8|0);
 HEAPF64[$79>>3] = $78;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_sinu($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_sinu($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 379;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13672;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_sinu($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_399($7)|0);
  $1 = $8;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 72|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (_pj_enfn($14)|0);
 $16 = $3;
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)!=(0|0);
 $18 = $2;
 if (!($17)) {
  _freeup_398($18);
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $19 = ((($18)) + 72|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 != 0.0;
 if ($21) {
  $22 = $2;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = 380;
  $24 = $2;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = 381;
 } else {
  $26 = $3;
  $27 = ((($26)) + 16|0);
  HEAPF64[$27>>3] = 1.0;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  HEAPF64[$29>>3] = 0.0;
  $30 = $2;
  _setup_402($30);
 }
 $31 = $2;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _freeup_398($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_399($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_399($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  _pj_dalloc($18);
 }
 $19 = $2;
 $20 = ((($19)) + 416|0);
 $21 = HEAP32[$20>>2]|0;
 (_pj_dealloc($21)|0);
 $22 = $2;
 $23 = (_pj_dealloc($22)|0);
 $1 = $23;
 $24 = $1;
 STACKTOP = sp;return ($24|0);
}
function _e_inverse_400($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $3;
 $11 = ((($10)) + 72|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = ((($13)) + 416|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = (+_pj_inv_mlfn($7,$9,$12,$16));
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = (+Math_abs((+$17)));
 $5 = $19;
 $20 = $19 < 1.5707963267948966;
 do {
  if ($20) {
   $21 = ((($4)) + 8|0);
   $22 = +HEAPF64[$21>>3];
   $23 = (+Math_sin((+$22)));
   $5 = $23;
   $24 = +HEAPF64[$1>>3];
   $25 = $3;
   $26 = ((($25)) + 72|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $5;
   $29 = $27 * $28;
   $30 = $5;
   $31 = $29 * $30;
   $32 = 1.0 - $31;
   $33 = (+Math_sqrt((+$32)));
   $34 = $24 * $33;
   $35 = ((($4)) + 8|0);
   $36 = +HEAPF64[$35>>3];
   $37 = (+Math_cos((+$36)));
   $38 = $34 / $37;
   HEAPF64[$4>>3] = $38;
  } else {
   $39 = $5;
   $40 = $39 - 1.0E-10;
   $41 = $40 < 1.5707963267948966;
   if ($41) {
    HEAPF64[$4>>3] = 0.0;
    break;
   }
   $42 = $3;
   $43 = HEAP32[$42>>2]|0;
   _pj_ctx_set_errno($43,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_401($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (+Math_sin((+$10)));
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_cos((+$13)));
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = (+_pj_mlfn($8,$11,$14,$18));
 $20 = ((($4)) + 8|0);
 HEAPF64[$20>>3] = $19;
 $21 = +HEAPF64[$1>>3];
 $22 = $6;
 $23 = $21 * $22;
 $24 = $3;
 $25 = ((($24)) + 72|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $5;
 $28 = $26 * $27;
 $29 = $5;
 $30 = $28 * $29;
 $31 = 1.0 - $30;
 $32 = (+Math_sqrt((+$31)));
 $33 = $23 / $32;
 HEAPF64[$4>>3] = $33;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _setup_402($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 416|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $1;
 $7 = ((($6)) + 72|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 382;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 383;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 + 1.0;
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 / $18;
 $20 = (+Math_sqrt((+$19)));
 $21 = $2;
 $22 = ((($21)) + 32|0);
 HEAPF64[$22>>3] = $20;
 $23 = $2;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 + 1.0;
 $27 = $20 / $26;
 $28 = $2;
 $29 = ((($28)) + 24|0);
 HEAPF64[$29>>3] = $27;
 STACKTOP = sp;return;
}
function _s_inverse_403($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 32|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 / $11;
 HEAPF64[$12>>3] = $14;
 $15 = $5;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 != 0.0;
 do {
  if ($18) {
   $19 = $3;
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = ((($21)) + 8|0);
   $23 = +HEAPF64[$22>>3];
   $24 = ((($1)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $26 = $23 * $25;
   $27 = ((($1)) + 8|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (+Math_sin((+$28)));
   $30 = $26 + $29;
   $31 = $5;
   $32 = ((($31)) + 16|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $30 / $33;
   $35 = (+_aasin($20,$34));
   $53 = $35;
  } else {
   $36 = $5;
   $37 = ((($36)) + 16|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $38 != 1.0;
   if ($39) {
    $40 = $3;
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($1)) + 8|0);
    $43 = +HEAPF64[$42>>3];
    $44 = (+Math_sin((+$43)));
    $45 = $5;
    $46 = ((($45)) + 16|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $44 / $47;
    $49 = (+_aasin($41,$48));
    $53 = $49;
    break;
   } else {
    $50 = ((($1)) + 8|0);
    $51 = +HEAPF64[$50>>3];
    $53 = $51;
    break;
   }
  }
 } while(0);
 $52 = ((($4)) + 8|0);
 HEAPF64[$52>>3] = $53;
 $54 = +HEAPF64[$1>>3];
 $55 = $5;
 $56 = ((($55)) + 24|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $5;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = ((($1)) + 8|0);
 $62 = +HEAPF64[$61>>3];
 $63 = (+Math_cos((+$62)));
 $64 = $60 + $63;
 $65 = $57 * $64;
 $66 = $54 / $65;
 HEAPF64[$4>>3] = $66;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_404($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 != 0.0;
 $16 = $5;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 if ($15) {
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = (+Math_sin((+$35)));
  $37 = $18 * $36;
  $6 = $37;
  $8 = 8;
  while(1) {
   $38 = $8;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    break;
   }
   $40 = $5;
   $41 = ((($40)) + 8|0);
   $42 = +HEAPF64[$41>>3];
   $43 = ((($1)) + 8|0);
   $44 = +HEAPF64[$43>>3];
   $45 = $42 * $44;
   $46 = ((($1)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = (+Math_sin((+$47)));
   $49 = $45 + $48;
   $50 = $6;
   $51 = $49 - $50;
   $52 = $5;
   $53 = ((($52)) + 8|0);
   $54 = +HEAPF64[$53>>3];
   $55 = ((($1)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = (+Math_cos((+$56)));
   $58 = $54 + $57;
   $59 = $51 / $58;
   $7 = $59;
   $60 = ((($1)) + 8|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $61 - $59;
   HEAPF64[$60>>3] = $62;
   $63 = $7;
   $64 = (+Math_abs((+$63)));
   $65 = $64 < 9.9999999999999995E-8;
   if ($65) {
    break;
   }
   $66 = $8;
   $67 = (($66) + -1)|0;
   $8 = $67;
  }
  $68 = $8;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   $70 = $3;
   $71 = HEAP32[$70>>2]|0;
   _pj_ctx_set_errno($71,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 } else {
  $19 = $18 != 1.0;
  if ($19) {
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = $5;
   $23 = ((($22)) + 16|0);
   $24 = +HEAPF64[$23>>3];
   $25 = ((($1)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (+Math_sin((+$26)));
   $28 = $24 * $27;
   $29 = (+_aasin($21,$28));
   $33 = $29;
  } else {
   $30 = ((($1)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $33 = $31;
  }
  $32 = ((($1)) + 8|0);
  HEAPF64[$32>>3] = $33;
 }
 $72 = $5;
 $73 = ((($72)) + 24|0);
 $74 = +HEAPF64[$73>>3];
 $75 = +HEAPF64[$1>>3];
 $76 = $74 * $75;
 $77 = $5;
 $78 = ((($77)) + 8|0);
 $79 = +HEAPF64[$78>>3];
 $80 = ((($1)) + 8|0);
 $81 = +HEAPF64[$80>>3];
 $82 = (+Math_cos((+$81)));
 $83 = $79 + $82;
 $84 = $76 * $83;
 HEAPF64[$4>>3] = $84;
 $85 = $5;
 $86 = ((($85)) + 32|0);
 $87 = +HEAPF64[$86>>3];
 $88 = ((($1)) + 8|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $87 * $89;
 $91 = ((($4)) + 8|0);
 HEAPF64[$91>>3] = $90;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_eck6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_eck6($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 379;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13717;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_eck6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_399($7)|0);
  $1 = $8;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 8|0);
  HEAPF64[$13>>3] = 1.0;
  $14 = $3;
  $15 = ((($14)) + 16|0);
  HEAPF64[$15>>3] = 2.5707963267948966;
  $16 = $2;
  _setup_402($16);
  $17 = $2;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _pj_mbtfps($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mbtfps($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 379;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13739;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mbtfps($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_399($7)|0);
  $1 = $8;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = ((($12)) + 8|0);
  HEAPF64[$13>>3] = 0.5;
  $14 = $3;
  $15 = ((($14)) + 16|0);
  HEAPF64[$15>>3] = 1.7853981633974483;
  $16 = $2;
  _setup_402($16);
  $17 = $2;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _pj_gn_sinu($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_gn_sinu($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 379;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13788;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_gn_sinu($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $8 = (_pj_calloc(1,40)|0);
 $3 = $8;
 $9 = $3;
 $10 = (0|0)==($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_freeup_new_399($11)|0);
  $1 = $12;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 }
 $13 = $3;
 $14 = $2;
 $15 = ((($14)) + 416|0);
 HEAP32[$15>>2] = $13;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 _pj_param($4,$17,$20,14940);
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  _pj_param($5,$24,$27,13833);
  $28 = HEAP32[$5>>2]|0;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $2;
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = ((($32)) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   _pj_param($6,$31,$34,14943);
   $35 = +HEAPF64[$6>>3];
   $36 = $3;
   $37 = ((($36)) + 16|0);
   HEAPF64[$37>>3] = $35;
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = $2;
   $41 = ((($40)) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   _pj_param($7,$39,$42,18337);
   $43 = +HEAPF64[$7>>3];
   $44 = $3;
   $45 = ((($44)) + 8|0);
   HEAPF64[$45>>3] = $43;
   $46 = $2;
   _setup_402($46);
   $47 = $2;
   $1 = $47;
   $51 = $1;
   STACKTOP = sp;return ($51|0);
  }
 }
 $48 = $2;
 $49 = HEAP32[$48>>2]|0;
 _pj_ctx_set_errno($49,-99);
 $50 = $2;
 _freeup_398($50);
 $1 = 0;
 $51 = $1;
 STACKTOP = sp;return ($51|0);
}
function _pj_goode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_goode($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 384;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13836;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_goode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_410($7)|0);
  $1 = $8;
  $52 = $1;
  STACKTOP = sp;return ($52|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 72|0);
 HEAPF64[$13>>3] = 0.0;
 $14 = (_pj_sinu(0)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)!=(0|0);
 if ($16) {
  $17 = (_pj_moll(0)|0);
  $18 = $3;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = ($17|0)!=(0|0);
  if ($20) {
   $22 = $3;
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 72|0);
   HEAPF64[$24>>3] = 0.0;
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = $3;
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$28>>2] = $26;
   $29 = $2;
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$33>>2] = $30;
   $34 = $3;
   $35 = HEAP32[$34>>2]|0;
   $36 = (_pj_sinu($35)|0);
   $37 = $3;
   HEAP32[$37>>2] = $36;
   $38 = ($36|0)!=(0|0);
   if ($38) {
    $39 = $3;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_pj_moll($41)|0);
    $43 = $3;
    $44 = ((($43)) + 4|0);
    HEAP32[$44>>2] = $42;
    $45 = ($42|0)!=(0|0);
    if ($45) {
     $47 = $2;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = 385;
     $49 = $2;
     $50 = ((($49)) + 8|0);
     HEAP32[$50>>2] = 386;
     $51 = $2;
     $1 = $51;
     $52 = $1;
     STACKTOP = sp;return ($52|0);
    }
   }
   $46 = $2;
   _freeup_409($46);
   $1 = 0;
   $52 = $1;
   STACKTOP = sp;return ($52|0);
  }
 }
 $21 = $2;
 _freeup_409($21);
 $1 = 0;
 $52 = $1;
 STACKTOP = sp;return ($52|0);
}
function _freeup_409($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_410($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_410($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  (_pj_dealloc($18)|0);
 }
 $19 = $2;
 $20 = ((($19)) + 416|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $2;
  $26 = ((($25)) + 416|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  (_pj_dealloc($29)|0);
 }
 $30 = $2;
 $31 = ((($30)) + 416|0);
 $32 = HEAP32[$31>>2]|0;
 (_pj_dealloc($32)|0);
 $33 = $2;
 $34 = (_pj_dealloc($33)|0);
 $1 = $34;
 $35 = $1;
 STACKTOP = sp;return ($35|0);
}
function _s_forward_411($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 48|0;
 $4 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 <= 0.7109307819790236;
 $15 = $5;
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = HEAP32[$19>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  FUNCTION_TABLE_viii[$18 & 511]($6,$$byval_copy,$20);
  ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$6+12>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $21 = ((($15)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
  FUNCTION_TABLE_viii[$24 & 511]($7,$$byval_copy1,$27);
  ;HEAP32[$4>>2]=HEAP32[$7>>2]|0;HEAP32[$4+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$7+12>>2]|0;
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29 >= 0.0;
  $31 = $30 ? 0.0528 : -0.0528;
  $32 = ((($4)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 - $31;
  HEAPF64[$32>>3] = $34;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_inverse_412($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 48|0;
 $4 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_abs((+$12)));
 $14 = $13 <= 0.7109307819790236;
 if ($14) {
  $15 = $5;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = HEAP32[$19>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  FUNCTION_TABLE_viii[$18 & 511]($6,$$byval_copy,$20);
  ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$6+12>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 >= 0.0;
  $24 = $23 ? 0.0528 : -0.0528;
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 + $24;
  HEAPF64[$25>>3] = $27;
  $28 = $5;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
  FUNCTION_TABLE_viii[$32 & 511]($7,$$byval_copy1,$35);
  ;HEAP32[$4>>2]=HEAP32[$7>>2]|0;HEAP32[$4+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$7+12>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_igh($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_igh($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 387;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13865;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_igh($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $2 = $0;
 ;HEAP32[$5>>2]=HEAP32[1976>>2]|0;HEAP32[$5+4>>2]=HEAP32[1976+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[1976+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[1976+12>>2]|0;
 $9 = (_pj_calloc(1,56)|0);
 $6 = $9;
 $10 = $6;
 $11 = (0|0)==($10|0);
 if ($11) {
  $12 = $2;
  $13 = (_freeup_new_414($12)|0);
  $1 = $13;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $14 = $6;
 $15 = $2;
 $16 = ((($15)) + 416|0);
 HEAP32[$16>>2] = $14;
 $17 = (_pj_sinu(0)|0);
 $18 = $6;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = ($17|0)!=(0|0);
 if (!($20)) {
  $21 = $2;
  _freeup_413($21);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $22 = $6;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_pj_sinu($24)|0);
 $26 = $6;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = $25;
 $28 = ($25|0)!=(0|0);
 if (!($28)) {
  $29 = $2;
  _freeup_413($29);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $30 = $6;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 136|0);
 HEAPF64[$33>>3] = -1.7453292519943295;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 144|0);
 HEAPF64[$37>>3] = 0.0;
 $38 = $6;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 120|0);
 HEAPF64[$41>>3] = -1.7453292519943295;
 $42 = (_pj_sinu(0)|0);
 $43 = $6;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = $42;
 $45 = ($42|0)!=(0|0);
 if (!($45)) {
  $46 = $2;
  _freeup_413($46);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $47 = $6;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_pj_sinu($49)|0);
 $51 = $6;
 $52 = ((($51)) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = ($50|0)!=(0|0);
 if (!($53)) {
  $54 = $2;
  _freeup_413($54);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $55 = $6;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 136|0);
 HEAPF64[$58>>3] = 0.52359877559829882;
 $59 = $6;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 144|0);
 HEAPF64[$62>>3] = 0.0;
 $63 = $6;
 $64 = ((($63)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 120|0);
 HEAPF64[$66>>3] = 0.52359877559829882;
 $67 = (_pj_sinu(0)|0);
 $68 = $6;
 $69 = ((($68)) + 16|0);
 HEAP32[$69>>2] = $67;
 $70 = ($67|0)!=(0|0);
 if (!($70)) {
  $71 = $2;
  _freeup_413($71);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $72 = $6;
 $73 = ((($72)) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (_pj_sinu($74)|0);
 $76 = $6;
 $77 = ((($76)) + 16|0);
 HEAP32[$77>>2] = $75;
 $78 = ($75|0)!=(0|0);
 if (!($78)) {
  $79 = $2;
  _freeup_413($79);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $80 = $6;
 $81 = ((($80)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 136|0);
 HEAPF64[$83>>3] = -2.7925268031909272;
 $84 = $6;
 $85 = ((($84)) + 16|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 144|0);
 HEAPF64[$87>>3] = 0.0;
 $88 = $6;
 $89 = ((($88)) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($90)) + 120|0);
 HEAPF64[$91>>3] = -2.7925268031909272;
 $92 = (_pj_sinu(0)|0);
 $93 = $6;
 $94 = ((($93)) + 20|0);
 HEAP32[$94>>2] = $92;
 $95 = ($92|0)!=(0|0);
 if (!($95)) {
  $96 = $2;
  _freeup_413($96);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $97 = $6;
 $98 = ((($97)) + 20|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (_pj_sinu($99)|0);
 $101 = $6;
 $102 = ((($101)) + 20|0);
 HEAP32[$102>>2] = $100;
 $103 = ($100|0)!=(0|0);
 if (!($103)) {
  $104 = $2;
  _freeup_413($104);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $105 = $6;
 $106 = ((($105)) + 20|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 136|0);
 HEAPF64[$108>>3] = -1.0471975511965976;
 $109 = $6;
 $110 = ((($109)) + 20|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 144|0);
 HEAPF64[$112>>3] = 0.0;
 $113 = $6;
 $114 = ((($113)) + 20|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($115)) + 120|0);
 HEAPF64[$116>>3] = -1.0471975511965976;
 $117 = (_pj_sinu(0)|0);
 $118 = $6;
 $119 = ((($118)) + 24|0);
 HEAP32[$119>>2] = $117;
 $120 = ($117|0)!=(0|0);
 if (!($120)) {
  $121 = $2;
  _freeup_413($121);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $122 = $6;
 $123 = ((($122)) + 24|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (_pj_sinu($124)|0);
 $126 = $6;
 $127 = ((($126)) + 24|0);
 HEAP32[$127>>2] = $125;
 $128 = ($125|0)!=(0|0);
 if (!($128)) {
  $129 = $2;
  _freeup_413($129);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $130 = $6;
 $131 = ((($130)) + 24|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($132)) + 136|0);
 HEAPF64[$133>>3] = 0.3490658503988659;
 $134 = $6;
 $135 = ((($134)) + 24|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($136)) + 144|0);
 HEAPF64[$137>>3] = 0.0;
 $138 = $6;
 $139 = ((($138)) + 24|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($140)) + 120|0);
 HEAPF64[$141>>3] = 0.3490658503988659;
 $142 = (_pj_sinu(0)|0);
 $143 = $6;
 $144 = ((($143)) + 28|0);
 HEAP32[$144>>2] = $142;
 $145 = ($142|0)!=(0|0);
 if (!($145)) {
  $146 = $2;
  _freeup_413($146);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $147 = $6;
 $148 = ((($147)) + 28|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (_pj_sinu($149)|0);
 $151 = $6;
 $152 = ((($151)) + 28|0);
 HEAP32[$152>>2] = $150;
 $153 = ($150|0)!=(0|0);
 if (!($153)) {
  $154 = $2;
  _freeup_413($154);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $155 = $6;
 $156 = ((($155)) + 28|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ((($157)) + 136|0);
 HEAPF64[$158>>3] = 2.4434609527920612;
 $159 = $6;
 $160 = ((($159)) + 28|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($161)) + 144|0);
 HEAPF64[$162>>3] = 0.0;
 $163 = $6;
 $164 = ((($163)) + 28|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ((($165)) + 120|0);
 HEAPF64[$166>>3] = 2.4434609527920612;
 $167 = (_pj_moll(0)|0);
 $168 = $6;
 HEAP32[$168>>2] = $167;
 $169 = ($167|0)!=(0|0);
 if (!($169)) {
  $170 = $2;
  _freeup_413($170);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $171 = $6;
 $172 = HEAP32[$171>>2]|0;
 $173 = (_pj_moll($172)|0);
 $174 = $6;
 HEAP32[$174>>2] = $173;
 $175 = ($173|0)!=(0|0);
 if (!($175)) {
  $176 = $2;
  _freeup_413($176);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $177 = $6;
 $178 = HEAP32[$177>>2]|0;
 $179 = ((($178)) + 136|0);
 HEAPF64[$179>>3] = -1.7453292519943295;
 $180 = $6;
 $181 = HEAP32[$180>>2]|0;
 $182 = ((($181)) + 144|0);
 HEAPF64[$182>>3] = 0.0;
 $183 = $6;
 $184 = HEAP32[$183>>2]|0;
 $185 = ((($184)) + 120|0);
 HEAPF64[$185>>3] = -1.7453292519943295;
 $186 = $6;
 $187 = HEAP32[$186>>2]|0;
 $188 = ((($187)) + 4|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = $6;
 $191 = HEAP32[$190>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$189 & 511]($7,$$byval_copy,$191);
 ;HEAP32[$3>>2]=HEAP32[$7>>2]|0;HEAP32[$3+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$7+12>>2]|0;
 $192 = $6;
 $193 = ((($192)) + 8|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ((($194)) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $6;
 $198 = ((($197)) + 8|0);
 $199 = HEAP32[$198>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$196 & 511]($8,$$byval_copy1,$199);
 ;HEAP32[$4>>2]=HEAP32[$8>>2]|0;HEAP32[$4+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$8+12>>2]|0;
 $200 = ((($4)) + 8|0);
 $201 = +HEAPF64[$200>>3];
 $202 = ((($3)) + 8|0);
 $203 = +HEAPF64[$202>>3];
 $204 = $201 - $203;
 $205 = $6;
 $206 = ((($205)) + 48|0);
 HEAPF64[$206>>3] = $204;
 $207 = $6;
 $208 = ((($207)) + 48|0);
 $209 = +HEAPF64[$208>>3];
 $210 = $6;
 $211 = HEAP32[$210>>2]|0;
 $212 = ((($211)) + 144|0);
 HEAPF64[$212>>3] = $209;
 $213 = (_pj_moll(0)|0);
 $214 = $6;
 $215 = ((($214)) + 4|0);
 HEAP32[$215>>2] = $213;
 $216 = ($213|0)!=(0|0);
 if (!($216)) {
  $217 = $2;
  _freeup_413($217);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $218 = $6;
 $219 = ((($218)) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = (_pj_moll($220)|0);
 $222 = $6;
 $223 = ((($222)) + 4|0);
 HEAP32[$223>>2] = $221;
 $224 = ($221|0)!=(0|0);
 if (!($224)) {
  $225 = $2;
  _freeup_413($225);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $226 = $6;
 $227 = ((($226)) + 4|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ((($228)) + 136|0);
 HEAPF64[$229>>3] = 0.52359877559829882;
 $230 = $6;
 $231 = ((($230)) + 48|0);
 $232 = +HEAPF64[$231>>3];
 $233 = $6;
 $234 = ((($233)) + 4|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ((($235)) + 144|0);
 HEAPF64[$236>>3] = $232;
 $237 = $6;
 $238 = ((($237)) + 4|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ((($239)) + 120|0);
 HEAPF64[$240>>3] = 0.52359877559829882;
 $241 = (_pj_moll(0)|0);
 $242 = $6;
 $243 = ((($242)) + 32|0);
 HEAP32[$243>>2] = $241;
 $244 = ($241|0)!=(0|0);
 if (!($244)) {
  $245 = $2;
  _freeup_413($245);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $246 = $6;
 $247 = ((($246)) + 32|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = (_pj_moll($248)|0);
 $250 = $6;
 $251 = ((($250)) + 32|0);
 HEAP32[$251>>2] = $249;
 $252 = ($249|0)!=(0|0);
 if (!($252)) {
  $253 = $2;
  _freeup_413($253);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $254 = $6;
 $255 = ((($254)) + 32|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ((($256)) + 136|0);
 HEAPF64[$257>>3] = -2.7925268031909272;
 $258 = $6;
 $259 = ((($258)) + 48|0);
 $260 = +HEAPF64[$259>>3];
 $261 = -$260;
 $262 = $6;
 $263 = ((($262)) + 32|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ((($264)) + 144|0);
 HEAPF64[$265>>3] = $261;
 $266 = $6;
 $267 = ((($266)) + 32|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ((($268)) + 120|0);
 HEAPF64[$269>>3] = -2.7925268031909272;
 $270 = (_pj_moll(0)|0);
 $271 = $6;
 $272 = ((($271)) + 36|0);
 HEAP32[$272>>2] = $270;
 $273 = ($270|0)!=(0|0);
 if (!($273)) {
  $274 = $2;
  _freeup_413($274);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $275 = $6;
 $276 = ((($275)) + 36|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = (_pj_moll($277)|0);
 $279 = $6;
 $280 = ((($279)) + 36|0);
 HEAP32[$280>>2] = $278;
 $281 = ($278|0)!=(0|0);
 if (!($281)) {
  $282 = $2;
  _freeup_413($282);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $283 = $6;
 $284 = ((($283)) + 36|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = ((($285)) + 136|0);
 HEAPF64[$286>>3] = -1.0471975511965976;
 $287 = $6;
 $288 = ((($287)) + 48|0);
 $289 = +HEAPF64[$288>>3];
 $290 = -$289;
 $291 = $6;
 $292 = ((($291)) + 36|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = ((($293)) + 144|0);
 HEAPF64[$294>>3] = $290;
 $295 = $6;
 $296 = ((($295)) + 36|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = ((($297)) + 120|0);
 HEAPF64[$298>>3] = -1.0471975511965976;
 $299 = (_pj_moll(0)|0);
 $300 = $6;
 $301 = ((($300)) + 40|0);
 HEAP32[$301>>2] = $299;
 $302 = ($299|0)!=(0|0);
 if (!($302)) {
  $303 = $2;
  _freeup_413($303);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $304 = $6;
 $305 = ((($304)) + 40|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = (_pj_moll($306)|0);
 $308 = $6;
 $309 = ((($308)) + 40|0);
 HEAP32[$309>>2] = $307;
 $310 = ($307|0)!=(0|0);
 if (!($310)) {
  $311 = $2;
  _freeup_413($311);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $312 = $6;
 $313 = ((($312)) + 40|0);
 $314 = HEAP32[$313>>2]|0;
 $315 = ((($314)) + 136|0);
 HEAPF64[$315>>3] = 0.3490658503988659;
 $316 = $6;
 $317 = ((($316)) + 48|0);
 $318 = +HEAPF64[$317>>3];
 $319 = -$318;
 $320 = $6;
 $321 = ((($320)) + 40|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = ((($322)) + 144|0);
 HEAPF64[$323>>3] = $319;
 $324 = $6;
 $325 = ((($324)) + 40|0);
 $326 = HEAP32[$325>>2]|0;
 $327 = ((($326)) + 120|0);
 HEAPF64[$327>>3] = 0.3490658503988659;
 $328 = (_pj_moll(0)|0);
 $329 = $6;
 $330 = ((($329)) + 44|0);
 HEAP32[$330>>2] = $328;
 $331 = ($328|0)!=(0|0);
 if (!($331)) {
  $332 = $2;
  _freeup_413($332);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 $333 = $6;
 $334 = ((($333)) + 44|0);
 $335 = HEAP32[$334>>2]|0;
 $336 = (_pj_moll($335)|0);
 $337 = $6;
 $338 = ((($337)) + 44|0);
 HEAP32[$338>>2] = $336;
 $339 = ($336|0)!=(0|0);
 if ($339) {
  $341 = $6;
  $342 = ((($341)) + 44|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = ((($343)) + 136|0);
  HEAPF64[$344>>3] = 2.4434609527920612;
  $345 = $6;
  $346 = ((($345)) + 48|0);
  $347 = +HEAPF64[$346>>3];
  $348 = -$347;
  $349 = $6;
  $350 = ((($349)) + 44|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ((($351)) + 144|0);
  HEAPF64[$352>>3] = $348;
  $353 = $6;
  $354 = ((($353)) + 44|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = ((($355)) + 120|0);
  HEAPF64[$356>>3] = 2.4434609527920612;
  $357 = $2;
  $358 = ((($357)) + 8|0);
  HEAP32[$358>>2] = 388;
  $359 = $2;
  $360 = ((($359)) + 4|0);
  HEAP32[$360>>2] = 389;
  $361 = $2;
  $362 = ((($361)) + 72|0);
  HEAPF64[$362>>3] = 0.0;
  $363 = $2;
  $1 = $363;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 } else {
  $340 = $2;
  _freeup_413($340);
  $1 = 0;
  $364 = $1;
  STACKTOP = sp;return ($364|0);
 }
 return (0)|0;
}
function _freeup_413($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_414($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_414($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (0|0)==($4|0);
 if ($5) {
  $1 = 0;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $6 = $2;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (0|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = (_pj_dealloc($10)|0);
  $1 = $11;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $3 = 0;
 while(1) {
  $12 = $3;
  $13 = ($12|0)<(12);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $2;
  $16 = ((($15)) + 416|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $3;
   $22 = $2;
   $23 = ((($22)) + 416|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   (_pj_dealloc($26)|0);
  }
  $27 = $3;
  $28 = (($27) + 1)|0;
  $3 = $28;
 }
 $29 = $2;
 $30 = ((($29)) + 416|0);
 $31 = HEAP32[$30>>2]|0;
 (_pj_dealloc($31)|0);
 $32 = $2;
 $33 = (_pj_dealloc($32)|0);
 $1 = $33;
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _s_inverse_415($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0;
 var $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0;
 var $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 24|0;
 $9 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $5;
 $14 = ((($13)) + 48|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_sqrt(2.0));
 $17 = $15 + $16;
 $6 = $17;
 $7 = 0;
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $6;
 $21 = $20 + 1.0E-10;
 $22 = $19 > $21;
 do {
  if ($22) {
   label = 3;
  } else {
   $23 = ((($1)) + 8|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $6;
   $26 = -$25;
   $27 = $26 + 1.0E-10;
   $28 = $24 < $27;
   if ($28) {
    label = 3;
   } else {
    $29 = ((($1)) + 8|0);
    $30 = +HEAPF64[$29>>3];
    $31 = $30 >= 0.71098798999339452;
    if ($31) {
     $32 = +HEAPF64[$1>>3];
     $33 = $32 <= -0.69813170079773179;
     $34 = $33 ? 1 : 2;
     $7 = $34;
     break;
    }
    $35 = ((($1)) + 8|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $36 >= 0.0;
    if ($37) {
     $38 = +HEAPF64[$1>>3];
     $39 = $38 <= -0.69813170079773179;
     $40 = $39 ? 3 : 4;
     $7 = $40;
     break;
    }
    $41 = ((($1)) + 8|0);
    $42 = +HEAPF64[$41>>3];
    $43 = $42 >= -0.71098798999339452;
    $44 = +HEAPF64[$1>>3];
    $45 = $44 <= -1.7453292519943295;
    if ($43) {
     if ($45) {
      $7 = 5;
      break;
     }
     $46 = +HEAPF64[$1>>3];
     $47 = $46 <= -0.3490658503988659;
     if ($47) {
      $7 = 6;
      break;
     }
     $48 = +HEAPF64[$1>>3];
     $49 = $48 <= 1.3962634015954636;
     if ($49) {
      $7 = 7;
      break;
     } else {
      $7 = 8;
      break;
     }
    } else {
     if ($45) {
      $7 = 9;
      break;
     }
     $50 = +HEAPF64[$1>>3];
     $51 = $50 <= -0.3490658503988659;
     if ($51) {
      $7 = 10;
      break;
     }
     $52 = +HEAPF64[$1>>3];
     $53 = $52 <= 1.3962634015954636;
     if ($53) {
      $7 = 11;
      break;
     } else {
      $7 = 12;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = 0;
 }
 $54 = $7;
 $55 = ($54|0)!=(0);
 if ($55) {
  $8 = 0;
  $56 = $7;
  $57 = (($56) - 1)|0;
  $58 = $5;
  $59 = (($58) + ($57<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 136|0);
  $62 = +HEAPF64[$61>>3];
  $63 = +HEAPF64[$1>>3];
  $64 = $63 - $62;
  HEAPF64[$1>>3] = $64;
  $65 = $7;
  $66 = (($65) - 1)|0;
  $67 = $5;
  $68 = (($67) + ($66<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 144|0);
  $71 = +HEAPF64[$70>>3];
  $72 = ((($1)) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $73 - $71;
  HEAPF64[$72>>3] = $74;
  $75 = $7;
  $76 = (($75) - 1)|0;
  $77 = $5;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $7;
  $83 = (($82) - 1)|0;
  $84 = $5;
  $85 = (($84) + ($83<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  FUNCTION_TABLE_viii[$81 & 511]($9,$$byval_copy,$86);
  ;HEAP32[$4>>2]=HEAP32[$9>>2]|0;HEAP32[$4+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$9+12>>2]|0;
  $87 = $7;
  $88 = (($87) - 1)|0;
  $89 = $5;
  $90 = (($89) + ($88<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($91)) + 120|0);
  $93 = +HEAPF64[$92>>3];
  $94 = +HEAPF64[$4>>3];
  $95 = $94 + $93;
  HEAPF64[$4>>3] = $95;
  $96 = $7;
  do {
   switch ($96|0) {
   case 1:  {
    $97 = +HEAPF64[$4>>3];
    $98 = $97 >= -3.1415926536897931;
    if ($98) {
     $99 = +HEAPF64[$4>>3];
     $100 = $99 <= -0.69813170069773178;
     if ($100) {
      $112 = 1;
     } else {
      label = 27;
     }
    } else {
     label = 27;
    }
    if ((label|0) == 27) {
     $101 = +HEAPF64[$4>>3];
     $102 = $101 >= -0.6981317008977318;
     if ($102) {
      $103 = +HEAPF64[$4>>3];
      $104 = $103 <= -0.17453292509943294;
      if ($104) {
       $105 = ((($4)) + 8|0);
       $106 = +HEAPF64[$105>>3];
       $107 = $106 >= 1.0471975510965976;
       if ($107) {
        $108 = ((($4)) + 8|0);
        $109 = +HEAPF64[$108>>3];
        $110 = $109 <= 1.5707963268948966;
        $112 = $110;
       } else {
        $112 = 0;
       }
      } else {
       $112 = 0;
      }
     } else {
      $112 = 0;
     }
    }
    $111 = $112&1;
    $8 = $111;
    break;
   }
   case 2:  {
    $113 = +HEAPF64[$4>>3];
    $114 = $113 >= -0.6981317008977318;
    if ($114) {
     $115 = +HEAPF64[$4>>3];
     $116 = $115 <= 3.1415926536897931;
     if ($116) {
      $138 = 1;
     } else {
      label = 34;
     }
    } else {
     label = 34;
    }
    do {
     if ((label|0) == 34) {
      $117 = +HEAPF64[$4>>3];
      $118 = $117 >= -3.1415926536897931;
      if ($118) {
       $119 = +HEAPF64[$4>>3];
       $120 = $119 <= -2.7925268030909272;
       if ($120) {
        $121 = ((($4)) + 8|0);
        $122 = +HEAPF64[$121>>3];
        $123 = $122 >= 0.87266462589716476;
        if ($123) {
         $124 = ((($4)) + 8|0);
         $125 = +HEAPF64[$124>>3];
         $126 = $125 <= 1.5707963268948966;
         if ($126) {
          $138 = 1;
          break;
         }
        }
       }
      }
      $127 = +HEAPF64[$4>>3];
      $128 = $127 >= -0.87266462609716478;
      if ($128) {
       $129 = +HEAPF64[$4>>3];
       $130 = $129 <= -0.69813170069773178;
       if ($130) {
        $131 = ((($4)) + 8|0);
        $132 = +HEAPF64[$131>>3];
        $133 = $132 >= 1.0471975510965976;
        if ($133) {
         $134 = ((($4)) + 8|0);
         $135 = +HEAPF64[$134>>3];
         $136 = $135 <= 1.5707963268948966;
         $138 = $136;
        } else {
         $138 = 0;
        }
       } else {
        $138 = 0;
       }
      } else {
       $138 = 0;
      }
     }
    } while(0);
    $137 = $138&1;
    $8 = $137;
    break;
   }
   case 3:  {
    $139 = +HEAPF64[$4>>3];
    $140 = $139 >= -3.1415926536897931;
    $141 = +HEAPF64[$4>>3];
    $142 = $141 <= -0.69813170069773178;
    $143 = $140 ? $142 : 0;
    $144 = $143&1;
    $8 = $144;
    break;
   }
   case 4:  {
    $145 = +HEAPF64[$4>>3];
    $146 = $145 >= -0.6981317008977318;
    $147 = +HEAPF64[$4>>3];
    $148 = $147 <= 3.1415926536897931;
    $149 = $146 ? $148 : 0;
    $150 = $149&1;
    $8 = $150;
    break;
   }
   case 5:  {
    $151 = +HEAPF64[$4>>3];
    $152 = $151 >= -3.1415926536897931;
    $153 = +HEAPF64[$4>>3];
    $154 = $153 <= -1.7453292518943295;
    $155 = $152 ? $154 : 0;
    $156 = $155&1;
    $8 = $156;
    break;
   }
   case 6:  {
    $157 = +HEAPF64[$4>>3];
    $158 = $157 >= -1.7453292520943295;
    $159 = +HEAPF64[$4>>3];
    $160 = $159 <= -0.34906585029886589;
    $161 = $158 ? $160 : 0;
    $162 = $161&1;
    $8 = $162;
    break;
   }
   case 7:  {
    $163 = +HEAPF64[$4>>3];
    $164 = $163 >= -0.3490658504988659;
    $165 = +HEAPF64[$4>>3];
    $166 = $165 <= 1.3962634016954636;
    $167 = $164 ? $166 : 0;
    $168 = $167&1;
    $8 = $168;
    break;
   }
   case 8:  {
    $169 = +HEAPF64[$4>>3];
    $170 = $169 >= 1.3962634014954636;
    $171 = +HEAPF64[$4>>3];
    $172 = $171 <= 3.1415926536897931;
    $173 = $170 ? $172 : 0;
    $174 = $173&1;
    $8 = $174;
    break;
   }
   case 9:  {
    $175 = +HEAPF64[$4>>3];
    $176 = $175 >= -3.1415926536897931;
    $177 = +HEAPF64[$4>>3];
    $178 = $177 <= -1.7453292518943295;
    $179 = $176 ? $178 : 0;
    $180 = $179&1;
    $8 = $180;
    break;
   }
   case 10:  {
    $181 = +HEAPF64[$4>>3];
    $182 = $181 >= -1.7453292520943295;
    $183 = +HEAPF64[$4>>3];
    $184 = $183 <= -0.34906585029886589;
    $185 = $182 ? $184 : 0;
    $186 = $185&1;
    $8 = $186;
    break;
   }
   case 11:  {
    $187 = +HEAPF64[$4>>3];
    $188 = $187 >= -0.3490658504988659;
    $189 = +HEAPF64[$4>>3];
    $190 = $189 <= 1.3962634016954636;
    $191 = $188 ? $190 : 0;
    $192 = $191&1;
    $8 = $192;
    break;
   }
   case 12:  {
    $193 = +HEAPF64[$4>>3];
    $194 = $193 >= 1.3962634014954636;
    $195 = +HEAPF64[$4>>3];
    $196 = $195 <= 3.1415926536897931;
    $197 = $194 ? $196 : 0;
    $198 = $197&1;
    $8 = $198;
    break;
   }
   default: {
   }
   }
  } while(0);
  $199 = $8;
  $200 = ($199|0)!=(0);
  $201 = $7;
  $202 = $200 ? $201 : 0;
  $7 = $202;
 }
 $203 = $7;
 $204 = ($203|0)!=(0);
 if (!($204)) {
  HEAPF64[$4>>3] = inf;
 }
 $205 = $7;
 $206 = ($205|0)!=(0);
 if ($206) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $207 = ((($4)) + 8|0);
 HEAPF64[$207>>3] = inf;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_416($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 32|0;
 $4 = sp + 16|0;
 $7 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 >= 0.71098798999339452;
 do {
  if ($13) {
   $14 = +HEAPF64[$1>>3];
   $15 = $14 <= -0.69813170079773179;
   $16 = $15 ? 1 : 2;
   $6 = $16;
  } else {
   $17 = ((($1)) + 8|0);
   $18 = +HEAPF64[$17>>3];
   $19 = $18 >= 0.0;
   if ($19) {
    $20 = +HEAPF64[$1>>3];
    $21 = $20 <= -0.69813170079773179;
    $22 = $21 ? 3 : 4;
    $6 = $22;
    break;
   }
   $23 = ((($1)) + 8|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $24 >= -0.71098798999339452;
   $26 = +HEAPF64[$1>>3];
   $27 = $26 <= -1.7453292519943295;
   if ($25) {
    if ($27) {
     $6 = 5;
     break;
    }
    $28 = +HEAPF64[$1>>3];
    $29 = $28 <= -0.3490658503988659;
    if ($29) {
     $6 = 6;
     break;
    }
    $30 = +HEAPF64[$1>>3];
    $31 = $30 <= 1.3962634015954636;
    if ($31) {
     $6 = 7;
     break;
    } else {
     $6 = 8;
     break;
    }
   } else {
    if ($27) {
     $6 = 9;
     break;
    }
    $32 = +HEAPF64[$1>>3];
    $33 = $32 <= -0.3490658503988659;
    if ($33) {
     $6 = 10;
     break;
    }
    $34 = +HEAPF64[$1>>3];
    $35 = $34 <= 1.3962634015954636;
    if ($35) {
     $6 = 11;
     break;
    } else {
     $6 = 12;
     break;
    }
   }
  }
 } while(0);
 $36 = $6;
 $37 = (($36) - 1)|0;
 $38 = $5;
 $39 = (($38) + ($37<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 120|0);
 $42 = +HEAPF64[$41>>3];
 $43 = +HEAPF64[$1>>3];
 $44 = $43 - $42;
 HEAPF64[$1>>3] = $44;
 $45 = $6;
 $46 = (($45) - 1)|0;
 $47 = $5;
 $48 = (($47) + ($46<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $6;
 $53 = (($52) - 1)|0;
 $54 = $5;
 $55 = (($54) + ($53<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 FUNCTION_TABLE_viii[$51 & 511]($7,$$byval_copy,$56);
 ;HEAP32[$4>>2]=HEAP32[$7>>2]|0;HEAP32[$4+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$7+12>>2]|0;
 $57 = $6;
 $58 = (($57) - 1)|0;
 $59 = $5;
 $60 = (($59) + ($58<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 136|0);
 $63 = +HEAPF64[$62>>3];
 $64 = +HEAPF64[$4>>3];
 $65 = $64 + $63;
 HEAPF64[$4>>3] = $65;
 $66 = $6;
 $67 = (($66) - 1)|0;
 $68 = $5;
 $69 = (($68) + ($67<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($70)) + 144|0);
 $72 = +HEAPF64[$71>>3];
 $73 = ((($4)) + 8|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $74 + $72;
 HEAPF64[$73>>3] = $75;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_hatano($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_hatano($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 390;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13906;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_hatano($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 391;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 392;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_417($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_418($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_418($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_419($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 < 0.0;
 $11 = $10 ? 0.51799515156538134 : 0.56863737426006067;
 $12 = $7 * $11;
 $5 = $12;
 $13 = $5;
 $14 = (+Math_abs((+$13)));
 $15 = $14 > 1.0;
 $16 = $5;
 do {
  if ($15) {
   $17 = (+Math_abs((+$16)));
   $18 = $17 > 1.0000009999999999;
   if (!($18)) {
    $21 = $5;
    $22 = $21 > 0.0;
    $23 = $22 ? 1.5707963267948966 : -1.5707963267948966;
    $5 = $23;
    break;
   }
   $19 = $3;
   $20 = HEAP32[$19>>2]|0;
   _pj_ctx_set_errno($20,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $24 = (+Math_asin((+$16)));
   $5 = $24;
  }
 } while(0);
 $25 = +HEAPF64[$1>>3];
 $26 = 1.1764705882352942 * $25;
 $27 = $5;
 $28 = (+Math_cos((+$27)));
 $29 = $26 / $28;
 HEAPF64[$4>>3] = $29;
 $30 = $5;
 $31 = $5;
 $32 = $31 + $30;
 $5 = $32;
 $33 = $5;
 $34 = $5;
 $35 = (+Math_sin((+$34)));
 $36 = $33 + $35;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $38 < 0.0;
 $40 = $39 ? 0.41023453108141927 : 0.37369906014686372;
 $41 = $36 * $40;
 $42 = ((($4)) + 8|0);
 HEAPF64[$42>>3] = $41;
 $43 = ((($4)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = (+Math_abs((+$44)));
 $46 = $45 > 1.0;
 $47 = ((($4)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 do {
  if ($46) {
   $49 = (+Math_abs((+$48)));
   $50 = $49 > 1.0000009999999999;
   if (!($50)) {
    $53 = ((($4)) + 8|0);
    $54 = +HEAPF64[$53>>3];
    $55 = $54 > 0.0;
    $56 = $55 ? 1.5707963267948966 : -1.5707963267948966;
    $57 = ((($4)) + 8|0);
    HEAPF64[$57>>3] = $56;
    break;
   }
   $51 = $3;
   $52 = HEAP32[$51>>2]|0;
   _pj_ctx_set_errno($52,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $58 = (+Math_asin((+$48)));
   $59 = ((($4)) + 8|0);
   HEAPF64[$59>>3] = $58;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_420($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_sin((+$9)));
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 < 0.0;
 $14 = $13 ? 2.43763 : 2.6759499999999998;
 $15 = $10 * $14;
 $6 = $15;
 $7 = 20;
 while(1) {
  $16 = $7;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = ((($1)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+Math_sin((+$21)));
  $23 = $19 + $22;
  $24 = $6;
  $25 = $23 - $24;
  $26 = ((($1)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = (+Math_cos((+$27)));
  $29 = 1.0 + $28;
  $30 = $25 / $29;
  $5 = $30;
  $31 = ((($1)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 - $30;
  HEAPF64[$31>>3] = $33;
  $34 = $5;
  $35 = (+Math_abs((+$34)));
  $36 = $35 < 9.9999999999999995E-8;
  if ($36) {
   break;
  }
  $37 = $7;
  $38 = (($37) + -1)|0;
  $7 = $38;
 }
 $39 = +HEAPF64[$1>>3];
 $40 = 0.84999999999999998 * $39;
 $41 = ((($1)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $42 * 0.5;
 HEAPF64[$41>>3] = $43;
 $44 = (+Math_cos((+$43)));
 $45 = $40 * $44;
 HEAPF64[$4>>3] = $45;
 $46 = ((($1)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = (+Math_sin((+$47)));
 $49 = ((($1)) + 8|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $50 < 0.0;
 $52 = $51 ? 1.93052 : 1.7585900000000001;
 $53 = $48 * $52;
 $54 = ((($4)) + 8|0);
 HEAPF64[$54>>3] = $53;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_loxim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_loxim($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 393;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13949;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_loxim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,24)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_422($8)|0);
  $1 = $9;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 416|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pj_param($4,$14,$17,15081);
 $18 = +HEAPF64[$4>>3];
 $19 = $3;
 HEAPF64[$19>>3] = $18;
 $20 = $3;
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_cos((+$21)));
 $23 = $3;
 $24 = ((($23)) + 8|0);
 HEAPF64[$24>>3] = $22;
 $25 = $3;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 < 1.0E-8;
 if ($28) {
  $29 = $2;
  $30 = HEAP32[$29>>2]|0;
  _pj_ctx_set_errno($30,-22);
  $31 = $2;
  _freeup_421($31);
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 } else {
  $32 = $3;
  $33 = +HEAPF64[$32>>3];
  $34 = 0.5 * $33;
  $35 = 0.78539816339744828 + $34;
  $36 = (+Math_tan((+$35)));
  $37 = $3;
  $38 = ((($37)) + 16|0);
  HEAPF64[$38>>3] = $36;
  $39 = $2;
  $40 = ((($39)) + 8|0);
  HEAP32[$40>>2] = 394;
  $41 = $2;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = 395;
  $43 = $2;
  $44 = ((($43)) + 72|0);
  HEAPF64[$44>>3] = 0.0;
  $45 = $2;
  $1 = $45;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _freeup_421($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_422($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_422($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_424($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $5;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 + $12;
 $14 = ((($4)) + 8|0);
 HEAPF64[$14>>3] = $13;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 1.0E-8;
 do {
  if ($18) {
   $19 = +HEAPF64[$1>>3];
   $20 = $5;
   $21 = ((($20)) + 8|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $19 / $22;
   HEAPF64[$4>>3] = $23;
  } else {
   $24 = ((($4)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $26 = 0.5 * $25;
   $27 = 0.78539816339744828 + $26;
   HEAPF64[$4>>3] = $27;
   $28 = +HEAPF64[$4>>3];
   $29 = (+Math_abs((+$28)));
   $30 = $29 < 1.0E-8;
   if (!($30)) {
    $31 = +HEAPF64[$4>>3];
    $32 = (+Math_abs((+$31)));
    $33 = $32 - 1.5707963267948966;
    $34 = (+Math_abs((+$33)));
    $35 = $34 < 1.0E-8;
    if (!($35)) {
     $36 = +HEAPF64[$1>>3];
     $37 = +HEAPF64[$4>>3];
     $38 = (+Math_tan((+$37)));
     $39 = $5;
     $40 = ((($39)) + 16|0);
     $41 = +HEAPF64[$40>>3];
     $42 = $38 / $41;
     $43 = (+Math_log((+$42)));
     $44 = $36 * $43;
     $45 = ((($1)) + 8|0);
     $46 = +HEAPF64[$45>>3];
     $47 = $44 / $46;
     HEAPF64[$4>>3] = $47;
     break;
    }
   }
   HEAPF64[$4>>3] = 0.0;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_425($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $5;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 - $12;
 $14 = ((($4)) + 8|0);
 HEAPF64[$14>>3] = $13;
 $15 = ((($4)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 1.0E-8;
 do {
  if ($18) {
   $19 = +HEAPF64[$1>>3];
   $20 = $5;
   $21 = ((($20)) + 8|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $19 * $22;
   HEAPF64[$4>>3] = $23;
  } else {
   $24 = ((($1)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $26 = 0.5 * $25;
   $27 = 0.78539816339744828 + $26;
   HEAPF64[$4>>3] = $27;
   $28 = +HEAPF64[$4>>3];
   $29 = (+Math_abs((+$28)));
   $30 = $29 < 1.0E-8;
   if (!($30)) {
    $31 = +HEAPF64[$4>>3];
    $32 = (+Math_abs((+$31)));
    $33 = $32 - 1.5707963267948966;
    $34 = (+Math_abs((+$33)));
    $35 = $34 < 1.0E-8;
    if (!($35)) {
     $36 = +HEAPF64[$1>>3];
     $37 = ((($4)) + 8|0);
     $38 = +HEAPF64[$37>>3];
     $39 = $36 * $38;
     $40 = +HEAPF64[$4>>3];
     $41 = (+Math_tan((+$40)));
     $42 = $5;
     $43 = ((($42)) + 16|0);
     $44 = +HEAPF64[$43>>3];
     $45 = $41 / $44;
     $46 = (+Math_log((+$45)));
     $47 = $39 / $46;
     HEAPF64[$4>>3] = $47;
     break;
    }
   }
   HEAPF64[$4>>3] = 0.0;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_mbt_fps($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mbt_fps($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 396;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 13970;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mbt_fps($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 397;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 398;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_426($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_427($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_427($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_428($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 / 1.44492;
 $11 = (+_aasin($7,$10));
 $5 = $11;
 $12 = 1.3650899999999999 * $11;
 $13 = ((($4)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = +HEAPF64[$1>>3];
 $15 = ((($4)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_cos((+$16)));
 $18 = 3.0 * $17;
 $19 = $5;
 $20 = (+Math_cos((+$19)));
 $21 = $18 / $20;
 $22 = 1.0 + $21;
 $23 = 0.22248000000000001 * $22;
 $24 = $14 / $23;
 HEAPF64[$4>>3] = $24;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $27 = $5;
 $28 = (+Math_sin((+$27)));
 $29 = 0.45502999999999999 * $28;
 $30 = ((($4)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (+Math_sin((+$31)));
 $33 = $29 + $32;
 $34 = $33 / 1.4154599999999999;
 $35 = (+_aasin($26,$34));
 $36 = ((($4)) + 8|0);
 HEAPF64[$36>>3] = $35;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_429($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (+Math_sin((+$10)));
 $12 = 1.4154599999999999 * $11;
 $5 = $12;
 $8 = 10;
 while(1) {
  $13 = $8;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = ((($1)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 / 1.3650899999999999;
  $7 = $17;
  $18 = $7;
  $19 = (+Math_sin((+$18)));
  $20 = 0.45502999999999999 * $19;
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_sin((+$22)));
  $24 = $20 + $23;
  $25 = $5;
  $26 = $24 - $25;
  $27 = $7;
  $28 = (+Math_cos((+$27)));
  $29 = 0.33333333333333331 * $28;
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_cos((+$31)));
  $33 = $29 + $32;
  $34 = $26 / $33;
  $6 = $34;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 - $34;
  HEAPF64[$35>>3] = $37;
  $38 = $6;
  $39 = (+Math_abs((+$38)));
  $40 = $39 < 9.9999999999999995E-8;
  if ($40) {
   break;
  }
  $41 = $8;
  $42 = (($41) + -1)|0;
  $8 = $42;
 }
 $43 = ((($1)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 / 1.3650899999999999;
 $7 = $45;
 $46 = +HEAPF64[$1>>3];
 $47 = 0.22248000000000001 * $46;
 $48 = ((($1)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_cos((+$49)));
 $51 = 3.0 * $50;
 $52 = $7;
 $53 = (+Math_cos((+$52)));
 $54 = $51 / $53;
 $55 = 1.0 + $54;
 $56 = $47 * $55;
 HEAPF64[$4>>3] = $56;
 $57 = $7;
 $58 = (+Math_sin((+$57)));
 $59 = 1.44492 * $58;
 $60 = ((($4)) + 8|0);
 HEAPF64[$60>>3] = $59;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_mbtfpp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mbtfpp($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 399;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14020;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mbtfpp($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 400;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 401;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_430($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_431($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_431($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_432($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 3.4016802570830449;
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = ((($4)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (+Math_abs((+$10)));
 $12 = $11 >= 1.0;
 $13 = ((($4)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 do {
  if ($12) {
   $15 = (+Math_abs((+$14)));
   $16 = $15 > 1.0000001000000001;
   if (!($16)) {
    $19 = ((($4)) + 8|0);
    $20 = +HEAPF64[$19>>3];
    $21 = $20 < 0.0;
    $22 = $21 ? -1.5707963267948966 : 1.5707963267948966;
    $23 = ((($4)) + 8|0);
    HEAPF64[$23>>3] = $22;
    break;
   }
   $17 = $3;
   $18 = HEAP32[$17>>2]|0;
   _pj_ctx_set_errno($18,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $24 = (+Math_asin((+$14)));
   $25 = ((($4)) + 8|0);
   HEAPF64[$25>>3] = $24;
  }
 } while(0);
 $26 = +HEAPF64[$1>>3];
 $27 = ((($4)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 * 3.0;
 HEAPF64[$27>>3] = $29;
 $30 = 0.66666666666666663 * $29;
 $31 = (+Math_cos((+$30)));
 $32 = 2.0 * $31;
 $33 = $32 - 1.0;
 $34 = 0.92582009977255141 * $33;
 $35 = $26 / $34;
 HEAPF64[$4>>3] = $35;
 $36 = ((($4)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = (+Math_sin((+$37)));
 $39 = $38 / 0.95257934441568037;
 $40 = ((($4)) + 8|0);
 HEAPF64[$40>>3] = $39;
 $41 = (+Math_abs((+$39)));
 $42 = $41 >= 1.0;
 $43 = ((($4)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 do {
  if ($42) {
   $45 = (+Math_abs((+$44)));
   $46 = $45 > 1.0000001000000001;
   if (!($46)) {
    $49 = ((($4)) + 8|0);
    $50 = +HEAPF64[$49>>3];
    $51 = $50 < 0.0;
    $52 = $51 ? -1.5707963267948966 : 1.5707963267948966;
    $53 = ((($4)) + 8|0);
    HEAPF64[$53>>3] = $52;
    break;
   }
   $47 = $3;
   $48 = HEAP32[$47>>2]|0;
   _pj_ctx_set_errno($48,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $54 = (+Math_asin((+$44)));
   $55 = ((($4)) + 8|0);
   HEAPF64[$55>>3] = $54;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_433($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_sin((+$6)));
 $8 = 0.95257934441568037 * $7;
 $9 = (+Math_asin((+$8)));
 $10 = ((($1)) + 8|0);
 HEAPF64[$10>>3] = $9;
 $11 = +HEAPF64[$1>>3];
 $12 = 0.92582009977255141 * $11;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 0.66666666666666663 * $14;
 $16 = (+Math_cos((+$15)));
 $17 = 2.0 * $16;
 $18 = $17 - 1.0;
 $19 = $12 * $18;
 HEAPF64[$4>>3] = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = 0.33333333333333331 * $21;
 $23 = (+Math_sin((+$22)));
 $24 = 3.4016802570830449 * $23;
 $25 = ((($4)) + 8|0);
 HEAPF64[$25>>3] = $24;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_mbtfpq($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mbtfpq($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 402;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14068;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mbtfpq($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 403;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 404;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_434($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_435($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_435($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_436($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = 0.53340209679417705 * $7;
 $9 = ((($4)) + 8|0);
 HEAPF64[$9>>3] = $8;
 $10 = ((($4)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_abs((+$11)));
 $13 = $12 > 1.0;
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 do {
  if ($13) {
   $16 = (+Math_abs((+$15)));
   $17 = $16 > 1.0000009999999999;
   if ($17) {
    $18 = $3;
    $19 = HEAP32[$18>>2]|0;
    _pj_ctx_set_errno($19,-20);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $20 = ((($4)) + 8|0);
   $21 = +HEAPF64[$20>>3];
   $22 = $21 < 0.0;
   if ($22) {
    $5 = -1.0;
    $23 = ((($4)) + 8|0);
    HEAPF64[$23>>3] = -3.1415926535897931;
    break;
   } else {
    $5 = 1.0;
    $24 = ((($4)) + 8|0);
    HEAPF64[$24>>3] = 3.1415926535897931;
    break;
   }
  } else {
   $5 = $15;
   $25 = (+Math_asin((+$15)));
   $26 = 2.0 * $25;
   $27 = ((($4)) + 8|0);
   HEAPF64[$27>>3] = $26;
  }
 } while(0);
 $28 = +HEAPF64[$1>>3];
 $29 = 3.2004125807650623 * $28;
 $30 = ((($4)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (+Math_cos((+$31)));
 $33 = 2.0 * $32;
 $34 = ((($4)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = 0.5 * $35;
 $37 = (+Math_cos((+$36)));
 $38 = $33 / $37;
 $39 = 1.0 + $38;
 $40 = $29 / $39;
 HEAPF64[$4>>3] = $40;
 $41 = $5;
 $42 = ((($4)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = (+Math_sin((+$43)));
 $45 = $41 + $44;
 $46 = 0.58578643762690497 * $45;
 $47 = ((($4)) + 8|0);
 HEAPF64[$47>>3] = $46;
 $48 = ((($4)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_abs((+$49)));
 $51 = $50 > 1.0;
 $52 = ((($4)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 do {
  if ($51) {
   $54 = (+Math_abs((+$53)));
   $55 = $54 > 1.0000009999999999;
   if (!($55)) {
    $58 = ((($4)) + 8|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $59 < 0.0;
    $61 = $60 ? -1.5707963267948966 : 1.5707963267948966;
    $62 = ((($4)) + 8|0);
    HEAPF64[$62>>3] = $61;
    break;
   }
   $56 = $3;
   $57 = HEAP32[$56>>2]|0;
   _pj_ctx_set_errno($57,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $63 = (+Math_asin((+$53)));
   $64 = ((($4)) + 8|0);
   HEAPF64[$64>>3] = $63;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_437($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_sin((+$9)));
 $11 = 1.7071067811865475 * $10;
 $6 = $11;
 $7 = 20;
 while(1) {
  $12 = $7;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = ((($1)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = 0.5 * $15;
  $17 = (+Math_sin((+$16)));
  $18 = ((($1)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (+Math_sin((+$19)));
  $21 = $17 + $20;
  $22 = $6;
  $23 = $21 - $22;
  $24 = ((($1)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = 0.5 * $25;
  $27 = (+Math_cos((+$26)));
  $28 = 0.5 * $27;
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_cos((+$30)));
  $32 = $28 + $31;
  $33 = $23 / $32;
  $5 = $33;
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 - $33;
  HEAPF64[$34>>3] = $36;
  $37 = $5;
  $38 = (+Math_abs((+$37)));
  $39 = $38 < 9.9999999999999995E-8;
  if ($39) {
   break;
  }
  $40 = $7;
  $41 = (($40) + -1)|0;
  $7 = $41;
 }
 $42 = +HEAPF64[$1>>3];
 $43 = 0.31245971410378248 * $42;
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = (+Math_cos((+$45)));
 $47 = 2.0 * $46;
 $48 = ((($1)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = 0.5 * $49;
 $51 = (+Math_cos((+$50)));
 $52 = $47 / $51;
 $53 = 1.0 + $52;
 $54 = $43 * $53;
 HEAPF64[$4>>3] = $54;
 $55 = ((($1)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = 0.5 * $56;
 $58 = (+Math_sin((+$57)));
 $59 = 1.8747582846226949 * $58;
 $60 = ((($4)) + 8|0);
 HEAPF64[$60>>3] = $59;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_moll($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_moll($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 405;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14114;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_moll($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_441($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_442($12,1.5707963267948966)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freeup_440($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_441($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_441($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_442($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $3;
 $12 = $3;
 $13 = $11 + $12;
 $7 = $13;
 $14 = $2;
 $15 = ((($14)) + 72|0);
 HEAPF64[$15>>3] = 0.0;
 $16 = $3;
 $17 = (+Math_sin((+$16)));
 $6 = $17;
 $18 = $6;
 $19 = 6.2831853071795862 * $18;
 $20 = $7;
 $21 = $7;
 $22 = (+Math_sin((+$21)));
 $23 = $20 + $22;
 $24 = $19 / $23;
 $25 = (+Math_sqrt((+$24)));
 $5 = $25;
 $26 = $5;
 $27 = 2.0 * $26;
 $28 = $27 / 3.1415926535897931;
 $29 = $4;
 HEAPF64[$29>>3] = $28;
 $30 = $5;
 $31 = $6;
 $32 = $30 / $31;
 $33 = $4;
 $34 = ((($33)) + 8|0);
 HEAPF64[$34>>3] = $32;
 $35 = $7;
 $36 = $7;
 $37 = (+Math_sin((+$36)));
 $38 = $35 + $37;
 $39 = $4;
 $40 = ((($39)) + 16|0);
 HEAPF64[$40>>3] = $38;
 $41 = $2;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 406;
 $43 = $2;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 407;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _s_inverse_443($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $5;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 / $15;
 $17 = (+_aasin($10,$16));
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = +HEAPF64[$1>>3];
 $20 = $5;
 $21 = +HEAPF64[$20>>3];
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_cos((+$23)));
 $25 = $21 * $24;
 $26 = $19 / $25;
 HEAPF64[$4>>3] = $26;
 $27 = +HEAPF64[$4>>3];
 $28 = (+Math_abs((+$27)));
 $29 = $28 < 3.1415926535897931;
 $30 = ((($4)) + 8|0);
 if ($29) {
  $31 = +HEAPF64[$30>>3];
  $32 = ((($4)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 + $31;
  HEAPF64[$32>>3] = $34;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($4)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = ((($4)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = (+Math_sin((+$40)));
  $42 = $38 + $41;
  $43 = $5;
  $44 = ((($43)) + 16|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 / $45;
  $47 = (+_aasin($36,$46));
  $48 = ((($4)) + 8|0);
  HEAPF64[$48>>3] = $47;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAPF64[$30>>3] = inf;
  HEAPF64[$4>>3] = inf;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_forward_444($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = ((($12)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_sin((+$16)));
 $18 = $14 * $17;
 $6 = $18;
 $8 = 10;
 while(1) {
  $19 = $8;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (+Math_sin((+$24)));
  $26 = $22 + $25;
  $27 = $6;
  $28 = $26 - $27;
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_cos((+$30)));
  $32 = 1.0 + $31;
  $33 = $28 / $32;
  $7 = $33;
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 - $33;
  HEAPF64[$34>>3] = $36;
  $37 = $7;
  $38 = (+Math_abs((+$37)));
  $39 = $38 < 9.9999999999999995E-8;
  if ($39) {
   break;
  }
  $40 = $8;
  $41 = (($40) + -1)|0;
  $8 = $41;
 }
 $42 = $8;
 $43 = ($42|0)!=(0);
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 if ($43) {
  $49 = $45 * 0.5;
  HEAPF64[$44>>3] = $49;
 } else {
  $46 = $45 < 0.0;
  $47 = $46 ? -1.5707963267948966 : 1.5707963267948966;
  $48 = ((($1)) + 8|0);
  HEAPF64[$48>>3] = $47;
 }
 $50 = $5;
 $51 = +HEAPF64[$50>>3];
 $52 = +HEAPF64[$1>>3];
 $53 = $51 * $52;
 $54 = ((($1)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = (+Math_cos((+$55)));
 $57 = $53 * $56;
 HEAPF64[$4>>3] = $57;
 $58 = $5;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = ((($1)) + 8|0);
 $62 = +HEAPF64[$61>>3];
 $63 = (+Math_sin((+$62)));
 $64 = $60 * $63;
 $65 = ((($4)) + 8|0);
 HEAPF64[$65>>3] = $64;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wag4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag4($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 405;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14137;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_441($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_442($12,1.0471975511965976)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pj_wag5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag5($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 405;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14160;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_441($7)|0);
  $1 = $8;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = ((($12)) + 72|0);
  HEAPF64[$13>>3] = 0.0;
  $14 = $3;
  HEAPF64[$14>>3] = 0.90976999999999997;
  $15 = $3;
  $16 = ((($15)) + 8|0);
  HEAPF64[$16>>3] = 1.6501399999999999;
  $17 = $3;
  $18 = ((($17)) + 16|0);
  HEAPF64[$18>>3] = 3.0089600000000001;
  $19 = $2;
  $20 = ((($19)) + 8|0);
  HEAP32[$20>>2] = 406;
  $21 = $2;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = 407;
  $23 = $2;
  $1 = $23;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _pj_nell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_nell($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 408;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14182;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_nell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 409;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 410;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_445($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_446($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_446($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_447($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 2.0 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_cos((+$8)));
 $10 = 1.0 + $9;
 $11 = $6 / $10;
 HEAPF64[$4>>3] = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_sin((+$17)));
 $19 = $15 + $18;
 $20 = 0.5 * $19;
 $21 = (+_aasin($13,$20));
 $22 = ((($4)) + 8|0);
 HEAPF64[$22>>3] = $21;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_448($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_sin((+$9)));
 $11 = 2.0 * $10;
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 * $15;
 $6 = $16;
 $17 = $6;
 $18 = $6;
 $19 = $18 * -0.011412;
 $20 = -0.093538200000000002 + $19;
 $21 = $17 * $20;
 $22 = 1.0037100000000001 + $21;
 $23 = ((($1)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 * $22;
 HEAPF64[$23>>3] = $25;
 $7 = 10;
 while(1) {
  $26 = $7;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_sin((+$31)));
  $33 = $29 + $32;
  $34 = $5;
  $35 = $33 - $34;
  $36 = ((($1)) + 8|0);
  $37 = +HEAPF64[$36>>3];
  $38 = (+Math_cos((+$37)));
  $39 = 1.0 + $38;
  $40 = $35 / $39;
  $6 = $40;
  $41 = ((($1)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $42 - $40;
  HEAPF64[$41>>3] = $43;
  $44 = $6;
  $45 = (+Math_abs((+$44)));
  $46 = $45 < 9.9999999999999995E-8;
  if ($46) {
   break;
  }
  $47 = $7;
  $48 = (($47) + -1)|0;
  $7 = $48;
 }
 $49 = +HEAPF64[$1>>3];
 $50 = 0.5 * $49;
 $51 = ((($1)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = (+Math_cos((+$52)));
 $54 = 1.0 + $53;
 $55 = $50 * $54;
 HEAPF64[$4>>3] = $55;
 $56 = ((($1)) + 8|0);
 $57 = +HEAPF64[$56>>3];
 $58 = ((($4)) + 8|0);
 HEAPF64[$58>>3] = $57;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_nell_h($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_nell_h($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 411;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14200;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_nell_h($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 412;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 413;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_449($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_450($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_450($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_451($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = 0.5 * $10;
 $7 = $11;
 $8 = 9;
 while(1) {
  $12 = $8;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = ((($4)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = 0.5 * $15;
  $17 = (+Math_cos((+$16)));
  $6 = $17;
  $18 = ((($4)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = ((($4)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $21 / 2.0;
  $23 = (+Math_tan((+$22)));
  $24 = $19 - $23;
  $25 = $7;
  $26 = $24 - $25;
  $27 = $6;
  $28 = $6;
  $29 = $27 * $28;
  $30 = 0.5 / $29;
  $31 = 1.0 - $30;
  $32 = $26 / $31;
  $5 = $32;
  $33 = ((($4)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $34 - $32;
  HEAPF64[$33>>3] = $35;
  $36 = $5;
  $37 = (+Math_abs((+$36)));
  $38 = $37 < 9.9999999999999995E-8;
  if ($38) {
   break;
  }
  $39 = $8;
  $40 = (($39) + -1)|0;
  $8 = $40;
 }
 $41 = $8;
 $42 = ($41|0)!=(0);
 if ($42) {
  $49 = +HEAPF64[$1>>3];
  $50 = 2.0 * $49;
  $51 = ((($4)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = (+Math_cos((+$52)));
  $54 = 1.0 + $53;
  $55 = $50 / $54;
  HEAPF64[$4>>3] = $55;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $43 = $7;
  $44 = $43 < 0.0;
  $45 = $44 ? -1.5707963267948966 : 1.5707963267948966;
  $46 = ((($4)) + 8|0);
  HEAPF64[$46>>3] = $45;
  $47 = +HEAPF64[$1>>3];
  $48 = 2.0 * $47;
  HEAPF64[$4>>3] = $48;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_forward_452($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.5 * $5;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_cos((+$8)));
 $10 = 1.0 + $9;
 $11 = $6 * $10;
 HEAPF64[$4>>3] = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = 0.5 * $15;
 $17 = (+Math_tan((+$16)));
 $18 = $13 - $17;
 $19 = 2.0 * $18;
 $20 = ((($4)) + 8|0);
 HEAPF64[$20>>3] = $19;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_patterson($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_patterson($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 414;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14225;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_patterson($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 415;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 416;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_453($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_454($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_454($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_455($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $5 = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 > 1.790857183;
 $15 = ((($1)) + 8|0);
 if ($14) {
  HEAPF64[$15>>3] = 1.790857183;
 } else {
  $16 = +HEAPF64[$15>>3];
  $17 = $16 < -1.790857183;
  if ($17) {
   $18 = ((($1)) + 8|0);
   HEAPF64[$18>>3] = -1.790857183;
  }
 }
 while(1) {
  $19 = $5;
  $20 = $5;
  $21 = $19 * $20;
  $7 = $21;
  $22 = $5;
  $23 = $7;
  $24 = $7;
  $25 = $23 * $24;
  $26 = $7;
  $27 = $7;
  $28 = 0.024060000000000002 * $27;
  $29 = -0.14499000000000001 + $28;
  $30 = $26 * $29;
  $31 = 0.23185 + $30;
  $32 = $25 * $31;
  $33 = 1.0147999999999999 + $32;
  $34 = $22 * $33;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $34 - $36;
  $8 = $37;
  $38 = $7;
  $39 = $7;
  $40 = $38 * $39;
  $41 = $7;
  $42 = $7;
  $43 = 0.21654000000000001 * $42;
  $44 = -1.0149300000000001 + $43;
  $45 = $41 * $44;
  $46 = 1.1592500000000001 + $45;
  $47 = $40 * $46;
  $48 = 1.0147999999999999 + $47;
  $9 = $48;
  $49 = $8;
  $50 = $9;
  $51 = $49 / $50;
  $6 = $51;
  $52 = $5;
  $53 = $52 - $51;
  $5 = $53;
  $54 = $6;
  $55 = (+Math_abs((+$54)));
  $56 = $55 < 9.9999999999999993E-12;
  if ($56) {
   break;
  }
 }
 $57 = $5;
 $58 = ((($4)) + 8|0);
 HEAPF64[$58>>3] = $57;
 $59 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $59;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_456($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $5 = $10;
 $11 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $11;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $5;
 $15 = $5;
 $16 = $14 * $15;
 $17 = $5;
 $18 = $5;
 $19 = 0.024060000000000002 * $18;
 $20 = -0.14499000000000001 + $19;
 $21 = $17 * $20;
 $22 = 0.23185 + $21;
 $23 = $16 * $22;
 $24 = 1.0147999999999999 + $23;
 $25 = $13 * $24;
 $26 = ((($4)) + 8|0);
 HEAPF64[$26>>3] = $25;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_putp2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 417;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14253;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 418;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 419;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_457($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_458($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_458($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_459($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 / 1.71848;
 $11 = (+_aasin($7,$10));
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = +HEAPF64[$1>>3];
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_cos((+$15)));
 $5 = $16;
 $17 = $16 - 0.5;
 $18 = 1.8949 * $17;
 $19 = $13 / $18;
 HEAPF64[$4>>3] = $19;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($4)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (+Math_sin((+$25)));
 $27 = $5;
 $28 = $27 - 1.0;
 $29 = $26 * $28;
 $30 = $23 + $29;
 $31 = $30 / 0.61418484930437844;
 $32 = (+_aasin($21,$31));
 $33 = ((($4)) + 8|0);
 HEAPF64[$33>>3] = $32;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_460($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_sin((+$11)));
 $13 = 0.61418484930437844 * $12;
 $5 = $13;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $15 * $17;
 $7 = $18;
 $19 = $7;
 $20 = $7;
 $21 = $20 * 0.0046292;
 $22 = 0.0090995299999999997 + $21;
 $23 = $19 * $22;
 $24 = 0.61570899999999995 + $23;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 * $24;
 HEAPF64[$25>>3] = $27;
 $9 = 10;
 while(1) {
  $28 = $9;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_cos((+$31)));
  $6 = $32;
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+Math_sin((+$34)));
  $7 = $35;
  $36 = ((($1)) + 8|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $7;
  $39 = $6;
  $40 = $39 - 1.0;
  $41 = $38 * $40;
  $42 = $37 + $41;
  $43 = $5;
  $44 = $42 - $43;
  $45 = $6;
  $46 = $6;
  $47 = $46 - 1.0;
  $48 = $45 * $47;
  $49 = 1.0 + $48;
  $50 = $7;
  $51 = $7;
  $52 = $50 * $51;
  $53 = $49 - $52;
  $54 = $44 / $53;
  $8 = $54;
  $55 = ((($1)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 - $54;
  HEAPF64[$55>>3] = $57;
  $58 = $8;
  $59 = (+Math_abs((+$58)));
  $60 = $59 < 1.0E-10;
  if ($60) {
   break;
  }
  $61 = $9;
  $62 = (($61) + -1)|0;
  $9 = $62;
 }
 $63 = $9;
 $64 = ($63|0)!=(0);
 if (!($64)) {
  $65 = ((($1)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 < 0.0;
  $68 = $67 ? -1.0471975511965976 : 1.0471975511965976;
  $69 = ((($1)) + 8|0);
  HEAPF64[$69>>3] = $68;
 }
 $70 = +HEAPF64[$1>>3];
 $71 = 1.8949 * $70;
 $72 = ((($1)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = (+Math_cos((+$73)));
 $75 = $74 - 0.5;
 $76 = $71 * $75;
 HEAPF64[$4>>3] = $76;
 $77 = ((($1)) + 8|0);
 $78 = +HEAPF64[$77>>3];
 $79 = (+Math_sin((+$78)));
 $80 = 1.71848 * $79;
 $81 = ((($4)) + 8|0);
 HEAPF64[$81>>3] = $80;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_putp3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp3($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 420;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14277;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_462($7)|0);
  $1 = $8;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.40528473440000001;
  $13 = $2;
  $14 = ((($13)) + 72|0);
  HEAPF64[$14>>3] = 0.0;
  $15 = $2;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = 421;
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 422;
  $19 = $2;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _freeup_461($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_462($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_462($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_463($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 0.79788455999999996;
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = +HEAPF64[$1>>3];
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = +HEAPF64[$12>>3];
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 * $15;
 $17 = ((($4)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 * $18;
 $20 = 1.0 - $19;
 $21 = 0.79788455999999996 * $20;
 $22 = $9 / $21;
 HEAPF64[$4>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_464($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.79788455999999996 * $5;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = +HEAPF64[$9>>3];
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 * $12;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 * $15;
 $17 = 1.0 - $16;
 $18 = $6 * $17;
 HEAPF64[$4>>3] = $18;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = 0.79788455999999996 * $20;
 $22 = ((($4)) + 8|0);
 HEAPF64[$22>>3] = $21;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_putp3p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp3p($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 420;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14301;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp3p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,8)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_462($7)|0);
  $1 = $8;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.20264236720000001;
  $13 = $2;
  $14 = ((($13)) + 72|0);
  HEAPF64[$14>>3] = 0.0;
  $15 = $2;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = 421;
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 422;
  $19 = $2;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pj_putp4p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp4p($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 423;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14326;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp4p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_466($7)|0);
  $1 = $8;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.87403874400000003;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 3.8832518249999999;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 424;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 425;
  $21 = $2;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _freeup_465($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_466($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_466($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_467($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $5;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 / $15;
 $17 = (+_aasin($10,$16));
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = +HEAPF64[$1>>3];
 $20 = ((($4)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_cos((+$21)));
 $23 = $19 * $22;
 $24 = $5;
 $25 = +HEAPF64[$24>>3];
 $26 = $23 / $25;
 HEAPF64[$4>>3] = $26;
 $27 = ((($4)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 * 3.0;
 HEAPF64[$27>>3] = $29;
 $30 = ((($4)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (+Math_cos((+$31)));
 $33 = +HEAPF64[$4>>3];
 $34 = $33 / $32;
 HEAPF64[$4>>3] = $34;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($4)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = (+Math_sin((+$38)));
 $40 = 1.1313708499999999 * $39;
 $41 = (+_aasin($36,$40));
 $42 = ((($4)) + 8|0);
 HEAPF64[$42>>3] = $41;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_468($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_sin((+$12)));
 $14 = 0.88388347599999995 * $13;
 $15 = (+_aasin($10,$14));
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = $5;
 $18 = +HEAPF64[$17>>3];
 $19 = +HEAPF64[$1>>3];
 $20 = $18 * $19;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+Math_cos((+$22)));
 $24 = $20 * $23;
 HEAPF64[$4>>3] = $24;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 * 0.33333333333333298;
 HEAPF64[$25>>3] = $27;
 $28 = (+Math_cos((+$27)));
 $29 = +HEAPF64[$4>>3];
 $30 = $29 / $28;
 HEAPF64[$4>>3] = $30;
 $31 = $5;
 $32 = ((($31)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = ((($1)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = (+Math_sin((+$35)));
 $37 = $33 * $36;
 $38 = ((($4)) + 8|0);
 HEAPF64[$38>>3] = $37;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_weren($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_weren($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 423;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14351;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_weren($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_466($7)|0);
  $1 = $8;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 1.0;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 4.4428829380000003;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 424;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 425;
  $21 = $2;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pj_putp5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp5($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 426;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14378;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_470($7)|0);
  $1 = $8;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 2.0;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 1.0;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 427;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 428;
  $21 = $2;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _freeup_469($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_470($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_470($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_471($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $10 / 1.01346;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = +HEAPF64[$1>>3];
 $14 = $5;
 $15 = +HEAPF64[$14>>3];
 $16 = $5;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($4)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = 1.2158542000000001 * $20;
 $22 = ((($4)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $21 * $23;
 $25 = 1.0 + $24;
 $26 = (+Math_sqrt((+$25)));
 $27 = $18 * $26;
 $28 = $15 - $27;
 $29 = 1.01346 * $28;
 $30 = $13 / $29;
 HEAPF64[$4>>3] = $30;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_472($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = 1.01346 * $9;
 $11 = $5;
 $12 = +HEAPF64[$11>>3];
 $13 = $5;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = 1.2158542000000001 * $17;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $18 * $20;
 $22 = 1.0 + $21;
 $23 = (+Math_sqrt((+$22)));
 $24 = $15 * $23;
 $25 = $12 - $24;
 $26 = $10 * $25;
 HEAPF64[$4>>3] = $26;
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = 1.01346 * $28;
 $30 = ((($4)) + 8|0);
 HEAPF64[$30>>3] = $29;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_putp5p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp5p($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 426;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14402;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp5p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_470($7)|0);
  $1 = $8;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 1.5;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 0.5;
  $15 = $2;
  $16 = ((($15)) + 72|0);
  HEAPF64[$16>>3] = 0.0;
  $17 = $2;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 427;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 428;
  $21 = $2;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pj_putp6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp6($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 429;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14427;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp6($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_474($7)|0);
  $1 = $8;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 1.01346;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 0.91910000000000003;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = 4.0;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 2.1471437182129378;
  $19 = $3;
  $20 = ((($19)) + 32|0);
  HEAPF64[$20>>3] = 2.0;
  $21 = $2;
  $22 = ((($21)) + 72|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $2;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = 430;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 431;
  $27 = $2;
  $1 = $27;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _freeup_473($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_474($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_474($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_475($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $5;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 / $14;
 $16 = ((($4)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = ((($4)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($4)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $18 * $20;
 $22 = 1.0 + $21;
 $23 = (+Math_sqrt((+$22)));
 $6 = $23;
 $24 = +HEAPF64[$1>>3];
 $25 = $5;
 $26 = +HEAPF64[$25>>3];
 $27 = $5;
 $28 = ((($27)) + 32|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $6;
 $31 = $29 - $30;
 $32 = $26 * $31;
 $33 = $24 / $32;
 HEAPF64[$4>>3] = $33;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = $5;
 $37 = ((($36)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $6;
 $40 = $38 - $39;
 $41 = ((($4)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $40 * $42;
 $44 = ((($4)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $6;
 $47 = $45 + $46;
 $48 = (+Math_log((+$47)));
 $49 = $43 - $48;
 $50 = $5;
 $51 = ((($50)) + 24|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $49 / $52;
 $54 = (+_aasin($35,$53));
 $55 = ((($4)) + 8|0);
 HEAPF64[$55>>3] = $54;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_476($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $5;
 $14 = ((($13)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_sin((+$17)));
 $19 = $15 * $18;
 $6 = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $21 * 1.1026577900000001;
 HEAPF64[$20>>3] = $22;
 $9 = 10;
 while(1) {
  $23 = $9;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   break;
  }
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = ((($1)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $26 * $28;
  $30 = 1.0 + $29;
  $31 = (+Math_sqrt((+$30)));
  $7 = $31;
  $32 = $5;
  $33 = ((($32)) + 16|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $7;
  $36 = $34 - $35;
  $37 = ((($1)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $36 * $38;
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $7;
  $43 = $41 + $42;
  $44 = (+Math_log((+$43)));
  $45 = $39 - $44;
  $46 = $6;
  $47 = $45 - $46;
  $48 = $5;
  $49 = ((($48)) + 16|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $7;
  $52 = 2.0 * $51;
  $53 = $50 - $52;
  $54 = $47 / $53;
  $8 = $54;
  $55 = ((($1)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 - $54;
  HEAPF64[$55>>3] = $57;
  $58 = $8;
  $59 = (+Math_abs((+$58)));
  $60 = $59 < 1.0E-10;
  if ($60) {
   break;
  }
  $61 = $9;
  $62 = (($61) + -1)|0;
  $9 = $62;
 }
 $63 = $9;
 $64 = ($63|0)!=(0);
 if (!($64)) {
  $65 = $6;
  $66 = $65 < 0.0;
  $67 = $66 ? -1.732050807568877 : 1.732050807568877;
  $68 = ((($1)) + 8|0);
  HEAPF64[$68>>3] = $67;
 }
 $69 = $5;
 $70 = +HEAPF64[$69>>3];
 $71 = +HEAPF64[$1>>3];
 $72 = $70 * $71;
 $73 = $5;
 $74 = ((($73)) + 32|0);
 $75 = +HEAPF64[$74>>3];
 $76 = ((($1)) + 8|0);
 $77 = +HEAPF64[$76>>3];
 $78 = ((($1)) + 8|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $77 * $79;
 $81 = 1.0 + $80;
 $82 = (+Math_sqrt((+$81)));
 $83 = $75 - $82;
 $84 = $72 * $83;
 HEAPF64[$4>>3] = $84;
 $85 = $5;
 $86 = ((($85)) + 8|0);
 $87 = +HEAPF64[$86>>3];
 $88 = ((($1)) + 8|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $87 * $89;
 $91 = ((($4)) + 8|0);
 HEAPF64[$91>>3] = $90;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_putp6p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_putp6p($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 429;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14451;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_putp6p($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_474($7)|0);
  $1 = $8;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  HEAPF64[$12>>3] = 0.44329000000000002;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 0.80403999999999998;
  $15 = $3;
  $16 = ((($15)) + 16|0);
  HEAPF64[$16>>3] = 6.0;
  $17 = $3;
  $18 = ((($17)) + 24|0);
  HEAPF64[$18>>3] = 5.6112500000000001;
  $19 = $3;
  $20 = ((($19)) + 32|0);
  HEAPF64[$20>>3] = 3.0;
  $21 = $2;
  $22 = ((($21)) + 72|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $2;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = 430;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 431;
  $27 = $2;
  $1 = $27;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _pj_qsc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_qsc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 432;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14476;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_qsc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,40)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_478($7)|0);
  $1 = $8;
  $92 = $1;
  STACKTOP = sp;return ($92|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 433;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 434;
 $16 = $2;
 $17 = ((($16)) + 128|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $18 >= 1.1780972450961724;
 do {
  if ($19) {
   $20 = $3;
   HEAP32[$20>>2] = 4;
  } else {
   $21 = $2;
   $22 = ((($21)) + 128|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $23 <= -1.1780972450961724;
   if ($24) {
    $25 = $3;
    HEAP32[$25>>2] = 5;
    break;
   }
   $26 = $2;
   $27 = ((($26)) + 120|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (+Math_abs((+$28)));
   $30 = $29 <= 0.78539816339744828;
   if ($30) {
    $31 = $3;
    HEAP32[$31>>2] = 0;
    break;
   }
   $32 = $2;
   $33 = ((($32)) + 120|0);
   $34 = +HEAPF64[$33>>3];
   $35 = (+Math_abs((+$34)));
   $36 = $35 <= 2.3561944901923448;
   if ($36) {
    $37 = $2;
    $38 = ((($37)) + 120|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $39 > 0.0;
    $41 = $40 ? 1 : 3;
    $42 = $3;
    HEAP32[$42>>2] = $41;
    break;
   } else {
    $43 = $3;
    HEAP32[$43>>2] = 2;
    break;
   }
  }
 } while(0);
 $44 = $2;
 $45 = ((($44)) + 72|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $46 != 0.0;
 if ($47) {
  $48 = $2;
  $49 = ((($48)) + 56|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $2;
  $52 = ((($51)) + 56|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $50 * $53;
  $55 = $3;
  $56 = ((($55)) + 8|0);
  HEAPF64[$56>>3] = $54;
  $57 = $2;
  $58 = ((($57)) + 56|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $2;
  $61 = ((($60)) + 72|0);
  $62 = +HEAPF64[$61>>3];
  $63 = 1.0 - $62;
  $64 = (+Math_sqrt((+$63)));
  $65 = $59 * $64;
  $66 = $3;
  $67 = ((($66)) + 16|0);
  HEAPF64[$67>>3] = $65;
  $68 = $2;
  $69 = ((($68)) + 56|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $3;
  $72 = ((($71)) + 16|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $70 - $73;
  $75 = $2;
  $76 = ((($75)) + 56|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $74 / $77;
  $79 = 1.0 - $78;
  $80 = $3;
  $81 = ((($80)) + 24|0);
  HEAPF64[$81>>3] = $79;
  $82 = $3;
  $83 = ((($82)) + 24|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $3;
  $86 = ((($85)) + 24|0);
  $87 = +HEAPF64[$86>>3];
  $88 = $84 * $87;
  $89 = $3;
  $90 = ((($89)) + 32|0);
  HEAPF64[$90>>3] = $88;
 }
 $91 = $2;
 $1 = $91;
 $92 = $1;
 STACKTOP = sp;return ($92|0);
}
function _freeup_477($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_478($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_478($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _e_inverse_479($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 120|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $23 = $3;
 $24 = ((($23)) + 416|0);
 $25 = HEAP32[$24>>2]|0;
 $5 = $25;
 $26 = +HEAPF64[$1>>3];
 $27 = +HEAPF64[$1>>3];
 $28 = $26 * $27;
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = ((($1)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $30 * $32;
 $34 = $28 + $33;
 $35 = (+Math_sqrt((+$34)));
 $36 = (+Math_atan((+$35)));
 $7 = $36;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = +HEAPF64[$1>>3];
 $40 = (+Math_atan2((+$38),(+$39)));
 $6 = $40;
 $41 = +HEAPF64[$1>>3];
 $42 = $41 >= 0.0;
 if ($42) {
  $43 = +HEAPF64[$1>>3];
  $44 = ((($1)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = (+Math_abs((+$45)));
  $47 = $43 >= $46;
  if ($47) {
   $15 = 0;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $48 = ((($1)) + 8|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $49 >= 0.0;
   if ($50) {
    $51 = ((($1)) + 8|0);
    $52 = +HEAPF64[$51>>3];
    $53 = +HEAPF64[$1>>3];
    $54 = (+Math_abs((+$53)));
    $55 = $52 >= $54;
    if ($55) {
     $15 = 1;
     $56 = $6;
     $57 = $56 - 1.5707963267948966;
     $6 = $57;
     break;
    }
   }
   $58 = +HEAPF64[$1>>3];
   $59 = $58 < 0.0;
   if ($59) {
    $60 = +HEAPF64[$1>>3];
    $61 = -$60;
    $62 = ((($1)) + 8|0);
    $63 = +HEAPF64[$62>>3];
    $64 = (+Math_abs((+$63)));
    $65 = $61 >= $64;
    if ($65) {
     $15 = 2;
     $66 = $6;
     $67 = $66 < 0.0;
     $68 = $6;
     $69 = $68 + 3.1415926535897931;
     $70 = $68 - 3.1415926535897931;
     $71 = $67 ? $69 : $70;
     $6 = $71;
     break;
    }
   }
   $15 = 3;
   $72 = $6;
   $73 = $72 + 1.5707963267948966;
   $6 = $73;
  }
 } while(0);
 $74 = $6;
 $75 = (+Math_tan((+$74)));
 $76 = 0.26179938779914941 * $75;
 $14 = $76;
 $77 = $14;
 $78 = (+Math_sin((+$77)));
 $79 = $14;
 $80 = (+Math_cos((+$79)));
 $81 = (+Math_sqrt(2.0));
 $82 = 1.0 / $81;
 $83 = $80 - $82;
 $84 = $78 / $83;
 $10 = $84;
 $85 = $10;
 $86 = (+Math_atan((+$85)));
 $11 = $86;
 $87 = $6;
 $88 = (+Math_cos((+$87)));
 $8 = $88;
 $89 = $7;
 $90 = (+Math_tan((+$89)));
 $9 = $90;
 $91 = $8;
 $92 = $8;
 $93 = $91 * $92;
 $94 = $9;
 $95 = $93 * $94;
 $96 = $9;
 $97 = $95 * $96;
 $98 = $11;
 $99 = (+Math_cos((+$98)));
 $100 = 1.0 / $99;
 $101 = (+Math_atan((+$100)));
 $102 = (+Math_cos((+$101)));
 $103 = 1.0 - $102;
 $104 = $97 * $103;
 $105 = 1.0 - $104;
 $12 = $105;
 $106 = $12;
 $107 = $106 < -1.0;
 if ($107) {
  $12 = -1.0;
 } else {
  $108 = $12;
  $109 = $108 > 1.0;
  if ($109) {
   $12 = 1.0;
  }
 }
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(4);
 do {
  if ($112) {
   $113 = $12;
   $114 = (+Math_acos((+$113)));
   $13 = $114;
   $115 = $13;
   $116 = 1.5707963267948966 - $115;
   $117 = ((($4)) + 8|0);
   HEAPF64[$117>>3] = $116;
   $118 = $15;
   $119 = ($118|0)==(0);
   if ($119) {
    $120 = $11;
    $121 = $120 + 1.5707963267948966;
    HEAPF64[$4>>3] = $121;
    break;
   }
   $122 = $15;
   $123 = ($122|0)==(1);
   if ($123) {
    $124 = $11;
    $125 = $124 < 0.0;
    $126 = $11;
    $127 = $126 + 3.1415926535897931;
    $128 = $126 - 3.1415926535897931;
    $129 = $125 ? $127 : $128;
    HEAPF64[$4>>3] = $129;
    break;
   }
   $130 = $15;
   $131 = ($130|0)==(2);
   $132 = $11;
   if ($131) {
    $133 = $132 - 1.5707963267948966;
    HEAPF64[$4>>3] = $133;
    break;
   } else {
    HEAPF64[$4>>3] = $132;
    break;
   }
  } else {
   $134 = $5;
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(5);
   $137 = $12;
   if ($136) {
    $138 = (+Math_acos((+$137)));
    $13 = $138;
    $139 = $13;
    $140 = $139 - 1.5707963267948966;
    $141 = ((($4)) + 8|0);
    HEAPF64[$141>>3] = $140;
    $142 = $15;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $11;
     $145 = -$144;
     $146 = $145 + 1.5707963267948966;
     HEAPF64[$4>>3] = $146;
     break;
    }
    $147 = $15;
    $148 = ($147|0)==(1);
    if ($148) {
     $149 = $11;
     $150 = -$149;
     HEAPF64[$4>>3] = $150;
     break;
    }
    $151 = $15;
    $152 = ($151|0)==(2);
    $153 = $11;
    if ($152) {
     $154 = -$153;
     $155 = $154 - 1.5707963267948966;
     HEAPF64[$4>>3] = $155;
     break;
    } else {
     $156 = $153 < 0.0;
     $157 = $11;
     $158 = -$157;
     $159 = $158 - 3.1415926535897931;
     $160 = $158 + 3.1415926535897931;
     $161 = $156 ? $159 : $160;
     HEAPF64[$4>>3] = $161;
     break;
    }
   }
   $16 = $137;
   $162 = $16;
   $163 = $16;
   $164 = $162 * $163;
   $19 = $164;
   $165 = $19;
   $166 = $165 >= 1.0;
   if ($166) {
    $18 = 0.0;
   } else {
    $167 = $19;
    $168 = 1.0 - $167;
    $169 = (+Math_sqrt((+$168)));
    $170 = $11;
    $171 = (+Math_sin((+$170)));
    $172 = $169 * $171;
    $18 = $172;
   }
   $173 = $18;
   $174 = $18;
   $175 = $173 * $174;
   $176 = $19;
   $177 = $176 + $175;
   $19 = $177;
   $178 = $19;
   $179 = $178 >= 1.0;
   if ($179) {
    $17 = 0.0;
   } else {
    $180 = $19;
    $181 = 1.0 - $180;
    $182 = (+Math_sqrt((+$181)));
    $17 = $182;
   }
   $183 = $15;
   $184 = ($183|0)==(1);
   do {
    if ($184) {
     $185 = $17;
     $19 = $185;
     $186 = $18;
     $187 = -$186;
     $17 = $187;
     $188 = $19;
     $18 = $188;
    } else {
     $189 = $15;
     $190 = ($189|0)==(2);
     if ($190) {
      $191 = $17;
      $192 = -$191;
      $17 = $192;
      $193 = $18;
      $194 = -$193;
      $18 = $194;
      break;
     }
     $195 = $15;
     $196 = ($195|0)==(3);
     if ($196) {
      $197 = $17;
      $19 = $197;
      $198 = $18;
      $17 = $198;
      $199 = $19;
      $200 = -$199;
      $18 = $200;
     }
    }
   } while(0);
   $201 = $5;
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)==(1);
   do {
    if ($203) {
     $204 = $16;
     $19 = $204;
     $205 = $17;
     $206 = -$205;
     $16 = $206;
     $207 = $19;
     $17 = $207;
    } else {
     $208 = $5;
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(2);
     if ($210) {
      $211 = $16;
      $212 = -$211;
      $16 = $212;
      $213 = $17;
      $214 = -$213;
      $17 = $214;
      break;
     }
     $215 = $5;
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(3);
     if ($217) {
      $218 = $16;
      $19 = $218;
      $219 = $17;
      $16 = $219;
      $220 = $19;
      $221 = -$220;
      $17 = $221;
     }
    }
   } while(0);
   $222 = $18;
   $223 = -$222;
   $224 = (+Math_acos((+$223)));
   $225 = $224 - 1.5707963267948966;
   $226 = ((($4)) + 8|0);
   HEAPF64[$226>>3] = $225;
   $227 = $17;
   $228 = $16;
   $229 = (+Math_atan2((+$227),(+$228)));
   HEAPF64[$4>>3] = $229;
   $230 = $5;
   $231 = HEAP32[$230>>2]|0;
   $232 = ($231|0)==(1);
   if ($232) {
    $233 = +HEAPF64[$4>>3];
    $234 = (+_qsc_shift_lon_origin($233,-1.5707963267948966));
    HEAPF64[$4>>3] = $234;
    break;
   }
   $235 = $5;
   $236 = HEAP32[$235>>2]|0;
   $237 = ($236|0)==(2);
   if ($237) {
    $238 = +HEAPF64[$4>>3];
    $239 = (+_qsc_shift_lon_origin($238,-3.1415926535897931));
    HEAPF64[$4>>3] = $239;
    break;
   }
   $240 = $5;
   $241 = HEAP32[$240>>2]|0;
   $242 = ($241|0)==(3);
   if ($242) {
    $243 = +HEAPF64[$4>>3];
    $244 = (+_qsc_shift_lon_origin($243,1.5707963267948966));
    HEAPF64[$4>>3] = $244;
   }
  }
 } while(0);
 $245 = $3;
 $246 = ((($245)) + 72|0);
 $247 = +HEAPF64[$246>>3];
 $248 = $247 != 0.0;
 if (!($248)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $249 = ((($4)) + 8|0);
 $250 = +HEAPF64[$249>>3];
 $251 = $250 < 0.0;
 $252 = $251 ? 1 : 0;
 $20 = $252;
 $253 = ((($4)) + 8|0);
 $254 = +HEAPF64[$253>>3];
 $255 = (+Math_tan((+$254)));
 $21 = $255;
 $256 = $5;
 $257 = ((($256)) + 16|0);
 $258 = +HEAPF64[$257>>3];
 $259 = $21;
 $260 = $21;
 $261 = $259 * $260;
 $262 = $5;
 $263 = ((($262)) + 32|0);
 $264 = +HEAPF64[$263>>3];
 $265 = $261 + $264;
 $266 = (+Math_sqrt((+$265)));
 $267 = $258 / $266;
 $22 = $267;
 $268 = $3;
 $269 = ((($268)) + 56|0);
 $270 = +HEAPF64[$269>>3];
 $271 = $3;
 $272 = ((($271)) + 56|0);
 $273 = +HEAPF64[$272>>3];
 $274 = $270 * $273;
 $275 = $22;
 $276 = $22;
 $277 = $275 * $276;
 $278 = $274 - $277;
 $279 = (+Math_sqrt((+$278)));
 $280 = $5;
 $281 = ((($280)) + 24|0);
 $282 = +HEAPF64[$281>>3];
 $283 = $22;
 $284 = $282 * $283;
 $285 = $279 / $284;
 $286 = (+Math_atan((+$285)));
 $287 = ((($4)) + 8|0);
 HEAPF64[$287>>3] = $286;
 $288 = $20;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $290 = ((($4)) + 8|0);
 $291 = +HEAPF64[$290>>3];
 $292 = -$291;
 $293 = ((($4)) + 8|0);
 HEAPF64[$293>>3] = $292;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_480($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 104|0;
 $12 = sp + 120|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $20 = $3;
 $21 = ((($20)) + 416|0);
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = $3;
 $24 = ((($23)) + 72|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 != 0.0;
 if ($26) {
  $27 = $5;
  $28 = ((($27)) + 32|0);
  $29 = +HEAPF64[$28>>3];
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+Math_tan((+$31)));
  $33 = $29 * $32;
  $34 = (+Math_atan((+$33)));
  $6 = $34;
 } else {
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $6 = $36;
 }
 $37 = +HEAPF64[$1>>3];
 $7 = $37;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(4);
 do {
  if ($40) {
   $41 = $6;
   $42 = 1.5707963267948966 - $41;
   $9 = $42;
   $43 = $7;
   $44 = $43 >= 0.78539816339744828;
   $45 = $7;
   $46 = $45 <= 2.3561944901923448;
   $or$cond = $44 & $46;
   if ($or$cond) {
    HEAP32[$12>>2] = 0;
    $47 = $7;
    $48 = $47 - 1.5707963267948966;
    $8 = $48;
    break;
   }
   $49 = $7;
   $50 = $49 > 2.3561944901923448;
   $51 = $7;
   $52 = $51 <= -2.3561944901923448;
   $or$cond3 = $50 | $52;
   if ($or$cond3) {
    HEAP32[$12>>2] = 1;
    $53 = $7;
    $54 = $53 > 0.0;
    $55 = $7;
    $56 = $55 - 3.1415926535897931;
    $57 = $55 + 3.1415926535897931;
    $58 = $54 ? $56 : $57;
    $8 = $58;
    break;
   }
   $59 = $7;
   $60 = $59 > -2.3561944901923448;
   $61 = $7;
   $62 = $61 <= -0.78539816339744828;
   $or$cond5 = $60 & $62;
   if ($or$cond5) {
    HEAP32[$12>>2] = 2;
    $63 = $7;
    $64 = $63 + 1.5707963267948966;
    $8 = $64;
    break;
   } else {
    HEAP32[$12>>2] = 3;
    $65 = $7;
    $8 = $65;
    break;
   }
  } else {
   $66 = $5;
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(5);
   if ($68) {
    $69 = $6;
    $70 = 1.5707963267948966 + $69;
    $9 = $70;
    $71 = $7;
    $72 = $71 >= 0.78539816339744828;
    $73 = $7;
    $74 = $73 <= 2.3561944901923448;
    $or$cond7 = $72 & $74;
    if ($or$cond7) {
     HEAP32[$12>>2] = 0;
     $75 = $7;
     $76 = -$75;
     $77 = $76 + 1.5707963267948966;
     $8 = $77;
     break;
    }
    $78 = $7;
    $79 = $78 < 0.78539816339744828;
    $80 = $7;
    $81 = $80 >= -0.78539816339744828;
    $or$cond9 = $79 & $81;
    if ($or$cond9) {
     HEAP32[$12>>2] = 1;
     $82 = $7;
     $83 = -$82;
     $8 = $83;
     break;
    }
    $84 = $7;
    $85 = $84 < -0.78539816339744828;
    $86 = $7;
    $87 = $86 >= -2.3561944901923448;
    $or$cond11 = $85 & $87;
    if ($or$cond11) {
     HEAP32[$12>>2] = 2;
     $88 = $7;
     $89 = -$88;
     $90 = $89 - 1.5707963267948966;
     $8 = $90;
     break;
    } else {
     HEAP32[$12>>2] = 3;
     $91 = $7;
     $92 = $91 > 0.0;
     $93 = $7;
     $94 = -$93;
     $95 = $94 + 3.1415926535897931;
     $96 = $94 - 3.1415926535897931;
     $97 = $92 ? $95 : $96;
     $8 = $97;
     break;
    }
   }
   $98 = $5;
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)==(1);
   do {
    if ($100) {
     $101 = $7;
     $102 = (+_qsc_shift_lon_origin($101,1.5707963267948966));
     $7 = $102;
    } else {
     $103 = $5;
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(2);
     if ($105) {
      $106 = $7;
      $107 = (+_qsc_shift_lon_origin($106,3.1415926535897931));
      $7 = $107;
      break;
     }
     $108 = $5;
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(3);
     if ($110) {
      $111 = $7;
      $112 = (+_qsc_shift_lon_origin($111,-1.5707963267948966));
      $7 = $112;
     }
    }
   } while(0);
   $113 = $6;
   $114 = (+Math_sin((+$113)));
   $16 = $114;
   $115 = $6;
   $116 = (+Math_cos((+$115)));
   $17 = $116;
   $117 = $7;
   $118 = (+Math_sin((+$117)));
   $18 = $118;
   $119 = $7;
   $120 = (+Math_cos((+$119)));
   $19 = $120;
   $121 = $17;
   $122 = $19;
   $123 = $121 * $122;
   $13 = $123;
   $124 = $17;
   $125 = $18;
   $126 = $124 * $125;
   $14 = $126;
   $127 = $16;
   $15 = $127;
   $128 = $5;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(0);
   if ($130) {
    $131 = $13;
    $132 = (+Math_acos((+$131)));
    $9 = $132;
    $133 = $9;
    $134 = $15;
    $135 = $14;
    $136 = (+_qsc_fwd_equat_face_theta($133,$134,$135,$12));
    $8 = $136;
    break;
   }
   $137 = $5;
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)==(1);
   if ($139) {
    $140 = $14;
    $141 = (+Math_acos((+$140)));
    $9 = $141;
    $142 = $9;
    $143 = $15;
    $144 = $13;
    $145 = -$144;
    $146 = (+_qsc_fwd_equat_face_theta($142,$143,$145,$12));
    $8 = $146;
    break;
   }
   $147 = $5;
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)==(2);
   if ($149) {
    $150 = $13;
    $151 = -$150;
    $152 = (+Math_acos((+$151)));
    $9 = $152;
    $153 = $9;
    $154 = $15;
    $155 = $14;
    $156 = -$155;
    $157 = (+_qsc_fwd_equat_face_theta($153,$154,$156,$12));
    $8 = $157;
    break;
   }
   $158 = $5;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)==(3);
   if ($160) {
    $161 = $14;
    $162 = -$161;
    $163 = (+Math_acos((+$162)));
    $9 = $163;
    $164 = $9;
    $165 = $15;
    $166 = $13;
    $167 = (+_qsc_fwd_equat_face_theta($164,$165,$166,$12));
    $8 = $167;
    break;
   } else {
    $8 = 0.0;
    $9 = 0.0;
    HEAP32[$12>>2] = 0;
    break;
   }
  }
 } while(0);
 $168 = $8;
 $169 = $8;
 $170 = (+Math_sin((+$169)));
 $171 = (+Math_cos(0.78539816339744828));
 $172 = $170 * $171;
 $173 = (+Math_acos((+$172)));
 $174 = $168 + $173;
 $175 = $174 - 1.5707963267948966;
 $176 = 3.8197186342054881 * $175;
 $177 = (+Math_atan((+$176)));
 $11 = $177;
 $178 = $9;
 $179 = (+Math_cos((+$178)));
 $180 = 1.0 - $179;
 $181 = $11;
 $182 = (+Math_cos((+$181)));
 $183 = $11;
 $184 = (+Math_cos((+$183)));
 $185 = $182 * $184;
 $186 = $180 / $185;
 $187 = $8;
 $188 = (+Math_cos((+$187)));
 $189 = 1.0 / $188;
 $190 = (+Math_atan((+$189)));
 $191 = (+Math_cos((+$190)));
 $192 = 1.0 - $191;
 $193 = $186 / $192;
 $194 = (+Math_sqrt((+$193)));
 $10 = $194;
 $195 = HEAP32[$12>>2]|0;
 $196 = ($195|0)==(1);
 do {
  if ($196) {
   $197 = $11;
   $198 = $197 + 1.5707963267948966;
   $11 = $198;
  } else {
   $199 = HEAP32[$12>>2]|0;
   $200 = ($199|0)==(2);
   if ($200) {
    $201 = $11;
    $202 = $201 + 3.1415926535897931;
    $11 = $202;
    break;
   }
   $203 = HEAP32[$12>>2]|0;
   $204 = ($203|0)==(3);
   if ($204) {
    $205 = $11;
    $206 = $205 + 4.7123889803846897;
    $11 = $206;
   }
  }
 } while(0);
 $207 = $10;
 $208 = $11;
 $209 = (+Math_cos((+$208)));
 $210 = $207 * $209;
 HEAPF64[$4>>3] = $210;
 $211 = $10;
 $212 = $11;
 $213 = (+Math_sin((+$212)));
 $214 = $211 * $213;
 $215 = ((($4)) + 8|0);
 HEAPF64[$215>>3] = $214;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _qsc_shift_lon_origin($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $5 + $6;
 $4 = $7;
 $8 = $4;
 $9 = $8 < -3.1415926535897931;
 $10 = $4;
 if ($9) {
  $11 = $10 + 6.2831853071795862;
  $4 = $11;
 } else {
  $12 = $10 > 3.1415926535897931;
  if ($12) {
   $13 = $4;
   $14 = $13 - 6.2831853071795862;
   $4 = $14;
  }
 }
 $15 = $4;
 STACKTOP = sp;return (+$15);
}
function _qsc_fwd_equat_face_theta($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $9 < 1.0E-10;
 if ($10) {
  $11 = $7;
  HEAP32[$11>>2] = 0;
  $8 = 0.0;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 $12 = $5;
 $13 = $6;
 $14 = (+Math_atan2((+$12),(+$13)));
 $8 = $14;
 $15 = $8;
 $16 = (+Math_abs((+$15)));
 $17 = $16 <= 0.78539816339744828;
 if ($17) {
  $18 = $7;
  HEAP32[$18>>2] = 0;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 $19 = $8;
 $20 = $19 > 0.78539816339744828;
 $21 = $8;
 $22 = $21 <= 2.3561944901923448;
 $or$cond = $20 & $22;
 if ($or$cond) {
  $23 = $7;
  HEAP32[$23>>2] = 1;
  $24 = $8;
  $25 = $24 - 1.5707963267948966;
  $8 = $25;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 $26 = $8;
 $27 = $26 > 2.3561944901923448;
 $28 = $8;
 $29 = $28 <= -2.3561944901923448;
 $or$cond3 = $27 | $29;
 $30 = $7;
 if ($or$cond3) {
  HEAP32[$30>>2] = 2;
  $31 = $8;
  $32 = $31 >= 0.0;
  $33 = $8;
  $34 = $33 - 3.1415926535897931;
  $35 = $33 + 3.1415926535897931;
  $36 = $32 ? $34 : $35;
  $8 = $36;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 } else {
  HEAP32[$30>>2] = 3;
  $37 = $8;
  $38 = $37 + 1.5707963267948966;
  $8 = $38;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 return +(0.0);
}
function _pj_robin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_robin($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 435;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14520;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_robin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 436;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 437;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_481($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_482($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_482($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_483($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 16|0;
 $8 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = +HEAPF64[$1>>3];
 $10 = $9 / 0.84870000000000001;
 HEAPF64[$4>>3] = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 / 1.3523000000000001;
 $14 = (+Math_abs((+$13)));
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = ((($4)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 >= 1.0;
 $19 = ((($4)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 do {
  if ($18) {
   $21 = $20 > 1.0000009999999999;
   if (!($21)) {
    $24 = ((($1)) + 8|0);
    $25 = +HEAPF64[$24>>3];
    $26 = $25 < 0.0;
    $27 = $26 ? -1.5707963267948966 : 1.5707963267948966;
    $28 = ((($4)) + 8|0);
    HEAPF64[$28>>3] = $27;
    $29 = +HEAPF32[(5032)>>2];
    $30 = $29;
    $31 = +HEAPF64[$4>>3];
    $32 = $31 / $30;
    HEAPF64[$4>>3] = $32;
    break;
   }
   $22 = $3;
   $23 = HEAP32[$22>>2]|0;
   _pj_ctx_set_errno($23,-20);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $33 = $20 * 18.0;
   $34 = (+Math_floor((+$33)));
   $35 = (~~(($34)));
   $5 = $35;
   while(1) {
    $36 = $5;
    $37 = (5048 + ($36<<4)|0);
    $38 = +HEAPF32[$37>>2];
    $39 = $38;
    $40 = ((($4)) + 8|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $39 > $41;
    $43 = $5;
    if ($42) {
     $44 = (($43) + -1)|0;
     $5 = $44;
     continue;
    }
    $45 = (($43) + 1)|0;
    $46 = (5048 + ($45<<4)|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $47;
    $49 = ((($4)) + 8|0);
    $50 = +HEAPF64[$49>>3];
    $51 = $48 <= $50;
    $52 = $5;
    if (!($51)) {
     break;
    }
    $53 = (($52) + 1)|0;
    $5 = $53;
   }
   $54 = (5048 + ($52<<4)|0);
   ;HEAP32[$8>>2]=HEAP32[$54>>2]|0;HEAP32[$8+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$54+12>>2]|0;
   $55 = ((($4)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = +HEAPF32[$8>>2];
   $58 = $57;
   $59 = $56 - $58;
   $60 = 5.0 * $59;
   $61 = $5;
   $62 = (($61) + 1)|0;
   $63 = (5048 + ($62<<4)|0);
   $64 = +HEAPF32[$63>>2];
   $65 = +HEAPF32[$8>>2];
   $66 = $64 - $65;
   $67 = $66;
   $68 = $60 / $67;
   $6 = $68;
   $69 = ((($4)) + 8|0);
   $70 = +HEAPF64[$69>>3];
   $71 = +HEAPF32[$8>>2];
   $72 = $71;
   $73 = $72 - $70;
   $74 = $73;
   HEAPF32[$8>>2] = $74;
   while(1) {
    $75 = +HEAPF32[$8>>2];
    $76 = $75;
    $77 = $6;
    $78 = ((($8)) + 4|0);
    $79 = +HEAPF32[$78>>2];
    $80 = $79;
    $81 = $6;
    $82 = ((($8)) + 8|0);
    $83 = +HEAPF32[$82>>2];
    $84 = $83;
    $85 = $6;
    $86 = ((($8)) + 12|0);
    $87 = +HEAPF32[$86>>2];
    $88 = $87;
    $89 = $85 * $88;
    $90 = $84 + $89;
    $91 = $81 * $90;
    $92 = $80 + $91;
    $93 = $77 * $92;
    $94 = $76 + $93;
    $95 = ((($8)) + 4|0);
    $96 = +HEAPF32[$95>>2];
    $97 = $96;
    $98 = $6;
    $99 = ((($8)) + 8|0);
    $100 = +HEAPF32[$99>>2];
    $101 = ((($8)) + 8|0);
    $102 = +HEAPF32[$101>>2];
    $103 = $100 + $102;
    $104 = $103;
    $105 = $6;
    $106 = $105 * 3.0;
    $107 = ((($8)) + 12|0);
    $108 = +HEAPF32[$107>>2];
    $109 = $108;
    $110 = $106 * $109;
    $111 = $104 + $110;
    $112 = $98 * $111;
    $113 = $97 + $112;
    $114 = $94 / $113;
    $7 = $114;
    $115 = $6;
    $116 = $115 - $114;
    $6 = $116;
    $117 = $7;
    $118 = (+Math_abs((+$117)));
    $119 = $118 < 1.0E-8;
    if ($119) {
     break;
    }
   }
   $120 = $5;
   $121 = ($120*5)|0;
   $122 = (+($121|0));
   $123 = $6;
   $124 = $122 + $123;
   $125 = $124 * 0.017453292519943295;
   $126 = ((($4)) + 8|0);
   HEAPF64[$126>>3] = $125;
   $127 = ((($1)) + 8|0);
   $128 = +HEAPF64[$127>>3];
   $129 = $128 < 0.0;
   if ($129) {
    $130 = ((($4)) + 8|0);
    $131 = +HEAPF64[$130>>3];
    $132 = -$131;
    $133 = ((($4)) + 8|0);
    HEAPF64[$133>>3] = $132;
   }
   $134 = $5;
   $135 = (4744 + ($134<<4)|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $136;
   $138 = $6;
   $139 = $5;
   $140 = (4744 + ($139<<4)|0);
   $141 = ((($140)) + 4|0);
   $142 = +HEAPF32[$141>>2];
   $143 = $142;
   $144 = $6;
   $145 = $5;
   $146 = (4744 + ($145<<4)|0);
   $147 = ((($146)) + 8|0);
   $148 = +HEAPF32[$147>>2];
   $149 = $148;
   $150 = $6;
   $151 = $5;
   $152 = (4744 + ($151<<4)|0);
   $153 = ((($152)) + 12|0);
   $154 = +HEAPF32[$153>>2];
   $155 = $154;
   $156 = $150 * $155;
   $157 = $149 + $156;
   $158 = $144 * $157;
   $159 = $143 + $158;
   $160 = $138 * $159;
   $161 = $137 + $160;
   $162 = +HEAPF64[$4>>3];
   $163 = $162 / $161;
   HEAPF64[$4>>3] = $163;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_484($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $6 = $9;
 $10 = $9 * 11.459155902616464;
 $11 = (+Math_floor((+$10)));
 $12 = (~~(($11)));
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)>=(18);
 $$ = $14 ? 17 : $12;
 $5 = $$;
 $15 = $6;
 $16 = $5;
 $17 = (+($16|0));
 $18 = 0.087266462599716474 * $17;
 $19 = $15 - $18;
 $20 = 57.295779513082323 * $19;
 $6 = $20;
 $21 = $5;
 $22 = (4744 + ($21<<4)|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23;
 $25 = $6;
 $26 = $5;
 $27 = (4744 + ($26<<4)|0);
 $28 = ((($27)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $29;
 $31 = $6;
 $32 = $5;
 $33 = (4744 + ($32<<4)|0);
 $34 = ((($33)) + 8|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $35;
 $37 = $6;
 $38 = $5;
 $39 = (4744 + ($38<<4)|0);
 $40 = ((($39)) + 12|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $41;
 $43 = $37 * $42;
 $44 = $36 + $43;
 $45 = $31 * $44;
 $46 = $30 + $45;
 $47 = $25 * $46;
 $48 = $24 + $47;
 $49 = $48 * 0.84870000000000001;
 $50 = +HEAPF64[$1>>3];
 $51 = $49 * $50;
 HEAPF64[$4>>3] = $51;
 $52 = $5;
 $53 = (5048 + ($52<<4)|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54;
 $56 = $6;
 $57 = $5;
 $58 = (5048 + ($57<<4)|0);
 $59 = ((($58)) + 4|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $60;
 $62 = $6;
 $63 = $5;
 $64 = (5048 + ($63<<4)|0);
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $66;
 $68 = $6;
 $69 = $5;
 $70 = (5048 + ($69<<4)|0);
 $71 = ((($70)) + 12|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $72;
 $74 = $68 * $73;
 $75 = $67 + $74;
 $76 = $62 * $75;
 $77 = $61 + $76;
 $78 = $56 * $77;
 $79 = $55 + $78;
 $80 = $79 * 1.3523000000000001;
 $81 = ((($4)) + 8|0);
 HEAPF64[$81>>3] = $80;
 $82 = ((($1)) + 8|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $83 < 0.0;
 if (!($84)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $85 = ((($4)) + 8|0);
 $86 = +HEAPF64[$85>>3];
 $87 = -$86;
 $88 = ((($4)) + 8|0);
 HEAPF64[$88>>3] = $87;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_sch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_sch($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 438;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14542;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_sch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $5 = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $12 = (_pj_calloc(1,232)|0);
 $3 = $12;
 $13 = $3;
 $14 = (0|0)==($13|0);
 if ($14) {
  $15 = $2;
  $16 = (_freeup_new_486($15)|0);
  $1 = $16;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $17 = $3;
 $18 = $2;
 $19 = ((($18)) + 416|0);
 HEAP32[$19>>2] = $17;
 $20 = $3;
 $21 = ((($20)) + 24|0);
 HEAPF64[$21>>3] = 0.0;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 _pj_param($4,$23,$26,14618);
 $27 = HEAP32[$4>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 if (!($28)) {
  _pj_ctx_set_errno($30,-37);
  $45 = $2;
  _freeup_485($45);
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $31 = $2;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 _pj_param($5,$30,$33,14626);
 $34 = +HEAPF64[$5>>3];
 $35 = $3;
 HEAPF64[$35>>3] = $34;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 _pj_param($6,$37,$40,14634);
 $41 = HEAP32[$6>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = $2;
 $44 = HEAP32[$43>>2]|0;
 if (!($42)) {
  _pj_ctx_set_errno($44,-37);
  $61 = $2;
  _freeup_485($61);
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $46 = $2;
 $47 = ((($46)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 _pj_param($7,$44,$48,14642);
 $49 = +HEAPF64[$7>>3];
 $50 = $3;
 $51 = ((($50)) + 8|0);
 HEAPF64[$51>>3] = $49;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 $54 = $2;
 $55 = ((($54)) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 _pj_param($8,$53,$56,14650);
 $57 = HEAP32[$8>>2]|0;
 $58 = ($57|0)!=(0);
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 if (!($58)) {
  _pj_ctx_set_errno($60,-37);
  $75 = $2;
  _freeup_485($75);
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $62 = $2;
 $63 = ((($62)) + 32|0);
 $64 = HEAP32[$63>>2]|0;
 _pj_param($9,$60,$64,14658);
 $65 = +HEAPF64[$9>>3];
 $66 = $3;
 $67 = ((($66)) + 16|0);
 HEAPF64[$67>>3] = $65;
 $68 = $2;
 $69 = HEAP32[$68>>2]|0;
 $70 = $2;
 $71 = ((($70)) + 32|0);
 $72 = HEAP32[$71>>2]|0;
 _pj_param($10,$69,$72,14666);
 $73 = HEAP32[$10>>2]|0;
 $74 = ($73|0)!=(0);
 if ($74) {
  $76 = $2;
  $77 = HEAP32[$76>>2]|0;
  $78 = $2;
  $79 = ((($78)) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  _pj_param($11,$77,$80,14671);
  $81 = +HEAPF64[$11>>3];
  $82 = $3;
  $83 = ((($82)) + 24|0);
  HEAPF64[$83>>3] = $81;
 }
 $84 = $2;
 $85 = (_setup_495($84)|0);
 $1 = $85;
 $86 = $1;
 STACKTOP = sp;return ($86|0);
}
function _freeup_485($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_486($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_486($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_495($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0;
 var $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $13 = sp;
 $2 = $0;
 $14 = $2;
 $15 = ((($14)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $3 = $16;
 $17 = $2;
 $18 = ((($17)) + 56|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $2;
 $21 = ((($20)) + 72|0);
 $22 = +HEAPF64[$21>>3];
 $23 = 1.0 - $22;
 $24 = (+Math_sqrt((+$23)));
 $25 = $19 * $24;
 $12 = $25;
 $26 = $3;
 $27 = ((($26)) + 184|0);
 $28 = $2;
 $29 = ((($28)) + 56|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $12;
 $32 = (_pj_Set_Geocentric_Parameters($27,$30,$31)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $2;
  $35 = HEAP32[$34>>2]|0;
  _pj_ctx_set_errno($35,-37);
  $36 = $2;
  _freeup_485($36);
  $1 = 0;
  $252 = $1;
  STACKTOP = sp;return ($252|0);
 }
 $37 = $3;
 $38 = +HEAPF64[$37>>3];
 $39 = (+Math_cos((+$38)));
 $8 = $39;
 $40 = $3;
 $41 = +HEAPF64[$40>>3];
 $42 = (+Math_sin((+$41)));
 $9 = $42;
 $43 = $3;
 $44 = ((($43)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = (+Math_cos((+$45)));
 $10 = $46;
 $47 = $3;
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_sin((+$49)));
 $11 = $50;
 $51 = $2;
 $52 = ((($51)) + 72|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $9;
 $55 = $53 * $54;
 $56 = $9;
 $57 = $55 * $56;
 $58 = 1.0 - $57;
 $59 = (+Math_sqrt((+$58)));
 $12 = $59;
 $60 = $2;
 $61 = ((($60)) + 56|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $12;
 $64 = $62 / $63;
 $4 = $64;
 $65 = $2;
 $66 = ((($65)) + 56|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $2;
 $69 = ((($68)) + 72|0);
 $70 = +HEAPF64[$69>>3];
 $71 = 1.0 - $70;
 $72 = $67 * $71;
 $73 = $12;
 $74 = (+Math_pow((+$73),3.0));
 $75 = $72 / $74;
 $5 = $75;
 $76 = $3;
 $77 = ((($76)) + 16|0);
 $78 = +HEAPF64[$77>>3];
 $79 = (+Math_cos((+$78)));
 $6 = $79;
 $80 = $3;
 $81 = ((($80)) + 16|0);
 $82 = +HEAPF64[$81>>3];
 $83 = (+Math_sin((+$82)));
 $7 = $83;
 $84 = $3;
 $85 = ((($84)) + 24|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $4;
 $88 = $5;
 $89 = $87 * $88;
 $90 = $4;
 $91 = $6;
 $92 = $90 * $91;
 $93 = $6;
 $94 = $92 * $93;
 $95 = $5;
 $96 = $7;
 $97 = $95 * $96;
 $98 = $7;
 $99 = $97 * $98;
 $100 = $94 + $99;
 $101 = $89 / $100;
 $102 = $86 + $101;
 $103 = $3;
 $104 = ((($103)) + 128|0);
 HEAPF64[$104>>3] = $102;
 $105 = $3;
 $106 = ((($105)) + 136|0);
 $107 = $3;
 $108 = ((($107)) + 128|0);
 $109 = +HEAPF64[$108>>3];
 $110 = $3;
 $111 = ((($110)) + 128|0);
 $112 = +HEAPF64[$111>>3];
 $113 = (_pj_Set_Geocentric_Parameters($106,$109,$112)|0);
 $114 = ($113|0)!=(0);
 if ($114) {
  $115 = $2;
  $116 = HEAP32[$115>>2]|0;
  _pj_ctx_set_errno($116,-37);
  $117 = $2;
  _freeup_485($117);
  $1 = 0;
  $252 = $1;
  STACKTOP = sp;return ($252|0);
 }
 $118 = $8;
 $119 = $10;
 $120 = $118 * $119;
 $121 = $3;
 $122 = ((($121)) + 32|0);
 HEAPF64[$122>>3] = $120;
 $123 = $7;
 $124 = -$123;
 $125 = $11;
 $126 = $124 * $125;
 $127 = $9;
 $128 = $10;
 $129 = $127 * $128;
 $130 = $6;
 $131 = $129 * $130;
 $132 = $126 - $131;
 $133 = $3;
 $134 = ((($133)) + 32|0);
 $135 = ((($134)) + 8|0);
 HEAPF64[$135>>3] = $132;
 $136 = $11;
 $137 = $6;
 $138 = $136 * $137;
 $139 = $9;
 $140 = $10;
 $141 = $139 * $140;
 $142 = $7;
 $143 = $141 * $142;
 $144 = $138 - $143;
 $145 = $3;
 $146 = ((($145)) + 32|0);
 $147 = ((($146)) + 16|0);
 HEAPF64[$147>>3] = $144;
 $148 = $8;
 $149 = $11;
 $150 = $148 * $149;
 $151 = $3;
 $152 = ((($151)) + 32|0);
 $153 = ((($152)) + 24|0);
 HEAPF64[$153>>3] = $150;
 $154 = $10;
 $155 = $7;
 $156 = $154 * $155;
 $157 = $9;
 $158 = $11;
 $159 = $157 * $158;
 $160 = $6;
 $161 = $159 * $160;
 $162 = $156 - $161;
 $163 = $3;
 $164 = ((($163)) + 32|0);
 $165 = ((($164)) + 32|0);
 HEAPF64[$165>>3] = $162;
 $166 = $10;
 $167 = -$166;
 $168 = $6;
 $169 = $167 * $168;
 $170 = $9;
 $171 = $11;
 $172 = $170 * $171;
 $173 = $7;
 $174 = $172 * $173;
 $175 = $169 - $174;
 $176 = $3;
 $177 = ((($176)) + 32|0);
 $178 = ((($177)) + 40|0);
 HEAPF64[$178>>3] = $175;
 $179 = $9;
 $180 = $3;
 $181 = ((($180)) + 32|0);
 $182 = ((($181)) + 48|0);
 HEAPF64[$182>>3] = $179;
 $183 = $8;
 $184 = $6;
 $185 = $183 * $184;
 $186 = $3;
 $187 = ((($186)) + 32|0);
 $188 = ((($187)) + 56|0);
 HEAPF64[$188>>3] = $185;
 $189 = $8;
 $190 = $7;
 $191 = $189 * $190;
 $192 = $3;
 $193 = ((($192)) + 32|0);
 $194 = ((($193)) + 64|0);
 HEAPF64[$194>>3] = $191;
 $195 = $3;
 $196 = ((($195)) + 184|0);
 $197 = $3;
 $198 = +HEAPF64[$197>>3];
 $199 = $3;
 $200 = ((($199)) + 8|0);
 $201 = +HEAPF64[$200>>3];
 $202 = $3;
 $203 = ((($202)) + 24|0);
 $204 = +HEAPF64[$203>>3];
 $205 = ((($13)) + 8|0);
 $206 = ((($13)) + 16|0);
 $207 = (_pj_Convert_Geodetic_To_Geocentric($196,$198,$201,$204,$13,$205,$206)|0);
 $208 = ($207|0)!=(0);
 if ($208) {
  $209 = $2;
  $210 = HEAP32[$209>>2]|0;
  _pj_ctx_set_errno($210,-14);
  $211 = $2;
  _freeup_485($211);
  $1 = 0;
  $252 = $1;
  STACKTOP = sp;return ($252|0);
 } else {
  $212 = +HEAPF64[$13>>3];
  $213 = $3;
  $214 = ((($213)) + 128|0);
  $215 = +HEAPF64[$214>>3];
  $216 = $8;
  $217 = $215 * $216;
  $218 = $10;
  $219 = $217 * $218;
  $220 = $212 - $219;
  $221 = $3;
  $222 = ((($221)) + 104|0);
  HEAPF64[$222>>3] = $220;
  $223 = ((($13)) + 8|0);
  $224 = +HEAPF64[$223>>3];
  $225 = $3;
  $226 = ((($225)) + 128|0);
  $227 = +HEAPF64[$226>>3];
  $228 = $8;
  $229 = $227 * $228;
  $230 = $11;
  $231 = $229 * $230;
  $232 = $224 - $231;
  $233 = $3;
  $234 = ((($233)) + 104|0);
  $235 = ((($234)) + 8|0);
  HEAPF64[$235>>3] = $232;
  $236 = ((($13)) + 16|0);
  $237 = +HEAPF64[$236>>3];
  $238 = $3;
  $239 = ((($238)) + 128|0);
  $240 = +HEAPF64[$239>>3];
  $241 = $9;
  $242 = $240 * $241;
  $243 = $237 - $242;
  $244 = $3;
  $245 = ((($244)) + 104|0);
  $246 = ((($245)) + 16|0);
  HEAPF64[$246>>3] = $243;
  $247 = $2;
  $248 = ((($247)) + 12|0);
  HEAP32[$248>>2] = 439;
  $249 = $2;
  $250 = ((($249)) + 16|0);
  HEAP32[$250>>2] = 440;
  $251 = $2;
  $1 = $251;
  $252 = $1;
  STACKTOP = sp;return ($252|0);
 }
 return (0)|0;
}
function _forward3d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $6 = sp + 24|0;
 $7 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = ((($11)) + 184|0);
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = +HEAPF64[$1>>3];
 $16 = ((($1)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($6)) + 8|0);
 $19 = ((($6)) + 16|0);
 $20 = (_pj_Convert_Geodetic_To_Geocentric($12,$14,$15,$17,$6,$18,$19)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  _pj_ctx_set_errno($23,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 } else {
  $24 = $5;
  $25 = ((($24)) + 104|0);
  $26 = +HEAPF64[$25>>3];
  $27 = +HEAPF64[$6>>3];
  $28 = $27 - $26;
  HEAPF64[$6>>3] = $28;
  $29 = $5;
  $30 = ((($29)) + 104|0);
  $31 = ((($30)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = ((($6)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $34 - $32;
  HEAPF64[$33>>3] = $35;
  $36 = $5;
  $37 = ((($36)) + 104|0);
  $38 = ((($37)) + 16|0);
  $39 = +HEAPF64[$38>>3];
  $40 = ((($6)) + 16|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 - $39;
  HEAPF64[$40>>3] = $42;
  $43 = $5;
  $44 = ((($43)) + 32|0);
  $45 = +HEAPF64[$44>>3];
  $46 = +HEAPF64[$6>>3];
  $47 = $45 * $46;
  $48 = $5;
  $49 = ((($48)) + 32|0);
  $50 = ((($49)) + 24|0);
  $51 = +HEAPF64[$50>>3];
  $52 = ((($6)) + 8|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $51 * $53;
  $55 = $47 + $54;
  $56 = $5;
  $57 = ((($56)) + 32|0);
  $58 = ((($57)) + 48|0);
  $59 = +HEAPF64[$58>>3];
  $60 = ((($6)) + 16|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $59 * $61;
  $63 = $55 + $62;
  HEAPF64[$7>>3] = $63;
  $64 = $5;
  $65 = ((($64)) + 32|0);
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = +HEAPF64[$6>>3];
  $69 = $67 * $68;
  $70 = $5;
  $71 = ((($70)) + 32|0);
  $72 = ((($71)) + 32|0);
  $73 = +HEAPF64[$72>>3];
  $74 = ((($6)) + 8|0);
  $75 = +HEAPF64[$74>>3];
  $76 = $73 * $75;
  $77 = $69 + $76;
  $78 = $5;
  $79 = ((($78)) + 32|0);
  $80 = ((($79)) + 56|0);
  $81 = +HEAPF64[$80>>3];
  $82 = ((($6)) + 16|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $81 * $83;
  $85 = $77 + $84;
  $86 = ((($7)) + 8|0);
  HEAPF64[$86>>3] = $85;
  $87 = $5;
  $88 = ((($87)) + 32|0);
  $89 = ((($88)) + 16|0);
  $90 = +HEAPF64[$89>>3];
  $91 = +HEAPF64[$6>>3];
  $92 = $90 * $91;
  $93 = $5;
  $94 = ((($93)) + 32|0);
  $95 = ((($94)) + 40|0);
  $96 = +HEAPF64[$95>>3];
  $97 = ((($6)) + 8|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $96 * $98;
  $100 = $92 + $99;
  $101 = $5;
  $102 = ((($101)) + 32|0);
  $103 = ((($102)) + 64|0);
  $104 = +HEAPF64[$103>>3];
  $105 = ((($6)) + 16|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $104 * $106;
  $108 = $100 + $107;
  $109 = ((($7)) + 16|0);
  HEAPF64[$109>>3] = $108;
  $110 = $5;
  $111 = ((($110)) + 136|0);
  $112 = +HEAPF64[$7>>3];
  $113 = ((($7)) + 8|0);
  $114 = +HEAPF64[$113>>3];
  $115 = ((($7)) + 16|0);
  $116 = +HEAPF64[$115>>3];
  $117 = ((($6)) + 8|0);
  $118 = ((($6)) + 16|0);
  _pj_Convert_Geocentric_To_Geodetic($111,$112,$114,$116,$6,$117,$118);
  $119 = ((($6)) + 8|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $5;
  $122 = ((($121)) + 128|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $120 * $123;
  $125 = $3;
  $126 = ((($125)) + 56|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $124 / $127;
  HEAPF64[$4>>3] = $128;
  $129 = +HEAPF64[$6>>3];
  $130 = $5;
  $131 = ((($130)) + 128|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $129 * $132;
  $134 = $3;
  $135 = ((($134)) + 56|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $133 / $136;
  $138 = ((($4)) + 8|0);
  HEAPF64[$138>>3] = $137;
  $139 = ((($6)) + 16|0);
  $140 = +HEAPF64[$139>>3];
  $141 = ((($4)) + 16|0);
  HEAPF64[$141>>3] = $140;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 }
}
function _inverse3d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $6 = sp + 24|0;
 $7 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = ((($13)) + 56|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 * $15;
 $17 = $5;
 $18 = ((($17)) + 128|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 / $19;
 HEAPF64[$7>>3] = $20;
 $21 = +HEAPF64[$1>>3];
 $22 = $3;
 $23 = ((($22)) + 56|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $21 * $24;
 $26 = $5;
 $27 = ((($26)) + 128|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $25 / $28;
 $30 = ((($7)) + 8|0);
 HEAPF64[$30>>3] = $29;
 $31 = ((($1)) + 16|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($7)) + 16|0);
 HEAPF64[$33>>3] = $32;
 $34 = $5;
 $35 = ((($34)) + 136|0);
 $36 = +HEAPF64[$7>>3];
 $37 = ((($7)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = ((($7)) + 16|0);
 $40 = +HEAPF64[$39>>3];
 $41 = ((($6)) + 8|0);
 $42 = ((($6)) + 16|0);
 $43 = (_pj_Convert_Geodetic_To_Geocentric($35,$36,$38,$40,$6,$41,$42)|0);
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  _pj_ctx_set_errno($46,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 } else {
  $47 = $5;
  $48 = ((($47)) + 32|0);
  $49 = +HEAPF64[$48>>3];
  $50 = +HEAPF64[$6>>3];
  $51 = $49 * $50;
  $52 = $5;
  $53 = ((($52)) + 32|0);
  $54 = ((($53)) + 8|0);
  $55 = +HEAPF64[$54>>3];
  $56 = ((($6)) + 8|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $55 * $57;
  $59 = $51 + $58;
  $60 = $5;
  $61 = ((($60)) + 32|0);
  $62 = ((($61)) + 16|0);
  $63 = +HEAPF64[$62>>3];
  $64 = ((($6)) + 16|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $63 * $65;
  $67 = $59 + $66;
  HEAPF64[$7>>3] = $67;
  $68 = $5;
  $69 = ((($68)) + 32|0);
  $70 = ((($69)) + 24|0);
  $71 = +HEAPF64[$70>>3];
  $72 = +HEAPF64[$6>>3];
  $73 = $71 * $72;
  $74 = $5;
  $75 = ((($74)) + 32|0);
  $76 = ((($75)) + 32|0);
  $77 = +HEAPF64[$76>>3];
  $78 = ((($6)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $77 * $79;
  $81 = $73 + $80;
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = ((($83)) + 40|0);
  $85 = +HEAPF64[$84>>3];
  $86 = ((($6)) + 16|0);
  $87 = +HEAPF64[$86>>3];
  $88 = $85 * $87;
  $89 = $81 + $88;
  $90 = ((($7)) + 8|0);
  HEAPF64[$90>>3] = $89;
  $91 = $5;
  $92 = ((($91)) + 32|0);
  $93 = ((($92)) + 48|0);
  $94 = +HEAPF64[$93>>3];
  $95 = +HEAPF64[$6>>3];
  $96 = $94 * $95;
  $97 = $5;
  $98 = ((($97)) + 32|0);
  $99 = ((($98)) + 56|0);
  $100 = +HEAPF64[$99>>3];
  $101 = ((($6)) + 8|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $100 * $102;
  $104 = $96 + $103;
  $105 = $5;
  $106 = ((($105)) + 32|0);
  $107 = ((($106)) + 64|0);
  $108 = +HEAPF64[$107>>3];
  $109 = ((($6)) + 16|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $108 * $110;
  $112 = $104 + $111;
  $113 = ((($7)) + 16|0);
  HEAPF64[$113>>3] = $112;
  $114 = $5;
  $115 = ((($114)) + 104|0);
  $116 = +HEAPF64[$115>>3];
  $117 = +HEAPF64[$7>>3];
  $118 = $117 + $116;
  HEAPF64[$7>>3] = $118;
  $119 = $5;
  $120 = ((($119)) + 104|0);
  $121 = ((($120)) + 8|0);
  $122 = +HEAPF64[$121>>3];
  $123 = ((($7)) + 8|0);
  $124 = +HEAPF64[$123>>3];
  $125 = $124 + $122;
  HEAPF64[$123>>3] = $125;
  $126 = $5;
  $127 = ((($126)) + 104|0);
  $128 = ((($127)) + 16|0);
  $129 = +HEAPF64[$128>>3];
  $130 = ((($7)) + 16|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $131 + $129;
  HEAPF64[$130>>3] = $132;
  $133 = $5;
  $134 = ((($133)) + 184|0);
  $135 = +HEAPF64[$7>>3];
  $136 = ((($7)) + 8|0);
  $137 = +HEAPF64[$136>>3];
  $138 = ((($7)) + 16|0);
  $139 = +HEAPF64[$138>>3];
  $140 = ((($6)) + 8|0);
  $141 = ((($6)) + 16|0);
  _pj_Convert_Geocentric_To_Geodetic($134,$135,$137,$139,$6,$140,$141);
  $142 = ((($6)) + 8|0);
  $143 = +HEAPF64[$142>>3];
  HEAPF64[$4>>3] = $143;
  $144 = +HEAPF64[$6>>3];
  $145 = ((($4)) + 8|0);
  HEAPF64[$145>>3] = $144;
  $146 = ((($6)) + 16|0);
  $147 = +HEAPF64[$146>>3];
  $148 = ((($4)) + 16|0);
  HEAPF64[$148>>3] = $147;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_fouc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_fouc($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 441;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14676;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_fouc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_497($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_498($12,2.0,2.0,1)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freeup_496($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_497($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_497($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $5 = $2;
  $6 = ((($5)) + 416|0);
  $7 = HEAP32[$6>>2]|0;
  (_pj_dealloc($7)|0);
  $8 = $2;
  $9 = (_pj_dealloc($8)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _setup_498($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 72|0);
 HEAPF64[$9>>3] = 0.0;
 $10 = $4;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 442;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 443;
 $14 = $6;
 $15 = $5;
 $16 = $14 / $15;
 $17 = $4;
 $18 = ((($17)) + 416|0);
 $19 = HEAP32[$18>>2]|0;
 HEAPF64[$19>>3] = $16;
 $20 = $5;
 $21 = $4;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 HEAPF64[$24>>3] = $20;
 $25 = $6;
 $26 = 1.0 / $25;
 $27 = $4;
 $28 = ((($27)) + 416|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 16|0);
 HEAPF64[$30>>3] = $26;
 $31 = $7;
 $32 = $4;
 $33 = ((($32)) + 416|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = $31;
 $36 = $4;
 STACKTOP = sp;return ($36|0);
}
function _s_inverse_499($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 / $12;
 HEAPF64[$13>>3] = $15;
 $16 = $5;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = ((($1)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+Math_atan((+$21)));
  $29 = $22;
 } else {
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (+_aasin($24,$26));
  $29 = $27;
 }
 $28 = ((($4)) + 8|0);
 HEAPF64[$28>>3] = $29;
 $30 = (+Math_cos((+$29)));
 $6 = $30;
 $31 = $5;
 $32 = ((($31)) + 16|0);
 $33 = +HEAPF64[$32>>3];
 $34 = ((($4)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $35 / $33;
 HEAPF64[$34>>3] = $36;
 $37 = +HEAPF64[$1>>3];
 $38 = $5;
 $39 = +HEAPF64[$38>>3];
 $40 = ((($4)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = (+Math_cos((+$41)));
 $43 = $39 * $42;
 $44 = $37 / $43;
 HEAPF64[$4>>3] = $44;
 $45 = $5;
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 $49 = $6;
 if ($48) {
  $50 = $6;
  $51 = $49 * $50;
  $52 = +HEAPF64[$4>>3];
  $53 = $52 / $51;
  HEAPF64[$4>>3] = $53;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $54 = +HEAPF64[$4>>3];
  $55 = $54 * $49;
  HEAPF64[$4>>3] = $55;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_forward_500($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = +HEAPF64[$1>>3];
 $13 = $11 * $12;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_cos((+$15)));
 $17 = $13 * $16;
 HEAPF64[$4>>3] = $17;
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($4)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = $5;
 $23 = ((($22)) + 16|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 * $24;
 HEAPF64[$25>>3] = $27;
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+Math_cos((+$29)));
 $6 = $30;
 $31 = $5;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 $35 = $6;
 if ($34) {
  $36 = $6;
  $37 = $35 * $36;
  $38 = +HEAPF64[$4>>3];
  $39 = $38 * $37;
  HEAPF64[$4>>3] = $39;
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = (+Math_tan((+$41)));
  $43 = ((($4)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $44 * $42;
  HEAPF64[$43>>3] = $45;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $46 = +HEAPF64[$4>>3];
  $47 = $46 / $35;
  HEAPF64[$4>>3] = $47;
  $48 = ((($1)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = (+Math_sin((+$49)));
  $51 = ((($4)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 * $50;
  HEAPF64[$51>>3] = $53;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_kav5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_kav5($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 441;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14697;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_kav5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_497($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_498($12,1.50488,1.35439,0)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pj_qua_aut($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_qua_aut($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 441;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14722;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_qua_aut($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_497($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_498($12,2.0,2.0,0)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pj_mbt_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_mbt_s($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 441;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14752;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_mbt_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,32)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_497($7)|0);
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = (_setup_498($12,1.48875,1.3650899999999999,0)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pj_urm5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_urm5($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 444;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14804;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_urm5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $2 = $0;
 $9 = (_pj_calloc(1,32)|0);
 $5 = $9;
 $10 = $5;
 $11 = (0|0)==($10|0);
 if ($11) {
  $12 = $2;
  $13 = (_freeup_new_502($12)|0);
  $1 = $13;
  $71 = $1;
  STACKTOP = sp;return ($71|0);
 } else {
  $14 = $5;
  $15 = $2;
  $16 = ((($15)) + 416|0);
  HEAP32[$16>>2] = $14;
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  _pj_param($6,$18,$21,14943);
  $22 = +HEAPF64[$6>>3];
  $23 = $5;
  $24 = ((($23)) + 24|0);
  HEAPF64[$24>>3] = $22;
  $25 = $2;
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  _pj_param($7,$26,$29,14849);
  $30 = +HEAPF64[$7>>3];
  $31 = $30 / 3.0;
  $32 = $5;
  $33 = ((($32)) + 16|0);
  HEAPF64[$33>>3] = $31;
  $34 = $2;
  $35 = HEAP32[$34>>2]|0;
  $36 = $2;
  $37 = ((($36)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  _pj_param($8,$35,$38,14852);
  $39 = +HEAPF64[$8>>3];
  $3 = $39;
  $40 = $5;
  $41 = ((($40)) + 24|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $3;
  $44 = (+Math_sin((+$43)));
  $45 = $42 * $44;
  $4 = $45;
  $46 = $3;
  $47 = (+Math_cos((+$46)));
  $48 = $4;
  $49 = $4;
  $50 = $48 * $49;
  $51 = 1.0 - $50;
  $52 = (+Math_sqrt((+$51)));
  $53 = $47 / $52;
  $54 = $5;
  HEAPF64[$54>>3] = $53;
  $55 = $5;
  $56 = +HEAPF64[$55>>3];
  $57 = $5;
  $58 = ((($57)) + 24|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $56 * $59;
  $61 = 1.0 / $60;
  $62 = $5;
  $63 = ((($62)) + 8|0);
  HEAPF64[$63>>3] = $61;
  $64 = $2;
  $65 = ((($64)) + 72|0);
  HEAPF64[$65>>3] = 0.0;
  $66 = $2;
  $67 = ((($66)) + 8|0);
  HEAP32[$67>>2] = 0;
  $68 = $2;
  $69 = ((($68)) + 4|0);
  HEAP32[$69>>2] = 445;
  $70 = $2;
  $1 = $70;
  $71 = $1;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _freeup_501($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_502($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_502($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_forward_506($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = ((($12)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_sin((+$16)));
 $18 = $14 * $17;
 $19 = (+_aasin($11,$18));
 $20 = ((($1)) + 8|0);
 HEAPF64[$20>>3] = $19;
 $6 = $19;
 $21 = $5;
 $22 = +HEAPF64[$21>>3];
 $23 = +HEAPF64[$1>>3];
 $24 = $22 * $23;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (+Math_cos((+$26)));
 $28 = $24 * $27;
 HEAPF64[$4>>3] = $28;
 $29 = $6;
 $30 = $6;
 $31 = $30 * $29;
 $6 = $31;
 $32 = ((($1)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $6;
 $35 = $5;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 * $37;
 $39 = 1.0 + $38;
 $40 = $33 * $39;
 $41 = $5;
 $42 = ((($41)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $40 * $43;
 $45 = ((($4)) + 8|0);
 HEAPF64[$45>>3] = $44;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_urmfps($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_urmfps($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 446;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14859;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_urmfps($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,16)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_508($9)|0);
  $1 = $10;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 _pj_param($4,$15,$18,14940);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 if (!($20)) {
  _pj_ctx_set_errno($22,-40);
  $43 = $2;
  _freeup_507($43);
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $23 = $2;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _pj_param($5,$22,$25,14943);
 $26 = +HEAPF64[$5>>3];
 $27 = $2;
 $28 = ((($27)) + 416|0);
 $29 = HEAP32[$28>>2]|0;
 HEAPF64[$29>>3] = $26;
 $30 = $2;
 $31 = ((($30)) + 416|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = +HEAPF64[$32>>3];
 $34 = $33 <= 0.0;
 if (!($34)) {
  $35 = $2;
  $36 = ((($35)) + 416|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = +HEAPF64[$37>>3];
  $39 = $38 > 1.0;
  if (!($39)) {
   $44 = $2;
   $45 = (_setup_511($44)|0);
   $1 = $45;
   $46 = $1;
   STACKTOP = sp;return ($46|0);
  }
 }
 $40 = $2;
 $41 = HEAP32[$40>>2]|0;
 _pj_ctx_set_errno($41,-40);
 $42 = $2;
 _freeup_507($42);
 $1 = 0;
 $46 = $1;
 STACKTOP = sp;return ($46|0);
}
function _freeup_507($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_508($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_508($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _setup_511($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 416|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF64[$4>>3];
 $6 = 1.139753528477 / $5;
 $7 = $1;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 HEAPF64[$10>>3] = $6;
 $11 = $1;
 $12 = ((($11)) + 72|0);
 HEAPF64[$12>>3] = 0.0;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 447;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 448;
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function _s_inverse_512($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 / $9;
 HEAPF64[$10>>3] = $12;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_sin((+$16)));
 $18 = $3;
 $19 = ((($18)) + 416|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = +HEAPF64[$20>>3];
 $22 = $17 / $21;
 $23 = (+_aasin($14,$22));
 $24 = ((($4)) + 8|0);
 HEAPF64[$24>>3] = $23;
 $25 = +HEAPF64[$1>>3];
 $26 = ((($1)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+Math_cos((+$27)));
 $29 = 0.87738267530000003 * $28;
 $30 = $25 / $29;
 HEAPF64[$4>>3] = $30;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_513($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = +HEAPF64[$9>>3];
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_sin((+$12)));
 $14 = $10 * $13;
 $15 = (+_aasin($6,$14));
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = +HEAPF64[$1>>3];
 $18 = 0.87738267530000003 * $17;
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_cos((+$20)));
 $22 = $18 * $21;
 HEAPF64[$4>>3] = $22;
 $23 = $3;
 $24 = ((($23)) + 416|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $27 * $29;
 $31 = ((($4)) + 8|0);
 HEAPF64[$31>>3] = $30;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wag1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 446;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14904;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,16)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_508($7)|0);
  $1 = $8;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 416|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = ((($12)) + 416|0);
  $14 = HEAP32[$13>>2]|0;
  HEAPF64[$14>>3] = 0.8660254037844386;
  $15 = $2;
  $16 = (_setup_511($15)|0);
  $1 = $16;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _pj_wag2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 449;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14946;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 450;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 451;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_514($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_515($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_515($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_516($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 / 1.3872500000000001;
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 $9 = +HEAPF64[$1>>3];
 $10 = ((($4)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_cos((+$11)));
 $13 = 0.92483000000000004 * $12;
 $14 = $9 / $13;
 HEAPF64[$4>>3] = $14;
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($4)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_sin((+$18)));
 $20 = $19 / 0.88022;
 $21 = (+_aasin($16,$20));
 $22 = $21 / 0.88549999999999995;
 $23 = ((($4)) + 8|0);
 HEAPF64[$23>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_517($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 0.88549999999999995 * $8;
 $10 = (+Math_sin((+$9)));
 $11 = 0.88022 * $10;
 $12 = (+_aasin($6,$11));
 $13 = ((($1)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = +HEAPF64[$1>>3];
 $15 = 0.92483000000000004 * $14;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_cos((+$17)));
 $19 = $15 * $18;
 HEAPF64[$4>>3] = $19;
 $20 = ((($1)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = 1.3872500000000001 * $21;
 $23 = ((($4)) + 8|0);
 HEAPF64[$23>>3] = $22;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wag3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wag3($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 452;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 14969;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wag3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,8)|0);
 $4 = $6;
 $7 = $4;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_519($9)|0);
  $1 = $10;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 } else {
  $11 = $4;
  $12 = $2;
  $13 = ((($12)) + 416|0);
  HEAP32[$13>>2] = $11;
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  _pj_param($5,$15,$18,15033);
  $19 = +HEAPF64[$5>>3];
  $3 = $19;
  $20 = $3;
  $21 = (+Math_cos((+$20)));
  $22 = $3;
  $23 = 2.0 * $22;
  $24 = $23 / 3.0;
  $25 = (+Math_cos((+$24)));
  $26 = $21 / $25;
  $27 = $2;
  $28 = ((($27)) + 416|0);
  $29 = HEAP32[$28>>2]|0;
  HEAPF64[$29>>3] = $26;
  $30 = $2;
  $31 = ((($30)) + 72|0);
  HEAPF64[$31>>3] = 0.0;
  $32 = $2;
  $33 = ((($32)) + 8|0);
  HEAP32[$33>>2] = 453;
  $34 = $2;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = 454;
  $36 = $2;
  $1 = $36;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _freeup_518($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_519($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_519($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _s_inverse_521($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = +HEAPF64[$1>>3];
 $9 = $3;
 $10 = ((($9)) + 416|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = +HEAPF64[$11>>3];
 $13 = ((($4)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 0.66666666666666663 * $14;
 $16 = (+Math_cos((+$15)));
 $17 = $12 * $16;
 $18 = $8 / $17;
 HEAPF64[$4>>3] = $18;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_522($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = $3;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = +HEAPF64[$1>>3];
 $10 = $8 * $9;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = 0.66666666666666663 * $12;
 $14 = (+Math_cos((+$13)));
 $15 = $10 * $14;
 HEAPF64[$4>>3] = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wink1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wink1($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 455;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15002;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wink1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,8)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_524($8)|0);
  $1 = $9;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 } else {
  $10 = $3;
  $11 = $2;
  $12 = ((($11)) + 416|0);
  HEAP32[$12>>2] = $10;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  _pj_param($4,$14,$17,15033);
  $18 = +HEAPF64[$4>>3];
  $19 = (+Math_cos((+$18)));
  $20 = $2;
  $21 = ((($20)) + 416|0);
  $22 = HEAP32[$21>>2]|0;
  HEAPF64[$22>>3] = $19;
  $23 = $2;
  $24 = ((($23)) + 72|0);
  HEAPF64[$24>>3] = 0.0;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = 456;
  $27 = $2;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = 457;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _freeup_523($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_524($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_524($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_inverse_526($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = +HEAPF64[$1>>3];
 $9 = 2.0 * $8;
 $10 = $3;
 $11 = ((($10)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = +HEAPF64[$12>>3];
 $14 = ((($4)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_cos((+$15)));
 $17 = $13 + $16;
 $18 = $9 / $17;
 HEAPF64[$4>>3] = $18;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_527($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = 0.5 * $5;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = +HEAPF64[$9>>3];
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+Math_cos((+$12)));
 $14 = $10 + $13;
 $15 = $6 * $14;
 HEAPF64[$4>>3] = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_wink2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_wink2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 458;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15041;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_wink2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = (_pj_calloc(1,8)|0);
 $3 = $5;
 $6 = $3;
 $7 = (0|0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = (_freeup_new_529($8)|0);
  $1 = $9;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 } else {
  $10 = $3;
  $11 = $2;
  $12 = ((($11)) + 416|0);
  HEAP32[$12>>2] = $10;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  _pj_param($4,$14,$17,15081);
  $18 = +HEAPF64[$4>>3];
  $19 = (+Math_cos((+$18)));
  $20 = $2;
  $21 = ((($20)) + 416|0);
  $22 = HEAP32[$21>>2]|0;
  HEAPF64[$22>>3] = $19;
  $23 = $2;
  $24 = ((($23)) + 72|0);
  HEAPF64[$24>>3] = 0.0;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = $2;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = 459;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _freeup_528($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_529($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_529($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ((($5)) + 416|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (0|0)==($7|0);
   $9 = $2;
   if ($8) {
    $10 = (_pj_dealloc($9)|0);
    $1 = $10;
    break;
   } else {
    $11 = ((($9)) + 416|0);
    $12 = HEAP32[$11>>2]|0;
    (_pj_dealloc($12)|0);
    $13 = $2;
    $14 = (_pj_dealloc($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _s_forward_531($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * 0.63661977236758138;
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = $10;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (+Math_sin((+$13)));
 $15 = 3.1415926535897931 * $14;
 $5 = $15;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 * 1.8;
 HEAPF64[$16>>3] = $18;
 $7 = 10;
 while(1) {
  $19 = $7;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (+Math_sin((+$24)));
  $26 = $22 + $25;
  $27 = $5;
  $28 = $26 - $27;
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_cos((+$30)));
  $32 = 1.0 + $31;
  $33 = $28 / $32;
  $6 = $33;
  $34 = ((($1)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 - $33;
  HEAPF64[$34>>3] = $36;
  $37 = $6;
  $38 = (+Math_abs((+$37)));
  $39 = $38 < 9.9999999999999995E-8;
  if ($39) {
   break;
  }
  $40 = $7;
  $41 = (($40) + -1)|0;
  $7 = $41;
 }
 $42 = $7;
 $43 = ($42|0)!=(0);
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 if ($43) {
  $49 = $45 * 0.5;
  HEAPF64[$44>>3] = $49;
 } else {
  $46 = $45 < 0.0;
  $47 = $46 ? -1.5707963267948966 : 1.5707963267948966;
  $48 = ((($1)) + 8|0);
  HEAPF64[$48>>3] = $47;
 }
 $50 = +HEAPF64[$1>>3];
 $51 = 0.5 * $50;
 $52 = ((($1)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 $54 = (+Math_cos((+$53)));
 $55 = $3;
 $56 = ((($55)) + 416|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = +HEAPF64[$57>>3];
 $59 = $54 + $58;
 $60 = $51 * $59;
 HEAPF64[$4>>3] = $60;
 $61 = ((($1)) + 8|0);
 $62 = +HEAPF64[$61>>3];
 $63 = (+Math_sin((+$62)));
 $64 = ((($4)) + 8|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $63 + $65;
 $67 = 0.78539816339744828 * $66;
 $68 = ((($4)) + 8|0);
 HEAPF64[$68>>3] = $67;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_latlong($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_latlong($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 460;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15088;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_latlong($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 136|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 461;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 462;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _freeup_532($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_533($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_533($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = ((($7)) + 56|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $6 * $9;
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = $10;
 $12 = +HEAPF64[$1>>3];
 $13 = $3;
 $14 = ((($13)) + 56|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 * $15;
 HEAPF64[$4>>3] = $16;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 $6 = $3;
 $7 = ((($6)) + 56|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $5 / $8;
 HEAPF64[$4>>3] = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $3;
 $13 = ((($12)) + 56|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 / $14;
 $16 = ((($4)) + 8|0);
 HEAPF64[$16>>3] = $15;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_longlat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_longlat($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 460;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15116;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_longlat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 136|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 461;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 462;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _pj_latlon($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_latlon($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 460;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15144;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_latlon($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 136|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 461;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 462;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _pj_lonlat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_lonlat($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 460;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15172;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_lonlat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 136|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 461;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 462;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _pj_geocent($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_geocent($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 463;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 15194;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_geocent($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 48|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 136|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 464;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 465;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _freeup_534($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_535($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_535($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _inverse_536($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $8;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _forward_537($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = +HEAPF64[$1>>3];
 HEAPF64[$4>>3] = $5;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($4)) + 8|0);
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _aasin($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = (+Math_abs((+$6)));
 $5 = $7;
 $8 = $7 >= 1.0;
 if (!($8)) {
  $15 = $4;
  $16 = (+Math_asin((+$15)));
  $2 = $16;
  $17 = $2;
  STACKTOP = sp;return (+$17);
 }
 $9 = $5;
 $10 = $9 > 1.00000000000001;
 if ($10) {
  $11 = $3;
  _pj_ctx_set_errno($11,-19);
 }
 $12 = $4;
 $13 = $12 < 0.0;
 $14 = $13 ? -1.5707963267948966 : 1.5707963267948966;
 $2 = $14;
 $17 = $2;
 STACKTOP = sp;return (+$17);
}
function _aacos($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = (+Math_abs((+$6)));
 $5 = $7;
 $8 = $7 >= 1.0;
 if (!($8)) {
  $15 = $4;
  $16 = (+Math_acos((+$15)));
  $2 = $16;
  $17 = $2;
  STACKTOP = sp;return (+$17);
 }
 $9 = $5;
 $10 = $9 > 1.00000000000001;
 if ($10) {
  $11 = $3;
  _pj_ctx_set_errno($11,-19);
 }
 $12 = $4;
 $13 = $12 < 0.0;
 $14 = $13 ? 3.1415926535897931 : 0.0;
 $2 = $14;
 $17 = $2;
 STACKTOP = sp;return (+$17);
}
function _asqrt($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 <= 0.0;
 if ($3) {
  $6 = 0.0;
 } else {
  $4 = $1;
  $5 = (+Math_sqrt((+$4)));
  $6 = $5;
 }
 STACKTOP = sp;return (+$6);
}
function _aatan2($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_abs((+$4)));
 $6 = $5 < 1.0E-50;
 if ($6) {
  $7 = $3;
  $8 = (+Math_abs((+$7)));
  $9 = $8 < 1.0E-50;
  if ($9) {
   $13 = 0.0;
   STACKTOP = sp;return (+$13);
  }
 }
 $10 = $2;
 $11 = $3;
 $12 = (+Math_atan2((+$10),(+$11)));
 $13 = $12;
 STACKTOP = sp;return (+$13);
}
function _adjlon($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (+Math_abs((+$3)));
 $5 = $4 <= 3.1415926535900001;
 $6 = $2;
 if ($5) {
  $1 = $6;
  $17 = $1;
  STACKTOP = sp;return (+$17);
 } else {
  $7 = $6 + 3.1415926535897931;
  $2 = $7;
  $8 = $2;
  $9 = $8 / 6.2831853071795862;
  $10 = (+Math_floor((+$9)));
  $11 = 6.2831853071795862 * $10;
  $12 = $2;
  $13 = $12 - $11;
  $2 = $13;
  $14 = $2;
  $15 = $14 - 3.1415926535897931;
  $2 = $15;
  $16 = $2;
  $1 = $16;
  $17 = $1;
  STACKTOP = sp;return (+$17);
 }
 return +(0.0);
}
function _dmstor_ctx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $11 = sp + 24|0;
 $12 = sp + 56|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $5;
  $18 = $6;
  HEAP32[$18>>2] = $17;
 }
 while(1) {
  $19 = $5;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $7 = $21;
  $22 = (_isspace($21)|0);
  $23 = ($22|0)!=(0);
  if (!($23)) {
   break;
  }
  $24 = $5;
  $25 = ((($24)) + 1|0);
  $5 = $25;
 }
 $8 = 64;
 HEAP32[$11>>2] = $12;
 $26 = $5;
 $10 = $26;
 while(1) {
  $27 = $10;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = (_isgraph($29)|0);
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $8;
  $33 = (($32) + -1)|0;
  $8 = $33;
  $34 = ($33|0)!=(0);
  if (!($34)) {
   break;
  }
  $35 = $10;
  $36 = ((($35)) + 1|0);
  $10 = $36;
  $37 = HEAP8[$35>>0]|0;
  $38 = HEAP32[$11>>2]|0;
  $39 = ((($38)) + 1|0);
  HEAP32[$11>>2] = $39;
  HEAP8[$38>>0] = $37;
 }
 $40 = HEAP32[$11>>2]|0;
 HEAP8[$40>>0] = 0;
 HEAP32[$11>>2] = $12;
 $41 = HEAP8[$12>>0]|0;
 $42 = $41 << 24 >> 24;
 $7 = $42;
 $43 = $7;
 $44 = ($43|0)==(43);
 $45 = $7;
 $46 = ($45|0)==(45);
 $or$cond = $44 | $46;
 if ($or$cond) {
  $47 = HEAP32[$11>>2]|0;
  $48 = ((($47)) + 1|0);
  HEAP32[$11>>2] = $48;
 } else {
  $7 = 43;
 }
 $13 = 0.0;
 $9 = 0;
 L16: while(1) {
  $49 = $9;
  $50 = ($49|0)<(3);
  if (!($50)) {
   label = 31;
   break;
  }
  $51 = HEAP32[$11>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (_isdigit($53)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = HEAP32[$11>>2]|0;
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   $59 = ($58|0)==(46);
   if (!($59)) {
    label = 31;
    break;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = (+_proj_strtod($60,$11));
  $14 = $61;
  $62 = $61 == inf;
  if ($62) {
   label = 17;
   break;
  }
  $64 = HEAP32[$11>>2]|0;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  switch ($66|0) {
  case 100: case 68:  {
   $8 = 0;
   label = 27;
   break;
  }
  case 39:  {
   $8 = 1;
   label = 27;
   break;
  }
  case 34:  {
   $8 = 2;
   label = 27;
   break;
  }
  case 82: case 114:  {
   $67 = $9;
   $68 = ($67|0)!=(0);
   if ($68) {
    label = 23;
    break L16;
   }
   $70 = HEAP32[$11>>2]|0;
   $71 = ((($70)) + 1|0);
   HEAP32[$11>>2] = $71;
   $72 = $14;
   $13 = $72;
   label = 26;
   break;
  }
  default: {
   $73 = $14;
   $74 = $9;
   $75 = (1992 + ($74<<3)|0);
   $76 = +HEAPF64[$75>>3];
   $77 = $73 * $76;
   $78 = $13;
   $79 = $78 + $77;
   $13 = $79;
   label = 26;
  }
  }
  if ((label|0) == 26) {
   label = 0;
   $8 = 4;
  }
  else if ((label|0) == 27) {
   label = 0;
   $80 = $8;
   $81 = $9;
   $82 = ($80|0)<($81|0);
   if ($82) {
    label = 28;
    break;
   }
   $84 = $14;
   $85 = $8;
   $86 = (1992 + ($85<<3)|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $84 * $87;
   $89 = $13;
   $90 = $89 + $88;
   $13 = $90;
   $91 = HEAP32[$11>>2]|0;
   $92 = ((($91)) + 1|0);
   HEAP32[$11>>2] = $92;
  }
  $93 = $8;
  $94 = (($93) + 1)|0;
  $9 = $94;
 }
 if ((label|0) == 17) {
  $63 = $14;
  $3 = $63;
  $128 = $3;
  STACKTOP = sp;return (+$128);
 }
 else if ((label|0) == 23) {
  $69 = $4;
  _pj_ctx_set_errno($69,-16);
  $3 = inf;
  $128 = $3;
  STACKTOP = sp;return (+$128);
 }
 else if ((label|0) == 28) {
  $83 = $4;
  _pj_ctx_set_errno($83,-16);
  $3 = inf;
  $128 = $3;
  STACKTOP = sp;return (+$128);
 }
 else if ((label|0) == 31) {
  $95 = HEAP32[$11>>2]|0;
  $96 = HEAP8[$95>>0]|0;
  $97 = $96 << 24 >> 24;
  $98 = ($97|0)!=(0);
  if ($98) {
   $99 = HEAP32[1355]|0;
   $100 = HEAP32[$11>>2]|0;
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 << 24 >> 24;
   $103 = (_strchr($99,$102)|0);
   $10 = $103;
   $104 = ($103|0)!=(0|0);
   if ($104) {
    $105 = $10;
    $106 = HEAP32[1355]|0;
    $107 = $105;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = ($109|0)>=(4);
    $111 = $110 ? 45 : 43;
    $7 = $111;
    $112 = HEAP32[$11>>2]|0;
    $113 = ((($112)) + 1|0);
    HEAP32[$11>>2] = $113;
   }
  }
  $114 = $7;
  $115 = ($114|0)==(45);
  if ($115) {
   $116 = $13;
   $117 = -$116;
   $13 = $117;
  }
  $118 = $6;
  $119 = ($118|0)!=(0|0);
  if ($119) {
   $120 = $5;
   $121 = HEAP32[$11>>2]|0;
   $122 = $121;
   $123 = $12;
   $124 = (($122) - ($123))|0;
   $125 = (($120) + ($124)|0);
   $126 = $6;
   HEAP32[$126>>2] = $125;
  }
  $127 = $13;
  $3 = $127;
  $128 = $3;
  STACKTOP = sp;return (+$128);
 }
 return +(0.0);
}
function _proj_strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = HEAP8[$9>>0]|0;
  $5 = $10;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $5;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(100);
  if ($15) {
   label = 5;
   break;
  }
  $16 = $5;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(68);
  if ($18) {
   label = 5;
   break;
  }
  $26 = $6;
  $27 = ((($26)) + 1|0);
  $6 = $27;
 }
 if ((label|0) == 5) {
  $19 = $6;
  HEAP8[$19>>0] = 0;
  $20 = $3;
  $21 = $4;
  $22 = (+_strtod($20,$21));
  $7 = $22;
  $23 = $5;
  $24 = $6;
  HEAP8[$24>>0] = $23;
  $25 = $7;
  $2 = $25;
  $31 = $2;
  STACKTOP = sp;return (+$31);
 }
 else if ((label|0) == 7) {
  $28 = $3;
  $29 = $4;
  $30 = (+_pj_strtod($28,$29));
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return (+$31);
 }
 return +(0.0);
}
function _pj_authset($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = (_pj_malloc(24)|0);
 $3 = $4;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $39 = $3;
  STACKTOP = sp;return ($39|0);
 }
 $6 = $1;
 $7 = $6 * 0.33333333333333331;
 $8 = $3;
 HEAPF64[$8>>3] = $7;
 $9 = $1;
 $10 = $1;
 $11 = $9 * $10;
 $2 = $11;
 $12 = $2;
 $13 = $12 * 0.17222222222222222;
 $14 = $3;
 $15 = +HEAPF64[$14>>3];
 $16 = $15 + $13;
 HEAPF64[$14>>3] = $16;
 $17 = $2;
 $18 = $17 * 0.063888888888888884;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 HEAPF64[$20>>3] = $18;
 $21 = $1;
 $22 = $2;
 $23 = $22 * $21;
 $2 = $23;
 $24 = $2;
 $25 = $24 * 0.10257936507936508;
 $26 = $3;
 $27 = +HEAPF64[$26>>3];
 $28 = $27 + $25;
 HEAPF64[$26>>3] = $28;
 $29 = $2;
 $30 = $29 * 0.066402116402116407;
 $31 = $3;
 $32 = ((($31)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $33 + $30;
 HEAPF64[$32>>3] = $34;
 $35 = $2;
 $36 = $35 * 0.01677689594356261;
 $37 = $3;
 $38 = ((($37)) + 16|0);
 HEAPF64[$38>>3] = $36;
 $39 = $3;
 STACKTOP = sp;return ($39|0);
}
function _pj_authlat($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $2;
 $7 = $5 + $6;
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = +HEAPF64[$9>>3];
 $11 = $4;
 $12 = (+Math_sin((+$11)));
 $13 = $10 * $12;
 $14 = $8 + $13;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = $4;
 $20 = $18 + $19;
 $21 = (+Math_sin((+$20)));
 $22 = $17 * $21;
 $23 = $14 + $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = $4;
 $29 = $27 + $28;
 $30 = $4;
 $31 = $29 + $30;
 $32 = (+Math_sin((+$31)));
 $33 = $26 * $32;
 $34 = $23 + $33;
 STACKTOP = sp;return (+$34);
}
function _pj_ell_set($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $14 = sp + 176|0;
 $15 = sp + 168|0;
 $16 = sp + 160|0;
 $18 = sp + 152|0;
 $19 = sp + 144|0;
 $20 = sp + 136|0;
 $21 = sp + 128|0;
 $22 = sp + 120|0;
 $23 = sp + 112|0;
 $24 = sp + 104|0;
 $25 = sp + 96|0;
 $26 = sp + 88|0;
 $27 = sp + 80|0;
 $28 = sp + 72|0;
 $29 = sp + 64|0;
 $30 = sp + 56|0;
 $31 = sp + 48|0;
 $32 = sp + 40|0;
 $33 = sp + 32|0;
 $34 = sp + 24|0;
 $35 = sp + 16|0;
 $37 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0.0;
 $13 = 0;
 $38 = $5;
 _pj_ctx_set_errno($38,0);
 $39 = $8;
 HEAPF64[$39>>3] = 0.0;
 $40 = $7;
 HEAPF64[$40>>3] = 0.0;
 $41 = $5;
 $42 = $6;
 _pj_param($14,$41,$42,15216);
 $43 = HEAP32[$14>>2]|0;
 $44 = ($43|0)!=(0);
 $45 = $5;
 $46 = $6;
 if ($44) {
  _pj_param($15,$45,$46,15219);
  $47 = +HEAPF64[$15>>3];
  $48 = $7;
  HEAPF64[$48>>3] = $47;
 } else {
  _pj_param($16,$45,$46,15222);
  $49 = HEAP32[$16>>2]|0;
  $12 = $49;
  $50 = ($49|0)!=(0|0);
  do {
   if ($50) {
    $51 = $6;
    $13 = $51;
    while(1) {
     $52 = $13;
     $53 = ($52|0)!=(0|0);
     if (!($53)) {
      break;
     }
     $54 = $13;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)!=(0|0);
     if (!($56)) {
      break;
     }
     $57 = $13;
     $58 = HEAP32[$57>>2]|0;
     $13 = $58;
    }
    $9 = 0;
    while(1) {
     $59 = $9;
     $60 = (5424 + ($59<<4)|0);
     $61 = HEAP32[$60>>2]|0;
     $17 = $61;
     $62 = ($61|0)!=(0|0);
     if (!($62)) {
      break;
     }
     $63 = $12;
     $64 = $17;
     $65 = (_strcmp($63,$64)|0);
     $66 = ($65|0)!=(0);
     if (!($66)) {
      break;
     }
     $67 = $9;
     $68 = (($67) + 1)|0;
     $9 = $68;
    }
    $69 = $17;
    $70 = ($69|0)!=(0|0);
    if ($70) {
     $72 = $9;
     $73 = (5424 + ($72<<4)|0);
     $74 = ((($73)) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (_pj_mkparam($75)|0);
     $77 = $13;
     HEAP32[$77>>2] = $76;
     $78 = $9;
     $79 = (5424 + ($78<<4)|0);
     $80 = ((($79)) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_pj_mkparam($81)|0);
     $83 = $13;
     $84 = HEAP32[$83>>2]|0;
     HEAP32[$84>>2] = $82;
     break;
    }
    $71 = $5;
    _pj_ctx_set_errno($71,-9);
    $4 = 1;
    $309 = $4;
    STACKTOP = sp;return ($309|0);
   }
  } while(0);
  $85 = $5;
  $86 = $6;
  _pj_param($18,$85,$86,15229);
  $87 = +HEAPF64[$18>>3];
  $88 = $7;
  HEAPF64[$88>>3] = $87;
  $89 = $5;
  $90 = $6;
  _pj_param($19,$89,$90,15232);
  $91 = HEAP32[$19>>2]|0;
  $92 = ($91|0)!=(0);
  $93 = $5;
  $94 = $6;
  do {
   if ($92) {
    _pj_param($20,$93,$94,15236);
    $95 = +HEAPF64[$20>>3];
    $96 = $8;
    HEAPF64[$96>>3] = $95;
    label = 27;
   } else {
    _pj_param($21,$93,$94,15240);
    $97 = HEAP32[$21>>2]|0;
    $98 = ($97|0)!=(0);
    $99 = $5;
    $100 = $6;
    if ($98) {
     _pj_param($22,$99,$100,15243);
     $101 = +HEAPF64[$22>>3];
     $11 = $101;
     $102 = $11;
     $103 = $11;
     $104 = $102 * $103;
     $105 = $8;
     HEAPF64[$105>>3] = $104;
     label = 27;
     break;
    }
    _pj_param($23,$99,$100,17311);
    $106 = HEAP32[$23>>2]|0;
    $107 = ($106|0)!=(0);
    $108 = $5;
    $109 = $6;
    if ($107) {
     _pj_param($24,$108,$109,15246);
     $110 = +HEAPF64[$24>>3];
     $111 = $8;
     HEAPF64[$111>>3] = $110;
     $112 = $8;
     $113 = +HEAPF64[$112>>3];
     $114 = $113 != 0.0;
     if ($114) {
      $116 = $8;
      $117 = +HEAPF64[$116>>3];
      $118 = 1.0 / $117;
      $119 = $8;
      HEAPF64[$119>>3] = $118;
      $120 = $8;
      $121 = +HEAPF64[$120>>3];
      $122 = $8;
      $123 = +HEAPF64[$122>>3];
      $124 = 2.0 - $123;
      $125 = $121 * $124;
      $126 = $8;
      HEAPF64[$126>>3] = $125;
      label = 27;
      break;
     } else {
      $115 = $5;
      _pj_ctx_set_errno($115,-10);
      break;
     }
    }
    _pj_param($25,$108,$109,17315);
    $127 = HEAP32[$25>>2]|0;
    $128 = ($127|0)!=(0);
    $129 = $5;
    $130 = $6;
    if ($128) {
     _pj_param($26,$129,$130,15250);
     $131 = +HEAPF64[$26>>3];
     $132 = $8;
     HEAPF64[$132>>3] = $131;
     $133 = $8;
     $134 = +HEAPF64[$133>>3];
     $135 = $8;
     $136 = +HEAPF64[$135>>3];
     $137 = 2.0 - $136;
     $138 = $134 * $137;
     $139 = $8;
     HEAPF64[$139>>3] = $138;
     label = 27;
     break;
    }
    _pj_param($27,$129,$130,17308);
    $140 = HEAP32[$27>>2]|0;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $5;
     $143 = $6;
     _pj_param($28,$142,$143,15253);
     $144 = +HEAPF64[$28>>3];
     $10 = $144;
     $145 = $10;
     $146 = $10;
     $147 = $145 * $146;
     $148 = $7;
     $149 = +HEAPF64[$148>>3];
     $150 = $7;
     $151 = +HEAPF64[$150>>3];
     $152 = $149 * $151;
     $153 = $147 / $152;
     $154 = 1.0 - $153;
     $155 = $8;
     HEAPF64[$155>>3] = $154;
     label = 27;
    } else {
     label = 27;
    }
   }
  } while(0);
  do {
   if ((label|0) == 27) {
    $156 = $10;
    $157 = $156 != 0.0;
    if (!($157)) {
     $158 = $7;
     $159 = +HEAPF64[$158>>3];
     $160 = $8;
     $161 = +HEAPF64[$160>>3];
     $162 = 1.0 - $161;
     $163 = (+Math_sqrt((+$162)));
     $164 = $159 * $163;
     $10 = $164;
    }
    $165 = $5;
    $166 = $6;
    _pj_param($29,$165,$166,15256);
    $167 = HEAP32[$29>>2]|0;
    $168 = ($167|0)!=(0);
    if ($168) {
     $169 = $8;
     $170 = +HEAPF64[$169>>3];
     $171 = $8;
     $172 = +HEAPF64[$171>>3];
     $173 = $8;
     $174 = +HEAPF64[$173>>3];
     $175 = $174 * 0.022156084656084655;
     $176 = 0.047222222222222221 + $175;
     $177 = $172 * $176;
     $178 = 0.16666666666666666 + $177;
     $179 = $170 * $178;
     $180 = 1.0 - $179;
     $181 = $7;
     $182 = +HEAPF64[$181>>3];
     $183 = $182 * $180;
     HEAPF64[$181>>3] = $183;
     $184 = $8;
     HEAPF64[$184>>3] = 0.0;
     break;
    }
    $185 = $5;
    $186 = $6;
    _pj_param($30,$185,$186,15261);
    $187 = HEAP32[$30>>2]|0;
    $188 = ($187|0)!=(0);
    if ($188) {
     $189 = $8;
     $190 = +HEAPF64[$189>>3];
     $191 = $8;
     $192 = +HEAPF64[$191>>3];
     $193 = $8;
     $194 = +HEAPF64[$193>>3];
     $195 = $194 * 0.042438271604938273;
     $196 = 0.069444444444444448 + $195;
     $197 = $192 * $196;
     $198 = 0.16666666666666666 + $197;
     $199 = $190 * $198;
     $200 = 1.0 - $199;
     $201 = $7;
     $202 = +HEAPF64[$201>>3];
     $203 = $202 * $200;
     HEAPF64[$201>>3] = $203;
     $204 = $8;
     HEAPF64[$204>>3] = 0.0;
     break;
    }
    $205 = $5;
    $206 = $6;
    _pj_param($31,$205,$206,15266);
    $207 = HEAP32[$31>>2]|0;
    $208 = ($207|0)!=(0);
    if ($208) {
     $209 = $7;
     $210 = +HEAPF64[$209>>3];
     $211 = $10;
     $212 = $210 + $211;
     $213 = 0.5 * $212;
     $214 = $7;
     HEAPF64[$214>>3] = $213;
     $215 = $8;
     HEAPF64[$215>>3] = 0.0;
     break;
    }
    $216 = $5;
    $217 = $6;
    _pj_param($32,$216,$217,15271);
    $218 = HEAP32[$32>>2]|0;
    $219 = ($218|0)!=(0);
    if ($219) {
     $220 = $7;
     $221 = +HEAPF64[$220>>3];
     $222 = $10;
     $223 = $221 * $222;
     $224 = (+Math_sqrt((+$223)));
     $225 = $7;
     HEAPF64[$225>>3] = $224;
     $226 = $8;
     HEAPF64[$226>>3] = 0.0;
     break;
    }
    $227 = $5;
    $228 = $6;
    _pj_param($33,$227,$228,15276);
    $229 = HEAP32[$33>>2]|0;
    $230 = ($229|0)!=(0);
    if ($230) {
     $231 = $7;
     $232 = +HEAPF64[$231>>3];
     $233 = 2.0 * $232;
     $234 = $10;
     $235 = $233 * $234;
     $236 = $7;
     $237 = +HEAPF64[$236>>3];
     $238 = $10;
     $239 = $237 + $238;
     $240 = $235 / $239;
     $241 = $7;
     HEAPF64[$241>>3] = $240;
     $242 = $8;
     HEAPF64[$242>>3] = 0.0;
     break;
    }
    $243 = $5;
    $244 = $6;
    _pj_param($34,$243,$244,15281);
    $245 = HEAP32[$34>>2]|0;
    $9 = $245;
    $246 = ($245|0)!=(0);
    if (!($246)) {
     $247 = $5;
     $248 = $6;
     _pj_param($35,$247,$248,15290);
     $249 = HEAP32[$35>>2]|0;
     $250 = ($249|0)!=(0);
     if (!($250)) {
      break;
     }
    }
    $251 = $5;
    $252 = $6;
    $253 = $9;
    $254 = ($253|0)!=(0);
    $255 = $254 ? 15299 : 15308;
    _pj_param($37,$251,$252,$255);
    $256 = +HEAPF64[$37>>3];
    $257 = (+Math_sin((+$256)));
    $36 = $257;
    $258 = $36;
    $259 = (+Math_abs((+$258)));
    $260 = $259 > 1.5707963267948966;
    if ($260) {
     $261 = $5;
     _pj_ctx_set_errno($261,-11);
     break;
    }
    $262 = $8;
    $263 = +HEAPF64[$262>>3];
    $264 = $36;
    $265 = $263 * $264;
    $266 = $36;
    $267 = $265 * $266;
    $268 = 1.0 - $267;
    $36 = $268;
    $269 = $9;
    $270 = ($269|0)!=(0);
    $271 = $8;
    $272 = +HEAPF64[$271>>3];
    $273 = 1.0 - $272;
    if ($270) {
     $274 = $36;
     $275 = $273 + $274;
     $276 = 0.5 * $275;
     $277 = $36;
     $278 = $36;
     $279 = (+Math_sqrt((+$278)));
     $280 = $277 * $279;
     $281 = $276 / $280;
     $288 = $281;
    } else {
     $282 = (+Math_sqrt((+$273)));
     $283 = $36;
     $284 = $282 / $283;
     $288 = $284;
    }
    $285 = $7;
    $286 = +HEAPF64[$285>>3];
    $287 = $286 * $288;
    HEAPF64[$285>>3] = $287;
    $289 = $8;
    HEAPF64[$289>>3] = 0.0;
   }
  } while(0);
  $290 = $13;
  $291 = ($290|0)!=(0|0);
  if ($291) {
   $292 = $13;
   $293 = HEAP32[$292>>2]|0;
   $294 = HEAP32[$293>>2]|0;
   _pj_dalloc($294);
   $295 = $13;
   $296 = HEAP32[$295>>2]|0;
   _pj_dalloc($296);
   $297 = $13;
   HEAP32[$297>>2] = 0;
  }
  $298 = $5;
  $299 = HEAP32[$298>>2]|0;
  $300 = ($299|0)!=(0);
  if ($300) {
   $4 = 1;
   $309 = $4;
   STACKTOP = sp;return ($309|0);
  }
 }
 $301 = $8;
 $302 = +HEAPF64[$301>>3];
 $303 = $302 < 0.0;
 if ($303) {
  $304 = $5;
  _pj_ctx_set_errno($304,-12);
  $4 = 1;
  $309 = $4;
  STACKTOP = sp;return ($309|0);
 }
 $305 = $7;
 $306 = +HEAPF64[$305>>3];
 $307 = $306 <= 0.0;
 if ($307) {
  $308 = $5;
  _pj_ctx_set_errno($308,-13);
  $4 = 1;
  $309 = $4;
  STACKTOP = sp;return ($309|0);
 } else {
  $4 = 0;
  $309 = $4;
  STACKTOP = sp;return ($309|0);
 }
 return (0)|0;
}
function _pj_fwd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 24|0;
 $6 = sp;
 $3 = $2;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $9 - 1.5707963267948966;
 $5 = $10;
 $11 = $10 > 9.9999999999999998E-13;
 if (!($11)) {
  $12 = +HEAPF64[$1>>3];
  $13 = (+Math_abs((+$12)));
  $14 = $13 > 10.0;
  if (!($14)) {
   $18 = $3;
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$19>>2] = 0;
   HEAP32[6054] = 0;
   $20 = (___errno_location()|0);
   HEAP32[$20>>2] = 0;
   $21 = $5;
   $22 = (+Math_abs((+$21)));
   $23 = $22 <= 9.9999999999999998E-13;
   if ($23) {
    $24 = ((($1)) + 8|0);
    $25 = +HEAPF64[$24>>3];
    $26 = $25 < 0.0;
    $27 = $26 ? -1.5707963267948966 : 1.5707963267948966;
    $28 = ((($1)) + 8|0);
    HEAPF64[$28>>3] = $27;
   } else {
    $29 = $3;
    $30 = ((($29)) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0);
    if ($32) {
     $33 = $3;
     $34 = ((($33)) + 112|0);
     $35 = +HEAPF64[$34>>3];
     $36 = ((($1)) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = (+Math_tan((+$37)));
     $39 = $35 * $38;
     $40 = (+Math_atan((+$39)));
     $41 = ((($1)) + 8|0);
     HEAPF64[$41>>3] = $40;
    }
   }
   $42 = $3;
   $43 = ((($42)) + 120|0);
   $44 = +HEAPF64[$43>>3];
   $45 = +HEAPF64[$1>>3];
   $46 = $45 - $44;
   HEAPF64[$1>>3] = $46;
   $47 = $3;
   $48 = ((($47)) + 36|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0);
   if (!($50)) {
    $51 = +HEAPF64[$1>>3];
    $52 = (+_adjlon($51));
    HEAPF64[$1>>3] = $52;
   }
   $53 = $3;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0|0);
   if (!($56)) {
    $94 = ((($4)) + 8|0);
    HEAPF64[$94>>3] = inf;
    HEAPF64[$4>>3] = inf;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
   $57 = $3;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $3;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
   FUNCTION_TABLE_viii[$59 & 511]($6,$$byval_copy,$60);
   ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$6+12>>2]|0;
   $61 = $3;
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = ((($4)) + 8|0);
    HEAPF64[$65>>3] = inf;
    HEAPF64[$4>>3] = inf;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   } else {
    $66 = $3;
    $67 = ((($66)) + 168|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $3;
    $70 = ((($69)) + 56|0);
    $71 = +HEAPF64[$70>>3];
    $72 = +HEAPF64[$4>>3];
    $73 = $71 * $72;
    $74 = $3;
    $75 = ((($74)) + 136|0);
    $76 = +HEAPF64[$75>>3];
    $77 = $73 + $76;
    $78 = $68 * $77;
    HEAPF64[$4>>3] = $78;
    $79 = $3;
    $80 = ((($79)) + 168|0);
    $81 = +HEAPF64[$80>>3];
    $82 = $3;
    $83 = ((($82)) + 56|0);
    $84 = +HEAPF64[$83>>3];
    $85 = ((($4)) + 8|0);
    $86 = +HEAPF64[$85>>3];
    $87 = $84 * $86;
    $88 = $3;
    $89 = ((($88)) + 144|0);
    $90 = +HEAPF64[$89>>3];
    $91 = $87 + $90;
    $92 = $81 * $91;
    $93 = ((($4)) + 8|0);
    HEAPF64[$93>>3] = $92;
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = inf;
 HEAPF64[$4>>3] = inf;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 _pj_ctx_set_errno($17,-14);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_init_plus($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (_pj_get_default_ctx()|0);
 $3 = $1;
 $4 = (_pj_init_plus_ctx($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pj_init_plus_ctx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(832|0);
 $4 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $8 = 0;
 $9 = 0;
 $10 = $3;
 $11 = (_strlen($10)|0);
 $12 = (($11) + 1)|0;
 $13 = (_pj_malloc($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = $3;
 (_strcpy($14,$15)|0);
 $7 = 0;
 L1: while(1) {
  $16 = $7;
  $17 = $5;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(0);
  $22 = $7;
  if (!($21)) {
   label = 18;
   break;
  }
  $23 = $5;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  L4: do {
   switch ($26|0) {
   case 43:  {
    $27 = $7;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $29 = $7;
     $30 = (($29) - 1)|0;
     $31 = $5;
     $32 = (($31) + ($30)|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33 << 24 >> 24;
     $35 = ($34|0)==(0);
     $36 = $8;
     $37 = ($36|0)>(0);
     $or$cond = $35 | $37;
     if (!($or$cond)) {
      break L4;
     }
    }
    $38 = $8;
    $39 = ($38|0)>(0);
    if ($39) {
     $40 = $7;
     $41 = $8;
     $42 = (($40) - ($41))|0;
     $43 = $5;
     $44 = (($43) + ($42)|0);
     HEAP8[$44>>0] = 0;
     $8 = 0;
    }
    $45 = $6;
    $46 = (($45) + 1)|0;
    $47 = ($46|0)==(200);
    if ($47) {
     label = 9;
     break L1;
    }
    $49 = $5;
    $50 = $7;
    $51 = (($49) + ($50)|0);
    $52 = ((($51)) + 1|0);
    $53 = $6;
    $54 = (($53) + 1)|0;
    $6 = $54;
    $55 = (($4) + ($53<<2)|0);
    HEAP32[$55>>2] = $52;
    break;
   }
   case 10: case 9: case 32:  {
    $56 = $7;
    $57 = ($56|0)==(0);
    if (!($57)) {
     $58 = $7;
     $59 = (($58) - 1)|0;
     $60 = $5;
     $61 = (($60) + ($59)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = ($63|0)==(0);
     $65 = $6;
     $66 = ($65|0)==(0);
     $or$cond3 = $64 | $66;
     if (!($or$cond3)) {
      $67 = $6;
      $68 = (($67) - 1)|0;
      $69 = (($4) + ($68<<2)|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $5;
      $72 = $7;
      $73 = (($71) + ($72)|0);
      $74 = ($70|0)==($73|0);
      if (!($74)) {
       $78 = $8;
       $79 = (($78) + 1)|0;
       $8 = $79;
       break L4;
      }
     }
    }
    $75 = $7;
    $76 = $5;
    $77 = (($76) + ($75)|0);
    HEAP8[$77>>0] = 0;
    break;
   }
   default: {
    $8 = 0;
   }
   }
  } while(0);
  $80 = $7;
  $81 = (($80) + 1)|0;
  $7 = $81;
 }
 if ((label|0) == 9) {
  $48 = $2;
  _pj_ctx_set_errno($48,-44);
  $89 = $5;
  _pj_dalloc($89);
  $90 = $9;
  STACKTOP = sp;return ($90|0);
 }
 else if ((label|0) == 18) {
  $82 = $8;
  $83 = (($22) - ($82))|0;
  $84 = $5;
  $85 = (($84) + ($83)|0);
  HEAP8[$85>>0] = 0;
  $86 = $2;
  $87 = $6;
  $88 = (_pj_init_ctx($86,$87,$4)|0);
  $9 = $88;
  $89 = $5;
  _pj_dalloc($89);
  $90 = $9;
  STACKTOP = sp;return ($90|0);
 }
 return (0)|0;
}
function _pj_init_ctx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $6 = sp + 256|0;
 $8 = sp + 248|0;
 $13 = sp + 208|0;
 $14 = sp + 228|0;
 $15 = sp + 200|0;
 $16 = sp + 192|0;
 $17 = sp + 184|0;
 $18 = sp + 176|0;
 $19 = sp + 168|0;
 $20 = sp + 160|0;
 $21 = sp + 152|0;
 $22 = sp + 144|0;
 $23 = sp + 136|0;
 $24 = sp + 128|0;
 $26 = sp + 120|0;
 $27 = sp + 112|0;
 $28 = sp + 104|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $33 = sp + 64|0;
 $34 = sp + 56|0;
 $35 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $39 = sp + 16|0;
 $40 = sp + 8|0;
 $41 = sp;
 $43 = sp + 216|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$8>>2] = 0;
 $12 = 0;
 $44 = $3;
 HEAP32[$44>>2] = 0;
 HEAP32[$8>>2] = 0;
 $45 = $4;
 $46 = ($45|0)<=(0);
 L1: do {
  if ($46) {
   $47 = $3;
   _pj_ctx_set_errno($47,-1);
  } else {
   $48 = $5;
   $49 = HEAP32[$48>>2]|0;
   $50 = (_pj_mkparam($49)|0);
   $10 = $50;
   HEAP32[$8>>2] = $50;
   $11 = 1;
   while(1) {
    $51 = $11;
    $52 = $4;
    $53 = ($51|0)<($52|0);
    if (!($53)) {
     break;
    }
    $54 = $11;
    $55 = $5;
    $56 = (($55) + ($54<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (_pj_mkparam($57)|0);
    $59 = $10;
    HEAP32[$59>>2] = $58;
    $60 = $10;
    $61 = HEAP32[$60>>2]|0;
    $10 = $61;
    $62 = $11;
    $63 = (($62) + 1)|0;
    $11 = $63;
   }
   $64 = $3;
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0);
   if (!($66)) {
    $67 = $3;
    $68 = HEAP32[$8>>2]|0;
    _pj_param($13,$67,$68,17103);
    $69 = HEAP32[$13>>2]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     HEAP32[$14>>2] = 0;
     $71 = $3;
     $72 = $10;
     $73 = $3;
     $74 = HEAP32[$8>>2]|0;
     _pj_param($15,$73,$74,17109);
     $75 = HEAP32[$15>>2]|0;
     $76 = (_get_init($71,$8,$72,$75,$14)|0);
     $10 = $76;
     $77 = ($76|0)!=(0|0);
     if (!($77)) {
      break;
     }
     $78 = HEAP32[$14>>2]|0;
     $79 = ($78|0)!=(0);
     if (!($79)) {
      $80 = $3;
      _pj_ctx_set_errno($80,-2);
      break;
     }
    }
    $81 = $3;
    $82 = HEAP32[$8>>2]|0;
    _pj_param($16,$81,$82,17115);
    $83 = HEAP32[$16>>2]|0;
    $7 = $83;
    $84 = ($83|0)!=(0|0);
    if (!($84)) {
     $85 = $3;
     _pj_ctx_set_errno($85,-4);
     break;
    }
    $11 = 0;
    while(1) {
     $86 = $11;
     $87 = (6132 + (($86*12)|0)|0);
     $88 = HEAP32[$87>>2]|0;
     HEAP32[$6>>2] = $88;
     $89 = ($88|0)!=(0|0);
     if (!($89)) {
      break;
     }
     $90 = $7;
     $91 = HEAP32[$6>>2]|0;
     $92 = (_strcmp($90,$91)|0);
     $93 = ($92|0)!=(0);
     if (!($93)) {
      break;
     }
     $94 = $11;
     $95 = (($94) + 1)|0;
     $11 = $95;
    }
    $96 = HEAP32[$6>>2]|0;
    $97 = ($96|0)!=(0|0);
    $98 = $3;
    if (!($97)) {
     _pj_ctx_set_errno($98,-5);
     break;
    }
    $99 = HEAP32[$8>>2]|0;
    _pj_param($17,$98,$99,17121);
    $100 = HEAP32[$17>>2]|0;
    $101 = ($100|0)!=(0);
    if (!($101)) {
     $102 = $3;
     $103 = $10;
     $104 = $7;
     $105 = (_get_defaults($102,$8,$103,$104)|0);
     $10 = $105;
    }
    $106 = $11;
    $107 = (6132 + (($106*12)|0)|0);
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $9 = $109;
    $110 = $9;
    $111 = (FUNCTION_TABLE_ii[$110 & 255](0)|0);
    $12 = $111;
    $112 = ($111|0)!=(0|0);
    if ($112) {
     $113 = $3;
     $114 = $12;
     HEAP32[$114>>2] = $113;
     $115 = HEAP32[$8>>2]|0;
     $116 = $12;
     $117 = ((($116)) + 32|0);
     HEAP32[$117>>2] = $115;
     $118 = $12;
     $119 = ((($118)) + 44|0);
     HEAP32[$119>>2] = 0;
     $120 = $12;
     $121 = ((($120)) + 48|0);
     HEAP32[$121>>2] = 0;
     $122 = $12;
     $123 = ((($122)) + 296|0);
     HEAP32[$123>>2] = 0;
     $124 = $12;
     $125 = ((($124)) + 288|0);
     HEAPF64[$125>>3] = 0.0;
     $126 = $12;
     $127 = ((($126)) + 300|0);
     (_strcpy($127,20691)|0);
     $128 = $12;
     $129 = ((($128)) + 240|0);
     HEAP32[$129>>2] = 0;
     $130 = $12;
     $131 = ((($130)) + 244|0);
     HEAP32[$131>>2] = 0;
     $132 = $12;
     $133 = ((($132)) + 252|0);
     HEAP32[$133>>2] = 0;
     $134 = $12;
     $135 = ((($134)) + 256|0);
     HEAP32[$135>>2] = 0;
     $136 = $3;
     $137 = HEAP32[$8>>2]|0;
     $138 = $12;
     $139 = (_pj_datum_set($136,$137,$138)|0);
     $140 = ($139|0)!=(0);
     if (!($140)) {
      $141 = $3;
      $142 = HEAP32[$8>>2]|0;
      $143 = $12;
      $144 = ((($143)) + 56|0);
      $145 = $12;
      $146 = ((($145)) + 72|0);
      $147 = (_pj_ell_set($141,$142,$144,$146)|0);
      $148 = ($147|0)!=(0);
      if (!($148)) {
       $149 = $12;
       $150 = ((($149)) + 56|0);
       $151 = +HEAPF64[$150>>3];
       $152 = $12;
       $153 = ((($152)) + 64|0);
       HEAPF64[$153>>3] = $151;
       $154 = $12;
       $155 = ((($154)) + 72|0);
       $156 = +HEAPF64[$155>>3];
       $157 = $12;
       $158 = ((($157)) + 80|0);
       HEAPF64[$158>>3] = $156;
       $159 = $12;
       $160 = ((($159)) + 72|0);
       $161 = +HEAPF64[$160>>3];
       $162 = (+Math_sqrt((+$161)));
       $163 = $12;
       $164 = ((($163)) + 88|0);
       HEAPF64[$164>>3] = $162;
       $165 = $12;
       $166 = ((($165)) + 56|0);
       $167 = +HEAPF64[$166>>3];
       $168 = 1.0 / $167;
       $169 = $12;
       $170 = ((($169)) + 96|0);
       HEAPF64[$170>>3] = $168;
       $171 = $12;
       $172 = ((($171)) + 72|0);
       $173 = +HEAPF64[$172>>3];
       $174 = 1.0 - $173;
       $175 = $12;
       $176 = ((($175)) + 104|0);
       HEAPF64[$176>>3] = $174;
       $177 = $12;
       $178 = ((($177)) + 104|0);
       $179 = +HEAPF64[$178>>3];
       $180 = $179 == 0.0;
       if ($180) {
        $181 = $3;
        _pj_ctx_set_errno($181,-6);
        break;
       }
       $182 = $12;
       $183 = ((($182)) + 104|0);
       $184 = +HEAPF64[$183>>3];
       $185 = 1.0 / $184;
       $186 = $12;
       $187 = ((($186)) + 112|0);
       HEAPF64[$187>>3] = $185;
       $188 = $12;
       $189 = ((($188)) + 176|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($190|0)==(1);
       if ($191) {
        $192 = $12;
        $193 = ((($192)) + 184|0);
        $194 = +HEAPF64[$193>>3];
        $195 = $194 == 0.0;
        if ($195) {
         $196 = $12;
         $197 = ((($196)) + 184|0);
         $198 = ((($197)) + 8|0);
         $199 = +HEAPF64[$198>>3];
         $200 = $199 == 0.0;
         if ($200) {
          $201 = $12;
          $202 = ((($201)) + 184|0);
          $203 = ((($202)) + 16|0);
          $204 = +HEAPF64[$203>>3];
          $205 = $204 == 0.0;
          if ($205) {
           $206 = $12;
           $207 = ((($206)) + 56|0);
           $208 = +HEAPF64[$207>>3];
           $209 = $208 == 6378137.0;
           if ($209) {
            $210 = $12;
            $211 = ((($210)) + 72|0);
            $212 = +HEAPF64[$211>>3];
            $213 = $212 - 0.0066943799899999998;
            $214 = $213 < 0.0;
            $215 = $12;
            $216 = ((($215)) + 72|0);
            $217 = +HEAPF64[$216>>3];
            $218 = $217 - 0.0066943799899999998;
            $219 = -1.0 * $218;
            $220 = $214 ? $219 : $218;
            $221 = $220 < 5.0000000000000002E-11;
            if ($221) {
             $222 = $12;
             $223 = ((($222)) + 176|0);
             HEAP32[$223>>2] = 4;
            }
           }
          }
         }
        }
       }
       $224 = $12;
       $225 = ((($224)) + 72|0);
       $226 = +HEAPF64[$225>>3];
       $227 = $226 != 0.0;
       if ($227) {
        $228 = $3;
        $229 = HEAP32[$8>>2]|0;
        _pj_param($18,$228,$229,17130);
        $230 = HEAP32[$18>>2]|0;
        $231 = ($230|0)!=(0);
        $233 = $231;
       } else {
        $233 = 0;
       }
       $232 = $233&1;
       $234 = $12;
       $235 = ((($234)) + 40|0);
       HEAP32[$235>>2] = $232;
       $236 = $3;
       $237 = HEAP32[$8>>2]|0;
       _pj_param($19,$236,$237,17136);
       $238 = HEAP32[$19>>2]|0;
       $239 = $12;
       $240 = ((($239)) + 36|0);
       HEAP32[$240>>2] = $238;
       $241 = $3;
       $242 = HEAP32[$8>>2]|0;
       _pj_param($20,$241,$242,17142);
       $243 = HEAP32[$20>>2]|0;
       $244 = $12;
       $245 = ((($244)) + 248|0);
       HEAP32[$245>>2] = $243;
       $246 = $12;
       $247 = ((($246)) + 248|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = ($248|0)!=(0);
       if ($249) {
        $250 = $3;
        $251 = HEAP32[$8>>2]|0;
        _pj_param($21,$250,$251,20744);
       }
       $252 = $3;
       $253 = HEAP32[$8>>2]|0;
       _pj_param($22,$252,$253,17154);
       $254 = HEAP32[$22>>2]|0;
       $255 = $12;
       $256 = ((($255)) + 296|0);
       HEAP32[$256>>2] = $254;
       $257 = $12;
       $258 = ((($257)) + 296|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($259|0)!=(0);
       if ($260) {
        $261 = $3;
        $262 = HEAP32[$8>>2]|0;
        _pj_param($23,$261,$262,17164);
        $263 = +HEAPF64[$23>>3];
        $264 = $12;
        $265 = ((($264)) + 288|0);
        HEAPF64[$265>>3] = $263;
       }
       $266 = $3;
       $267 = HEAP32[$8>>2]|0;
       _pj_param($24,$266,$267,17174);
       $268 = HEAP32[$24>>2]|0;
       $269 = ($268|0)!=(0|0);
       L51: do {
        if ($269) {
         $270 = $3;
         $271 = HEAP32[$8>>2]|0;
         _pj_param($26,$270,$271,17174);
         $272 = HEAP32[$26>>2]|0;
         $25 = $272;
         $273 = $25;
         $274 = (_strlen($273)|0);
         $275 = ($274|0)!=(3);
         if ($275) {
          $276 = $3;
          _pj_ctx_set_errno($276,-47);
          break L1;
         }
         $277 = HEAP32[1532]|0;
         $278 = $25;
         $279 = HEAP8[$278>>0]|0;
         $280 = $279 << 24 >> 24;
         $281 = (_strchr($277,$280)|0);
         $282 = ($281|0)==(0|0);
         do {
          if (!($282)) {
           $283 = HEAP32[1532]|0;
           $284 = $25;
           $285 = ((($284)) + 1|0);
           $286 = HEAP8[$285>>0]|0;
           $287 = $286 << 24 >> 24;
           $288 = (_strchr($283,$287)|0);
           $289 = ($288|0)==(0|0);
           if ($289) {
            break;
           }
           $290 = HEAP32[1532]|0;
           $291 = $25;
           $292 = ((($291)) + 2|0);
           $293 = HEAP8[$292>>0]|0;
           $294 = $293 << 24 >> 24;
           $295 = (_strchr($290,$294)|0);
           $296 = ($295|0)==(0|0);
           if ($296) {
            break;
           }
           $298 = $12;
           $299 = ((($298)) + 300|0);
           $300 = $25;
           (_strcpy($299,$300)|0);
           break L51;
          }
         } while(0);
         $297 = $3;
         _pj_ctx_set_errno($297,-47);
         break L1;
        }
       } while(0);
       $301 = $3;
       $302 = HEAP32[$8>>2]|0;
       _pj_param($27,$301,$302,17154);
       $303 = HEAP32[$27>>2]|0;
       $304 = $12;
       $305 = ((($304)) + 296|0);
       HEAP32[$305>>2] = $303;
       $306 = $12;
       $307 = ((($306)) + 296|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = ($308|0)!=(0);
       if ($309) {
        $310 = $3;
        $311 = HEAP32[$8>>2]|0;
        _pj_param($28,$310,$311,17164);
        $312 = +HEAPF64[$28>>3];
        $313 = $12;
        $314 = ((($313)) + 288|0);
        HEAPF64[$314>>3] = $312;
       }
       $315 = $3;
       $316 = HEAP32[$8>>2]|0;
       _pj_param($29,$315,$316,17180);
       $317 = +HEAPF64[$29>>3];
       $318 = $12;
       $319 = ((($318)) + 120|0);
       HEAPF64[$319>>3] = $317;
       $320 = $3;
       $321 = HEAP32[$8>>2]|0;
       _pj_param($30,$320,$321,17187);
       $322 = +HEAPF64[$30>>3];
       $323 = $12;
       $324 = ((($323)) + 128|0);
       HEAPF64[$324>>3] = $322;
       $325 = $3;
       $326 = HEAP32[$8>>2]|0;
       _pj_param($31,$325,$326,17194);
       $327 = +HEAPF64[$31>>3];
       $328 = $12;
       $329 = ((($328)) + 136|0);
       HEAPF64[$329>>3] = $327;
       $330 = $3;
       $331 = HEAP32[$8>>2]|0;
       _pj_param($32,$330,$331,17199);
       $332 = +HEAPF64[$32>>3];
       $333 = $12;
       $334 = ((($333)) + 144|0);
       HEAPF64[$334>>3] = $332;
       $335 = $3;
       $336 = HEAP32[$8>>2]|0;
       _pj_param($33,$335,$336,17204);
       $337 = HEAP32[$33>>2]|0;
       $338 = ($337|0)!=(0);
       $339 = $3;
       $340 = HEAP32[$8>>2]|0;
       do {
        if ($338) {
         _pj_param($34,$339,$340,17209);
         $341 = +HEAPF64[$34>>3];
         $342 = $12;
         $343 = ((($342)) + 152|0);
         HEAPF64[$343>>3] = $341;
        } else {
         _pj_param($35,$339,$340,17214);
         $344 = HEAP32[$35>>2]|0;
         $345 = ($344|0)!=(0);
         if ($345) {
          $346 = $3;
          $347 = HEAP32[$8>>2]|0;
          _pj_param($36,$346,$347,17217);
          $348 = +HEAPF64[$36>>3];
          $349 = $12;
          $350 = ((($349)) + 152|0);
          HEAPF64[$350>>3] = $348;
          break;
         } else {
          $351 = $12;
          $352 = ((($351)) + 152|0);
          HEAPF64[$352>>3] = 1.0;
          break;
         }
        }
       } while(0);
       $353 = $12;
       $354 = ((($353)) + 152|0);
       $355 = +HEAPF64[$354>>3];
       $356 = $355 <= 0.0;
       if ($356) {
        $357 = $3;
        _pj_ctx_set_errno($357,-31);
        break;
       }
       HEAP32[$6>>2] = 0;
       $358 = $3;
       $359 = HEAP32[$8>>2]|0;
       _pj_param($37,$358,$359,17220);
       $360 = HEAP32[$37>>2]|0;
       $7 = $360;
       $361 = ($360|0)!=(0|0);
       do {
        if ($361) {
         $11 = 0;
         while(1) {
          $362 = $11;
          $363 = (7864 + (($362*12)|0)|0);
          $364 = HEAP32[$363>>2]|0;
          HEAP32[$6>>2] = $364;
          $365 = ($364|0)!=(0|0);
          if (!($365)) {
           break;
          }
          $366 = $7;
          $367 = HEAP32[$6>>2]|0;
          $368 = (_strcmp($366,$367)|0);
          $369 = ($368|0)!=(0);
          if (!($369)) {
           break;
          }
          $370 = $11;
          $371 = (($370) + 1)|0;
          $11 = $371;
         }
         $372 = HEAP32[$6>>2]|0;
         $373 = ($372|0)!=(0|0);
         if ($373) {
          $375 = $11;
          $376 = (7864 + (($375*12)|0)|0);
          $377 = ((($376)) + 4|0);
          $378 = HEAP32[$377>>2]|0;
          HEAP32[$6>>2] = $378;
          break;
         } else {
          $374 = $3;
          _pj_ctx_set_errno($374,-7);
          break L1;
         }
        }
       } while(0);
       $379 = HEAP32[$6>>2]|0;
       $380 = ($379|0)!=(0|0);
       do {
        if ($380) {
         label = 66;
        } else {
         $381 = $3;
         $382 = HEAP32[$8>>2]|0;
         _pj_param($38,$381,$382,17227);
         $383 = HEAP32[$38>>2]|0;
         HEAP32[$6>>2] = $383;
         $384 = ($383|0)!=(0|0);
         if ($384) {
          label = 66;
          break;
         }
         $406 = $12;
         $407 = ((($406)) + 168|0);
         HEAPF64[$407>>3] = 1.0;
         $408 = $12;
         $409 = ((($408)) + 160|0);
         HEAPF64[$409>>3] = 1.0;
        }
       } while(0);
       if ((label|0) == 66) {
        $385 = HEAP32[$6>>2]|0;
        $386 = (+_pj_strtod($385,$6));
        $387 = $12;
        $388 = ((($387)) + 160|0);
        HEAPF64[$388>>3] = $386;
        $389 = HEAP32[$6>>2]|0;
        $390 = HEAP8[$389>>0]|0;
        $391 = $390 << 24 >> 24;
        $392 = ($391|0)==(47);
        if ($392) {
         $393 = HEAP32[$6>>2]|0;
         $394 = ((($393)) + 1|0);
         HEAP32[$6>>2] = $394;
         $395 = (+_pj_strtod($394,0));
         $396 = $12;
         $397 = ((($396)) + 160|0);
         $398 = +HEAPF64[$397>>3];
         $399 = $398 / $395;
         HEAPF64[$397>>3] = $399;
        }
        $400 = $12;
        $401 = ((($400)) + 160|0);
        $402 = +HEAPF64[$401>>3];
        $403 = 1.0 / $402;
        $404 = $12;
        $405 = ((($404)) + 168|0);
        HEAPF64[$405>>3] = $403;
       }
       HEAP32[$6>>2] = 0;
       $410 = $3;
       $411 = HEAP32[$8>>2]|0;
       _pj_param($39,$410,$411,17237);
       $412 = HEAP32[$39>>2]|0;
       $7 = $412;
       $413 = ($412|0)!=(0|0);
       do {
        if ($413) {
         $11 = 0;
         while(1) {
          $414 = $11;
          $415 = (7864 + (($414*12)|0)|0);
          $416 = HEAP32[$415>>2]|0;
          HEAP32[$6>>2] = $416;
          $417 = ($416|0)!=(0|0);
          if (!($417)) {
           break;
          }
          $418 = $7;
          $419 = HEAP32[$6>>2]|0;
          $420 = (_strcmp($418,$419)|0);
          $421 = ($420|0)!=(0);
          if (!($421)) {
           break;
          }
          $422 = $11;
          $423 = (($422) + 1)|0;
          $11 = $423;
         }
         $424 = HEAP32[$6>>2]|0;
         $425 = ($424|0)!=(0|0);
         if ($425) {
          $427 = $11;
          $428 = (7864 + (($427*12)|0)|0);
          $429 = ((($428)) + 4|0);
          $430 = HEAP32[$429>>2]|0;
          HEAP32[$6>>2] = $430;
          break;
         } else {
          $426 = $3;
          _pj_ctx_set_errno($426,-7);
          break L1;
         }
        }
       } while(0);
       $431 = HEAP32[$6>>2]|0;
       $432 = ($431|0)!=(0|0);
       do {
        if ($432) {
         label = 80;
        } else {
         $433 = $3;
         $434 = HEAP32[$8>>2]|0;
         _pj_param($40,$433,$434,17245);
         $435 = HEAP32[$40>>2]|0;
         HEAP32[$6>>2] = $435;
         $436 = ($435|0)!=(0|0);
         if ($436) {
          label = 80;
          break;
         }
         $458 = $12;
         $459 = ((($458)) + 160|0);
         $460 = +HEAPF64[$459>>3];
         $461 = $12;
         $462 = ((($461)) + 264|0);
         HEAPF64[$462>>3] = $460;
         $463 = $12;
         $464 = ((($463)) + 168|0);
         $465 = +HEAPF64[$464>>3];
         $466 = $12;
         $467 = ((($466)) + 272|0);
         HEAPF64[$467>>3] = $465;
        }
       } while(0);
       if ((label|0) == 80) {
        $437 = HEAP32[$6>>2]|0;
        $438 = (+_pj_strtod($437,$6));
        $439 = $12;
        $440 = ((($439)) + 264|0);
        HEAPF64[$440>>3] = $438;
        $441 = HEAP32[$6>>2]|0;
        $442 = HEAP8[$441>>0]|0;
        $443 = $442 << 24 >> 24;
        $444 = ($443|0)==(47);
        if ($444) {
         $445 = HEAP32[$6>>2]|0;
         $446 = ((($445)) + 1|0);
         HEAP32[$6>>2] = $446;
         $447 = (+_pj_strtod($446,0));
         $448 = $12;
         $449 = ((($448)) + 264|0);
         $450 = +HEAPF64[$449>>3];
         $451 = $450 / $447;
         HEAPF64[$449>>3] = $451;
        }
        $452 = $12;
        $453 = ((($452)) + 264|0);
        $454 = +HEAPF64[$453>>3];
        $455 = 1.0 / $454;
        $456 = $12;
        $457 = ((($456)) + 272|0);
        HEAPF64[$457>>3] = $455;
       }
       HEAP32[$6>>2] = 0;
       $468 = $3;
       $469 = HEAP32[$8>>2]|0;
       _pj_param($41,$468,$469,17256);
       $470 = HEAP32[$41>>2]|0;
       $7 = $470;
       $471 = ($470|0)!=(0|0);
       do {
        if ($471) {
         $42 = 0;
         HEAP32[$43>>2] = 0;
         $11 = 0;
         while(1) {
          $472 = $11;
          $473 = (8348 + ($472<<3)|0);
          $474 = HEAP32[$473>>2]|0;
          $475 = ($474|0)!=(0|0);
          if (!($475)) {
           break;
          }
          $476 = $7;
          $477 = $11;
          $478 = (8348 + ($477<<3)|0);
          $479 = HEAP32[$478>>2]|0;
          $480 = (_strcmp($476,$479)|0);
          $481 = ($480|0)==(0);
          $482 = $11;
          if ($481) {
           label = 88;
           break;
          }
          $486 = (($482) + 1)|0;
          $11 = $486;
         }
         if ((label|0) == 88) {
          $483 = (8348 + ($482<<3)|0);
          $484 = ((($483)) + 4|0);
          $485 = HEAP32[$484>>2]|0;
          $42 = $485;
         }
         $487 = $42;
         $488 = ($487|0)==(0|0);
         do {
          if ($488) {
           $489 = $3;
           $490 = $7;
           $491 = (+_dmstor_ctx($489,$490,$43));
           $492 = $491 != 0.0;
           if (!($492)) {
            $493 = $7;
            $494 = HEAP8[$493>>0]|0;
            $495 = $494 << 24 >> 24;
            $496 = ($495|0)==(48);
            if (!($496)) {
             break;
            }
           }
           $497 = HEAP32[$43>>2]|0;
           $498 = HEAP8[$497>>0]|0;
           $499 = $498 << 24 >> 24;
           $500 = ($499|0)==(0);
           if (!($500)) {
            break;
           }
           $501 = $7;
           $42 = $501;
          }
         } while(0);
         $502 = $42;
         $503 = ($502|0)!=(0|0);
         $504 = $3;
         if ($503) {
          $505 = $42;
          $506 = (+_dmstor_ctx($504,$505,0));
          $507 = $12;
          $508 = ((($507)) + 280|0);
          HEAPF64[$508>>3] = $506;
          break;
         } else {
          _pj_ctx_set_errno($504,-46);
          break L1;
         }
        } else {
         $509 = $12;
         $510 = ((($509)) + 280|0);
         HEAPF64[$510>>3] = 0.0;
        }
       } while(0);
       $511 = $9;
       $512 = $12;
       $513 = (FUNCTION_TABLE_ii[$511 & 255]($512)|0);
       $12 = $513;
       $514 = ($513|0)!=(0|0);
       if (!($514)) {
        break;
       }
       $515 = $3;
       $516 = HEAP32[$515>>2]|0;
       $517 = ($516|0)!=(0);
       if ($517) {
        break;
       }
       $527 = $12;
       STACKTOP = sp;return ($527|0);
      }
     }
    }
   }
  }
 } while(0);
 $518 = $12;
 $519 = ($518|0)!=(0|0);
 L139: do {
  if ($519) {
   $520 = $12;
   _pj_free($520);
  } else {
   while(1) {
    $521 = HEAP32[$8>>2]|0;
    $522 = ($521|0)!=(0|0);
    if (!($522)) {
     break L139;
    }
    $523 = HEAP32[$8>>2]|0;
    $524 = HEAP32[$523>>2]|0;
    $10 = $524;
    $525 = HEAP32[$8>>2]|0;
    _pj_dalloc($525);
    $526 = $10;
    HEAP32[$8>>2] = $526;
   }
  }
 } while(0);
 $12 = 0;
 $527 = $12;
 STACKTOP = sp;return ($527|0);
}
function _get_init($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1120|0);
 $11 = sp + 40|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = 0;
 $16 = $8;
 $15 = $16;
 $17 = $9;
 (_strncpy($11,$17,1075)|0);
 $18 = $9;
 $19 = (_pj_search_initcache($18)|0);
 $14 = $19;
 $20 = $14;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $14;
  $23 = $8;
  HEAP32[$23>>2] = $22;
  while(1) {
   $24 = $8;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    break;
   }
   $27 = $8;
   $28 = HEAP32[$27>>2]|0;
   $8 = $28;
  }
  $29 = $10;
  HEAP32[$29>>2] = 1;
  $30 = $8;
  $5 = $30;
  $61 = $5;
  STACKTOP = sp;return ($61|0);
 }
 $31 = (_strrchr($11,58)|0);
 $12 = $31;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $38 = $6;
  _pj_ctx_set_errno($38,-3);
  $5 = 0;
  $61 = $5;
  STACKTOP = sp;return ($61|0);
 }
 $33 = $12;
 $34 = ((($33)) + 1|0);
 $12 = $34;
 HEAP8[$33>>0] = 0;
 $35 = $6;
 $36 = (_pj_open_lib($35,$11,17280)|0);
 $13 = $36;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $5 = 0;
  $61 = $5;
  STACKTOP = sp;return ($61|0);
 }
 $39 = $6;
 $40 = $7;
 $41 = $13;
 $42 = $12;
 $43 = $8;
 $44 = $10;
 $45 = (_get_opt($39,$40,$41,$42,$43,$44)|0);
 $8 = $45;
 $46 = $6;
 $47 = $13;
 _pj_ctx_fclose($46,$47);
 $48 = (___errno_location()|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(25);
 if ($50) {
  $51 = (___errno_location()|0);
  HEAP32[$51>>2] = 0;
 }
 $52 = $8;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $8;
  $55 = $15;
  $56 = ($54|0)!=($55|0);
  if ($56) {
   $57 = $9;
   $58 = $15;
   $59 = HEAP32[$58>>2]|0;
   _pj_insert_initcache($57,$59);
  }
 }
 $60 = $8;
 $5 = $60;
 $61 = $5;
 STACKTOP = sp;return ($61|0);
}
function _get_defaults($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = (_pj_open_lib($9,17267,17280)|0);
 $8 = $10;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = $8;
  $15 = $6;
  $16 = (_get_opt($12,$13,$14,17283,$15,0)|0);
  $6 = $16;
  $17 = $4;
  $18 = $8;
  (_pj_ctx_fseek($17,$18,0,0)|0);
  $19 = $4;
  $20 = $5;
  $21 = $8;
  $22 = $7;
  $23 = $6;
  $24 = (_get_opt($19,$20,$21,$22,$23,0)|0);
  $6 = $24;
  $25 = $4;
  $26 = $8;
  _pj_ctx_fclose($25,$26);
 }
 $27 = (___errno_location()|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $31 = $4;
  HEAP32[$31>>2] = 0;
  $32 = $6;
  STACKTOP = sp;return ($32|0);
 }
 $30 = (___errno_location()|0);
 HEAP32[$30>>2] = 0;
 $31 = $4;
 HEAP32[$31>>2] = 0;
 $32 = $6;
 STACKTOP = sp;return ($32|0);
}
function _pj_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 while(1) {
  $9 = $2;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $3 = $12;
  $13 = $2;
  _pj_dalloc($13);
  $14 = $3;
  $2 = $14;
 }
 $15 = $1;
 $16 = ((($15)) + 240|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 240|0);
  $21 = HEAP32[$20>>2]|0;
  _pj_dalloc($21);
 }
 $22 = $1;
 $23 = ((($22)) + 252|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = ((($26)) + 252|0);
  $28 = HEAP32[$27>>2]|0;
  _pj_dalloc($28);
 }
 $29 = $1;
 $30 = ((($29)) + 308|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $1;
  $34 = ((($33)) + 308|0);
  $35 = HEAP32[$34>>2]|0;
  _pj_dalloc($35);
 }
 $36 = $1;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $1;
 FUNCTION_TABLE_vi[$38 & 511]($39);
 STACKTOP = sp;return;
}
function _get_opt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $13 = sp + 104|0;
 $19 = sp + 48|0;
 $20 = sp + 40|0;
 $21 = sp + 32|0;
 $22 = sp + 24|0;
 $23 = sp + 16|0;
 $24 = sp + 8|0;
 $25 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $26 = (_calloc(1,8212)|0);
 $12 = $26;
 $15 = 0;
 $16 = 0;
 $27 = $8;
 $28 = $12;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $6;
 $31 = $12;
 HEAP32[$31>>2] = $30;
 $32 = $12;
 $33 = (_fill_buffer($32,0)|0);
 $16 = $33;
 $34 = $11;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $11;
  HEAP32[$36>>2] = 0;
 }
 $37 = $9;
 $38 = (_strlen($37)|0);
 $14 = $38;
 HEAP8[$13>>0] = 116;
 L4: while(1) {
  $39 = $16;
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $12;
  $43 = $16;
  $44 = (_fill_buffer($42,$43)|0);
  $16 = $44;
  while(1) {
   $45 = $16;
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = (_isspace($47)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    break;
   }
   $50 = $16;
   $51 = ((($50)) + 1|0);
   $16 = $51;
  }
  $52 = $12;
  $53 = $16;
  $54 = (_fill_buffer($52,$53)|0);
  $16 = $54;
  $55 = $16;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)==(35);
  if ($58) {
   while(1) {
    $59 = $16;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     break;
    }
    $63 = $16;
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = ($65|0)!=(10);
    if (!($66)) {
     break;
    }
    $67 = $16;
    $68 = ((($67)) + 1|0);
    $16 = $68;
   }
   $69 = $12;
   $70 = $16;
   $71 = (_fill_buffer($69,$70)|0);
   $16 = $71;
   $72 = $16;
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(10);
   if ($75) {
    $76 = $16;
    $77 = ((($76)) + 1|0);
    $16 = $77;
   }
   $78 = $16;
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 << 24 >> 24;
   $81 = ($80|0)==(13);
   if (!($81)) {
    continue;
   }
   $82 = $16;
   $83 = ((($82)) + 1|0);
   $16 = $83;
   continue;
  }
  $84 = $16;
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 << 24 >> 24;
  $87 = ($86|0)==(60);
  $88 = $15;
  $89 = ($88|0)!=(0);
  if ($87) {
   if ($89) {
    break;
   }
   $90 = $16;
   $91 = ((($90)) + 1|0);
   $16 = $91;
   $92 = $9;
   $93 = $16;
   $94 = $14;
   $95 = (_strncmp($92,$93,$94)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = $14;
    $98 = $16;
    $99 = (($98) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $102 = ($101|0)==(62);
    if ($102) {
     $103 = $14;
     $104 = (($103) + 1)|0;
     $105 = $16;
     $106 = (($105) + ($104)|0);
     $16 = $106;
     $15 = 1;
     $107 = $11;
     $108 = ($107|0)!=(0|0);
     if (!($108)) {
      continue;
     }
     $109 = $11;
     HEAP32[$109>>2] = 1;
     continue;
    }
   }
   while(1) {
    $110 = $16;
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $113 = ($112|0)!=(0);
    if (!($113)) {
     continue L4;
    }
    $114 = $16;
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 << 24 >> 24;
    $117 = ($116|0)!=(10);
    if (!($117)) {
     continue L4;
    }
    $118 = $16;
    $119 = ((($118)) + 1|0);
    $16 = $119;
   }
  }
  if (!($89)) {
   while(1) {
    $190 = $16;
    $191 = HEAP8[$190>>0]|0;
    $192 = $191 << 24 >> 24;
    $193 = ($192|0)!=(0);
    if (!($193)) {
     continue L4;
    }
    $194 = $16;
    $195 = HEAP8[$194>>0]|0;
    $196 = $195 << 24 >> 24;
    $197 = (_isspace($196)|0);
    $198 = ($197|0)!=(0);
    $199 = $198 ^ 1;
    if (!($199)) {
     continue L4;
    }
    $200 = $16;
    $201 = ((($200)) + 1|0);
    $16 = $201;
   }
  }
  $120 = $16;
  $17 = $120;
  $18 = 0;
  $121 = $17;
  $122 = HEAP8[$121>>0]|0;
  $123 = $122 << 24 >> 24;
  $124 = ($123|0)==(43);
  if ($124) {
   $125 = $17;
   $126 = ((($125)) + 1|0);
   $17 = $126;
   $127 = $16;
   $128 = ((($127)) + 1|0);
   $16 = $128;
  }
  while(1) {
   $129 = $16;
   $130 = HEAP8[$129>>0]|0;
   $131 = $130 << 24 >> 24;
   $132 = ($131|0)!=(0);
   if (!($132)) {
    break;
   }
   $133 = $16;
   $134 = HEAP8[$133>>0]|0;
   $135 = $134 << 24 >> 24;
   $136 = (_isspace($135)|0);
   $137 = ($136|0)!=(0);
   $138 = $137 ^ 1;
   if (!($138)) {
    break;
   }
   $139 = $16;
   $140 = ((($139)) + 1|0);
   $16 = $140;
   $141 = $18;
   $142 = (($141) + 1)|0;
   $18 = $142;
  }
  $143 = ((($13)) + 1|0);
  $144 = $17;
  $145 = $18;
  (_strncpy($143,$144,$145)|0);
  $146 = $18;
  $147 = (($146) + 1)|0;
  $148 = (($13) + ($147)|0);
  HEAP8[$148>>0] = 0;
  $149 = $6;
  $150 = $7;
  $151 = HEAP32[$150>>2]|0;
  _pj_param($19,$149,$151,$13);
  $152 = HEAP32[$19>>2]|0;
  $153 = ($152|0)!=(0);
  if ($153) {
   continue;
  }
  $154 = ((($13)) + 1|0);
  $155 = (_strncmp($154,20660,6)|0);
  $156 = ($155|0)!=(0);
  if (!($156)) {
   $157 = $6;
   $158 = $7;
   $159 = HEAP32[$158>>2]|0;
   _pj_param($20,$157,$159,17291);
   $160 = HEAP32[$20>>2]|0;
   $161 = ($160|0)!=(0);
   if ($161) {
    continue;
   }
   $162 = $6;
   $163 = $7;
   $164 = HEAP32[$163>>2]|0;
   _pj_param($21,$162,$164,17298);
   $165 = HEAP32[$21>>2]|0;
   $166 = ($165|0)!=(0);
   if ($166) {
    continue;
   }
   $167 = $6;
   $168 = $7;
   $169 = HEAP32[$168>>2]|0;
   _pj_param($22,$167,$169,17305);
   $170 = HEAP32[$22>>2]|0;
   $171 = ($170|0)!=(0);
   if ($171) {
    continue;
   }
   $172 = $6;
   $173 = $7;
   $174 = HEAP32[$173>>2]|0;
   _pj_param($23,$172,$174,17308);
   $175 = HEAP32[$23>>2]|0;
   $176 = ($175|0)!=(0);
   if ($176) {
    continue;
   }
   $177 = $6;
   $178 = $7;
   $179 = HEAP32[$178>>2]|0;
   _pj_param($24,$177,$179,17311);
   $180 = HEAP32[$24>>2]|0;
   $181 = ($180|0)!=(0);
   if ($181) {
    continue;
   }
   $182 = $6;
   $183 = $7;
   $184 = HEAP32[$183>>2]|0;
   _pj_param($25,$182,$184,17315);
   $185 = HEAP32[$25>>2]|0;
   $186 = ($185|0)!=(0);
   if ($186) {
    continue;
   }
  }
  $187 = ((($13)) + 1|0);
  $188 = (_pj_mkparam($187)|0);
  $189 = $10;
  HEAP32[$189>>2] = $188;
  $10 = $188;
 }
 $202 = (___errno_location()|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)==(25);
 if (!($204)) {
  $206 = $12;
  _free($206);
  $207 = $10;
  STACKTOP = sp;return ($207|0);
 }
 $205 = (___errno_location()|0);
 HEAP32[$205>>2] = 0;
 $206 = $12;
 _free($206);
 $207 = $10;
 STACKTOP = sp;return ($207|0);
}
function _fill_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 8|0);
  $4 = $11;
 }
 $12 = $3;
 $13 = ((($12)) + 8208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  $2 = $16;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 $17 = $3;
 $18 = ((($17)) + 8204|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = $20;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($19) - ($25))|0;
 $6 = $26;
 $27 = $6;
 $28 = ($27>>>0)>=(4096);
 if ($28) {
  $29 = $4;
  $2 = $29;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $32 = $4;
 $33 = $6;
 _memmove(($31|0),($32|0),($33|0))|0;
 $34 = $6;
 $35 = $3;
 $36 = ((($35)) + 8204|0);
 HEAP32[$36>>2] = $34;
 $37 = $3;
 $38 = ((($37)) + 8|0);
 $4 = $38;
 $39 = $3;
 $40 = ((($39)) + 8204|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (8193 - ($41))|0;
 $43 = (($42) - 1)|0;
 $7 = $43;
 $44 = $3;
 $45 = HEAP32[$44>>2]|0;
 $46 = $3;
 $47 = ((($46)) + 8|0);
 $48 = $3;
 $49 = ((($48)) + 8204|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($47) + ($50)|0);
 $52 = $7;
 $53 = $3;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_pj_ctx_fread($45,$51,1,$52,$55)|0);
 $5 = $56;
 $57 = $5;
 $58 = $7;
 $59 = ($57>>>0)<($58>>>0);
 if ($59) {
  $60 = $3;
  $61 = ((($60)) + 8208|0);
  HEAP32[$61>>2] = 1;
  $62 = $3;
  $63 = ((($62)) + 8204|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $5;
  $66 = (($64) + ($65))|0;
  $67 = $3;
  $68 = ((($67)) + 8|0);
  $69 = (($68) + ($66)|0);
  HEAP8[$69>>0] = 0;
 }
 $70 = $5;
 $71 = $3;
 $72 = ((($71)) + 8204|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + ($70))|0;
 HEAP32[$72>>2] = $74;
 $75 = $4;
 $2 = $75;
 $76 = $2;
 STACKTOP = sp;return ($76|0);
}
function _pj_inv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $3 = $2;
 $6 = +HEAPF64[$1>>3];
 $7 = $6 == inf;
 if (!($7)) {
  $8 = ((($1)) + 8|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 == inf;
  if (!($10)) {
   HEAP32[6054] = 0;
   $14 = (___errno_location()|0);
   HEAP32[$14>>2] = 0;
   $15 = $3;
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$16>>2] = 0;
   $17 = +HEAPF64[$1>>3];
   $18 = $3;
   $19 = ((($18)) + 160|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $17 * $20;
   $22 = $3;
   $23 = ((($22)) + 136|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $21 - $24;
   $26 = $3;
   $27 = ((($26)) + 96|0);
   $28 = +HEAPF64[$27>>3];
   $29 = $25 * $28;
   HEAPF64[$1>>3] = $29;
   $30 = ((($1)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $3;
   $33 = ((($32)) + 160|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $31 * $34;
   $36 = $3;
   $37 = ((($36)) + 144|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $35 - $38;
   $40 = $3;
   $41 = ((($40)) + 96|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $39 * $42;
   $44 = ((($1)) + 8|0);
   HEAPF64[$44>>3] = $43;
   $45 = $3;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)!=(0|0);
   do {
    if ($48) {
     $49 = $3;
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $3;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
     FUNCTION_TABLE_viii[$51 & 511]($5,$$byval_copy,$52);
     ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
     $53 = $3;
     $54 = HEAP32[$53>>2]|0;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)!=(0);
     if ($56) {
      $57 = ((($4)) + 8|0);
      HEAPF64[$57>>3] = inf;
      HEAPF64[$4>>3] = inf;
      break;
     }
     $58 = $3;
     $59 = ((($58)) + 120|0);
     $60 = +HEAPF64[$59>>3];
     $61 = +HEAPF64[$4>>3];
     $62 = $61 + $60;
     HEAPF64[$4>>3] = $62;
     $63 = $3;
     $64 = ((($63)) + 36|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)!=(0);
     if (!($66)) {
      $67 = +HEAPF64[$4>>3];
      $68 = (+_adjlon($67));
      HEAPF64[$4>>3] = $68;
     }
     $69 = $3;
     $70 = ((($69)) + 40|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)!=(0);
     if ($72) {
      $73 = ((($4)) + 8|0);
      $74 = +HEAPF64[$73>>3];
      $75 = (+Math_abs((+$74)));
      $76 = $75 - 1.5707963267948966;
      $77 = (+Math_abs((+$76)));
      $78 = $77 > 9.9999999999999998E-13;
      if ($78) {
       $79 = $3;
       $80 = ((($79)) + 104|0);
       $81 = +HEAPF64[$80>>3];
       $82 = ((($4)) + 8|0);
       $83 = +HEAPF64[$82>>3];
       $84 = (+Math_tan((+$83)));
       $85 = $81 * $84;
       $86 = (+Math_atan((+$85)));
       $87 = ((($4)) + 8|0);
       HEAPF64[$87>>3] = $86;
      }
     }
    } else {
     $88 = ((($4)) + 8|0);
     HEAPF64[$88>>3] = inf;
     HEAPF64[$4>>3] = inf;
    }
   } while(0);
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $11 = ((($4)) + 8|0);
 HEAPF64[$11>>3] = inf;
 HEAPF64[$4>>3] = inf;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 _pj_ctx_set_errno($13,-15);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_fwd3d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 56|0;
 $4 = sp + 32|0;
 $6 = sp;
 $3 = $2;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $9 - 1.5707963267948966;
 $5 = $10;
 $11 = $10 > 9.9999999999999998E-13;
 do {
  if ($11) {
   label = 3;
  } else {
   $12 = +HEAPF64[$1>>3];
   $13 = (+Math_abs((+$12)));
   $14 = $13 > 10.0;
   if ($14) {
    label = 3;
   } else {
    $19 = $3;
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$20>>2] = 0;
    HEAP32[6054] = 0;
    $21 = (___errno_location()|0);
    HEAP32[$21>>2] = 0;
    $22 = $5;
    $23 = (+Math_abs((+$22)));
    $24 = $23 <= 9.9999999999999998E-13;
    if ($24) {
     $25 = ((($1)) + 8|0);
     $26 = +HEAPF64[$25>>3];
     $27 = $26 < 0.0;
     $28 = $27 ? -1.5707963267948966 : 1.5707963267948966;
     $29 = ((($1)) + 8|0);
     HEAPF64[$29>>3] = $28;
    } else {
     $30 = $3;
     $31 = ((($30)) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)!=(0);
     if ($33) {
      $34 = $3;
      $35 = ((($34)) + 112|0);
      $36 = +HEAPF64[$35>>3];
      $37 = ((($1)) + 8|0);
      $38 = +HEAPF64[$37>>3];
      $39 = (+Math_tan((+$38)));
      $40 = $36 * $39;
      $41 = (+Math_atan((+$40)));
      $42 = ((($1)) + 8|0);
      HEAPF64[$42>>3] = $41;
     }
    }
    $43 = $3;
    $44 = ((($43)) + 120|0);
    $45 = +HEAPF64[$44>>3];
    $46 = +HEAPF64[$1>>3];
    $47 = $46 - $45;
    HEAPF64[$1>>3] = $47;
    $48 = $3;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $52 = +HEAPF64[$1>>3];
     $53 = (+_adjlon($52));
     HEAPF64[$1>>3] = $53;
    }
    $54 = $3;
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0|0);
    if (!($57)) {
     $96 = ((($4)) + 16|0);
     HEAPF64[$96>>3] = inf;
     $97 = ((($4)) + 8|0);
     HEAPF64[$97>>3] = inf;
     HEAPF64[$4>>3] = inf;
     break;
    }
    $58 = $3;
    $59 = ((($58)) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $3;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$1+20>>2]|0;
    FUNCTION_TABLE_viii[$60 & 511]($6,$$byval_copy,$61);
    ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$6+20>>2]|0;
    $62 = $3;
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = ((($4)) + 16|0);
     HEAPF64[$66>>3] = inf;
     $67 = ((($4)) + 8|0);
     HEAPF64[$67>>3] = inf;
     HEAPF64[$4>>3] = inf;
     break;
    } else {
     $68 = $3;
     $69 = ((($68)) + 168|0);
     $70 = +HEAPF64[$69>>3];
     $71 = $3;
     $72 = ((($71)) + 56|0);
     $73 = +HEAPF64[$72>>3];
     $74 = +HEAPF64[$4>>3];
     $75 = $73 * $74;
     $76 = $3;
     $77 = ((($76)) + 136|0);
     $78 = +HEAPF64[$77>>3];
     $79 = $75 + $78;
     $80 = $70 * $79;
     HEAPF64[$4>>3] = $80;
     $81 = $3;
     $82 = ((($81)) + 168|0);
     $83 = +HEAPF64[$82>>3];
     $84 = $3;
     $85 = ((($84)) + 56|0);
     $86 = +HEAPF64[$85>>3];
     $87 = ((($4)) + 8|0);
     $88 = +HEAPF64[$87>>3];
     $89 = $86 * $88;
     $90 = $3;
     $91 = ((($90)) + 144|0);
     $92 = +HEAPF64[$91>>3];
     $93 = $89 + $92;
     $94 = $83 * $93;
     $95 = ((($4)) + 8|0);
     HEAPF64[$95>>3] = $94;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $15 = ((($4)) + 16|0);
  HEAPF64[$15>>3] = inf;
  $16 = ((($4)) + 8|0);
  HEAPF64[$16>>3] = inf;
  HEAPF64[$4>>3] = inf;
  $17 = $3;
  $18 = HEAP32[$17>>2]|0;
  _pj_ctx_set_errno($18,-14);
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
 STACKTOP = sp;return;
}
function _pj_inv3d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $4 = sp + 24|0;
 $5 = sp;
 $3 = $2;
 $6 = +HEAPF64[$1>>3];
 $7 = $6 == inf;
 if (!($7)) {
  $8 = ((($1)) + 8|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 == inf;
  if (!($10)) {
   $11 = ((($1)) + 16|0);
   $12 = +HEAPF64[$11>>3];
   $13 = $12 == inf;
   if (!($13)) {
    HEAP32[6054] = 0;
    $18 = (___errno_location()|0);
    HEAP32[$18>>2] = 0;
    $19 = $3;
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$20>>2] = 0;
    $21 = +HEAPF64[$1>>3];
    $22 = $3;
    $23 = ((($22)) + 160|0);
    $24 = +HEAPF64[$23>>3];
    $25 = $21 * $24;
    $26 = $3;
    $27 = ((($26)) + 136|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $25 - $28;
    $30 = $3;
    $31 = ((($30)) + 96|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $29 * $32;
    HEAPF64[$1>>3] = $33;
    $34 = ((($1)) + 8|0);
    $35 = +HEAPF64[$34>>3];
    $36 = $3;
    $37 = ((($36)) + 160|0);
    $38 = +HEAPF64[$37>>3];
    $39 = $35 * $38;
    $40 = $3;
    $41 = ((($40)) + 144|0);
    $42 = +HEAPF64[$41>>3];
    $43 = $39 - $42;
    $44 = $3;
    $45 = ((($44)) + 96|0);
    $46 = +HEAPF64[$45>>3];
    $47 = $43 * $46;
    $48 = ((($1)) + 8|0);
    HEAPF64[$48>>3] = $47;
    $49 = $3;
    $50 = ((($49)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)!=(0|0);
    do {
     if ($52) {
      $53 = $3;
      $54 = ((($53)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $3;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$1+20>>2]|0;
      FUNCTION_TABLE_viii[$55 & 511]($5,$$byval_copy,$56);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$5+20>>2]|0;
      $57 = $3;
      $58 = HEAP32[$57>>2]|0;
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)!=(0);
      if ($60) {
       $61 = ((($4)) + 16|0);
       HEAPF64[$61>>3] = inf;
       $62 = ((($4)) + 8|0);
       HEAPF64[$62>>3] = inf;
       HEAPF64[$4>>3] = inf;
       break;
      }
      $63 = $3;
      $64 = ((($63)) + 120|0);
      $65 = +HEAPF64[$64>>3];
      $66 = +HEAPF64[$4>>3];
      $67 = $66 + $65;
      HEAPF64[$4>>3] = $67;
      $68 = $3;
      $69 = ((($68)) + 36|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)!=(0);
      if (!($71)) {
       $72 = +HEAPF64[$4>>3];
       $73 = (+_adjlon($72));
       HEAPF64[$4>>3] = $73;
      }
      $74 = $3;
      $75 = ((($74)) + 40|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)!=(0);
      if ($77) {
       $78 = ((($4)) + 8|0);
       $79 = +HEAPF64[$78>>3];
       $80 = (+Math_abs((+$79)));
       $81 = $80 - 1.5707963267948966;
       $82 = (+Math_abs((+$81)));
       $83 = $82 > 9.9999999999999998E-13;
       if ($83) {
        $84 = $3;
        $85 = ((($84)) + 104|0);
        $86 = +HEAPF64[$85>>3];
        $87 = ((($4)) + 8|0);
        $88 = +HEAPF64[$87>>3];
        $89 = (+Math_tan((+$88)));
        $90 = $86 * $89;
        $91 = (+Math_atan((+$90)));
        $92 = ((($4)) + 8|0);
        HEAPF64[$92>>3] = $91;
       }
      }
     } else {
      $93 = ((($4)) + 16|0);
      HEAPF64[$93>>3] = inf;
      $94 = ((($4)) + 8|0);
      HEAPF64[$94>>3] = inf;
      HEAPF64[$4>>3] = inf;
     }
    } while(0);
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $14 = ((($4)) + 16|0);
 HEAPF64[$14>>3] = inf;
 $15 = ((($4)) + 8|0);
 HEAPF64[$15>>3] = inf;
 HEAPF64[$4>>3] = inf;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 _pj_ctx_set_errno($17,-15);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
 STACKTOP = sp;return;
}
function _pj_malloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $1;
 $7 = (_malloc($6)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 $10 = $2;
 $11 = ($10|0)!=(0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $13 = $3;
  STACKTOP = sp;return ($13|0);
 }
 $12 = (___errno_location()|0);
 HEAP32[$12>>2] = 0;
 $13 = $3;
 STACKTOP = sp;return ($13|0);
}
function _pj_dalloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function _pj_calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = Math_imul($6, $7)|0;
 $9 = (_pj_malloc($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = (0|0)==($10|0);
 if ($11) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $12 = $5;
  $13 = $3;
  $14 = $4;
  $15 = Math_imul($13, $14)|0;
  _memset(($12|0),0,($15|0))|0;
  $16 = $5;
  $2 = $16;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _pj_dealloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  _pj_dalloc($5);
  $1 = 0;
 }
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _pj_enfn($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = (_pj_malloc(40)|0);
 $3 = $4;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $6 = $1;
 $7 = $1;
 $8 = $1;
 $9 = $1;
 $10 = $9 * 0.01068115234375;
 $11 = 0.01953125 + $10;
 $12 = $8 * $11;
 $13 = 0.046875 + $12;
 $14 = $7 * $13;
 $15 = 0.25 + $14;
 $16 = $6 * $15;
 $17 = 1.0 - $16;
 $18 = $3;
 HEAPF64[$18>>3] = $17;
 $19 = $1;
 $20 = $1;
 $21 = $1;
 $22 = $1;
 $23 = $22 * 0.01068115234375;
 $24 = 0.01953125 + $23;
 $25 = $21 * $24;
 $26 = 0.046875 + $25;
 $27 = $20 * $26;
 $28 = 0.75 - $27;
 $29 = $19 * $28;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 HEAPF64[$31>>3] = $29;
 $32 = $1;
 $33 = $1;
 $34 = $32 * $33;
 $2 = $34;
 $35 = $1;
 $36 = $1;
 $37 = $36 * 0.007120768229166667;
 $38 = 0.013020833333333334 + $37;
 $39 = $35 * $38;
 $40 = 0.46875 - $39;
 $41 = $34 * $40;
 $42 = $3;
 $43 = ((($42)) + 16|0);
 HEAPF64[$43>>3] = $41;
 $44 = $1;
 $45 = $2;
 $46 = $45 * $44;
 $2 = $46;
 $47 = $1;
 $48 = $47 * 0.005696614583333333;
 $49 = 0.36458333333333331 - $48;
 $50 = $46 * $49;
 $51 = $3;
 $52 = ((($51)) + 24|0);
 HEAPF64[$52>>3] = $50;
 $53 = $2;
 $54 = $1;
 $55 = $53 * $54;
 $56 = $55 * 0.3076171875;
 $57 = $3;
 $58 = ((($57)) + 32|0);
 HEAPF64[$58>>3] = $56;
 $59 = $3;
 STACKTOP = sp;return ($59|0);
}
function _pj_mlfn($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = $9 * $8;
 $6 = $10;
 $11 = $5;
 $12 = $5;
 $13 = $12 * $11;
 $5 = $13;
 $14 = $7;
 $15 = +HEAPF64[$14>>3];
 $16 = $4;
 $17 = $15 * $16;
 $18 = $6;
 $19 = $7;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $5;
 $23 = $7;
 $24 = ((($23)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = $7;
 $28 = ((($27)) + 24|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $5;
 $31 = $7;
 $32 = ((($31)) + 32|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $30 * $33;
 $35 = $29 + $34;
 $36 = $26 * $35;
 $37 = $25 + $36;
 $38 = $22 * $37;
 $39 = $21 + $38;
 $40 = $18 * $39;
 $41 = $17 - $40;
 STACKTOP = sp;return (+$41);
}
function _pj_inv_mlfn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 $15 = 1.0 - $14;
 $16 = 1.0 / $15;
 $12 = $16;
 $17 = $6;
 $11 = $17;
 $13 = 10;
 while(1) {
  $18 = $13;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 6;
   break;
  }
  $20 = $11;
  $21 = (+Math_sin((+$20)));
  $9 = $21;
  $22 = $7;
  $23 = $9;
  $24 = $22 * $23;
  $25 = $9;
  $26 = $24 * $25;
  $27 = 1.0 - $26;
  $10 = $27;
  $28 = $11;
  $29 = $9;
  $30 = $11;
  $31 = (+Math_cos((+$30)));
  $32 = $8;
  $33 = (+_pj_mlfn($28,$29,$31,$32));
  $34 = $6;
  $35 = $33 - $34;
  $36 = $10;
  $37 = $10;
  $38 = (+Math_sqrt((+$37)));
  $39 = $36 * $38;
  $40 = $35 * $39;
  $41 = $12;
  $42 = $40 * $41;
  $10 = $42;
  $43 = $11;
  $44 = $43 - $42;
  $11 = $44;
  $45 = $10;
  $46 = (+Math_abs((+$45)));
  $47 = $46 < 9.9999999999999993E-12;
  if ($47) {
   label = 4;
   break;
  }
  $49 = $13;
  $50 = (($49) + -1)|0;
  $13 = $50;
 }
 if ((label|0) == 4) {
  $48 = $11;
  $4 = $48;
  $53 = $4;
  STACKTOP = sp;return (+$53);
 }
 else if ((label|0) == 6) {
  $51 = $5;
  _pj_ctx_set_errno($51,-17);
  $52 = $11;
  $4 = $52;
  $53 = $4;
  STACKTOP = sp;return (+$53);
 }
 return +(0.0);
}
function _pj_msfn($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $3;
 $11 = $9 * $10;
 $12 = 1.0 - $11;
 $13 = (+Math_sqrt((+$12)));
 $14 = $6 / $13;
 STACKTOP = sp;return (+$14);
}
function _proj_mdist_ini($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0;
 var $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $14 = sp;
 $2 = $0;
 $18 = $2;
 $8 = $18;
 $7 = 1.0;
 $5 = 1.0;
 $3 = 1.0;
 $6 = 1.0;
 $10 = 4.0;
 HEAPF64[$14>>3] = 1.0;
 $12 = 1.0;
 $13 = 1.0;
 $16 = 1;
 while(1) {
  $19 = $16;
  $20 = ($19|0)<(20);
  if (!($20)) {
   break;
  }
  $21 = $5;
  $22 = $5;
  $23 = $21 * $22;
  $24 = $3;
  $25 = $24 * $23;
  $3 = $25;
  $26 = $10;
  $27 = $6;
  $28 = $26 * $27;
  $29 = $6;
  $30 = $28 * $29;
  $31 = $5;
  $32 = $30 * $31;
  $11 = $32;
  $33 = $3;
  $34 = $11;
  $35 = $33 / $34;
  $9 = $35;
  $36 = $9;
  $37 = $8;
  $38 = $36 * $37;
  $39 = $16;
  $40 = (($14) + ($39<<3)|0);
  HEAPF64[$40>>3] = $38;
  $41 = $13;
  $42 = $41 - $38;
  $13 = $42;
  $43 = $2;
  $44 = $8;
  $45 = $44 * $43;
  $8 = $45;
  $46 = $10;
  $47 = $46 * 4.0;
  $10 = $47;
  $48 = $7;
  $49 = $48 + 1.0;
  $7 = $49;
  $50 = $6;
  $51 = $50 * $49;
  $6 = $51;
  $52 = $5;
  $53 = $52 + 2.0;
  $5 = $53;
  $54 = $13;
  $55 = $12;
  $56 = $54 == $55;
  if ($56) {
   break;
  }
  $57 = $13;
  $12 = $57;
  $58 = $16;
  $59 = (($58) + 1)|0;
  $16 = $59;
 }
 $60 = $16;
 $61 = $60<<3;
 $62 = (32 + ($61))|0;
 $63 = (_malloc($62)|0);
 $15 = $63;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $1 = 0;
  $108 = $1;
  STACKTOP = sp;return ($108|0);
 }
 $65 = $16;
 $66 = (($65) - 1)|0;
 $67 = $15;
 HEAP32[$67>>2] = $66;
 $68 = $2;
 $69 = $15;
 $70 = ((($69)) + 8|0);
 HEAPF64[$70>>3] = $68;
 $71 = $13;
 $72 = $15;
 $73 = ((($72)) + 16|0);
 HEAPF64[$73>>3] = $71;
 $74 = $13;
 $75 = 1.0 - $74;
 $13 = $75;
 $76 = $15;
 $77 = ((($76)) + 24|0);
 HEAPF64[$77>>3] = $75;
 $6 = 1.0;
 $3 = 1.0;
 $4 = 2.0;
 $7 = 3.0;
 $17 = 1;
 while(1) {
  $78 = $17;
  $79 = $16;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = $17;
  $82 = (($14) + ($81<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $13;
  $85 = $84 - $83;
  $13 = $85;
  $86 = $4;
  $87 = $3;
  $88 = $87 * $86;
  $3 = $88;
  $89 = $7;
  $90 = $6;
  $91 = $90 * $89;
  $6 = $91;
  $92 = $13;
  $93 = $3;
  $94 = $92 * $93;
  $95 = $6;
  $96 = $94 / $95;
  $97 = $17;
  $98 = $15;
  $99 = ((($98)) + 24|0);
  $100 = (($99) + ($97<<3)|0);
  HEAPF64[$100>>3] = $96;
  $101 = $4;
  $102 = $101 + 2.0;
  $4 = $102;
  $103 = $7;
  $104 = $103 + 2.0;
  $7 = $104;
  $105 = $17;
  $106 = (($105) + 1)|0;
  $17 = $106;
 }
 $107 = $15;
 $1 = $107;
 $108 = $1;
 STACKTOP = sp;return ($108|0);
}
function _proj_mdist($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $5;
 $14 = $6;
 $15 = $13 * $14;
 $8 = $15;
 $16 = $5;
 $17 = $5;
 $18 = $16 * $17;
 $10 = $18;
 $19 = $4;
 $20 = $7;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 * $22;
 $24 = $7;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $8;
 $28 = $26 * $27;
 $29 = $7;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $10;
 $33 = $31 * $32;
 $34 = 1.0 - $33;
 $35 = (+Math_sqrt((+$34)));
 $36 = $28 / $35;
 $37 = $23 - $36;
 $11 = $37;
 $38 = $7;
 $39 = HEAP32[$38>>2]|0;
 $12 = $39;
 $40 = $7;
 $41 = ((($40)) + 24|0);
 $42 = (($41) + ($39<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $9 = $43;
 while(1) {
  $44 = $12;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   break;
  }
  $46 = $12;
  $47 = (($46) + -1)|0;
  $12 = $47;
  $48 = $7;
  $49 = ((($48)) + 24|0);
  $50 = (($49) + ($47<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $10;
  $53 = $9;
  $54 = $52 * $53;
  $55 = $51 + $54;
  $9 = $55;
 }
 $56 = $11;
 $57 = $8;
 $58 = $9;
 $59 = $57 * $58;
 $60 = $56 + $59;
 STACKTOP = sp;return (+$60);
}
function _proj_inv_mdist($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $6;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 1.0 - $14;
 $16 = 1.0 / $15;
 $10 = $16;
 $11 = 20;
 $17 = $5;
 $9 = $17;
 while(1) {
  $18 = $11;
  $19 = (($18) + -1)|0;
  $11 = $19;
  $20 = ($18|0)!=(0);
  if (!($20)) {
   label = 5;
   break;
  }
  $21 = $9;
  $22 = (+Math_sin((+$21)));
  $7 = $22;
  $23 = $6;
  $24 = ((($23)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $7;
  $27 = $25 * $26;
  $28 = $7;
  $29 = $27 * $28;
  $30 = 1.0 - $29;
  $8 = $30;
  $31 = $9;
  $32 = $7;
  $33 = $9;
  $34 = (+Math_cos((+$33)));
  $35 = $6;
  $36 = (+_proj_mdist($31,$32,$34,$35));
  $37 = $5;
  $38 = $36 - $37;
  $39 = $8;
  $40 = $8;
  $41 = (+Math_sqrt((+$40)));
  $42 = $39 * $41;
  $43 = $38 * $42;
  $44 = $10;
  $45 = $43 * $44;
  $8 = $45;
  $46 = $9;
  $47 = $46 - $45;
  $9 = $47;
  $48 = $8;
  $49 = (+Math_abs((+$48)));
  $50 = $49 < 9.9999999999999999E-15;
  if ($50) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $51 = $9;
  $3 = $51;
  $54 = $3;
  STACKTOP = sp;return (+$54);
 }
 else if ((label|0) == 5) {
  $52 = $4;
  _pj_ctx_set_errno($52,-17);
  $53 = $9;
  $3 = $53;
  $54 = $3;
  STACKTOP = sp;return (+$54);
 }
 return +(0.0);
}
function _pj_open_lib($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $7 = sp + 60|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = 0;
 $12 = $5;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==(126);
 do {
  if ($15) {
   $16 = $5;
   $17 = ((($16)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = (_strchr(18168,$19)|0);
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = (_getenv((18170|0))|0);
    $8 = $22;
    $23 = ($22|0)!=(0|0);
    if ($23) {
     $24 = $8;
     (_strcpy($7,$24)|0);
     $25 = (_strlen($7)|0);
     $10 = $25;
     $26 = (($7) + ($25)|0);
     HEAP8[$26>>0] = 47;
     $27 = $10;
     $28 = (($27) + 1)|0;
     $10 = $28;
     $29 = (($7) + ($28)|0);
     HEAP8[$29>>0] = 0;
     $30 = $10;
     $31 = (($7) + ($30)|0);
     $32 = $5;
     $33 = ((($32)) + 1|0);
     (_strcpy($31,$33)|0);
     $8 = $7;
     break;
    }
    $3 = 0;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 L8: do {
  if ((label|0) == 6) {
   $34 = $5;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = (_strchr(18168,$36)|0);
   $38 = ($37|0)!=(0|0);
   do {
    if (!($38)) {
     $39 = $5;
     $40 = HEAP8[$39>>0]|0;
     $41 = $40 << 24 >> 24;
     $42 = ($41|0)==(46);
     if ($42) {
      $43 = $5;
      $44 = ((($43)) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = (_strchr(18168,$46)|0);
      $48 = ($47|0)!=(0|0);
      if ($48) {
       break;
      }
     }
     $49 = $5;
     $50 = (_strncmp($49,18175,2)|0);
     $51 = ($50|0)!=(0);
     if (!($51)) {
      $52 = $5;
      $53 = ((($52)) + 2|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = (_strchr(18168,$55)|0);
      $57 = ($56|0)!=(0|0);
      if ($57) {
       break;
      }
     }
     $58 = $5;
     $59 = ((($58)) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = ($61|0)==(58);
     if ($62) {
      $63 = $5;
      $64 = ((($63)) + 2|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $67 = (_strchr(18168,$66)|0);
      $68 = ($67|0)!=(0|0);
      if ($68) {
       break;
      }
     }
     $70 = HEAP32[6055]|0;
     $71 = ($70|0)!=(0|0);
     if ($71) {
      $72 = HEAP32[6055]|0;
      $73 = $5;
      $74 = (FUNCTION_TABLE_ii[$72 & 255]($73)|0);
      $75 = ($74|0)!=(0|0);
      if ($75) {
       $76 = HEAP32[6055]|0;
       $77 = $5;
       $78 = (FUNCTION_TABLE_ii[$76 & 255]($77)|0);
       $8 = $78;
       break L8;
      }
     }
     $79 = (_getenv((18178|0))|0);
     $8 = $79;
     $80 = ($79|0)!=(0|0);
     if (!($80)) {
      $81 = HEAP32[1965]|0;
      $8 = $81;
      $82 = ($81|0)!=(0|0);
      if (!($82)) {
       $92 = $5;
       $8 = $92;
       break L8;
      }
     }
     $83 = $8;
     (_strcpy($7,$83)|0);
     $84 = (_strlen($7)|0);
     $10 = $84;
     $85 = (($7) + ($84)|0);
     HEAP8[$85>>0] = 47;
     $86 = $10;
     $87 = (($86) + 1)|0;
     $10 = $87;
     $88 = (($7) + ($87)|0);
     HEAP8[$88>>0] = 0;
     $89 = $10;
     $90 = (($7) + ($89)|0);
     $91 = $5;
     (_strcpy($90,$91)|0);
     $8 = $7;
     break L8;
    }
   } while(0);
   $69 = $5;
   $8 = $69;
  }
 } while(0);
 $93 = $4;
 $94 = $8;
 $95 = $6;
 $96 = (_pj_ctx_fopen($93,$94,$95)|0);
 $9 = $96;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = (___errno_location()|0);
  HEAP32[$98>>2] = 0;
 }
 $99 = $9;
 $100 = ($99|0)==(0|0);
 $101 = HEAP32[6056]|0;
 $102 = ($101|0)>(0);
 $or$cond = $100 & $102;
 if ($or$cond) {
  $11 = 0;
  while(1) {
   $103 = $9;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    break;
   }
   $105 = $11;
   $106 = HEAP32[6056]|0;
   $107 = ($105|0)<($106|0);
   if (!($107)) {
    break;
   }
   $108 = $11;
   $109 = HEAP32[6057]|0;
   $110 = (($109) + ($108<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   HEAP32[$vararg_buffer>>2] = $111;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = 47;
   $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr3>>2] = $112;
   (_sprintf($7,18187,$vararg_buffer)|0);
   $8 = $7;
   $113 = $4;
   $114 = $8;
   $115 = $6;
   $116 = (_pj_ctx_fopen($113,$114,$115)|0);
   $9 = $116;
   $117 = $11;
   $118 = (($117) + 1)|0;
   $11 = $118;
  }
  $119 = $9;
  $120 = ($119|0)!=(0|0);
  if ($120) {
   $121 = (___errno_location()|0);
   HEAP32[$121>>2] = 0;
  }
 }
 $122 = $4;
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = (___errno_location()|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $4;
   $129 = (___errno_location()|0);
   $130 = HEAP32[$129>>2]|0;
   _pj_ctx_set_errno($128,$130);
  }
 }
 $131 = $4;
 $132 = $5;
 $133 = $8;
 $134 = $9;
 $135 = ($134|0)==(0|0);
 $136 = $135 ? 18194 : 18201;
 HEAP32[$vararg_buffer4>>2] = $132;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $133;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $136;
 _pj_log($131,2,18211,$vararg_buffer4);
 $137 = $9;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _pj_mkparam($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_strlen($3)|0);
 $5 = (8 + ($4))|0;
 $6 = (_pj_malloc($5)|0);
 $2 = $6;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $2;
 $9 = ((($8)) + 4|0);
 HEAP8[$9>>0] = 0;
 $10 = $2;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(43);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 1|0);
  $1 = $16;
 }
 $17 = $2;
 $18 = ((($17)) + 5|0);
 $19 = $1;
 (_strcpy($18,$19)|0);
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _pj_param($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $9 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (_pj_get_default_ctx()|0);
  $4 = $12;
 }
 $13 = $6;
 $14 = ((($13)) + 1|0);
 $6 = $14;
 $15 = HEAP8[$13>>0]|0;
 $16 = $15 << 24 >> 24;
 $7 = $16;
 $17 = $6;
 $18 = (_strlen($17)|0);
 $8 = $18;
 while(1) {
  $19 = $5;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   break;
  }
  $21 = $5;
  $22 = ((($21)) + 5|0);
  $23 = $6;
  $24 = $8;
  $25 = (_strncmp($22,$23,$24)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   $41 = 0;
  } else {
   $27 = $8;
   $28 = $5;
   $29 = ((($28)) + 5|0);
   $30 = (($29) + ($27)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)!=(0);
   if ($32) {
    $33 = $8;
    $34 = $5;
    $35 = ((($34)) + 5|0);
    $36 = (($35) + ($33)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)==(61);
    $41 = $39;
   } else {
    $41 = 1;
   }
  }
  $40 = $41 ^ 1;
  if (!($40)) {
   break;
  }
  $42 = $5;
  $43 = HEAP32[$42>>2]|0;
  $5 = $43;
 }
 $44 = $7;
 $45 = ($44|0)==(116);
 $46 = $5;
 $47 = ($46|0)!=(0|0);
 L13: do {
  if ($45) {
   $48 = $47&1;
   HEAP32[$9>>2] = $48;
  } else {
   if (!($47)) {
    $79 = $7;
    switch ($79|0) {
    case 105: case 98:  {
     HEAP32[$9>>2] = 0;
     break L13;
     break;
    }
    case 114: case 100:  {
     HEAPF64[$9>>3] = 0.0;
     break L13;
     break;
    }
    case 115:  {
     HEAP32[$9>>2] = 0;
     break L13;
     break;
    }
    default: {
     $78 = HEAP32[2195]|0;
     (_fprintf($78,18271,$vararg_buffer)|0);
     _exit(1);
     // unreachable;
    }
    }
   }
   $49 = $5;
   $50 = ((($49)) + 4|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51 << 24 >> 24;
   $53 = $52 | 1;
   $54 = $53&255;
   HEAP8[$50>>0] = $54;
   $55 = $5;
   $56 = ((($55)) + 5|0);
   $57 = $8;
   $58 = (($56) + ($57)|0);
   $6 = $58;
   $59 = $6;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ($61|0)==(61);
   if ($62) {
    $63 = $6;
    $64 = ((($63)) + 1|0);
    $6 = $64;
   }
   $65 = $7;
   switch ($65|0) {
   case 105:  {
    $66 = $6;
    $67 = (_atoi($66)|0);
    HEAP32[$9>>2] = $67;
    break L13;
    break;
   }
   case 100:  {
    $68 = $6;
    $69 = (+_pj_atof($68));
    HEAPF64[$9>>3] = $69;
    break L13;
    break;
   }
   case 114:  {
    $70 = $4;
    $71 = $6;
    $72 = (+_dmstor_ctx($70,$71,0));
    HEAPF64[$9>>3] = $72;
    break L13;
    break;
   }
   case 115:  {
    $73 = $6;
    HEAP32[$9>>2] = $73;
    break L13;
    break;
   }
   case 98:  {
    $74 = $6;
    $75 = HEAP8[$74>>0]|0;
    $76 = $75 << 24 >> 24;
    switch ($76|0) {
    case 102: case 70:  {
     HEAP32[$9>>2] = 0;
     break L13;
     break;
    }
    case 116: case 84: case 0:  {
     HEAP32[$9>>2] = 1;
     break L13;
     break;
    }
    default: {
     $77 = $4;
     _pj_ctx_set_errno($77,-8);
     HEAP32[$9>>2] = 0;
     break L13;
    }
    }
    break;
   }
   default: {
    $78 = HEAP32[2195]|0;
    (_fprintf($78,18271,$vararg_buffer)|0);
    _exit(1);
    // unreachable;
   }
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function _pj_phi2($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $12 = 0.5 * $11;
 $6 = $12;
 $13 = $4;
 $14 = (+Math_atan((+$13)));
 $15 = 2.0 * $14;
 $16 = 1.5707963267948966 - $15;
 $7 = $16;
 $10 = 15;
 while(1) {
  $17 = $5;
  $18 = $7;
  $19 = (+Math_sin((+$18)));
  $20 = $17 * $19;
  $8 = $20;
  $21 = $4;
  $22 = $8;
  $23 = 1.0 - $22;
  $24 = $8;
  $25 = 1.0 + $24;
  $26 = $23 / $25;
  $27 = $6;
  $28 = (+Math_pow((+$26),(+$27)));
  $29 = $21 * $28;
  $30 = (+Math_atan((+$29)));
  $31 = 2.0 * $30;
  $32 = 1.5707963267948966 - $31;
  $33 = $7;
  $34 = $32 - $33;
  $9 = $34;
  $35 = $9;
  $36 = $7;
  $37 = $36 + $35;
  $7 = $37;
  $38 = $9;
  $39 = (+Math_abs((+$38)));
  $40 = $39 > 1.0E-10;
  if (!($40)) {
   break;
  }
  $41 = $10;
  $42 = (($41) + -1)|0;
  $10 = $42;
  $43 = ($42|0)!=(0);
  if (!($43)) {
   break;
  }
 }
 $44 = $10;
 $45 = ($44|0)<=(0);
 if (!($45)) {
  $47 = $7;
  STACKTOP = sp;return (+$47);
 }
 $46 = $3;
 _pj_ctx_set_errno($46,-18);
 $47 = $7;
 STACKTOP = sp;return (+$47);
}
function _pj_qsfn($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = $8 >= 9.9999999999999995E-8;
 if ($9) {
  $10 = $5;
  $11 = $4;
  $12 = $10 * $11;
  $7 = $12;
  $13 = $6;
  $14 = $4;
  $15 = $7;
  $16 = $7;
  $17 = $15 * $16;
  $18 = 1.0 - $17;
  $19 = $14 / $18;
  $20 = $5;
  $21 = 0.5 / $20;
  $22 = $7;
  $23 = 1.0 - $22;
  $24 = $7;
  $25 = 1.0 + $24;
  $26 = $23 / $25;
  $27 = (+Math_log((+$26)));
  $28 = $21 * $27;
  $29 = $19 - $28;
  $30 = $13 * $29;
  $3 = $30;
  $34 = $3;
  STACKTOP = sp;return (+$34);
 } else {
  $31 = $4;
  $32 = $4;
  $33 = $31 + $32;
  $3 = $33;
  $34 = $3;
  STACKTOP = sp;return (+$34);
 }
 return +(0.0);
}
function _pj_tsfn($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $4;
 $8 = $7 * $6;
 $4 = $8;
 $9 = $3;
 $10 = 1.5707963267948966 - $9;
 $11 = 0.5 * $10;
 $12 = (+Math_tan((+$11)));
 $13 = $4;
 $14 = 1.0 - $13;
 $15 = $4;
 $16 = 1.0 + $15;
 $17 = $14 / $16;
 $18 = $5;
 $19 = 0.5 * $18;
 $20 = (+Math_pow((+$17),(+$19)));
 $21 = $12 / $20;
 STACKTOP = sp;return (+$21);
}
function _pj_get_ctx($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pj_get_default_ctx() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _pj_acquire_lock();
 $0 = HEAP32[6058]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _pj_release_lock();
  return (24236|0);
 }
 HEAP32[6059] = 0;
 HEAP32[(24240)>>2] = 0;
 HEAP32[(24244)>>2] = 466;
 HEAP32[(24248)>>2] = 0;
 $2 = (_pj_get_default_fileapi()|0);
 HEAP32[(24252)>>2] = $2;
 $3 = (_getenv((19476|0))|0);
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = (_getenv((19476|0))|0);
   $6 = (_atoi($5)|0);
   $7 = ($6|0)>(0);
   if ($7) {
    $8 = (_getenv((19476|0))|0);
    $9 = (_atoi($8)|0);
    HEAP32[(24240)>>2] = $9;
    break;
   } else {
    HEAP32[(24240)>>2] = 3;
    break;
   }
  }
 } while(0);
 HEAP32[6058] = 1;
 _pj_release_lock();
 return (24236|0);
}
function _pj_ctx_get_errno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pj_ctx_set_errno($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP32[$5>>2] = $4;
 $6 = $3;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 HEAP32[6054] = $8;
 STACKTOP = sp;return;
}
function _pj_stderr_logger($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[2195]|0;
 $7 = $5;
 HEAP32[$vararg_buffer>>2] = $7;
 (_fprintf($6,18975,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _pj_log($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (_malloc(100000)|0);
 $7 = $13;
 $14 = $7;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $16 = $7;
 $17 = $5;
 (_vsprintf($16,$17,$6)|0);
 $18 = $3;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = $7;
 FUNCTION_TABLE_viii[$20 & 511]($23,$24,$25);
 $26 = $7;
 _free($26);
 STACKTOP = sp;return;
}
function _pj_zpoly1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $4 = $2;
 $5 = $3;
 $8 = $5;
 $9 = $4;
 $10 = (($9) + ($8<<4)|0);
 $4 = $10;
 ;HEAP32[$6>>2]=HEAP32[$10>>2]|0;HEAP32[$6+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$10+12>>2]|0;
 while(1) {
  $11 = $5;
  $12 = (($11) + -1)|0;
  $5 = $12;
  $13 = ($11|0)>(0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + -16|0);
  $4 = $15;
  $16 = +HEAPF64[$15>>3];
  $17 = +HEAPF64[$1>>3];
  $18 = +HEAPF64[$6>>3];
  $7 = $18;
  $19 = $17 * $18;
  $20 = $16 + $19;
  $21 = ((($1)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = ((($6)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $22 * $24;
  $26 = $20 - $25;
  HEAPF64[$6>>3] = $26;
  $27 = $4;
  $28 = ((($27)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = +HEAPF64[$1>>3];
  $31 = ((($6)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $30 * $32;
  $34 = $29 + $33;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $7;
  $38 = $36 * $37;
  $39 = $34 + $38;
  $40 = ((($6)) + 8|0);
  HEAPF64[$40>>3] = $39;
 }
 $41 = +HEAPF64[$1>>3];
 $42 = +HEAPF64[$6>>3];
 $7 = $42;
 $43 = $41 * $42;
 $44 = ((($1)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = ((($6)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $45 * $47;
 $49 = $43 - $48;
 HEAPF64[$6>>3] = $49;
 $50 = +HEAPF64[$1>>3];
 $51 = ((($6)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $50 * $52;
 $54 = ((($1)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $7;
 $57 = $55 * $56;
 $58 = $53 + $57;
 $59 = ((($6)) + 8|0);
 HEAPF64[$59>>3] = $58;
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_zpolyd1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 24|0;
 $9 = sp + 8|0;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $11 = 1;
 $12 = $6;
 $13 = $5;
 $14 = (($13) + ($12<<4)|0);
 $5 = $14;
 ;HEAP32[$8>>2]=HEAP32[$14>>2]|0;HEAP32[$8+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$14+12>>2]|0;
 ;HEAP32[$9>>2]=HEAP32[$8>>2]|0;HEAP32[$9+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$8+12>>2]|0;
 while(1) {
  $15 = $6;
  $16 = (($15) + -1)|0;
  $6 = $16;
  $17 = ($15|0)>(0);
  if (!($17)) {
   break;
  }
  $18 = $11;
  $19 = ($18|0)!=(0);
  if ($19) {
   $11 = 0;
  } else {
   $20 = +HEAPF64[$8>>3];
   $21 = +HEAPF64[$1>>3];
   $22 = +HEAPF64[$9>>3];
   $10 = $22;
   $23 = $21 * $22;
   $24 = $20 + $23;
   $25 = ((($1)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = ((($9)) + 8|0);
   $28 = +HEAPF64[$27>>3];
   $29 = $26 * $28;
   $30 = $24 - $29;
   HEAPF64[$9>>3] = $30;
   $31 = ((($8)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = +HEAPF64[$1>>3];
   $34 = ((($9)) + 8|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $33 * $35;
   $37 = $32 + $36;
   $38 = ((($1)) + 8|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $10;
   $41 = $39 * $40;
   $42 = $37 + $41;
   $43 = ((($9)) + 8|0);
   HEAPF64[$43>>3] = $42;
  }
  $44 = $5;
  $45 = ((($44)) + -16|0);
  $5 = $45;
  $46 = +HEAPF64[$45>>3];
  $47 = +HEAPF64[$1>>3];
  $48 = +HEAPF64[$8>>3];
  $10 = $48;
  $49 = $47 * $48;
  $50 = $46 + $49;
  $51 = ((($1)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = ((($8)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $52 * $54;
  $56 = $50 - $55;
  HEAPF64[$8>>3] = $56;
  $57 = $5;
  $58 = ((($57)) + 8|0);
  $59 = +HEAPF64[$58>>3];
  $60 = +HEAPF64[$1>>3];
  $61 = ((($8)) + 8|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $60 * $62;
  $64 = $59 + $63;
  $65 = ((($1)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $10;
  $68 = $66 * $67;
  $69 = $64 + $68;
  $70 = ((($8)) + 8|0);
  HEAPF64[$70>>3] = $69;
 }
 $71 = +HEAPF64[$8>>3];
 $72 = +HEAPF64[$1>>3];
 $73 = +HEAPF64[$9>>3];
 $10 = $73;
 $74 = $72 * $73;
 $75 = $71 + $74;
 $76 = ((($1)) + 8|0);
 $77 = +HEAPF64[$76>>3];
 $78 = ((($9)) + 8|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $77 * $79;
 $81 = $75 - $80;
 HEAPF64[$9>>3] = $81;
 $82 = ((($8)) + 8|0);
 $83 = +HEAPF64[$82>>3];
 $84 = +HEAPF64[$1>>3];
 $85 = ((($9)) + 8|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $84 * $86;
 $88 = $83 + $87;
 $89 = ((($1)) + 8|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $10;
 $92 = $90 * $91;
 $93 = $88 + $92;
 $94 = ((($9)) + 8|0);
 HEAPF64[$94>>3] = $93;
 $95 = +HEAPF64[$1>>3];
 $96 = +HEAPF64[$8>>3];
 $10 = $96;
 $97 = $95 * $96;
 $98 = ((($1)) + 8|0);
 $99 = +HEAPF64[$98>>3];
 $100 = ((($8)) + 8|0);
 $101 = +HEAPF64[$100>>3];
 $102 = $99 * $101;
 $103 = $97 - $102;
 HEAPF64[$8>>3] = $103;
 $104 = +HEAPF64[$1>>3];
 $105 = ((($8)) + 8|0);
 $106 = +HEAPF64[$105>>3];
 $107 = $104 * $106;
 $108 = ((($1)) + 8|0);
 $109 = +HEAPF64[$108>>3];
 $110 = $10;
 $111 = $109 * $110;
 $112 = $107 + $111;
 $113 = ((($8)) + 8|0);
 HEAPF64[$113>>3] = $112;
 $114 = $7;
 ;HEAP32[$114>>2]=HEAP32[$9>>2]|0;HEAP32[$114+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$114+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$8>>2]|0;HEAP32[$0+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$8+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_gauss_ini($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = (_malloc(32)|0);
 $12 = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $4 = 0;
  $89 = $4;
  STACKTOP = sp;return ($89|0);
 } else {
  $15 = $5;
  $16 = $5;
  $17 = $15 * $16;
  $11 = $17;
  $18 = $5;
  $19 = $12;
  $20 = ((($19)) + 16|0);
  HEAPF64[$20>>3] = $18;
  $21 = $6;
  $22 = (+Math_sin((+$21)));
  $9 = $22;
  $23 = $6;
  $24 = (+Math_cos((+$23)));
  $10 = $24;
  $25 = $10;
  $26 = $10;
  $27 = $26 * $25;
  $10 = $27;
  $28 = $11;
  $29 = 1.0 - $28;
  $30 = (+Math_sqrt((+$29)));
  $31 = $11;
  $32 = $9;
  $33 = $31 * $32;
  $34 = $9;
  $35 = $33 * $34;
  $36 = 1.0 - $35;
  $37 = $30 / $36;
  $38 = $8;
  HEAPF64[$38>>3] = $37;
  $39 = $11;
  $40 = $10;
  $41 = $39 * $40;
  $42 = $10;
  $43 = $41 * $42;
  $44 = $11;
  $45 = 1.0 - $44;
  $46 = $43 / $45;
  $47 = 1.0 + $46;
  $48 = (+Math_sqrt((+$47)));
  $49 = $12;
  HEAPF64[$49>>3] = $48;
  $50 = $9;
  $51 = $12;
  $52 = +HEAPF64[$51>>3];
  $53 = $50 / $52;
  $54 = (+Math_asin((+$53)));
  $55 = $7;
  HEAPF64[$55>>3] = $54;
  $56 = $12;
  $57 = +HEAPF64[$56>>3];
  $58 = 0.5 * $57;
  $59 = $5;
  $60 = $58 * $59;
  $61 = $12;
  $62 = ((($61)) + 24|0);
  HEAPF64[$62>>3] = $60;
  $63 = $7;
  $64 = +HEAPF64[$63>>3];
  $65 = 0.5 * $64;
  $66 = $65 + 0.78539816339744828;
  $67 = (+Math_tan((+$66)));
  $68 = $6;
  $69 = 0.5 * $68;
  $70 = $69 + 0.78539816339744828;
  $71 = (+Math_tan((+$70)));
  $72 = $12;
  $73 = +HEAPF64[$72>>3];
  $74 = (+Math_pow((+$71),(+$73)));
  $75 = $12;
  $76 = ((($75)) + 16|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $9;
  $79 = $77 * $78;
  $80 = $12;
  $81 = ((($80)) + 24|0);
  $82 = +HEAPF64[$81>>3];
  $83 = (+_srat($79,$82));
  $84 = $74 * $83;
  $85 = $67 / $84;
  $86 = $12;
  $87 = ((($86)) + 8|0);
  HEAPF64[$87>>3] = $85;
  $88 = $12;
  $4 = $88;
  $89 = $4;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _srat($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = 1.0 - $4;
 $6 = $2;
 $7 = 1.0 + $6;
 $8 = $5 / $7;
 $9 = $3;
 $10 = (+Math_pow((+$8),(+$9)));
 STACKTOP = sp;return (+$10);
}
function _pj_gauss($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $4 = $1;
 $5 = $3;
 $7 = $5;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = 0.5 * $11;
 $13 = $12 + 0.78539816339744828;
 $14 = (+Math_tan((+$13)));
 $15 = $5;
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_pow((+$14),(+$16)));
 $18 = $9 * $17;
 $19 = $5;
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($2)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_sin((+$23)));
 $25 = $21 * $24;
 $26 = $5;
 $27 = ((($26)) + 24|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+_srat($25,$28));
 $30 = $18 * $29;
 $31 = (+Math_atan((+$30)));
 $32 = 2.0 * $31;
 $33 = $32 - 1.5707963267948966;
 $34 = ((($6)) + 8|0);
 HEAPF64[$34>>3] = $33;
 $35 = $5;
 $36 = +HEAPF64[$35>>3];
 $37 = +HEAPF64[$2>>3];
 $38 = $36 * $37;
 HEAPF64[$6>>3] = $38;
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_inv_gauss($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $4 = $1;
 $5 = $3;
 $9 = +HEAPF64[$2>>3];
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 / $11;
 HEAPF64[$6>>3] = $12;
 $13 = ((($2)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = 0.5 * $14;
 $16 = $15 + 0.78539816339744828;
 $17 = (+Math_tan((+$16)));
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 / $20;
 $22 = $5;
 $23 = +HEAPF64[$22>>3];
 $24 = 1.0 / $23;
 $25 = (+Math_pow((+$21),(+$24)));
 $7 = $25;
 $8 = 20;
 while(1) {
  $26 = $8;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
  $28 = $7;
  $29 = $5;
  $30 = ((($29)) + 16|0);
  $31 = +HEAPF64[$30>>3];
  $32 = ((($2)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (+Math_sin((+$33)));
  $35 = $31 * $34;
  $36 = $5;
  $37 = ((($36)) + 16|0);
  $38 = +HEAPF64[$37>>3];
  $39 = -0.5 * $38;
  $40 = (+_srat($35,$39));
  $41 = $28 * $40;
  $42 = (+Math_atan((+$41)));
  $43 = 2.0 * $42;
  $44 = $43 - 1.5707963267948966;
  $45 = ((($6)) + 8|0);
  HEAPF64[$45>>3] = $44;
  $46 = ((($6)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = ((($2)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $47 - $49;
  $51 = (+Math_abs((+$50)));
  $52 = $51 < 9.9999999999999999E-15;
  if ($52) {
   break;
  }
  $53 = ((($6)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = ((($2)) + 8|0);
  HEAPF64[$55>>3] = $54;
  $56 = $8;
  $57 = (($56) + -1)|0;
  $8 = $57;
 }
 $58 = $8;
 $59 = ($58|0)!=(0);
 if ($59) {
  ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
  STACKTOP = sp;return;
 }
 $60 = $4;
 _pj_ctx_set_errno($60,-17);
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_sign($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 if ($3) {
  $8 = 1;
 } else {
  $4 = $1;
  $5 = $4 < 0.0;
  $6 = $5 ? -1 : 0;
  $8 = $6;
 }
 $7 = (+($8|0));
 STACKTOP = sp;return (+$7);
}
function _in_image($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 192|0;
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $8;
 $14 = ($13|0)==(0);
 if ($14) {
  _memcpy(($11|0),(2240|0),288)|0;
  $15 = $6;
  $16 = $7;
  $17 = (_pnpoly(18,$11,$15,$16)|0);
  $5 = $17;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 } else {
  HEAPF64[$12>>3] = -3.141592653589794;
  $18 = ((($12)) + 8|0);
  HEAPF64[$18>>3] = 0.78539816339744928;
  $19 = $9;
  $20 = (+($19|0));
  $21 = $20 * 1.5707963267948966;
  $22 = -3.1415926535897931 + $21;
  $23 = $22 - 1.0000000000000001E-15;
  $24 = ((($12)) + 16|0);
  HEAPF64[$24>>3] = $23;
  $25 = ((($12)) + 16|0);
  $26 = ((($25)) + 8|0);
  HEAPF64[$26>>3] = 0.78539816339744928;
  $27 = $9;
  $28 = (+($27|0));
  $29 = $28 * 1.5707963267948966;
  $30 = -3.1415926535897931 + $29;
  $31 = $30 - 1.0000000000000001E-15;
  $32 = ((($12)) + 32|0);
  HEAPF64[$32>>3] = $31;
  $33 = ((($12)) + 32|0);
  $34 = ((($33)) + 8|0);
  HEAPF64[$34>>3] = 2.3561944901923457;
  $35 = $9;
  $36 = (+($35|0));
  $37 = $36 + 1.0;
  $38 = $37 * 1.5707963267948966;
  $39 = -3.1415926535897931 + $38;
  $40 = $39 + 1.0000000000000001E-15;
  $41 = ((($12)) + 48|0);
  HEAPF64[$41>>3] = $40;
  $42 = ((($12)) + 48|0);
  $43 = ((($42)) + 8|0);
  HEAPF64[$43>>3] = 2.3561944901923457;
  $44 = $9;
  $45 = (+($44|0));
  $46 = $45 + 1.0;
  $47 = $46 * 1.5707963267948966;
  $48 = -3.1415926535897931 + $47;
  $49 = $48 + 1.0000000000000001E-15;
  $50 = ((($12)) + 64|0);
  HEAPF64[$50>>3] = $49;
  $51 = ((($12)) + 64|0);
  $52 = ((($51)) + 8|0);
  HEAPF64[$52>>3] = 0.78539816339744928;
  $53 = ((($12)) + 80|0);
  HEAPF64[$53>>3] = 3.141592653589794;
  $54 = ((($12)) + 80|0);
  $55 = ((($54)) + 8|0);
  HEAPF64[$55>>3] = 0.78539816339744928;
  $56 = ((($12)) + 96|0);
  HEAPF64[$56>>3] = 3.141592653589794;
  $57 = ((($12)) + 96|0);
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = -0.78539816339744928;
  $59 = $10;
  $60 = (+($59|0));
  $61 = $60 + 1.0;
  $62 = $61 * 1.5707963267948966;
  $63 = -3.1415926535897931 + $62;
  $64 = $63 + 1.0000000000000001E-15;
  $65 = ((($12)) + 112|0);
  HEAPF64[$65>>3] = $64;
  $66 = ((($12)) + 112|0);
  $67 = ((($66)) + 8|0);
  HEAPF64[$67>>3] = -0.78539816339744928;
  $68 = $10;
  $69 = (+($68|0));
  $70 = $69 + 1.0;
  $71 = $70 * 1.5707963267948966;
  $72 = -3.1415926535897931 + $71;
  $73 = $72 + 1.0000000000000001E-15;
  $74 = ((($12)) + 128|0);
  HEAPF64[$74>>3] = $73;
  $75 = ((($12)) + 128|0);
  $76 = ((($75)) + 8|0);
  HEAPF64[$76>>3] = -2.3561944901923457;
  $77 = $10;
  $78 = (+($77|0));
  $79 = $78 * 1.5707963267948966;
  $80 = -3.1415926535897931 + $79;
  $81 = $80 - 1.0000000000000001E-15;
  $82 = ((($12)) + 144|0);
  HEAPF64[$82>>3] = $81;
  $83 = ((($12)) + 144|0);
  $84 = ((($83)) + 8|0);
  HEAPF64[$84>>3] = -2.3561944901923457;
  $85 = $10;
  $86 = (+($85|0));
  $87 = $86 * 1.5707963267948966;
  $88 = -3.1415926535897931 + $87;
  $89 = $88 - 1.0000000000000001E-15;
  $90 = ((($12)) + 160|0);
  HEAPF64[$90>>3] = $89;
  $91 = ((($12)) + 160|0);
  $92 = ((($91)) + 8|0);
  HEAPF64[$92>>3] = -0.78539816339744928;
  $93 = ((($12)) + 176|0);
  HEAPF64[$93>>3] = -3.141592653589794;
  $94 = ((($12)) + 176|0);
  $95 = ((($94)) + 8|0);
  HEAPF64[$95>>3] = -0.78539816339744928;
  $96 = $6;
  $97 = $7;
  $98 = (_pnpoly(12,$12,$96,$97)|0);
  $5 = $98;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _pnpoly($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = sp + 16|0;
 $14 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 $11 = 0;
 $9 = 0;
 while(1) {
  $15 = $9;
  $16 = $5;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $7;
  $19 = $9;
  $20 = $6;
  $21 = (($20) + ($19<<4)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $18 == $22;
  if ($23) {
   $24 = $8;
   $25 = $9;
   $26 = $6;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $24 == $29;
   if ($30) {
    label = 5;
    break;
   }
  }
  $31 = $9;
  $32 = (($31) + 1)|0;
  $9 = $32;
 }
 if ((label|0) == 5) {
  $4 = 1;
  $122 = $4;
  STACKTOP = sp;return ($122|0);
 }
 $33 = $6;
 $34 = +HEAPF64[$33>>3];
 HEAPF64[$13>>3] = $34;
 $35 = $6;
 $36 = ((($35)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = ((($13)) + 8|0);
 HEAPF64[$38>>3] = $37;
 $9 = 1;
 while(1) {
  $39 = $9;
  $40 = $5;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = $5;
  $44 = (($42|0) % ($43|0))&-1;
  $45 = $6;
  $46 = (($45) + ($44<<4)|0);
  $47 = +HEAPF64[$46>>3];
  HEAPF64[$14>>3] = $47;
  $48 = $9;
  $49 = $5;
  $50 = (($48|0) % ($49|0))&-1;
  $51 = $6;
  $52 = (($51) + ($50<<4)|0);
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = ((($14)) + 8|0);
  HEAPF64[$55>>3] = $54;
  $56 = $8;
  $57 = ((($13)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = ((($14)) + 8|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $58 < $60;
  $62 = ((($13)) + 8|0);
  $63 = +HEAPF64[$62>>3];
  $64 = ((($14)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $61 ? $63 : $65;
  $67 = $56 > $66;
  do {
   if ($67) {
    $68 = $8;
    $69 = ((($13)) + 8|0);
    $70 = +HEAPF64[$69>>3];
    $71 = ((($14)) + 8|0);
    $72 = +HEAPF64[$71>>3];
    $73 = $70 > $72;
    $74 = ((($13)) + 8|0);
    $75 = +HEAPF64[$74>>3];
    $76 = ((($14)) + 8|0);
    $77 = +HEAPF64[$76>>3];
    $78 = $73 ? $75 : $77;
    $79 = $68 <= $78;
    if ($79) {
     $80 = $7;
     $81 = +HEAPF64[$13>>3];
     $82 = +HEAPF64[$14>>3];
     $83 = $81 > $82;
     $84 = +HEAPF64[$13>>3];
     $85 = +HEAPF64[$14>>3];
     $86 = $83 ? $84 : $85;
     $87 = $80 <= $86;
     if ($87) {
      $88 = ((($13)) + 8|0);
      $89 = +HEAPF64[$88>>3];
      $90 = ((($14)) + 8|0);
      $91 = +HEAPF64[$90>>3];
      $92 = $89 != $91;
      if ($92) {
       $93 = $8;
       $94 = ((($13)) + 8|0);
       $95 = +HEAPF64[$94>>3];
       $96 = $93 - $95;
       $97 = +HEAPF64[$14>>3];
       $98 = +HEAPF64[$13>>3];
       $99 = $97 - $98;
       $100 = $96 * $99;
       $101 = ((($14)) + 8|0);
       $102 = +HEAPF64[$101>>3];
       $103 = ((($13)) + 8|0);
       $104 = +HEAPF64[$103>>3];
       $105 = $102 - $104;
       $106 = $100 / $105;
       $107 = +HEAPF64[$13>>3];
       $108 = $106 + $107;
       $12 = $108;
       $109 = +HEAPF64[$13>>3];
       $110 = +HEAPF64[$14>>3];
       $111 = $109 == $110;
       if (!($111)) {
        $112 = $7;
        $113 = $12;
        $114 = $112 <= $113;
        if (!($114)) {
         break;
        }
       }
       $115 = $11;
       $116 = (($115) + 1)|0;
       $11 = $116;
      }
     }
    }
   }
  } while(0);
  ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;
  $117 = $9;
  $118 = (($117) + 1)|0;
  $9 = $118;
 }
 $119 = $11;
 $120 = (($119|0) % 2)&-1;
 $121 = ($120|0)==(0);
 if ($121) {
  $4 = 0;
  $122 = $4;
  STACKTOP = sp;return ($122|0);
 } else {
  $4 = 1;
  $122 = $4;
  STACKTOP = sp;return ($122|0);
 }
 return (0)|0;
}
function _auth_lat($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = ((($11)) + 416|0);
 $13 = HEAP32[$12>>2]|0;
 $7 = $13;
 $14 = $6;
 $15 = ($14|0)==(0);
 $16 = $5;
 if (!($15)) {
  $39 = $7;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (+_pj_authlat($16,$41));
  $3 = $42;
  $43 = $3;
  STACKTOP = sp;return (+$43);
 }
 $17 = (+Math_sin((+$16)));
 $18 = $4;
 $19 = ((($18)) + 88|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = ((($21)) + 72|0);
 $23 = +HEAPF64[$22>>3];
 $24 = 1.0 - $23;
 $25 = (+_pj_qsfn($17,$20,$24));
 $8 = $25;
 $26 = $7;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $9 = $28;
 $29 = $8;
 $30 = $9;
 $31 = $29 / $30;
 $10 = $31;
 $32 = $10;
 $33 = (+Math_abs((+$32)));
 $34 = $33 > 1.0;
 if ($34) {
  $35 = $10;
  $36 = (+_pj_sign($35));
  $10 = $36;
 }
 $37 = $10;
 $38 = (+Math_asin((+$37)));
 $3 = $38;
 $43 = $3;
 STACKTOP = sp;return (+$43);
}
function _healpix_sphere($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 24|0;
 $9 = +HEAPF64[$1>>3];
 $2 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $3 = $11;
 $12 = (+Math_asin(0.66666666666666663));
 $4 = $12;
 $13 = $3;
 $14 = (+Math_abs((+$13)));
 $15 = $4;
 $16 = $14 <= $15;
 if ($16) {
  $17 = $2;
  HEAPF64[$5>>3] = $17;
  $18 = $3;
  $19 = (+Math_sin((+$18)));
  $20 = 1.1780972450961724 * $19;
  $21 = ((($5)) + 8|0);
  HEAPF64[$21>>3] = $20;
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
  STACKTOP = sp;return;
 }
 $22 = $3;
 $23 = (+Math_sin((+$22)));
 $24 = (+Math_abs((+$23)));
 $25 = 1.0 - $24;
 $26 = 3.0 * $25;
 $27 = (+Math_sqrt((+$26)));
 $7 = $27;
 $28 = $2;
 $29 = 2.0 * $28;
 $30 = $29 / 3.1415926535897931;
 $31 = $30 + 2.0;
 $32 = (+Math_floor((+$31)));
 $8 = $32;
 $33 = $8;
 $34 = $33 >= 4.0;
 if ($34) {
  $8 = 3.0;
 }
 $35 = $8;
 $36 = 1.5707963267948966 * $35;
 $37 = -2.3561944901923448 + $36;
 $6 = $37;
 $38 = $6;
 $39 = $2;
 $40 = $6;
 $41 = $39 - $40;
 $42 = $7;
 $43 = $41 * $42;
 $44 = $38 + $43;
 HEAPF64[$5>>3] = $44;
 $45 = $3;
 $46 = (+_pj_sign($45));
 $47 = $46 * 0.78539816339744828;
 $48 = $7;
 $49 = 2.0 - $48;
 $50 = $47 * $49;
 $51 = ((($5)) + 8|0);
 HEAPF64[$51>>3] = $50;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function _healpix_sphere_inverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 48|0;
 $9 = +HEAPF64[$1>>3];
 $3 = $9;
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $4 = $11;
 $5 = 0.78539816339744828;
 $12 = $4;
 $13 = (+Math_abs((+$12)));
 $14 = $5;
 $15 = $13 <= $14;
 do {
  if ($15) {
   $16 = $3;
   HEAPF64[$2>>3] = $16;
   $17 = $4;
   $18 = 8.0 * $17;
   $19 = $18 / 9.4247779607693793;
   $20 = (+Math_asin((+$19)));
   $21 = ((($2)) + 8|0);
   HEAPF64[$21>>3] = $20;
  } else {
   $22 = $4;
   $23 = (+Math_abs((+$22)));
   $24 = $23 < 1.5707963267948966;
   if (!($24)) {
    HEAPF64[$2>>3] = -3.1415926535897931;
    $56 = $4;
    $57 = (+_pj_sign($56));
    $58 = $57 * 1.5707963267948966;
    $59 = ((($2)) + 8|0);
    HEAPF64[$59>>3] = $58;
    break;
   }
   $25 = $3;
   $26 = 2.0 * $25;
   $27 = $26 / 3.1415926535897931;
   $28 = $27 + 2.0;
   $29 = (+Math_floor((+$28)));
   $6 = $29;
   $30 = $6;
   $31 = $30 >= 4.0;
   if ($31) {
    $6 = 3.0;
   }
   $32 = $6;
   $33 = 1.5707963267948966 * $32;
   $34 = -2.3561944901923448 + $33;
   $7 = $34;
   $35 = $4;
   $36 = (+Math_abs((+$35)));
   $37 = 4.0 * $36;
   $38 = $37 / 3.1415926535897931;
   $39 = 2.0 - $38;
   $8 = $39;
   $40 = $7;
   $41 = $3;
   $42 = $7;
   $43 = $41 - $42;
   $44 = $8;
   $45 = $43 / $44;
   $46 = $40 + $45;
   HEAPF64[$2>>3] = $46;
   $47 = $4;
   $48 = (+_pj_sign($47));
   $49 = $8;
   $50 = (+Math_pow((+$49),2.0));
   $51 = $50 / 3.0;
   $52 = 1.0 - $51;
   $53 = (+Math_asin((+$52)));
   $54 = $48 * $53;
   $55 = ((($2)) + 8|0);
   HEAPF64[$55>>3] = $54;
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_healpix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_healpix($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 467;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 18979;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_healpix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_pj_calloc(1,24)|0);
 $3 = $4;
 $5 = $3;
 $6 = (0|0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_freeup_new_995($7)|0);
  $1 = $8;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 $9 = $3;
 $10 = $2;
 $11 = ((($10)) + 416|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 72|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 != 0.0;
 $16 = $2;
 if ($15) {
  $17 = ((($16)) + 72|0);
  $18 = +HEAPF64[$17>>3];
  $19 = (_pj_authset($18)|0);
  $20 = $3;
  $21 = ((($20)) + 16|0);
  HEAP32[$21>>2] = $19;
  $22 = $2;
  $23 = ((($22)) + 88|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $2;
  $26 = ((($25)) + 104|0);
  $27 = +HEAPF64[$26>>3];
  $28 = (+_pj_qsfn(1.0,$24,$27));
  $29 = $3;
  $30 = ((($29)) + 8|0);
  HEAPF64[$30>>3] = $28;
  $31 = $2;
  $32 = ((($31)) + 56|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $3;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = 0.5 * $36;
  $38 = (+Math_sqrt((+$37)));
  $39 = $33 * $38;
  $40 = $2;
  $41 = ((($40)) + 56|0);
  HEAPF64[$41>>3] = $39;
  $42 = $2;
  $43 = ((($42)) + 56|0);
  $44 = +HEAPF64[$43>>3];
  $45 = 1.0 / $44;
  $46 = $2;
  $47 = ((($46)) + 96|0);
  HEAPF64[$47>>3] = $45;
  $48 = $2;
  $49 = ((($48)) + 4|0);
  HEAP32[$49>>2] = 468;
  $50 = $2;
  $51 = ((($50)) + 8|0);
  HEAP32[$51>>2] = 469;
 } else {
  $52 = ((($16)) + 4|0);
  HEAP32[$52>>2] = 470;
  $53 = $2;
  $54 = ((($53)) + 8|0);
  HEAP32[$54>>2] = 471;
 }
 $55 = $2;
 $1 = $55;
 $56 = $1;
 STACKTOP = sp;return ($56|0);
}
function _freeup_994($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_995($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_995($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $5 = $2;
 $6 = ((($5)) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 $9 = $2;
 if ($8) {
  $10 = (_pj_dealloc($9)|0);
  $1 = $10;
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($9)) + 416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 416|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  (_pj_dealloc($20)|0);
 }
 $21 = $2;
 $22 = ((($21)) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 (_pj_dealloc($23)|0);
 $24 = $2;
 $25 = (_pj_dealloc($24)|0);
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _e_healpix_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $3 = $2;
 $4 = $3;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+_auth_lat($4,$6,0));
 $8 = ((($1)) + 8|0);
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _healpix_sphere($0,$$byval_copy);
 STACKTOP = sp;return;
}
function _e_healpix_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $6 = +HEAPF64[$1>>3];
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (_in_image($6,$8,0,0,0)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  HEAPF64[$4>>3] = inf;
  $11 = ((($4)) + 8|0);
  HEAPF64[$11>>3] = inf;
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  _pj_ctx_set_errno($13,-15);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  _healpix_sphere_inverse($5,$$byval_copy);
  ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
  $14 = $3;
  $15 = ((($4)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = (+_auth_lat($14,$16,1));
  $18 = ((($4)) + 8|0);
  HEAPF64[$18>>3] = $17;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_healpix_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $3 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _healpix_sphere($0,$$byval_copy);
 STACKTOP = sp;return;
}
function _s_healpix_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $4 = sp;
 $3 = $2;
 $5 = +HEAPF64[$1>>3];
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = (_in_image($5,$7,0,0,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  ;HEAP32[$4>>2]=HEAP32[2528>>2]|0;HEAP32[$4+4>>2]=HEAP32[2528+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[2528+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[2528+12>>2]|0;
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  _pj_ctx_set_errno($11,-15);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  _healpix_sphere_inverse($0,$$byval_copy);
  STACKTOP = sp;return;
 }
}
function _pj_rhealpix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_rhealpix($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 467;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 19001;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_rhealpix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $6 = (_pj_calloc(1,24)|0);
 $3 = $6;
 $7 = $3;
 $8 = (0|0)==($7|0);
 if ($8) {
  $9 = $2;
  $10 = (_freeup_new_995($9)|0);
  $1 = $10;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 416|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 _pj_param($4,$15,$18,19053);
 $19 = HEAP32[$4>>2]|0;
 $20 = $3;
 HEAP32[$20>>2] = $19;
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _pj_param($5,$22,$25,19067);
 $26 = HEAP32[$5>>2]|0;
 $27 = $3;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $3;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)<(0);
 if (!($31)) {
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)>(3);
  if (!($34)) {
   $38 = $3;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)<(0);
   if (!($41)) {
    $42 = $3;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)>(3);
    if (!($45)) {
     $49 = $2;
     $50 = ((($49)) + 72|0);
     $51 = +HEAPF64[$50>>3];
     $52 = $51 != 0.0;
     $53 = $2;
     if ($52) {
      $54 = ((($53)) + 72|0);
      $55 = +HEAPF64[$54>>3];
      $56 = (_pj_authset($55)|0);
      $57 = $3;
      $58 = ((($57)) + 16|0);
      HEAP32[$58>>2] = $56;
      $59 = $2;
      $60 = ((($59)) + 88|0);
      $61 = +HEAPF64[$60>>3];
      $62 = $2;
      $63 = ((($62)) + 104|0);
      $64 = +HEAPF64[$63>>3];
      $65 = (+_pj_qsfn(1.0,$61,$64));
      $66 = $3;
      $67 = ((($66)) + 8|0);
      HEAPF64[$67>>3] = $65;
      $68 = $2;
      $69 = ((($68)) + 56|0);
      $70 = +HEAPF64[$69>>3];
      $71 = $3;
      $72 = ((($71)) + 8|0);
      $73 = +HEAPF64[$72>>3];
      $74 = 0.5 * $73;
      $75 = (+Math_sqrt((+$74)));
      $76 = $70 * $75;
      $77 = $2;
      $78 = ((($77)) + 56|0);
      HEAPF64[$78>>3] = $76;
      $79 = $2;
      $80 = ((($79)) + 56|0);
      $81 = +HEAPF64[$80>>3];
      $82 = 1.0 / $81;
      $83 = $2;
      $84 = ((($83)) + 96|0);
      HEAPF64[$84>>3] = $82;
      $85 = $2;
      $86 = ((($85)) + 4|0);
      HEAP32[$86>>2] = 472;
      $87 = $2;
      $88 = ((($87)) + 8|0);
      HEAP32[$88>>2] = 473;
     } else {
      $89 = ((($53)) + 4|0);
      HEAP32[$89>>2] = 474;
      $90 = $2;
      $91 = ((($90)) + 8|0);
      HEAP32[$91>>2] = 475;
     }
     $92 = $2;
     $1 = $92;
     $93 = $1;
     STACKTOP = sp;return ($93|0);
    }
   }
   $46 = $2;
   $47 = HEAP32[$46>>2]|0;
   _pj_ctx_set_errno($47,-47);
   $48 = $2;
   _freeup_994($48);
   $1 = 0;
   $93 = $1;
   STACKTOP = sp;return ($93|0);
  }
 }
 $35 = $2;
 $36 = HEAP32[$35>>2]|0;
 _pj_ctx_set_errno($36,-47);
 $37 = $2;
 _freeup_994($37);
 $1 = 0;
 $93 = $1;
 STACKTOP = sp;return ($93|0);
}
function _e_rhealpix_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $2;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $3;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+_auth_lat($10,$12,0));
 $14 = ((($1)) + 8|0);
 HEAPF64[$14>>3] = $13;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _healpix_sphere($6,$$byval_copy);
 ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$6+12>>2]|0;
 $15 = +HEAPF64[$5>>3];
 $16 = ((($5)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 _combine_caps($0,$15,$17,$19,$22,0);
 STACKTOP = sp;return;
}
function _e_rhealpix_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $2;
 $8 = $3;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 $11 = +HEAPF64[$1>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_in_image($11,$13,1,$15,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  HEAPF64[$5>>3] = inf;
  $21 = ((($5)) + 8|0);
  HEAPF64[$21>>3] = inf;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  _pj_ctx_set_errno($23,-15);
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $24 = +HEAPF64[$1>>3];
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = HEAP32[$27>>2]|0;
  $29 = $4;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  _combine_caps($6,$24,$26,$28,$31,1);
  ;HEAP32[$1>>2]=HEAP32[$6>>2]|0;HEAP32[$1+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$6+12>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  _healpix_sphere_inverse($7,$$byval_copy);
  ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;
  $32 = $3;
  $33 = ((($5)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_auth_lat($32,$34,1));
  $36 = ((($5)) + 8|0);
  HEAPF64[$36>>3] = $35;
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_rhealpix_forward($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $5 = sp;
 $3 = $2;
 $6 = $3;
 $7 = ((($6)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _healpix_sphere($5,$$byval_copy);
 $9 = +HEAPF64[$5>>3];
 $10 = ((($5)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _combine_caps($0,$9,$11,$13,$16,0);
 STACKTOP = sp;return;
}
function _s_rhealpix_inverse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $2;
 $7 = $3;
 $8 = ((($7)) + 416|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = +HEAPF64[$1>>3];
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = $4;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_in_image($10,$12,1,$14,$17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  ;HEAP32[$5>>2]=HEAP32[2528>>2]|0;HEAP32[$5+4>>2]=HEAP32[2528+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[2528+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[2528+12>>2]|0;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  _pj_ctx_set_errno($21,-15);
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $22 = +HEAPF64[$1>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $4;
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  _combine_caps($6,$22,$24,$26,$29,1);
  ;HEAP32[$1>>2]=HEAP32[$6>>2]|0;HEAP32[$1+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$6+12>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  _healpix_sphere_inverse($0,$$byval_copy);
  STACKTOP = sp;return;
 }
}
function _combine_caps($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $11 = sp + 128|0;
 $12 = sp + 112|0;
 $13 = sp + 96|0;
 $14 = sp + 80|0;
 $15 = sp + 64|0;
 $16 = sp + 48|0;
 $17 = sp + 32|0;
 $20 = sp;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $19 = 0;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 _get_cap($20,$21,$22,$23,$24,$25);
 $26 = ((($20)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(2);
 if ($28) {
  $29 = ((($20)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  HEAPF64[$11>>3] = $30;
  $31 = ((($20)) + 16|0);
  $32 = +HEAPF64[$31>>3];
  $33 = ((($11)) + 8|0);
  HEAPF64[$33>>3] = $32;
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;
  STACKTOP = sp;return;
 }
 $34 = $6;
 HEAPF64[$12>>3] = $34;
 $35 = $7;
 $36 = ((($12)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = ((($20)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 HEAPF64[$14>>3] = $38;
 $39 = ((($20)) + 16|0);
 $40 = +HEAPF64[$39>>3];
 $41 = ((($14)) + 8|0);
 HEAPF64[$41>>3] = $40;
 $42 = $10;
 $43 = ($42|0)==(0);
 do {
  if ($43) {
   $44 = $19;
   $45 = (+($44|0));
   $46 = $45 * 1.5707963267948966;
   $47 = -2.3561944901923448 + $46;
   HEAPF64[$13>>3] = $47;
   $48 = ((($13)) + 8|0);
   HEAPF64[$48>>3] = 1.5707963267948966;
   $49 = ((($20)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = $8;
    $19 = $52;
    $53 = HEAP32[$20>>2]|0;
    $54 = $19;
    $55 = (($53) - ($54))|0;
    $56 = (_get_rotate_index($55)|0);
    $57 = (2016 + ($56<<5)|0);
    $18 = $57;
    break;
   } else {
    $58 = $9;
    $19 = $58;
    $59 = HEAP32[$20>>2]|0;
    $60 = $19;
    $61 = (($59) - ($60))|0;
    $62 = Math_imul(-1, $61)|0;
    $63 = (_get_rotate_index($62)|0);
    $64 = (2016 + ($63<<5)|0);
    $18 = $64;
    break;
   }
  } else {
   $65 = HEAP32[$20>>2]|0;
   $66 = (+($65|0));
   $67 = $66 * 1.5707963267948966;
   $68 = -2.3561944901923448 + $67;
   HEAPF64[$13>>3] = $68;
   $69 = ((($13)) + 8|0);
   HEAPF64[$69>>3] = 1.5707963267948966;
   $70 = ((($20)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0);
   if ($72) {
    $73 = $8;
    $19 = $73;
    $74 = HEAP32[$20>>2]|0;
    $75 = $19;
    $76 = (($74) - ($75))|0;
    $77 = Math_imul(-1, $76)|0;
    $78 = (_get_rotate_index($77)|0);
    $79 = (2016 + ($78<<5)|0);
    $18 = $79;
    break;
   } else {
    $80 = $9;
    $19 = $80;
    $81 = HEAP32[$20>>2]|0;
    $82 = $19;
    $83 = (($81) - ($82))|0;
    $84 = (_get_rotate_index($83)|0);
    $85 = (2016 + ($84<<5)|0);
    $18 = $85;
    break;
   }
  }
 } while(0);
 _vector_sub($12,$14,$16);
 $86 = $18;
 _dot_product($86,$16,$17);
 _vector_add($17,$13,$15);
 $87 = +HEAPF64[$15>>3];
 HEAPF64[$11>>3] = $87;
 $88 = ((($15)) + 8|0);
 $89 = +HEAPF64[$88>>3];
 $90 = ((($11)) + 8|0);
 HEAPF64[$90>>3] = $89;
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;
 STACKTOP = sp;return;
}
function _get_cap($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 8|0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $13 = $6;
 $14 = ((($11)) + 8|0);
 HEAPF64[$14>>3] = $13;
 $15 = $7;
 $16 = ((($11)) + 16|0);
 HEAPF64[$16>>3] = $15;
 $17 = $10;
 $18 = ($17|0)==(0);
 $19 = $7;
 $20 = $19 > 0.78539816339744828;
 do {
  if ($18) {
   do {
    if ($20) {
     $21 = ((($11)) + 24|0);
     HEAP32[$21>>2] = 0;
     $12 = 1.5707963267948966;
    } else {
     $22 = $7;
     $23 = $22 < -0.78539816339744828;
     $24 = ((($11)) + 24|0);
     if ($23) {
      HEAP32[$24>>2] = 1;
      $12 = -1.5707963267948966;
      break;
     }
     HEAP32[$24>>2] = 2;
     HEAP32[$11>>2] = 0;
     ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$11+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$11+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$11+28>>2]|0;
     STACKTOP = sp;return;
    }
   } while(0);
   $25 = $6;
   $26 = $25 < -1.5707963267948966;
   if ($26) {
    HEAP32[$11>>2] = 0;
    $27 = ((($11)) + 8|0);
    HEAPF64[$27>>3] = -2.3561944901923448;
    $28 = $12;
    $29 = ((($11)) + 16|0);
    HEAPF64[$29>>3] = $28;
    break;
   }
   $30 = $6;
   $31 = $30 >= -1.5707963267948966;
   $32 = $6;
   $33 = $32 < 0.0;
   $or$cond = $31 & $33;
   if ($or$cond) {
    HEAP32[$11>>2] = 1;
    $34 = ((($11)) + 8|0);
    HEAPF64[$34>>3] = -0.78539816339744828;
    $35 = $12;
    $36 = ((($11)) + 16|0);
    HEAPF64[$36>>3] = $35;
    break;
   }
   $37 = $6;
   $38 = $37 >= 0.0;
   $39 = $6;
   $40 = $39 < 1.5707963267948966;
   $or$cond3 = $38 & $40;
   if ($or$cond3) {
    HEAP32[$11>>2] = 2;
    $41 = ((($11)) + 8|0);
    HEAPF64[$41>>3] = 0.78539816339744828;
    $42 = $12;
    $43 = ((($11)) + 16|0);
    HEAPF64[$43>>3] = $42;
    break;
   } else {
    HEAP32[$11>>2] = 3;
    $44 = ((($11)) + 8|0);
    HEAPF64[$44>>3] = 2.3561944901923448;
    $45 = $12;
    $46 = ((($11)) + 16|0);
    HEAPF64[$46>>3] = $45;
    break;
   }
  } else {
   do {
    if ($20) {
     $47 = ((($11)) + 24|0);
     HEAP32[$47>>2] = 0;
     $48 = $8;
     $49 = (+($48|0));
     $50 = $49 * 1.5707963267948966;
     $51 = -2.3561944901923448 + $50;
     $52 = ((($11)) + 8|0);
     HEAPF64[$52>>3] = $51;
     $53 = ((($11)) + 16|0);
     HEAPF64[$53>>3] = 1.5707963267948966;
     $54 = $6;
     $55 = $8;
     $56 = (+($55|0));
     $57 = $56 * 1.5707963267948966;
     $58 = $54 - $57;
     $6 = $58;
    } else {
     $59 = $7;
     $60 = $59 < -0.78539816339744828;
     $61 = ((($11)) + 24|0);
     if ($60) {
      HEAP32[$61>>2] = 1;
      $62 = $9;
      $63 = (+($62|0));
      $64 = $63 * 1.5707963267948966;
      $65 = -2.3561944901923448 + $64;
      $66 = ((($11)) + 8|0);
      HEAPF64[$66>>3] = $65;
      $67 = ((($11)) + 16|0);
      HEAPF64[$67>>3] = -1.5707963267948966;
      $68 = $6;
      $69 = $9;
      $70 = (+($69|0));
      $71 = $70 * 1.5707963267948966;
      $72 = $68 - $71;
      $6 = $72;
      break;
     }
     HEAP32[$61>>2] = 2;
     HEAP32[$11>>2] = 0;
     ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$11+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$11+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$11+28>>2]|0;
     STACKTOP = sp;return;
    }
   } while(0);
   $73 = ((($11)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = $7;
    $77 = $6;
    $78 = -$77;
    $79 = $78 - 0.78539816339744828;
    $80 = $79 - 1.0000000000000001E-15;
    $81 = $76 >= $80;
    if ($81) {
     $82 = $7;
     $83 = $6;
     $84 = $83 + 3.9269908169872414;
     $85 = $84 - 1.0000000000000001E-15;
     $86 = $82 < $85;
     if ($86) {
      $87 = $8;
      $88 = (($87) + 1)|0;
      $89 = (($88|0) % 4)&-1;
      HEAP32[$11>>2] = $89;
      break;
     }
    }
    $90 = $7;
    $91 = $6;
    $92 = -$91;
    $93 = $92 - 0.78539816339744828;
    $94 = $93 + 1.0000000000000001E-15;
    $95 = $90 > $94;
    if ($95) {
     $96 = $7;
     $97 = $6;
     $98 = $97 + 3.9269908169872414;
     $99 = $98 - 1.0000000000000001E-15;
     $100 = $96 >= $99;
     if ($100) {
      $101 = $8;
      $102 = (($101) + 2)|0;
      $103 = (($102|0) % 4)&-1;
      HEAP32[$11>>2] = $103;
      break;
     }
    }
    $104 = $7;
    $105 = $6;
    $106 = -$105;
    $107 = $106 - 0.78539816339744828;
    $108 = $107 + 1.0000000000000001E-15;
    $109 = $104 <= $108;
    if ($109) {
     $110 = $7;
     $111 = $6;
     $112 = $111 + 3.9269908169872414;
     $113 = $112 + 1.0000000000000001E-15;
     $114 = $110 > $113;
     if ($114) {
      $115 = $8;
      $116 = (($115) + 3)|0;
      $117 = (($116|0) % 4)&-1;
      HEAP32[$11>>2] = $117;
      break;
     }
    }
    $118 = $8;
    HEAP32[$11>>2] = $118;
    break;
   }
   $119 = ((($11)) + 24|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)==(1);
   if ($121) {
    $122 = $7;
    $123 = $6;
    $124 = $123 + 0.78539816339744828;
    $125 = $124 + 1.0000000000000001E-15;
    $126 = $122 <= $125;
    if ($126) {
     $127 = $7;
     $128 = $6;
     $129 = -$128;
     $130 = $129 - 3.9269908169872414;
     $131 = $130 + 1.0000000000000001E-15;
     $132 = $127 > $131;
     if ($132) {
      $133 = $9;
      $134 = (($133) + 1)|0;
      $135 = (($134|0) % 4)&-1;
      HEAP32[$11>>2] = $135;
      break;
     }
    }
    $136 = $7;
    $137 = $6;
    $138 = $137 + 0.78539816339744828;
    $139 = $138 - 1.0000000000000001E-15;
    $140 = $136 < $139;
    if ($140) {
     $141 = $7;
     $142 = $6;
     $143 = -$142;
     $144 = $143 - 3.9269908169872414;
     $145 = $144 + 1.0000000000000001E-15;
     $146 = $141 <= $145;
     if ($146) {
      $147 = $9;
      $148 = (($147) + 2)|0;
      $149 = (($148|0) % 4)&-1;
      HEAP32[$11>>2] = $149;
      break;
     }
    }
    $150 = $7;
    $151 = $6;
    $152 = $151 + 0.78539816339744828;
    $153 = $152 - 1.0000000000000001E-15;
    $154 = $150 >= $153;
    if ($154) {
     $155 = $7;
     $156 = $6;
     $157 = -$156;
     $158 = $157 - 3.9269908169872414;
     $159 = $158 - 1.0000000000000001E-15;
     $160 = $155 < $159;
     if ($160) {
      $161 = $9;
      $162 = (($161) + 3)|0;
      $163 = (($162|0) % 4)&-1;
      HEAP32[$11>>2] = $163;
      break;
     }
    }
    $164 = $9;
    HEAP32[$11>>2] = $164;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$11+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$11+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$11+28>>2]|0;
 STACKTOP = sp;return;
}
function _get_rotate_index($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 0:  {
  $1 = 0;
  break;
 }
 case 1:  {
  $1 = 1;
  break;
 }
 case 2:  {
  $1 = 2;
  break;
 }
 case 3:  {
  $1 = 3;
  break;
 }
 case -1:  {
  $1 = 4;
  break;
 }
 case -2:  {
  $1 = 5;
  break;
 }
 case -3:  {
  $1 = 6;
  break;
 }
 default: {
  $1 = 0;
 }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _vector_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = ($7|0)<(2);
  if (!($8)) {
   break;
  }
  $9 = $6;
  $10 = $3;
  $11 = (($10) + ($9<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $6;
  $14 = $4;
  $15 = (($14) + ($13<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $12 - $16;
  $18 = $6;
  $19 = $5;
  $20 = (($19) + ($18<<3)|0);
  HEAPF64[$20>>3] = $17;
  $21 = $6;
  $22 = (($21) + 1)|0;
  $6 = $22;
 }
 STACKTOP = sp;return;
}
function _dot_product($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $8;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $6;
  $13 = $5;
  $14 = (($13) + ($12<<3)|0);
  HEAPF64[$14>>3] = 0.0;
  $7 = 0;
  while(1) {
   $15 = $7;
   $16 = $8;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $7;
   $19 = $6;
   $20 = $3;
   $21 = (($20) + ($19<<4)|0);
   $22 = (($21) + ($18<<3)|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $7;
   $25 = $4;
   $26 = (($25) + ($24<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $23 * $27;
   $29 = $6;
   $30 = $5;
   $31 = (($30) + ($29<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 + $28;
   HEAPF64[$31>>3] = $33;
   $34 = $7;
   $35 = (($34) + 1)|0;
   $7 = $35;
  }
  $36 = $6;
  $37 = (($36) + 1)|0;
  $6 = $37;
 }
 STACKTOP = sp;return;
}
function _vector_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = ($7|0)<(2);
  if (!($8)) {
   break;
  }
  $9 = $6;
  $10 = $3;
  $11 = (($10) + ($9<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $6;
  $14 = $4;
  $15 = (($14) + ($13<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $12 + $16;
  $18 = $6;
  $19 = $5;
  $20 = (($19) + ($18<<3)|0);
  HEAPF64[$20>>3] = $17;
  $21 = $6;
  $22 = (($21) + 1)|0;
  $6 = $22;
 }
 STACKTOP = sp;return;
}
function _pj_natearth($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_natearth($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 476;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 19081;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_natearth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 477;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 478;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_1008($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_1009($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_1009($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_1010($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 > 1.4224000562099293;
 $14 = ((($1)) + 8|0);
 if ($13) {
  HEAPF64[$14>>3] = 1.4224000562099293;
 } else {
  $15 = +HEAPF64[$14>>3];
  $16 = $15 < -1.4224000562099293;
  if ($16) {
   $17 = ((($1)) + 8|0);
   HEAPF64[$17>>3] = -1.4224000562099293;
  }
 }
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $5 = $19;
 while(1) {
  $20 = $5;
  $21 = $5;
  $22 = $20 * $21;
  $7 = $22;
  $23 = $7;
  $24 = $7;
  $25 = $23 * $24;
  $8 = $25;
  $26 = $5;
  $27 = $7;
  $28 = $8;
  $29 = $7;
  $30 = 0.028874 * $29;
  $31 = -0.044475000000000001 + $30;
  $32 = $8;
  $33 = -0.0059160000000000003 * $32;
  $34 = $31 + $33;
  $35 = $28 * $34;
  $36 = 0.015084999999999999 + $35;
  $37 = $27 * $36;
  $38 = 1.007226 + $37;
  $39 = $26 * $38;
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $39 - $41;
  $9 = $42;
  $43 = $7;
  $44 = $8;
  $45 = $7;
  $46 = 0.25986599999999999 * $45;
  $47 = -0.31132500000000002 + $46;
  $48 = $8;
  $49 = -0.065076000000000009 * $48;
  $50 = $47 + $49;
  $51 = $44 * $50;
  $52 = 0.045254999999999997 + $51;
  $53 = $43 * $52;
  $54 = 1.007226 + $53;
  $10 = $54;
  $55 = $9;
  $56 = $10;
  $57 = $55 / $56;
  $6 = $57;
  $58 = $5;
  $59 = $58 - $57;
  $5 = $59;
  $60 = $6;
  $61 = (+Math_abs((+$60)));
  $62 = $61 < 9.9999999999999993E-12;
  if ($62) {
   break;
  }
 }
 $63 = $5;
 $64 = ((($4)) + 8|0);
 HEAPF64[$64>>3] = $63;
 $65 = $5;
 $66 = $5;
 $67 = $65 * $66;
 $7 = $67;
 $68 = +HEAPF64[$1>>3];
 $69 = $7;
 $70 = $7;
 $71 = $7;
 $72 = $7;
 $73 = $71 * $72;
 $74 = $7;
 $75 = $73 * $74;
 $76 = $7;
 $77 = $76 * -0.001529;
 $78 = 0.0039709999999999997 + $77;
 $79 = $75 * $78;
 $80 = -0.013790999999999999 + $79;
 $81 = $70 * $80;
 $82 = -0.13197900000000001 + $81;
 $83 = $69 * $82;
 $84 = 0.87070000000000003 + $83;
 $85 = $68 / $84;
 HEAPF64[$4>>3] = $85;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_1011($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($1)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $8 * $10;
 $5 = $11;
 $12 = $5;
 $13 = $5;
 $14 = $12 * $13;
 $6 = $14;
 $15 = +HEAPF64[$1>>3];
 $16 = $5;
 $17 = $5;
 $18 = $6;
 $19 = $5;
 $20 = $18 * $19;
 $21 = $5;
 $22 = $21 * -0.001529;
 $23 = 0.0039709999999999997 + $22;
 $24 = $20 * $23;
 $25 = -0.013790999999999999 + $24;
 $26 = $17 * $25;
 $27 = -0.13197900000000001 + $26;
 $28 = $16 * $27;
 $29 = 0.87070000000000003 + $28;
 $30 = $15 * $29;
 HEAPF64[$4>>3] = $30;
 $31 = ((($1)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $5;
 $34 = $6;
 $35 = $5;
 $36 = 0.028874 * $35;
 $37 = -0.044475000000000001 + $36;
 $38 = $6;
 $39 = -0.0059160000000000003 * $38;
 $40 = $37 + $39;
 $41 = $34 * $40;
 $42 = 0.015084999999999999 + $41;
 $43 = $33 * $42;
 $44 = 1.007226 + $43;
 $45 = $32 * $44;
 $46 = ((($4)) + 8|0);
 HEAPF64[$46>>3] = $45;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_natearth2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_natearth2($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 479;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 19108;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_natearth2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 72|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 480;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 481;
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _freeup_1018($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_1019($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_1019($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (0|0)==($3|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = (_pj_dealloc($5)|0);
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _s_inverse_1020($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 > 1.424229168755982;
 $15 = ((($1)) + 8|0);
 if ($14) {
  HEAPF64[$15>>3] = 1.424229168755982;
 } else {
  $16 = +HEAPF64[$15>>3];
  $17 = $16 < -1.424229168755982;
  if ($17) {
   $18 = ((($1)) + 8|0);
   HEAPF64[$18>>3] = -1.424229168755982;
  }
 }
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $5 = $20;
 while(1) {
  $21 = $5;
  $22 = $5;
  $23 = $21 * $22;
  $7 = $23;
  $24 = $7;
  $25 = $7;
  $26 = $24 * $25;
  $8 = $26;
  $27 = $5;
  $28 = $8;
  $29 = $8;
  $30 = $28 * $29;
  $31 = $7;
  $32 = 0.019259999999999999 * $31;
  $33 = -0.026249999999999999 + $32;
  $34 = $8;
  $35 = -0.00396 * $34;
  $36 = $33 + $35;
  $37 = $30 * $36;
  $38 = 1.01183 + $37;
  $39 = $27 * $38;
  $40 = ((($1)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $39 - $41;
  $10 = $42;
  $43 = $8;
  $44 = $8;
  $45 = $43 * $44;
  $46 = $7;
  $47 = 0.21185999999999999 * $46;
  $48 = -0.23624999999999999 + $47;
  $49 = $8;
  $50 = -0.051479999999999998 * $49;
  $51 = $48 + $50;
  $52 = $45 * $51;
  $53 = 1.01183 + $52;
  $11 = $53;
  $54 = $10;
  $55 = $11;
  $56 = $54 / $55;
  $6 = $56;
  $57 = $5;
  $58 = $57 - $56;
  $5 = $58;
  $59 = $6;
  $60 = (+Math_abs((+$59)));
  $61 = $60 < 9.9999999999999993E-12;
  if ($61) {
   break;
  }
 }
 $62 = $5;
 $63 = ((($4)) + 8|0);
 HEAPF64[$63>>3] = $62;
 $64 = $5;
 $65 = $5;
 $66 = $64 * $65;
 $7 = $66;
 $67 = $7;
 $68 = $7;
 $69 = $67 * $68;
 $8 = $69;
 $70 = $7;
 $71 = $8;
 $72 = $70 * $71;
 $9 = $72;
 $73 = +HEAPF64[$1>>3];
 $74 = $7;
 $75 = -0.13063 * $74;
 $76 = 0.84719 + $75;
 $77 = $9;
 $78 = $9;
 $79 = $77 * $78;
 $80 = $7;
 $81 = 0.054940000000000003 * $80;
 $82 = -0.045150000000000003 + $81;
 $83 = $8;
 $84 = -0.023259999999999999 * $83;
 $85 = $82 + $84;
 $86 = $9;
 $87 = 0.00331 * $86;
 $88 = $85 + $87;
 $89 = $79 * $88;
 $90 = $76 + $89;
 $91 = $73 / $90;
 HEAPF64[$4>>3] = $91;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_1021($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($1)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $9 * $11;
 $5 = $12;
 $13 = $5;
 $14 = $5;
 $15 = $13 * $14;
 $6 = $15;
 $16 = $5;
 $17 = $6;
 $18 = $16 * $17;
 $7 = $18;
 $19 = +HEAPF64[$1>>3];
 $20 = $5;
 $21 = -0.13063 * $20;
 $22 = 0.84719 + $21;
 $23 = $7;
 $24 = $7;
 $25 = $23 * $24;
 $26 = $5;
 $27 = 0.054940000000000003 * $26;
 $28 = -0.045150000000000003 + $27;
 $29 = $6;
 $30 = -0.023259999999999999 * $29;
 $31 = $28 + $30;
 $32 = $7;
 $33 = 0.00331 * $32;
 $34 = $31 + $33;
 $35 = $25 * $34;
 $36 = $22 + $35;
 $37 = $19 * $36;
 HEAPF64[$4>>3] = $37;
 $38 = ((($1)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $6;
 $41 = $6;
 $42 = $40 * $41;
 $43 = $5;
 $44 = 0.019259999999999999 * $43;
 $45 = -0.026249999999999999 + $44;
 $46 = $6;
 $47 = -0.00396 * $46;
 $48 = $45 + $47;
 $49 = $42 * $48;
 $50 = 1.01183 + $49;
 $51 = $39 * $50;
 $52 = ((($4)) + 8|0);
 HEAPF64[$52>>3] = $51;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_calcofi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = (_pj_projection_specific_setup_calcofi($5)|0);
   $1 = $6;
  } else {
   $7 = (_pj_calloc(1,424)|0);
   $2 = $7;
   $8 = $2;
   $9 = (0|0)==($8|0);
   if ($9) {
    $1 = 0;
    break;
   } else {
    $10 = $2;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 482;
    $12 = $2;
    $13 = ((($12)) + 28|0);
    HEAP32[$13>>2] = 19137;
    $14 = $2;
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pj_projection_specific_setup_calcofi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 416|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 72|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 != 0.0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 if ($7) {
  HEAP32[$9>>2] = 483;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 484;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  HEAP32[$9>>2] = 485;
  $12 = $1;
  $13 = ((($12)) + 4|0);
  HEAP32[$13>>2] = 486;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freeup_1028($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_freeup_new_1029($2)|0);
 STACKTOP = sp;return;
}
function _freeup_new_1029($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pj_dealloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _e_inverse_1030($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 96|0);
 $13 = +HEAPF64[$12>>3];
 $14 = +HEAPF64[$1>>3];
 $15 = $14 / $13;
 HEAPF64[$1>>3] = $15;
 $16 = $3;
 $17 = ((($16)) + 96|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 / $18;
 HEAPF64[$19>>3] = $21;
 $22 = +HEAPF64[$1>>3];
 $23 = $22 - 80.0;
 $24 = 0.0034906585039886592 * $23;
 $25 = (+Math_cos(0.52359877559829882));
 $26 = $24 * $25;
 $27 = 0.59602993955606354 - $26;
 $5 = $27;
 $28 = $5;
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $30 - 60.0;
 $32 = 0.0011635528346628863 * $31;
 $33 = (+Math_sin(0.52359877559829882));
 $34 = $32 * $33;
 $35 = $28 - $34;
 $36 = ((($4)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = (+Math_sin(0.59602993955606354));
 $38 = $3;
 $39 = ((($38)) + 88|0);
 $40 = +HEAPF64[$39>>3];
 $41 = (+_pj_tsfn(0.59602993955606354,$37,$40));
 $42 = (+Math_log((+$41)));
 $43 = -$42;
 $6 = $43;
 $44 = $5;
 $45 = $5;
 $46 = (+Math_sin((+$45)));
 $47 = $3;
 $48 = ((($47)) + 88|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+_pj_tsfn($44,$46,$49));
 $51 = (+Math_log((+$50)));
 $52 = -$51;
 $7 = $52;
 $53 = ((($4)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = ((($4)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = (+Math_sin((+$56)));
 $58 = $3;
 $59 = ((($58)) + 88|0);
 $60 = +HEAPF64[$59>>3];
 $61 = (+_pj_tsfn($54,$57,$60));
 $62 = (+Math_log((+$61)));
 $63 = -$62;
 $8 = $63;
 $64 = $8;
 $65 = $6;
 $66 = $64 - $65;
 $67 = (+Math_tan(0.52359877559829882));
 $68 = $66 * $67;
 $9 = $68;
 $69 = $7;
 $70 = $8;
 $71 = $69 - $70;
 $72 = (+Math_cos(0.52359877559829882));
 $73 = (+Math_sin(0.52359877559829882));
 $74 = $72 * $73;
 $75 = $71 / $74;
 $10 = $75;
 $76 = $9;
 $77 = $10;
 $78 = $76 + $77;
 $79 = -2.1144663887911301 - $78;
 HEAPF64[$4>>3] = $79;
 $80 = $3;
 $81 = ((($80)) + 36|0);
 HEAP32[$81>>2] = 1;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _e_forward_1031($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = +HEAPF64[$1>>3];
 $10 = $3;
 $11 = ((($10)) + 120|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 + $12;
 HEAPF64[$1>>3] = $13;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_abs((+$15)));
 $17 = $16 - 1.5707963267948966;
 $18 = (+Math_abs((+$17)));
 $19 = $18 <= 1.0E-10;
 if ($19) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  _pj_ctx_set_errno($21,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $22 = +HEAPF64[$1>>3];
  HEAPF64[$4>>3] = $22;
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = ((($1)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (+Math_sin((+$26)));
  $28 = $3;
  $29 = ((($28)) + 88|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+_pj_tsfn($24,$27,$30));
  $32 = (+Math_log((+$31)));
  $33 = -$32;
  $34 = ((($4)) + 8|0);
  HEAPF64[$34>>3] = $33;
  $35 = (+Math_sin(0.59602993955606354));
  $36 = $3;
  $37 = ((($36)) + 88|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+_pj_tsfn(0.59602993955606354,$35,$38));
  $40 = (+Math_log((+$39)));
  $41 = -$40;
  $5 = $41;
  $42 = ((($4)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $5;
  $45 = $43 - $44;
  $46 = (+Math_tan(0.52359877559829882));
  $47 = $45 * $46;
  $6 = $47;
  $48 = +HEAPF64[$4>>3];
  $49 = -$48;
  $50 = $6;
  $51 = $49 - $50;
  $52 = $51 + -2.1144663887911301;
  $7 = $52;
  $53 = $7;
  $54 = (+Math_cos(0.52359877559829882));
  $55 = $53 * $54;
  $56 = (+Math_sin(0.52359877559829882));
  $57 = $55 * $56;
  $58 = ((($4)) + 8|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $57 + $59;
  $8 = $60;
  $61 = $3;
  $62 = HEAP32[$61>>2]|0;
  $63 = $8;
  $64 = -$63;
  $65 = (+Math_exp((+$64)));
  $66 = $3;
  $67 = ((($66)) + 88|0);
  $68 = +HEAPF64[$67>>3];
  $69 = (+_pj_phi2($62,$65,$68));
  $8 = $69;
  $70 = $8;
  $71 = $70 - 0.59602993955606354;
  $72 = 57.295779513082323 * $71;
  $73 = $72 * 5.0;
  $74 = (+Math_cos(0.52359877559829882));
  $75 = $73 / $74;
  $76 = 80.0 - $75;
  HEAPF64[$4>>3] = $76;
  $77 = $8;
  $78 = ((($1)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $77 - $79;
  $81 = 57.295779513082323 * $80;
  $82 = $81 * 15.0;
  $83 = (+Math_sin(0.52359877559829882));
  $84 = $82 / $83;
  $85 = 60.0 + $84;
  $86 = ((($4)) + 8|0);
  HEAPF64[$86>>3] = $85;
  $87 = $3;
  $88 = ((($87)) + 56|0);
  HEAPF64[$88>>3] = 1.0;
  $89 = $3;
  $90 = ((($89)) + 136|0);
  HEAPF64[$90>>3] = 0.0;
  $91 = $3;
  $92 = ((($91)) + 144|0);
  HEAPF64[$92>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _s_inverse_1032($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 48|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $11 = $3;
 $12 = ((($11)) + 96|0);
 $13 = +HEAPF64[$12>>3];
 $14 = +HEAPF64[$1>>3];
 $15 = $14 / $13;
 HEAPF64[$1>>3] = $15;
 $16 = $3;
 $17 = ((($16)) + 96|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($1)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 / $18;
 HEAPF64[$19>>3] = $21;
 $22 = +HEAPF64[$1>>3];
 $23 = $22 - 80.0;
 $24 = 0.0034906585039886592 * $23;
 $25 = (+Math_cos(0.52359877559829882));
 $26 = $24 * $25;
 $27 = 0.59602993955606354 - $26;
 $5 = $27;
 $28 = $5;
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $30 - 60.0;
 $32 = 0.0011635528346628863 * $31;
 $33 = (+Math_sin(0.52359877559829882));
 $34 = $32 * $33;
 $35 = $28 - $34;
 $36 = ((($4)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = (+Math_tan(1.0834131331754802));
 $38 = (+Math_log((+$37)));
 $6 = $38;
 $39 = $5;
 $40 = 0.5 * $39;
 $41 = 0.78539816339744828 + $40;
 $42 = (+Math_tan((+$41)));
 $43 = (+Math_log((+$42)));
 $7 = $43;
 $44 = ((($4)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = 0.5 * $45;
 $47 = 0.78539816339744828 + $46;
 $48 = (+Math_tan((+$47)));
 $49 = (+Math_log((+$48)));
 $8 = $49;
 $50 = $8;
 $51 = $6;
 $52 = $50 - $51;
 $53 = (+Math_tan(0.52359877559829882));
 $54 = $52 * $53;
 $9 = $54;
 $55 = $7;
 $56 = $8;
 $57 = $55 - $56;
 $58 = (+Math_cos(0.52359877559829882));
 $59 = (+Math_sin(0.52359877559829882));
 $60 = $58 * $59;
 $61 = $57 / $60;
 $10 = $61;
 $62 = $9;
 $63 = $10;
 $64 = $62 + $63;
 $65 = -2.1144663887911301 - $64;
 HEAPF64[$4>>3] = $65;
 $66 = $3;
 $67 = ((($66)) + 36|0);
 HEAP32[$67>>2] = 1;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _s_forward_1033($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 32|0;
 $3 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $9 = +HEAPF64[$1>>3];
 $10 = $3;
 $11 = ((($10)) + 120|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 + $12;
 HEAPF64[$1>>3] = $13;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_abs((+$15)));
 $17 = $16 - 1.5707963267948966;
 $18 = (+Math_abs((+$17)));
 $19 = $18 <= 1.0E-10;
 if ($19) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  _pj_ctx_set_errno($21,-20);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $22 = +HEAPF64[$1>>3];
  HEAPF64[$4>>3] = $22;
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = 0.5 * $24;
  $26 = 0.78539816339744828 + $25;
  $27 = (+Math_tan((+$26)));
  $28 = (+Math_log((+$27)));
  $29 = ((($4)) + 8|0);
  HEAPF64[$29>>3] = $28;
  $30 = (+Math_tan(1.0834131331754802));
  $31 = (+Math_log((+$30)));
  $5 = $31;
  $32 = ((($4)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $5;
  $35 = $33 - $34;
  $36 = (+Math_tan(0.52359877559829882));
  $37 = $35 * $36;
  $6 = $37;
  $38 = +HEAPF64[$4>>3];
  $39 = -$38;
  $40 = $6;
  $41 = $39 - $40;
  $42 = $41 + -2.1144663887911301;
  $7 = $42;
  $43 = $7;
  $44 = (+Math_cos(0.52359877559829882));
  $45 = $43 * $44;
  $46 = (+Math_sin(0.52359877559829882));
  $47 = $45 * $46;
  $48 = ((($4)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $47 + $49;
  $8 = $50;
  $51 = $8;
  $52 = -$51;
  $53 = (+Math_exp((+$52)));
  $54 = (+Math_atan((+$53)));
  $55 = 2.0 * $54;
  $56 = 1.5707963267948966 - $55;
  $8 = $56;
  $57 = $8;
  $58 = $57 - 0.59602993955606354;
  $59 = 57.295779513082323 * $58;
  $60 = $59 * 5.0;
  $61 = (+Math_cos(0.52359877559829882));
  $62 = $60 / $61;
  $63 = 80.0 - $62;
  HEAPF64[$4>>3] = $63;
  $64 = $8;
  $65 = ((($1)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $64 - $66;
  $68 = 57.295779513082323 * $67;
  $69 = $68 * 15.0;
  $70 = (+Math_sin(0.52359877559829882));
  $71 = $69 / $70;
  $72 = 60.0 + $71;
  $73 = ((($4)) + 8|0);
  HEAPF64[$73>>3] = $72;
  $74 = $3;
  $75 = ((($74)) + 56|0);
  HEAPF64[$75>>3] = 1.0;
  $76 = $3;
  $77 = ((($76)) + 136|0);
  HEAPF64[$77>>3] = 0.0;
  $78 = $3;
  $79 = ((($78)) + 144|0);
  HEAPF64[$79>>3] = 0.0;
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pj_get_default_fileapi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8148|0);
}
function _pj_stdio_fopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = $6;
 $11 = (_fopen($9,$10)|0);
 $8 = $11;
 $12 = $8;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $14 = (_malloc(8)|0);
  $7 = $14;
  $15 = $8;
  $16 = $7;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = $4;
  $19 = $7;
  HEAP32[$19>>2] = $18;
  $20 = $7;
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pj_stdio_fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $7;
 $8 = $9;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $8;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_fread($10,$11,$12,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _pj_stdio_fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_fseek($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _pj_stdio_ftell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_ftell($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pj_stdio_fclose($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 (_fclose($6)|0);
 $7 = $2;
 _free($7);
 STACKTOP = sp;return;
}
function _pj_ctx_fopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = (FUNCTION_TABLE_iiii[$9 & 511]($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _pj_ctx_fread($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = (FUNCTION_TABLE_iiiii[$14 & 255]($15,$16,$17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function _pj_ctx_fseek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = (FUNCTION_TABLE_iiii[$12 & 511]($13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _pj_ctx_ftell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (FUNCTION_TABLE_ii[$8 & 255]($9)|0);
 STACKTOP = sp;return ($10|0);
}
function _pj_ctx_fclose($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 FUNCTION_TABLE_vi[$8 & 511]($9);
 STACKTOP = sp;return;
}
function _pj_ctx_fgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = $8;
 $14 = (_pj_ctx_ftell($12,$13)|0);
 $9 = $14;
 $15 = $7;
 $16 = (($15) - 1)|0;
 $17 = $6;
 $18 = (($17) + ($16)|0);
 HEAP8[$18>>0] = 0;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = (($21) - 1)|0;
 $23 = $8;
 $24 = (_pj_ctx_fread($19,$20,1,$22,$23)|0);
 $10 = $24;
 $25 = $10;
 $26 = ($25|0)==(0);
 if ($26) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $27 = $10;
 $28 = $7;
 $29 = ($27>>>0)<($28>>>0);
 if ($29) {
  $30 = $10;
  $31 = $6;
  $32 = (($31) + ($30)|0);
  HEAP8[$32>>0] = 0;
 }
 $11 = 0;
 while(1) {
  $33 = $11;
  $34 = $7;
  $35 = (($34) - 2)|0;
  $36 = ($33|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $11;
  $38 = $6;
  $39 = (($38) + ($37)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)==(10);
  $43 = $11;
  $44 = (($43) + 1)|0;
  if ($42) {
   label = 8;
   break;
  }
  $11 = $44;
 }
 if ((label|0) == 8) {
  $45 = $6;
  $46 = (($45) + ($44)|0);
  HEAP8[$46>>0] = 0;
  $47 = $5;
  $48 = $8;
  $49 = $9;
  $50 = $11;
  $51 = (($49) + ($50))|0;
  $52 = (($51) + 1)|0;
  (_pj_ctx_fseek($47,$48,$52,0)|0);
 }
 $53 = $6;
 $4 = $53;
 $54 = $4;
 STACKTOP = sp;return ($54|0);
}
function _pj_gc_readcatalog($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = $4;
 $11 = (_pj_open_lib($9,$10,19193)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $2 = 0;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 $14 = $3;
 $15 = $5;
 (_pj_ctx_fgets($14,$8,301,$15)|0);
 $16 = (_calloc(1,56)|0);
 $6 = $16;
 $17 = $6;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $2 = 0;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 $19 = $4;
 $20 = (___strdup($19)|0);
 $21 = $6;
 HEAP32[$21>>2] = $20;
 $7 = 10;
 $22 = $7;
 $23 = $22<<6;
 $24 = (_malloc($23)|0);
 $25 = $6;
 $26 = ((($25)) + 44|0);
 HEAP32[$26>>2] = $24;
 while(1) {
  $27 = $3;
  $28 = $5;
  $29 = $6;
  $30 = ((($29)) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $6;
  $33 = ((($32)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) + ($34<<6)|0);
  $36 = (_pj_gc_readentry($27,$28,$35)|0);
  $37 = ($36|0)==(0);
  $38 = $6;
  if (!($37)) {
   label = 10;
   break;
  }
  $39 = ((($38)) + 40|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $6;
  $43 = ((($42)) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $7;
  $46 = ($44|0)==($45|0);
  if (!($46)) {
   continue;
  }
  $47 = $7;
  $48 = $47<<1;
  $7 = $48;
  $49 = $6;
  $50 = ((($49)) + 44|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $7;
  $53 = $52<<6;
  $54 = (_realloc($51,$53)|0);
  $55 = $6;
  $56 = ((($55)) + 44|0);
  HEAP32[$56>>2] = $54;
  $57 = $6;
  $58 = ((($57)) + 44|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if ($60) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $2 = 0;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 10) {
  $2 = $38;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _pj_gc_readentry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = 0;
 $10 = $5;
 dest=$10; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = $3;
 $12 = $4;
 $13 = (_pj_gc_read_csv_line($11,$12,$6,30)|0);
 $7 = $13;
 $14 = $7;
 $15 = ($14|0)<(5);
 if ($15) {
  $9 = 1;
  $16 = $7;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $3;
   _pj_log($18,1,19195,$vararg_buffer);
  }
 } else {
  $19 = $5;
  dest=$19; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $20 = HEAP32[$6>>2]|0;
  $21 = (___strdup($20)|0);
  $22 = $5;
  $23 = ((($22)) + 48|0);
  HEAP32[$23>>2] = $21;
  $24 = $3;
  $25 = ((($6)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+_dmstor_ctx($24,$26,0));
  $28 = $5;
  HEAPF64[$28>>3] = $27;
  $29 = $3;
  $30 = ((($6)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_dmstor_ctx($29,$31,0));
  $33 = $5;
  $34 = ((($33)) + 8|0);
  HEAPF64[$34>>3] = $32;
  $35 = $3;
  $36 = ((($6)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+_dmstor_ctx($35,$37,0));
  $39 = $5;
  $40 = ((($39)) + 16|0);
  HEAPF64[$40>>3] = $38;
  $41 = $3;
  $42 = ((($6)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (+_dmstor_ctx($41,$43,0));
  $45 = $5;
  $46 = ((($45)) + 24|0);
  HEAPF64[$46>>3] = $44;
  $47 = $7;
  $48 = ($47|0)>(5);
  if ($48) {
   $49 = ((($6)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (_atoi($50)|0);
   $52 = $5;
   $53 = ((($52)) + 32|0);
   HEAP32[$53>>2] = $51;
  }
  $54 = $7;
  $55 = ($54|0)>(6);
  if ($55) {
   $56 = $3;
   $57 = ((($6)) + 24|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (+_pj_gc_parsedate($56,$58));
   $60 = $5;
   $61 = ((($60)) + 40|0);
   HEAPF64[$61>>3] = $59;
  }
 }
 $8 = 0;
 while(1) {
  $62 = $8;
  $63 = $7;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   break;
  }
  $65 = $8;
  $66 = (($6) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
 }
 $70 = $9;
 STACKTOP = sp;return ($70|0);
}
function _pj_gc_read_csv_line($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $9 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $13 = $5;
  $14 = $6;
  $15 = (_pj_ctx_fgets($13,$9,301,$14)|0);
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 19;
   break;
  }
  $10 = $9;
  $11 = 0;
  while(1) {
   $17 = $10;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = (_isspace($19)|0);
   $21 = ($20|0)!=(0);
   $22 = $10;
   if (!($21)) {
    break;
   }
   $23 = ((($22)) + 1|0);
   $10 = $23;
  }
  $24 = HEAP8[$22>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(35);
  if ($26) {
   continue;
  }
  $27 = $10;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(0);
  if (!($30)) {
   break;
  }
 }
 if ((label|0) == 19) {
  $4 = 0;
  $62 = $4;
  STACKTOP = sp;return ($62|0);
 }
 while(1) {
  $31 = $11;
  $32 = $8;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   break;
  }
  $38 = $10;
  $12 = $38;
  while(1) {
   $39 = $10;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $10;
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)!=(44);
    $63 = $46;
   } else {
    $63 = 0;
   }
   $47 = $10;
   if (!($63)) {
    break;
   }
   $48 = ((($47)) + 1|0);
   $10 = $48;
  }
  $49 = HEAP8[$47>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)==(44);
  if ($51) {
   $52 = $10;
   HEAP8[$52>>0] = 0;
   $53 = $10;
   $54 = ((($53)) + 1|0);
   $10 = $54;
  }
  $55 = $12;
  $56 = (___strdup($55)|0);
  $57 = $11;
  $58 = (($57) + 1)|0;
  $11 = $58;
  $59 = $7;
  $60 = (($59) + ($57<<2)|0);
  HEAP32[$60>>2] = $56;
 }
 $61 = $11;
 $4 = $61;
 $62 = $4;
 STACKTOP = sp;return ($62|0);
}
function _pj_gc_parsedate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = (_strlen($8)|0);
 $10 = ($9|0)==(10);
 if ($10) {
  $11 = $4;
  $12 = ((($11)) + 4|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(45);
  if ($15) {
   $16 = $4;
   $17 = ((($16)) + 7|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(45);
   if ($20) {
    $21 = $4;
    $22 = (_atoi($21)|0);
    $5 = $22;
    $23 = $4;
    $24 = ((($23)) + 5|0);
    $25 = (_atoi($24)|0);
    $6 = $25;
    $26 = $4;
    $27 = ((($26)) + 8|0);
    $28 = (_atoi($27)|0);
    $7 = $28;
    $29 = $5;
    $30 = (+($29|0));
    $31 = $6;
    $32 = (($31) - 1)|0;
    $33 = ($32*31)|0;
    $34 = $7;
    $35 = (($34) - 1)|0;
    $36 = (($33) + ($35))|0;
    $37 = (+($36|0));
    $38 = $37 / 372.0;
    $39 = $30 + $38;
    $2 = $39;
    $42 = $2;
    STACKTOP = sp;return (+$42);
   }
  }
 }
 $40 = $4;
 $41 = (+_pj_atof($40));
 $2 = $41;
 $42 = $2;
 STACKTOP = sp;return (+$42);
}
function _pj_gc_findcatalog($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 _pj_acquire_lock();
 $6 = HEAP32[6064]|0;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $5;
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = (_strcmp($10,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 4;
   break;
  }
  $15 = $5;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $5 = $17;
 }
 if ((label|0) == 4) {
  _pj_release_lock();
  $14 = $5;
  $2 = $14;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 _pj_release_lock();
 $18 = $3;
 $19 = $4;
 $20 = (_pj_gc_readcatalog($18,$19)|0);
 $5 = $20;
 $21 = $5;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 } else {
  _pj_acquire_lock();
  $23 = HEAP32[6064]|0;
  $24 = $5;
  $25 = ((($24)) + 48|0);
  HEAP32[$25>>2] = $23;
  $26 = $5;
  HEAP32[6064] = $26;
  _pj_release_lock();
  $27 = $5;
  $2 = $27;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _pj_gc_apply_gridshift($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0;
 var $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy8 = sp + 168|0;
 $$byval_copy7 = sp + 152|0;
 $$byval_copy6 = sp + 136|0;
 $$byval_copy = sp + 120|0;
 $vararg_buffer2 = sp + 104|0;
 $vararg_buffer = sp + 88|0;
 $17 = sp + 72|0;
 $18 = sp + 56|0;
 $19 = sp + 40|0;
 $22 = sp + 16|0;
 $23 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $24 = $8;
 $25 = ((($24)) + 308|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $8;
  $29 = HEAP32[$28>>2]|0;
  $30 = $8;
  $31 = ((($30)) + 304|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_pj_gc_findcatalog($29,$32)|0);
  $34 = $8;
  $35 = ((($34)) + 308|0);
  HEAP32[$35>>2] = $33;
  $36 = $8;
  $37 = ((($36)) + 308|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $40 = $8;
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $7 = $42;
   $286 = $7;
   STACKTOP = sp;return ($286|0);
  }
 }
 $43 = $8;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$44>>2] = 0;
 $15 = 0;
 L6: while(1) {
  $45 = $15;
  $46 = $10;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   label = 38;
   break;
  }
  $48 = $15;
  $49 = $11;
  $50 = Math_imul($48, $49)|0;
  $16 = $50;
  $51 = $16;
  $52 = $13;
  $53 = (($52) + ($51<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = ((($17)) + 8|0);
  HEAPF64[$55>>3] = $54;
  $56 = $16;
  $57 = $12;
  $58 = (($57) + ($56<<3)|0);
  $59 = +HEAPF64[$58>>3];
  HEAPF64[$17>>3] = $59;
  $60 = $8;
  $61 = ((($60)) + 368|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   label = 11;
  } else {
   $64 = +HEAPF64[$17>>3];
   $65 = $8;
   $66 = ((($65)) + 376|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $64 < $67;
   if ($68) {
    label = 11;
   } else {
    $69 = +HEAPF64[$17>>3];
    $70 = $8;
    $71 = ((($70)) + 376|0);
    $72 = ((($71)) + 16|0);
    $73 = +HEAPF64[$72>>3];
    $74 = $69 > $73;
    if ($74) {
     label = 11;
    } else {
     $75 = ((($17)) + 8|0);
     $76 = +HEAPF64[$75>>3];
     $77 = $8;
     $78 = ((($77)) + 376|0);
     $79 = ((($78)) + 8|0);
     $80 = +HEAPF64[$79>>3];
     $81 = $76 < $80;
     if ($81) {
      label = 11;
     } else {
      $82 = ((($17)) + 8|0);
      $83 = +HEAPF64[$82>>3];
      $84 = $8;
      $85 = ((($84)) + 376|0);
      $86 = ((($85)) + 8|0);
      $87 = +HEAPF64[$86>>3];
      $88 = $83 > $87;
      if ($88) {
       label = 11;
      }
     }
    }
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $89 = $8;
   $90 = HEAP32[$89>>2]|0;
   $91 = $8;
   $92 = ((($91)) + 308|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $8;
   $95 = ((($94)) + 312|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $8;
   $98 = ((($97)) + 376|0);
   $99 = $8;
   $100 = ((($99)) + 408|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$17+12>>2]|0;
   $101 = (_pj_gc_findgrid($90,$93,1,$$byval_copy,$96,$98,$100)|0);
   $102 = $8;
   $103 = ((($102)) + 368|0);
   HEAP32[$103>>2] = $101;
  }
  $104 = $8;
  $105 = ((($104)) + 368|0);
  $106 = HEAP32[$105>>2]|0;
  $21 = $106;
  $107 = $21;
  $108 = ((($107)) + 28|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(0|0);
  if (!($110)) {
   label = 13;
   break;
  }
  $111 = $21;
  $112 = ((($111)) + 20|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($113)) + 120|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)==(0|0);
  if ($116) {
   $117 = $8;
   $118 = HEAP32[$117>>2]|0;
   $119 = $21;
   $120 = (_pj_gridinfo_load($118,$119)|0);
   $121 = ($120|0)!=(0);
   if (!($121)) {
    label = 16;
    break;
   }
  }
  $124 = $9;
  $125 = $21;
  $126 = ((($125)) + 20|0);
  $127 = HEAP32[$126>>2]|0;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$17+12>>2]|0;
  _nad_cvt($22,$$byval_copy6,$124,$127);
  ;HEAP32[$18>>2]=HEAP32[$22>>2]|0;HEAP32[$18+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[$22+12>>2]|0;
  $128 = +HEAPF64[$18>>3];
  $129 = $128 == inf;
  $130 = $8;
  do {
   if ($129) {
    $131 = HEAP32[$130>>2]|0;
    $132 = ((($131)) + 4|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)>=(2);
    if ($134) {
     $135 = $8;
     $136 = HEAP32[$135>>2]|0;
     $137 = $16;
     $138 = $12;
     $139 = (($138) + ($137<<3)|0);
     $140 = +HEAPF64[$139>>3];
     $141 = $140 * 57.295779513082323;
     $142 = $16;
     $143 = $13;
     $144 = (($143) + ($142<<3)|0);
     $145 = +HEAPF64[$144>>3];
     $146 = $145 * 57.295779513082323;
     HEAPF64[$vararg_buffer>>3] = $141;
     $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
     HEAPF64[$vararg_ptr1>>3] = $146;
     _pj_log($136,2,19569,$vararg_buffer);
    }
   } else {
    $147 = ((($130)) + 312|0);
    $148 = +HEAPF64[$147>>3];
    $149 = $148 == 0.0;
    if ($149) {
     $150 = ((($18)) + 8|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $16;
     $153 = $13;
     $154 = (($153) + ($152<<3)|0);
     HEAPF64[$154>>3] = $151;
     $155 = +HEAPF64[$18>>3];
     $156 = $16;
     $157 = $12;
     $158 = (($157) + ($156<<3)|0);
     HEAPF64[$158>>3] = $155;
     break;
    }
    $159 = $8;
    $160 = ((($159)) + 320|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)==(0|0);
    if ($162) {
     label = 27;
    } else {
     $163 = +HEAPF64[$17>>3];
     $164 = $8;
     $165 = ((($164)) + 328|0);
     $166 = +HEAPF64[$165>>3];
     $167 = $163 < $166;
     if ($167) {
      label = 27;
     } else {
      $168 = +HEAPF64[$17>>3];
      $169 = $8;
      $170 = ((($169)) + 328|0);
      $171 = ((($170)) + 16|0);
      $172 = +HEAPF64[$171>>3];
      $173 = $168 > $172;
      if ($173) {
       label = 27;
      } else {
       $174 = ((($17)) + 8|0);
       $175 = +HEAPF64[$174>>3];
       $176 = $8;
       $177 = ((($176)) + 328|0);
       $178 = ((($177)) + 8|0);
       $179 = +HEAPF64[$178>>3];
       $180 = $175 < $179;
       if ($180) {
        label = 27;
       } else {
        $181 = ((($17)) + 8|0);
        $182 = +HEAPF64[$181>>3];
        $183 = $8;
        $184 = ((($183)) + 328|0);
        $185 = ((($184)) + 8|0);
        $186 = +HEAPF64[$185>>3];
        $187 = $182 > $186;
        if ($187) {
         label = 27;
        }
       }
      }
     }
    }
    if ((label|0) == 27) {
     label = 0;
     $188 = $8;
     $189 = HEAP32[$188>>2]|0;
     $190 = $8;
     $191 = ((($190)) + 308|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $8;
     $194 = ((($193)) + 312|0);
     $195 = +HEAPF64[$194>>3];
     $196 = $8;
     $197 = ((($196)) + 328|0);
     $198 = $8;
     $199 = ((($198)) + 360|0);
     ;HEAP32[$$byval_copy7>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$17+12>>2]|0;
     $200 = (_pj_gc_findgrid($189,$192,0,$$byval_copy7,$195,$197,$199)|0);
     $201 = $8;
     $202 = ((($201)) + 320|0);
     HEAP32[$202>>2] = $200;
    }
    $203 = $8;
    $204 = ((($203)) + 320|0);
    $205 = HEAP32[$204>>2]|0;
    $21 = $205;
    $206 = $21;
    $207 = ((($206)) + 28|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)==(0|0);
    if (!($209)) {
     label = 29;
     break L6;
    }
    $210 = $21;
    $211 = ((($210)) + 20|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ((($212)) + 120|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($214|0)==(0|0);
    if ($215) {
     $216 = $8;
     $217 = HEAP32[$216>>2]|0;
     $218 = $21;
     $219 = (_pj_gridinfo_load($217,$218)|0);
     $220 = ($219|0)!=(0);
     if (!($220)) {
      label = 32;
      break L6;
     }
    }
    $223 = $9;
    $224 = $21;
    $225 = ((($224)) + 20|0);
    $226 = HEAP32[$225>>2]|0;
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$17+12>>2]|0;
    _nad_cvt($23,$$byval_copy8,$223,$226);
    ;HEAP32[$19>>2]=HEAP32[$23>>2]|0;HEAP32[$19+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$23+12>>2]|0;
    $227 = +HEAPF64[$19>>3];
    $228 = $227 == inf;
    $229 = $8;
    if (!($228)) {
     $246 = ((($229)) + 312|0);
     $247 = +HEAPF64[$246>>3];
     $248 = $8;
     $249 = ((($248)) + 360|0);
     $250 = +HEAPF64[$249>>3];
     $251 = $247 - $250;
     $252 = $8;
     $253 = ((($252)) + 408|0);
     $254 = +HEAPF64[$253>>3];
     $255 = $8;
     $256 = ((($255)) + 360|0);
     $257 = +HEAPF64[$256>>3];
     $258 = $254 - $257;
     $259 = $251 / $258;
     $20 = $259;
     $260 = $20;
     $261 = ((($18)) + 8|0);
     $262 = +HEAPF64[$261>>3];
     $263 = $260 * $262;
     $264 = $20;
     $265 = 1.0 - $264;
     $266 = ((($19)) + 8|0);
     $267 = +HEAPF64[$266>>3];
     $268 = $265 * $267;
     $269 = $263 + $268;
     $270 = $16;
     $271 = $13;
     $272 = (($271) + ($270<<3)|0);
     HEAPF64[$272>>3] = $269;
     $273 = $20;
     $274 = +HEAPF64[$18>>3];
     $275 = $273 * $274;
     $276 = $20;
     $277 = 1.0 - $276;
     $278 = +HEAPF64[$19>>3];
     $279 = $277 * $278;
     $280 = $275 + $279;
     $281 = $16;
     $282 = $12;
     $283 = (($282) + ($281<<3)|0);
     HEAPF64[$283>>3] = $280;
     break;
    }
    $230 = HEAP32[$229>>2]|0;
    $231 = ((($230)) + 4|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ($232|0)>=(2);
    if ($233) {
     $234 = $8;
     $235 = HEAP32[$234>>2]|0;
     $236 = $16;
     $237 = $12;
     $238 = (($237) + ($236<<3)|0);
     $239 = +HEAPF64[$238>>3];
     $240 = $239 * 57.295779513082323;
     $241 = $16;
     $242 = $13;
     $243 = (($242) + ($241<<3)|0);
     $244 = +HEAPF64[$243>>3];
     $245 = $244 * 57.295779513082323;
     HEAPF64[$vararg_buffer2>>3] = $240;
     $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
     HEAPF64[$vararg_ptr5>>3] = $245;
     _pj_log($235,2,19569,$vararg_buffer2);
    }
   }
  } while(0);
  $284 = $15;
  $285 = (($284) + 1)|0;
  $15 = $285;
 }
 if ((label|0) == 13) {
  ___assert_fail((19223|0),(19241|0),141,(19258|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  $122 = $8;
  $123 = HEAP32[$122>>2]|0;
  _pj_ctx_set_errno($123,-38);
  $7 = -38;
  $286 = $7;
  STACKTOP = sp;return ($286|0);
 }
 else if ((label|0) == 29) {
  ___assert_fail((19223|0),(19241|0),185,(19258|0));
  // unreachable;
 }
 else if ((label|0) == 32) {
  $221 = $8;
  $222 = HEAP32[$221>>2]|0;
  _pj_ctx_set_errno($222,-38);
  $7 = -38;
  $286 = $7;
  STACKTOP = sp;return ($286|0);
 }
 else if ((label|0) == 38) {
  $7 = 0;
  $286 = $7;
  STACKTOP = sp;return ($286|0);
 }
 return (0)|0;
}
function _pj_gc_findgrid($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $17 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = 0;
 $14 = 0;
 L1: while(1) {
  $18 = $14;
  $19 = $9;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $9;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $14;
  $27 = (($25) + ($26<<6)|0);
  $15 = $27;
  $28 = $10;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $15;
   $31 = ((($30)) + 40|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $11;
   $34 = $32 < $33;
   if (!($34)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $35 = $10;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     $37 = $15;
     $38 = ((($37)) + 40|0);
     $39 = +HEAPF64[$38>>3];
     $40 = $11;
     $41 = $39 > $40;
     if ($41) {
      break;
     }
    }
    $42 = +HEAPF64[$3>>3];
    $43 = $15;
    $44 = +HEAPF64[$43>>3];
    $45 = $42 < $44;
    if (!($45)) {
     $46 = +HEAPF64[$3>>3];
     $47 = $15;
     $48 = ((($47)) + 16|0);
     $49 = +HEAPF64[$48>>3];
     $50 = $46 > $49;
     if (!($50)) {
      $51 = ((($3)) + 8|0);
      $52 = +HEAPF64[$51>>3];
      $53 = $15;
      $54 = ((($53)) + 8|0);
      $55 = +HEAPF64[$54>>3];
      $56 = $52 < $55;
      if (!($56)) {
       $57 = ((($3)) + 8|0);
       $58 = +HEAPF64[$57>>3];
       $59 = $15;
       $60 = ((($59)) + 24|0);
       $61 = +HEAPF64[$60>>3];
       $62 = $58 > $61;
       if (!($62)) {
        $63 = $15;
        $64 = ((($63)) + 56|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($65|0)==(-1);
        if (!($66)) {
         break L1;
        }
       }
      }
     }
    }
   }
  } while(0);
  $67 = $14;
  $68 = (($67) + 1)|0;
  $14 = $68;
 }
 $69 = $14;
 $70 = $9;
 $71 = ((($70)) + 40|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69|0)==($72|0);
 $74 = $13;
 $75 = ($74|0)!=(0|0);
 if ($73) {
  if ($75) {
   $76 = $13;
   HEAPF64[$76>>3] = 0.0;
  }
  $77 = $12;
  $78 = ($77|0)!=(0|0);
  if ($78) {
   $79 = $12;
   ;HEAP32[$79>>2]=0|0;HEAP32[$79+4>>2]=0|0;HEAP32[$79+8>>2]=0|0;HEAP32[$79+12>>2]=0|0;HEAP32[$79+16>>2]=0|0;HEAP32[$79+20>>2]=0|0;HEAP32[$79+24>>2]=0|0;HEAP32[$79+28>>2]=0|0;
  }
  $7 = 0;
  $102 = $7;
  STACKTOP = sp;return ($102|0);
 }
 if ($75) {
  $80 = $15;
  $81 = ((($80)) + 40|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $13;
  HEAPF64[$83>>3] = $82;
 }
 $84 = $15;
 $85 = ((($84)) + 52|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)==(0|0);
 if ($87) {
  $16 = 0;
  HEAP32[$17>>2] = 0;
  $88 = $8;
  $89 = $15;
  $90 = ((($89)) + 48|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_pj_gridlist_from_nadgrids($88,$91,$17)|0);
  $16 = $92;
  $93 = HEAP32[$17>>2]|0;
  $94 = ($93|0)==(1);
  if ($94) {
   $95 = $16;
   $96 = HEAP32[$95>>2]|0;
   $97 = $15;
   $98 = ((($97)) + 52|0);
   HEAP32[$98>>2] = $96;
  }
 }
 $99 = $15;
 $100 = ((($99)) + 52|0);
 $101 = HEAP32[$100>>2]|0;
 $7 = $101;
 $102 = $7;
 STACKTOP = sp;return ($102|0);
}
function _nad_cvt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy4 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $vararg_buffer2 = sp + 104|0;
 $vararg_buffer = sp + 96|0;
 $6 = sp + 80|0;
 $7 = sp + 64|0;
 $8 = sp + 48|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $12 = sp;
 $4 = $2;
 $5 = $3;
 $13 = +HEAPF64[$1>>3];
 $14 = $13 == inf;
 if ($14) {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
  STACKTOP = sp;return;
 }
 ;HEAP32[$7>>2]=HEAP32[$1>>2]|0;HEAP32[$7+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$1+12>>2]|0;
 $15 = $5;
 $16 = ((($15)) + 80|0);
 $17 = +HEAPF64[$16>>3];
 $18 = +HEAPF64[$7>>3];
 $19 = $18 - $17;
 HEAPF64[$7>>3] = $19;
 $20 = $5;
 $21 = ((($20)) + 80|0);
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($7)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 - $23;
 HEAPF64[$24>>3] = $26;
 $27 = +HEAPF64[$7>>3];
 $28 = $27 - 3.1415926535897931;
 $29 = (+_adjlon($28));
 $30 = $29 + 3.1415926535897931;
 HEAPF64[$7>>3] = $30;
 $31 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
 _nad_intr($8,$$byval_copy,$31);
 ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
 $32 = $4;
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $11 = 9;
   $34 = +HEAPF64[$6>>3];
   $35 = $34 == inf;
   if ($35) {
    ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
    STACKTOP = sp;return;
   }
   $36 = +HEAPF64[$7>>3];
   $37 = +HEAPF64[$6>>3];
   $38 = $36 + $37;
   HEAPF64[$6>>3] = $38;
   $39 = ((($7)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = ((($6)) + 8|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $40 - $42;
   $44 = ((($6)) + 8|0);
   HEAPF64[$44>>3] = $43;
   while(1) {
    $45 = $5;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$6+12>>2]|0;
    _nad_intr($12,$$byval_copy4,$45);
    ;HEAP32[$9>>2]=HEAP32[$12>>2]|0;HEAP32[$9+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$12+12>>2]|0;
    $46 = +HEAPF64[$9>>3];
    $47 = $46 == inf;
    if ($47) {
     label = 8;
     break;
    }
    $51 = +HEAPF64[$6>>3];
    $52 = +HEAPF64[$9>>3];
    $53 = $51 - $52;
    $54 = +HEAPF64[$7>>3];
    $55 = $53 - $54;
    HEAPF64[$10>>3] = $55;
    $56 = +HEAPF64[$6>>3];
    $57 = $56 - $55;
    HEAPF64[$6>>3] = $57;
    $58 = ((($6)) + 8|0);
    $59 = +HEAPF64[$58>>3];
    $60 = ((($9)) + 8|0);
    $61 = +HEAPF64[$60>>3];
    $62 = $59 + $61;
    $63 = ((($7)) + 8|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $62 - $64;
    $66 = ((($10)) + 8|0);
    HEAPF64[$66>>3] = $65;
    $67 = ((($6)) + 8|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $68 - $65;
    HEAPF64[$67>>3] = $69;
    $70 = $11;
    $71 = (($70) + -1)|0;
    $11 = $71;
    $72 = ($70|0)!=(0);
    if (!($72)) {
     break;
    }
    $73 = +HEAPF64[$10>>3];
    $74 = (+Math_abs((+$73)));
    $75 = $74 > 9.9999999999999998E-13;
    if (!($75)) {
     break;
    }
    $76 = ((($10)) + 8|0);
    $77 = +HEAPF64[$76>>3];
    $78 = (+Math_abs((+$77)));
    $79 = $78 > 9.9999999999999998E-13;
    if (!($79)) {
     break;
    }
   }
   if ((label|0) == 8) {
    $48 = (_getenv((19476|0))|0);
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = HEAP32[2195]|0;
     (_fprintf($50,19280,$vararg_buffer)|0);
    }
   }
   $80 = $11;
   $81 = ($80|0)<(0);
   if (!($81)) {
    $86 = +HEAPF64[$6>>3];
    $87 = $5;
    $88 = ((($87)) + 80|0);
    $89 = +HEAPF64[$88>>3];
    $90 = $86 + $89;
    $91 = (+_adjlon($90));
    HEAPF64[$1>>3] = $91;
    $92 = ((($6)) + 8|0);
    $93 = +HEAPF64[$92>>3];
    $94 = $5;
    $95 = ((($94)) + 80|0);
    $96 = ((($95)) + 8|0);
    $97 = +HEAPF64[$96>>3];
    $98 = $93 + $97;
    $99 = ((($1)) + 8|0);
    HEAPF64[$99>>3] = $98;
    break;
   }
   $82 = (_getenv((19476|0))|0);
   $83 = ($82|0)!=(0|0);
   if ($83) {
    $84 = HEAP32[2195]|0;
    (_fprintf($84,19370,$vararg_buffer2)|0);
   }
   $85 = ((($6)) + 8|0);
   HEAPF64[$85>>3] = inf;
   HEAPF64[$6>>3] = inf;
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $100 = +HEAPF64[$6>>3];
   $101 = $100 == inf;
   if ($101) {
    ;HEAP32[$1>>2]=HEAP32[$6>>2]|0;HEAP32[$1+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$6+12>>2]|0;
    break;
   } else {
    $102 = +HEAPF64[$6>>3];
    $103 = +HEAPF64[$1>>3];
    $104 = $103 - $102;
    HEAPF64[$1>>3] = $104;
    $105 = ((($6)) + 8|0);
    $106 = +HEAPF64[$105>>3];
    $107 = ((($1)) + 8|0);
    $108 = +HEAPF64[$107>>3];
    $109 = $108 + $106;
    HEAPF64[$107>>3] = $109;
    break;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 STACKTOP = sp;return;
}
function _nad_ctable_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 (_pj_ctx_fseek($8,$9,128,0)|0);
 $10 = $5;
 $11 = ((($10)) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = ((($13)) + 112|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($12, $16)|0;
 $7 = $17;
 $18 = $7;
 $19 = $18<<3;
 $20 = (_pj_malloc($19)|0);
 $21 = $5;
 $22 = ((($21)) + 120|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 120|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = $4;
  $28 = $5;
  $29 = ((($28)) + 120|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  $32 = $6;
  $33 = (_pj_ctx_fread($27,$30,8,$31,$32)|0);
  $34 = $7;
  $35 = ($33|0)!=($34|0);
  if (!($35)) {
   $3 = 1;
   $43 = $3;
   STACKTOP = sp;return ($43|0);
  }
 }
 $36 = $5;
 $37 = ((($36)) + 120|0);
 $38 = HEAP32[$37>>2]|0;
 _pj_dalloc($38);
 $39 = $5;
 $40 = ((($39)) + 120|0);
 HEAP32[$40>>2] = 0;
 $41 = $4;
 _pj_log($41,1,19419,$vararg_buffer);
 $42 = $4;
 _pj_ctx_set_errno($42,-38);
 $3 = 0;
 $43 = $3;
 STACKTOP = sp;return ($43|0);
}
function _nad_ctable_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = (_pj_malloc(128)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $3;
  $11 = $5;
  $12 = $4;
  $13 = (_pj_ctx_fread($10,$11,128,1,$12)|0);
  $14 = ($13|0)!=(1);
  if (!($14)) {
   $16 = $5;
   $17 = ((($16)) + 112|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)<(1);
   if (!($19)) {
    $20 = $5;
    $21 = ((($20)) + 112|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)>(100000);
    if (!($23)) {
     $24 = $5;
     $25 = ((($24)) + 112|0);
     $26 = ((($25)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)<(1);
     if (!($28)) {
      $29 = $5;
      $30 = ((($29)) + 112|0);
      $31 = ((($30)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)>(100000);
      if (!($33)) {
       $35 = $5;
       $36 = (_strlen($35)|0);
       $37 = (($36) - 1)|0;
       $6 = $37;
       while(1) {
        $38 = $6;
        $39 = ($38|0)>(0);
        if (!($39)) {
         break;
        }
        $40 = $6;
        $41 = $5;
        $42 = (($41) + ($40)|0);
        $43 = HEAP8[$42>>0]|0;
        $44 = $43 << 24 >> 24;
        $45 = ($44|0)==(10);
        if (!($45)) {
         $46 = $6;
         $47 = $5;
         $48 = (($47) + ($46)|0);
         $49 = HEAP8[$48>>0]|0;
         $50 = $49 << 24 >> 24;
         $51 = ($50|0)==(32);
         if (!($51)) {
          break;
         }
        }
        $52 = $6;
        $53 = $5;
        $54 = (($53) + ($52)|0);
        HEAP8[$54>>0] = 0;
        $55 = $6;
        $56 = (($55) + -1)|0;
        $6 = $56;
       }
       $57 = $5;
       $58 = ((($57)) + 120|0);
       HEAP32[$58>>2] = 0;
       $59 = $5;
       $2 = $59;
       $60 = $2;
       STACKTOP = sp;return ($60|0);
      }
     }
    }
   }
   $34 = $3;
   _pj_ctx_set_errno($34,-38);
   $2 = 0;
   $60 = $2;
   STACKTOP = sp;return ($60|0);
  }
 }
 $15 = $3;
 _pj_ctx_set_errno($15,-38);
 $2 = 0;
 $60 = $2;
 STACKTOP = sp;return ($60|0);
}
function _nad_ctable2_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 (_pj_ctx_fseek($8,$9,160,0)|0);
 $10 = $5;
 $11 = ((($10)) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = ((($13)) + 112|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($12, $16)|0;
 $7 = $17;
 $18 = $7;
 $19 = $18<<3;
 $20 = (_pj_malloc($19)|0);
 $21 = $5;
 $22 = ((($21)) + 120|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 120|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = $4;
  $28 = $5;
  $29 = ((($28)) + 120|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  $32 = $6;
  $33 = (_pj_ctx_fread($27,$30,8,$31,$32)|0);
  $34 = $7;
  $35 = ($33|0)!=($34|0);
  if (!($35)) {
   $45 = HEAP8[8168]|0;
   $46 = $45&255;
   $47 = ($46|0)==(1);
   if (!($47)) {
    $48 = $5;
    $49 = ((($48)) + 120|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $7;
    $52 = $51<<1;
    _swap_words($50,4,$52);
   }
   $3 = 1;
   $53 = $3;
   STACKTOP = sp;return ($53|0);
  }
 }
 $36 = $5;
 $37 = ((($36)) + 120|0);
 $38 = HEAP32[$37>>2]|0;
 _pj_dalloc($38);
 $39 = $5;
 $40 = ((($39)) + 120|0);
 HEAP32[$40>>2] = 0;
 $41 = (_getenv((19476|0))|0);
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = HEAP32[2195]|0;
  (_fprintf($43,19487,$vararg_buffer)|0);
 }
 $44 = $4;
 _pj_ctx_set_errno($44,-38);
 $3 = 0;
 $53 = $3;
 STACKTOP = sp;return ($53|0);
}
function _swap_words($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $7 = $10;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $8 = 0;
  while(1) {
   $14 = $8;
   $15 = $4;
   $16 = (($15|0) / 2)&-1;
   $17 = ($14|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $8;
   $19 = $7;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $9 = $22;
   $23 = $4;
   $24 = $8;
   $25 = (($23) - ($24))|0;
   $26 = (($25) - 1)|0;
   $27 = $7;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $8;
   $31 = $7;
   $32 = (($31) + ($30)|0);
   HEAP8[$32>>0] = $29;
   $33 = $9;
   $34 = $33&255;
   $35 = $4;
   $36 = $8;
   $37 = (($35) - ($36))|0;
   $38 = (($37) - 1)|0;
   $39 = $7;
   $40 = (($39) + ($38)|0);
   HEAP8[$40>>0] = $34;
   $41 = $8;
   $42 = (($41) + 1)|0;
   $8 = $42;
  }
  $43 = $4;
  $44 = $7;
  $45 = (($44) + ($43)|0);
  $7 = $45;
  $46 = $6;
  $47 = (($46) + 1)|0;
  $6 = $47;
 }
 STACKTOP = sp;return;
}
function _nad_ctable2_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer = sp;
 $7 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $4;
 $10 = (_pj_ctx_fread($8,$7,160,1,$9)|0);
 $11 = ($10|0)!=(1);
 if ($11) {
  $12 = $3;
  _pj_ctx_set_errno($12,-38);
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $13 = HEAP8[8168]|0;
 $14 = $13&255;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $16 = ((($7)) + 96|0);
  _swap_words($16,8,4);
  $17 = ((($7)) + 128|0);
  _swap_words($17,4,2);
 }
 $18 = (_strncmp($7,20881,9)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  _pj_log($20,1,19545,$vararg_buffer);
  $21 = $3;
  _pj_ctx_set_errno($21,-38);
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $22 = (_pj_malloc(128)|0);
 $5 = $22;
 $23 = $5;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = $3;
  _pj_ctx_set_errno($25,-38);
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $26 = $5;
 $27 = ((($7)) + 16|0);
 dest=$26; src=$27; stop=dest+80|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $28 = $5;
 $29 = ((($28)) + 80|0);
 $30 = ((($7)) + 96|0);
 ;HEAP8[$29>>0]=HEAP8[$30>>0]|0;HEAP8[$29+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$30+3>>0]|0;HEAP8[$29+4>>0]=HEAP8[$30+4>>0]|0;HEAP8[$29+5>>0]=HEAP8[$30+5>>0]|0;HEAP8[$29+6>>0]=HEAP8[$30+6>>0]|0;HEAP8[$29+7>>0]=HEAP8[$30+7>>0]|0;
 $31 = $5;
 $32 = ((($31)) + 80|0);
 $33 = ((($32)) + 8|0);
 $34 = ((($7)) + 104|0);
 ;HEAP8[$33>>0]=HEAP8[$34>>0]|0;HEAP8[$33+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$34+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$34+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$34+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$34+6>>0]|0;HEAP8[$33+7>>0]=HEAP8[$34+7>>0]|0;
 $35 = $5;
 $36 = ((($35)) + 96|0);
 $37 = ((($7)) + 112|0);
 ;HEAP8[$36>>0]=HEAP8[$37>>0]|0;HEAP8[$36+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$37+3>>0]|0;HEAP8[$36+4>>0]=HEAP8[$37+4>>0]|0;HEAP8[$36+5>>0]=HEAP8[$37+5>>0]|0;HEAP8[$36+6>>0]=HEAP8[$37+6>>0]|0;HEAP8[$36+7>>0]=HEAP8[$37+7>>0]|0;
 $38 = $5;
 $39 = ((($38)) + 96|0);
 $40 = ((($39)) + 8|0);
 $41 = ((($7)) + 120|0);
 ;HEAP8[$40>>0]=HEAP8[$41>>0]|0;HEAP8[$40+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$40+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$40+3>>0]=HEAP8[$41+3>>0]|0;HEAP8[$40+4>>0]=HEAP8[$41+4>>0]|0;HEAP8[$40+5>>0]=HEAP8[$41+5>>0]|0;HEAP8[$40+6>>0]=HEAP8[$41+6>>0]|0;HEAP8[$40+7>>0]=HEAP8[$41+7>>0]|0;
 $42 = $5;
 $43 = ((($42)) + 112|0);
 $44 = ((($7)) + 128|0);
 ;HEAP8[$43>>0]=HEAP8[$44>>0]|0;HEAP8[$43+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$44+3>>0]|0;
 $45 = $5;
 $46 = ((($45)) + 112|0);
 $47 = ((($46)) + 4|0);
 $48 = ((($7)) + 132|0);
 ;HEAP8[$47>>0]=HEAP8[$48>>0]|0;HEAP8[$47+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$48+3>>0]|0;
 $49 = $5;
 $50 = ((($49)) + 112|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)<(1);
 if (!($52)) {
  $53 = $5;
  $54 = ((($53)) + 112|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)>(100000);
  if (!($56)) {
   $57 = $5;
   $58 = ((($57)) + 112|0);
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)<(1);
   if (!($61)) {
    $62 = $5;
    $63 = ((($62)) + 112|0);
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)>(100000);
    if (!($66)) {
     $68 = $5;
     $69 = (_strlen($68)|0);
     $70 = (($69) - 1)|0;
     $6 = $70;
     while(1) {
      $71 = $6;
      $72 = ($71|0)>(0);
      if (!($72)) {
       break;
      }
      $73 = $6;
      $74 = $5;
      $75 = (($74) + ($73)|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = $76 << 24 >> 24;
      $78 = ($77|0)==(10);
      if (!($78)) {
       $79 = $6;
       $80 = $5;
       $81 = (($80) + ($79)|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = $82 << 24 >> 24;
       $84 = ($83|0)==(32);
       if (!($84)) {
        break;
       }
      }
      $85 = $6;
      $86 = $5;
      $87 = (($86) + ($85)|0);
      HEAP8[$87>>0] = 0;
      $88 = $6;
      $89 = (($88) + -1)|0;
      $6 = $89;
     }
     $90 = $5;
     $91 = ((($90)) + 120|0);
     HEAP32[$91>>2] = 0;
     $92 = $5;
     $2 = $92;
     $93 = $2;
     STACKTOP = sp;return ($93|0);
    }
   }
  }
 }
 $67 = $3;
 _pj_ctx_set_errno($67,-38);
 $2 = 0;
 $93 = $2;
 STACKTOP = sp;return ($93|0);
}
function _nad_intr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 88|0;
 $3 = $2;
 $17 = $3;
 $18 = ((($17)) + 96|0);
 $19 = +HEAPF64[$18>>3];
 $20 = +HEAPF64[$1>>3];
 $21 = $20 / $19;
 HEAPF64[$1>>3] = $21;
 $22 = (+Math_floor((+$21)));
 $23 = (~~(($22)));
 HEAP32[$6>>2] = $23;
 $24 = $3;
 $25 = ((($24)) + 96|0);
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($1)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 / $27;
 HEAPF64[$28>>3] = $30;
 $31 = (+Math_floor((+$30)));
 $32 = (~~(($31)));
 $33 = ((($6)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = +HEAPF64[$1>>3];
 $35 = HEAP32[$6>>2]|0;
 $36 = (+($35|0));
 $37 = $34 - $36;
 HEAPF64[$5>>3] = $37;
 $38 = ((($1)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = ((($6)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+($41|0));
 $43 = $39 - $42;
 $44 = ((($5)) + 8|0);
 HEAPF64[$44>>3] = $43;
 $45 = ((($4)) + 8|0);
 HEAPF64[$45>>3] = inf;
 HEAPF64[$4>>3] = inf;
 $46 = HEAP32[$6>>2]|0;
 $47 = ($46|0)<(0);
 $48 = HEAP32[$6>>2]|0;
 do {
  if ($47) {
   $49 = ($48|0)==(-1);
   if ($49) {
    $50 = +HEAPF64[$5>>3];
    $51 = $50 > 0.99999999998999999;
    if ($51) {
     $52 = HEAP32[$6>>2]|0;
     $53 = (($52) + 1)|0;
     HEAP32[$6>>2] = $53;
     HEAPF64[$5>>3] = 0.0;
     break;
    }
   }
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $54 = (($48) + 1)|0;
   $16 = $54;
   $55 = $3;
   $56 = ((($55)) + 112|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54|0)>=($57|0);
   if ($58) {
    $59 = $16;
    $60 = $3;
    $61 = ((($60)) + 112|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)==($62|0);
    if ($63) {
     $64 = +HEAPF64[$5>>3];
     $65 = $64 < 9.9999999999999993E-12;
     if ($65) {
      $66 = HEAP32[$6>>2]|0;
      $67 = (($66) + -1)|0;
      HEAP32[$6>>2] = $67;
      HEAPF64[$5>>3] = 1.0;
      break;
     }
    }
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $68 = ((($6)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)<(0);
 $71 = ((($6)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 do {
  if ($70) {
   $73 = ($72|0)==(-1);
   if ($73) {
    $74 = ((($5)) + 8|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $75 > 0.99999999998999999;
    if ($76) {
     $77 = ((($6)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($78) + 1)|0;
     HEAP32[$77>>2] = $79;
     $80 = ((($5)) + 8|0);
     HEAPF64[$80>>3] = 0.0;
     break;
    }
   }
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
   STACKTOP = sp;return;
  } else {
   $81 = (($72) + 1)|0;
   $16 = $81;
   $82 = $3;
   $83 = ((($82)) + 112|0);
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($81|0)>=($85|0);
   if ($86) {
    $87 = $16;
    $88 = $3;
    $89 = ((($88)) + 112|0);
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($87|0)==($91|0);
    if ($92) {
     $93 = ((($5)) + 8|0);
     $94 = +HEAPF64[$93>>3];
     $95 = $94 < 9.9999999999999993E-12;
     if ($95) {
      $96 = ((($6)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (($97) + -1)|0;
      HEAP32[$96>>2] = $98;
      $99 = ((($5)) + 8|0);
      HEAPF64[$99>>3] = 1.0;
      break;
     }
    }
    ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $100 = ((($6)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $3;
 $103 = ((($102)) + 112|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = Math_imul($101, $104)|0;
 $106 = HEAP32[$6>>2]|0;
 $107 = (($105) + ($106))|0;
 $15 = $107;
 $108 = $3;
 $109 = ((($108)) + 120|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $15;
 $112 = (($111) + 1)|0;
 $15 = $112;
 $113 = (($110) + ($111<<3)|0);
 $11 = $113;
 $114 = $3;
 $115 = ((($114)) + 120|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $15;
 $118 = (($116) + ($117<<3)|0);
 $12 = $118;
 $119 = $3;
 $120 = ((($119)) + 112|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $15;
 $123 = (($122) + ($121))|0;
 $15 = $123;
 $124 = $3;
 $125 = ((($124)) + 120|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $15;
 $128 = (($127) + -1)|0;
 $15 = $128;
 $129 = (($126) + ($127<<3)|0);
 $14 = $129;
 $130 = $3;
 $131 = ((($130)) + 120|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $15;
 $134 = (($132) + ($133<<3)|0);
 $13 = $134;
 $135 = +HEAPF64[$5>>3];
 $8 = $135;
 $10 = $135;
 $136 = +HEAPF64[$5>>3];
 $137 = 1.0 - $136;
 $9 = $137;
 $7 = $137;
 $138 = ((($5)) + 8|0);
 $139 = +HEAPF64[$138>>3];
 $140 = $10;
 $141 = $140 * $139;
 $10 = $141;
 $142 = ((($5)) + 8|0);
 $143 = +HEAPF64[$142>>3];
 $144 = $9;
 $145 = $144 * $143;
 $9 = $145;
 $146 = ((($5)) + 8|0);
 $147 = +HEAPF64[$146>>3];
 $148 = 1.0 - $147;
 $149 = ((($5)) + 8|0);
 HEAPF64[$149>>3] = $148;
 $150 = ((($5)) + 8|0);
 $151 = +HEAPF64[$150>>3];
 $152 = $7;
 $153 = $152 * $151;
 $7 = $153;
 $154 = ((($5)) + 8|0);
 $155 = +HEAPF64[$154>>3];
 $156 = $8;
 $157 = $156 * $155;
 $8 = $157;
 $158 = $7;
 $159 = $11;
 $160 = +HEAPF32[$159>>2];
 $161 = $160;
 $162 = $158 * $161;
 $163 = $8;
 $164 = $12;
 $165 = +HEAPF32[$164>>2];
 $166 = $165;
 $167 = $163 * $166;
 $168 = $162 + $167;
 $169 = $9;
 $170 = $13;
 $171 = +HEAPF32[$170>>2];
 $172 = $171;
 $173 = $169 * $172;
 $174 = $168 + $173;
 $175 = $10;
 $176 = $14;
 $177 = +HEAPF32[$176>>2];
 $178 = $177;
 $179 = $175 * $178;
 $180 = $174 + $179;
 HEAPF64[$4>>3] = $180;
 $181 = $7;
 $182 = $11;
 $183 = ((($182)) + 4|0);
 $184 = +HEAPF32[$183>>2];
 $185 = $184;
 $186 = $181 * $185;
 $187 = $8;
 $188 = $12;
 $189 = ((($188)) + 4|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $190;
 $192 = $187 * $191;
 $193 = $186 + $192;
 $194 = $9;
 $195 = $13;
 $196 = ((($195)) + 4|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $197;
 $199 = $194 * $198;
 $200 = $193 + $199;
 $201 = $10;
 $202 = $14;
 $203 = ((($202)) + 4|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $204;
 $206 = $201 * $205;
 $207 = $200 + $206;
 $208 = ((($4)) + 8|0);
 HEAPF64[$208>>3] = $207;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _pj_apply_gridshift_3($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp + 104|0;
 $vararg_buffer9 = sp + 96|0;
 $vararg_buffer6 = sp + 88|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $21 = sp + 48|0;
 $22 = sp + 32|0;
 $30 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $32 = $11;
 $33 = ($32|0)==(0|0);
 $34 = $12;
 $35 = ($34|0)==(0);
 $or$cond = $33 | $35;
 $36 = $10;
 if ($or$cond) {
  _pj_ctx_set_errno($36,-38);
  $9 = -38;
  $276 = $9;
  STACKTOP = sp;return ($276|0);
 }
 HEAP32[$36>>2] = 0;
 $19 = 0;
 L5: while(1) {
  $37 = $19;
  $38 = $14;
  $39 = ($37|0)<($38|0);
  if (!($39)) {
   label = 38;
   break;
  }
  $40 = $19;
  $41 = $15;
  $42 = Math_imul($40, $41)|0;
  $20 = $42;
  $43 = $20;
  $44 = $17;
  $45 = (($44) + ($43<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = ((($21)) + 8|0);
  HEAPF64[$47>>3] = $46;
  $48 = $20;
  $49 = $16;
  $50 = (($49) + ($48<<3)|0);
  $51 = +HEAPF64[$50>>3];
  HEAPF64[$21>>3] = $51;
  $52 = ((($22)) + 8|0);
  HEAPF64[$52>>3] = inf;
  HEAPF64[$22>>3] = inf;
  $23 = 0;
  while(1) {
   $53 = $23;
   $54 = $12;
   $55 = ($53|0)<($54|0);
   if (!($55)) {
    break;
   }
   $56 = $23;
   $57 = $11;
   $58 = (($57) + ($56<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $24 = $59;
   $60 = $24;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $25 = $62;
   $63 = $25;
   $64 = ((($63)) + 96|0);
   $65 = ((($64)) + 8|0);
   $66 = +HEAPF64[$65>>3];
   $67 = (+Math_abs((+$66)));
   $68 = $25;
   $69 = ((($68)) + 96|0);
   $70 = +HEAPF64[$69>>3];
   $71 = (+Math_abs((+$70)));
   $72 = $67 + $71;
   $73 = $72 / 1.0E+4;
   $26 = $73;
   $74 = $25;
   $75 = ((($74)) + 80|0);
   $76 = ((($75)) + 8|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $26;
   $79 = $77 - $78;
   $80 = ((($21)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $79 > $81;
   if (!($82)) {
    $83 = $25;
    $84 = ((($83)) + 80|0);
    $85 = +HEAPF64[$84>>3];
    $86 = $26;
    $87 = $85 - $86;
    $88 = +HEAPF64[$21>>3];
    $89 = $87 > $88;
    if (!($89)) {
     $90 = $25;
     $91 = ((($90)) + 80|0);
     $92 = ((($91)) + 8|0);
     $93 = +HEAPF64[$92>>3];
     $94 = $25;
     $95 = ((($94)) + 112|0);
     $96 = ((($95)) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) - 1)|0;
     $99 = (+($98|0));
     $100 = $25;
     $101 = ((($100)) + 96|0);
     $102 = ((($101)) + 8|0);
     $103 = +HEAPF64[$102>>3];
     $104 = $99 * $103;
     $105 = $93 + $104;
     $106 = $26;
     $107 = $105 + $106;
     $108 = ((($21)) + 8|0);
     $109 = +HEAPF64[$108>>3];
     $110 = $107 < $109;
     if (!($110)) {
      $111 = $25;
      $112 = ((($111)) + 80|0);
      $113 = +HEAPF64[$112>>3];
      $114 = $25;
      $115 = ((($114)) + 112|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($116) - 1)|0;
      $118 = (+($117|0));
      $119 = $25;
      $120 = ((($119)) + 96|0);
      $121 = +HEAPF64[$120>>3];
      $122 = $118 * $121;
      $123 = $113 + $122;
      $124 = $26;
      $125 = $123 + $124;
      $126 = +HEAPF64[$21>>3];
      $127 = $125 < $126;
      if (!($127)) {
       while(1) {
        $128 = $24;
        $129 = ((($128)) + 28|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = ($130|0)!=(0|0);
        if (!($131)) {
         break;
        }
        $132 = $24;
        $133 = ((($132)) + 28|0);
        $134 = HEAP32[$133>>2]|0;
        $27 = $134;
        while(1) {
         $135 = $27;
         $136 = ($135|0)!=(0|0);
         if (!($136)) {
          break;
         }
         $137 = $27;
         $138 = ((($137)) + 20|0);
         $139 = HEAP32[$138>>2]|0;
         $28 = $139;
         $140 = $28;
         $141 = ((($140)) + 96|0);
         $142 = ((($141)) + 8|0);
         $143 = +HEAPF64[$142>>3];
         $144 = (+Math_abs((+$143)));
         $145 = $28;
         $146 = ((($145)) + 96|0);
         $147 = +HEAPF64[$146>>3];
         $148 = (+Math_abs((+$147)));
         $149 = $144 + $148;
         $150 = $149 / 1.0E+4;
         $29 = $150;
         $151 = $28;
         $152 = ((($151)) + 80|0);
         $153 = ((($152)) + 8|0);
         $154 = +HEAPF64[$153>>3];
         $155 = $29;
         $156 = $154 - $155;
         $157 = ((($21)) + 8|0);
         $158 = +HEAPF64[$157>>3];
         $159 = $156 > $158;
         if (!($159)) {
          $160 = $28;
          $161 = ((($160)) + 80|0);
          $162 = +HEAPF64[$161>>3];
          $163 = $29;
          $164 = $162 - $163;
          $165 = +HEAPF64[$21>>3];
          $166 = $164 > $165;
          if (!($166)) {
           $167 = $28;
           $168 = ((($167)) + 80|0);
           $169 = ((($168)) + 8|0);
           $170 = +HEAPF64[$169>>3];
           $171 = $28;
           $172 = ((($171)) + 112|0);
           $173 = ((($172)) + 4|0);
           $174 = HEAP32[$173>>2]|0;
           $175 = (($174) - 1)|0;
           $176 = (+($175|0));
           $177 = $28;
           $178 = ((($177)) + 96|0);
           $179 = ((($178)) + 8|0);
           $180 = +HEAPF64[$179>>3];
           $181 = $176 * $180;
           $182 = $170 + $181;
           $183 = $29;
           $184 = $182 + $183;
           $185 = ((($21)) + 8|0);
           $186 = +HEAPF64[$185>>3];
           $187 = $184 < $186;
           if (!($187)) {
            $188 = $28;
            $189 = ((($188)) + 80|0);
            $190 = +HEAPF64[$189>>3];
            $191 = $28;
            $192 = ((($191)) + 112|0);
            $193 = HEAP32[$192>>2]|0;
            $194 = (($193) - 1)|0;
            $195 = (+($194|0));
            $196 = $28;
            $197 = ((($196)) + 96|0);
            $198 = +HEAPF64[$197>>3];
            $199 = $195 * $198;
            $200 = $190 + $199;
            $201 = $29;
            $202 = $200 + $201;
            $203 = +HEAPF64[$21>>3];
            $204 = $202 < $203;
            if (!($204)) {
             break;
            }
           }
          }
         }
         $205 = $27;
         $206 = ((($205)) + 24|0);
         $207 = HEAP32[$206>>2]|0;
         $27 = $207;
        }
        $208 = $27;
        $209 = ($208|0)==(0|0);
        if ($209) {
         break;
        }
        $210 = $27;
        $24 = $210;
        $211 = $27;
        $212 = ((($211)) + 20|0);
        $213 = HEAP32[$212>>2]|0;
        $25 = $213;
       }
       $214 = $25;
       $215 = ((($214)) + 120|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)==(0|0);
       if ($217) {
        $218 = $10;
        $219 = $24;
        $220 = (_pj_gridinfo_load($218,$219)|0);
        $221 = ($220|0)!=(0);
        if (!($221)) {
         label = 23;
         break L5;
        }
       }
       $223 = $13;
       $224 = $25;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$21+12>>2]|0;
       _nad_cvt($30,$$byval_copy,$223,$224);
       ;HEAP32[$22>>2]=HEAP32[$30>>2]|0;HEAP32[$22+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$30+12>>2]|0;
       $225 = +HEAPF64[$22>>3];
       $226 = $225 != inf;
       if ($226) {
        label = 25;
        break;
       }
      }
     }
    }
   }
   $232 = $23;
   $233 = (($232) + 1)|0;
   $23 = $233;
  }
  if ((label|0) == 25) {
   label = 0;
   $227 = HEAP32[6065]|0;
   $228 = (($227) + 1)|0;
   HEAP32[6065] = $228;
   $229 = ($227|0)<(20);
   if ($229) {
    $230 = $10;
    $231 = $25;
    HEAP32[$vararg_buffer>>2] = $231;
    _pj_log($230,3,21520,$vararg_buffer);
   }
  }
  $234 = +HEAPF64[$22>>3];
  $235 = $234 == inf;
  L37: do {
   if ($235) {
    $236 = $10;
    $237 = ((($236)) + 4|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238|0)>=(2);
    if ($239) {
     $240 = $10;
     $241 = $20;
     $242 = $16;
     $243 = (($242) + ($241<<3)|0);
     $244 = +HEAPF64[$243>>3];
     $245 = $244 * 57.295779513082323;
     $246 = $20;
     $247 = $17;
     $248 = (($247) + ($246<<3)|0);
     $249 = +HEAPF64[$248>>3];
     $250 = $249 * 57.295779513082323;
     HEAPF64[$vararg_buffer2>>3] = $245;
     $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
     HEAPF64[$vararg_ptr5>>3] = $250;
     _pj_log($240,2,19569,$vararg_buffer2);
     $23 = 0;
     while(1) {
      $251 = $23;
      $252 = $12;
      $253 = ($251|0)<($252|0);
      if (!($253)) {
       break L37;
      }
      $254 = $23;
      $255 = $11;
      $256 = (($255) + ($254<<2)|0);
      $257 = HEAP32[$256>>2]|0;
      $31 = $257;
      $258 = $23;
      $259 = ($258|0)==(0);
      $260 = $10;
      $261 = $31;
      $262 = HEAP32[$261>>2]|0;
      if ($259) {
       HEAP32[$vararg_buffer6>>2] = $262;
       _pj_log($260,2,21663,$vararg_buffer6);
      } else {
       HEAP32[$vararg_buffer9>>2] = $262;
       _pj_log($260,2,21676,$vararg_buffer9);
      }
      $263 = $23;
      $264 = (($263) + 1)|0;
      $23 = $264;
     }
    }
   } else {
    $265 = ((($22)) + 8|0);
    $266 = +HEAPF64[$265>>3];
    $267 = $20;
    $268 = $17;
    $269 = (($268) + ($267<<3)|0);
    HEAPF64[$269>>3] = $266;
    $270 = +HEAPF64[$22>>3];
    $271 = $20;
    $272 = $16;
    $273 = (($272) + ($271<<3)|0);
    HEAPF64[$273>>3] = $270;
   }
  } while(0);
  $274 = $19;
  $275 = (($274) + 1)|0;
  $19 = $275;
 }
 if ((label|0) == 23) {
  $222 = $10;
  _pj_ctx_set_errno($222,-38);
  $9 = -38;
  $276 = $9;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 38) {
  $9 = 0;
  $276 = $9;
  STACKTOP = sp;return ($276|0);
 }
 return (0)|0;
}
function _pj_apply_gridshift_2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $15 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $8;
 $17 = ((($16)) + 304|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 $20 = $8;
 if ($19) {
  $21 = $9;
  $22 = $10;
  $23 = $11;
  $24 = $12;
  $25 = $13;
  $26 = $14;
  $27 = (_pj_gc_apply_gridshift($20,$21,$22,$23,$24,$25,$26)|0);
  $7 = $27;
  $70 = $7;
  STACKTOP = sp;return ($70|0);
 }
 $28 = ((($20)) + 240|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 do {
  if ($30) {
   $31 = $8;
   $32 = (_pj_get_ctx($31)|0);
   $33 = $8;
   $34 = HEAP32[$33>>2]|0;
   $35 = $8;
   $36 = ((($35)) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   _pj_param($15,$34,$37,20756);
   $38 = HEAP32[$15>>2]|0;
   $39 = $8;
   $40 = ((($39)) + 244|0);
   $41 = (_pj_gridlist_from_nadgrids($32,$38,$40)|0);
   $42 = $8;
   $43 = ((($42)) + 240|0);
   HEAP32[$43>>2] = $41;
   $44 = $8;
   $45 = ((($44)) + 240|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    $48 = $8;
    $49 = ((($48)) + 244|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0);
    if (!($51)) {
     break;
    }
   }
   $52 = $8;
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   $7 = $54;
   $70 = $7;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $55 = $8;
 $56 = (_pj_get_ctx($55)|0);
 $57 = $8;
 $58 = ((($57)) + 240|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $8;
 $61 = ((($60)) + 244|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $9;
 $64 = $10;
 $65 = $11;
 $66 = $12;
 $67 = $13;
 $68 = $14;
 $69 = (_pj_apply_gridshift_3($56,$59,$62,$63,$64,$65,$66,$67,$68)|0);
 $7 = $69;
 $70 = $7;
 STACKTOP = sp;return ($70|0);
}
function _pj_datum_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $11 = sp + 32|0;
 $15 = sp + 96|0;
 $16 = sp + 24|0;
 $17 = sp + 16|0;
 $19 = sp + 8|0;
 $20 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $23 = $6;
 $24 = ((($23)) + 176|0);
 HEAP32[$24>>2] = 0;
 $25 = $4;
 $26 = $5;
 _pj_param($11,$25,$26,20653);
 $27 = HEAP32[$11>>2]|0;
 $7 = $27;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $5;
  $12 = $29;
  while(1) {
   $30 = $12;
   $31 = ($30|0)!=(0|0);
   if (!($31)) {
    break;
   }
   $32 = $12;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if (!($34)) {
    break;
   }
   $35 = $12;
   $36 = HEAP32[$35>>2]|0;
   $12 = $36;
  }
  $14 = 0;
  while(1) {
   $37 = $14;
   $38 = (8172 + ($37<<4)|0);
   $39 = HEAP32[$38>>2]|0;
   $13 = $39;
   $40 = ($39|0)!=(0|0);
   if (!($40)) {
    break;
   }
   $41 = $7;
   $42 = $13;
   $43 = (_strcmp($41,$42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
   $45 = $14;
   $46 = (($45) + 1)|0;
   $14 = $46;
  }
  $47 = $13;
  $48 = ($47|0)!=(0|0);
  if (!($48)) {
   $49 = $4;
   _pj_ctx_set_errno($49,-9);
   $3 = 1;
   $194 = $3;
   STACKTOP = sp;return ($194|0);
  }
  $50 = $14;
  $51 = (8172 + ($50<<4)|0);
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = $14;
   $56 = (8172 + ($55<<4)|0);
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_strlen($58)|0);
   $60 = ($59>>>0)>(0);
   if ($60) {
    (_strcpy($15,20660)|0);
    $61 = $14;
    $62 = (8172 + ($61<<4)|0);
    $63 = ((($62)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    (_strncat($15,$64,80)|0);
    $65 = (_pj_mkparam($15)|0);
    $66 = $12;
    HEAP32[$66>>2] = $65;
    $12 = $65;
   }
  }
  $67 = $14;
  $68 = (8172 + ($67<<4)|0);
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = $14;
   $73 = (8172 + ($72<<4)|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_strlen($75)|0);
   $77 = ($76>>>0)>(0);
   if ($77) {
    $78 = $14;
    $79 = (8172 + ($78<<4)|0);
    $80 = ((($79)) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_pj_mkparam($81)|0);
    $83 = $12;
    HEAP32[$83>>2] = $82;
    $12 = $82;
   }
  }
 }
 $84 = $4;
 $85 = $5;
 _pj_param($16,$84,$85,20756);
 $86 = HEAP32[$16>>2]|0;
 $9 = $86;
 $87 = ($86|0)!=(0|0);
 do {
  if ($87) {
   $88 = $6;
   $89 = ((($88)) + 176|0);
   HEAP32[$89>>2] = 3;
  } else {
   $90 = $4;
   $91 = $5;
   _pj_param($17,$90,$91,20667);
   $92 = HEAP32[$17>>2]|0;
   $10 = $92;
   $93 = ($92|0)!=(0|0);
   if ($93) {
    $94 = $6;
    $95 = ((($94)) + 176|0);
    HEAP32[$95>>2] = 3;
    $96 = $10;
    $97 = (___strdup($96)|0);
    $98 = $6;
    $99 = ((($98)) + 304|0);
    HEAP32[$99>>2] = $97;
    $100 = $4;
    $101 = $5;
    _pj_param($19,$100,$101,20676);
    $102 = HEAP32[$19>>2]|0;
    $18 = $102;
    $103 = $18;
    $104 = ($103|0)!=(0|0);
    if (!($104)) {
     break;
    }
    $105 = $4;
    $106 = $18;
    $107 = (+_pj_gc_parsedate($105,$106));
    $108 = $6;
    $109 = ((($108)) + 312|0);
    HEAPF64[$109>>3] = $107;
    break;
   }
   $110 = $4;
   $111 = $5;
   _pj_param($20,$110,$111,20682);
   $112 = HEAP32[$20>>2]|0;
   $8 = $112;
   $113 = ($112|0)!=(0|0);
   if ($113) {
    $21 = 0;
    $114 = $6;
    $115 = ((($114)) + 184|0);
    dest=$115; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $116 = $8;
    $22 = $116;
    while(1) {
     $117 = $22;
     $118 = HEAP8[$117>>0]|0;
     $119 = $118 << 24 >> 24;
     $120 = ($119|0)!=(0);
     $121 = $21;
     $122 = ($121|0)<(7);
     $123 = $120 ? $122 : 0;
     if (!($123)) {
      break;
     }
     $124 = $22;
     $125 = (+_pj_atof($124));
     $126 = $21;
     $127 = (($126) + 1)|0;
     $21 = $127;
     $128 = $6;
     $129 = ((($128)) + 184|0);
     $130 = (($129) + ($126<<3)|0);
     HEAPF64[$130>>3] = $125;
     while(1) {
      $131 = $22;
      $132 = HEAP8[$131>>0]|0;
      $133 = $132 << 24 >> 24;
      $134 = ($133|0)!=(0);
      if ($134) {
       $135 = $22;
       $136 = HEAP8[$135>>0]|0;
       $137 = $136 << 24 >> 24;
       $138 = ($137|0)!=(44);
       $195 = $138;
      } else {
       $195 = 0;
      }
      $139 = $22;
      if (!($195)) {
       break;
      }
      $140 = ((($139)) + 1|0);
      $22 = $140;
     }
     $141 = HEAP8[$139>>0]|0;
     $142 = $141 << 24 >> 24;
     $143 = ($142|0)==(44);
     if (!($143)) {
      continue;
     }
     $144 = $22;
     $145 = ((($144)) + 1|0);
     $22 = $145;
    }
    $146 = $6;
    $147 = ((($146)) + 184|0);
    $148 = ((($147)) + 24|0);
    $149 = +HEAPF64[$148>>3];
    $150 = $149 != 0.0;
    if (!($150)) {
     $151 = $6;
     $152 = ((($151)) + 184|0);
     $153 = ((($152)) + 32|0);
     $154 = +HEAPF64[$153>>3];
     $155 = $154 != 0.0;
     if (!($155)) {
      $156 = $6;
      $157 = ((($156)) + 184|0);
      $158 = ((($157)) + 40|0);
      $159 = +HEAPF64[$158>>3];
      $160 = $159 != 0.0;
      if (!($160)) {
       $161 = $6;
       $162 = ((($161)) + 184|0);
       $163 = ((($162)) + 48|0);
       $164 = +HEAPF64[$163>>3];
       $165 = $164 != 0.0;
       if (!($165)) {
        $192 = $6;
        $193 = ((($192)) + 176|0);
        HEAP32[$193>>2] = 1;
        break;
       }
      }
     }
    }
    $166 = $6;
    $167 = ((($166)) + 176|0);
    HEAP32[$167>>2] = 2;
    $168 = $6;
    $169 = ((($168)) + 184|0);
    $170 = ((($169)) + 24|0);
    $171 = +HEAPF64[$170>>3];
    $172 = $171 * 4.8481368110953598E-6;
    HEAPF64[$170>>3] = $172;
    $173 = $6;
    $174 = ((($173)) + 184|0);
    $175 = ((($174)) + 32|0);
    $176 = +HEAPF64[$175>>3];
    $177 = $176 * 4.8481368110953598E-6;
    HEAPF64[$175>>3] = $177;
    $178 = $6;
    $179 = ((($178)) + 184|0);
    $180 = ((($179)) + 40|0);
    $181 = +HEAPF64[$180>>3];
    $182 = $181 * 4.8481368110953598E-6;
    HEAPF64[$180>>3] = $182;
    $183 = $6;
    $184 = ((($183)) + 184|0);
    $185 = ((($184)) + 48|0);
    $186 = +HEAPF64[$185>>3];
    $187 = $186 / 1.0E+6;
    $188 = $187 + 1.0;
    $189 = $6;
    $190 = ((($189)) + 184|0);
    $191 = ((($190)) + 48|0);
    HEAPF64[$191>>3] = $188;
   }
  }
 } while(0);
 $3 = 0;
 $194 = $3;
 STACKTOP = sp;return ($194|0);
}
function _pj_transform($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0;
 var $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0.0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy18 = sp + 312|0;
 $$byval_copy17 = sp + 288|0;
 $$byval_copy16 = sp + 272|0;
 $$byval_copy = sp + 248|0;
 $vararg_buffer = sp + 240|0;
 $18 = sp + 216|0;
 $19 = sp + 192|0;
 $20 = sp + 168|0;
 $21 = sp + 152|0;
 $22 = sp + 136|0;
 $23 = sp + 120|0;
 $24 = sp + 96|0;
 $25 = sp + 72|0;
 $26 = sp + 48|0;
 $27 = sp + 32|0;
 $28 = sp + 16|0;
 $29 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $31 = $8;
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$32>>2] = 0;
 $33 = $9;
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$34>>2] = 0;
 $35 = $11;
 $36 = ($35|0)==(0);
 if ($36) {
  $11 = 1;
 }
 $37 = $8;
 $38 = ((($37)) + 300|0);
 $39 = (_strcmp($38,20691)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $8;
  $42 = HEAP32[$41>>2]|0;
  $43 = $8;
  $44 = ((($43)) + 300|0);
  $45 = $10;
  $46 = $11;
  $47 = $12;
  $48 = $13;
  $49 = $14;
  $50 = (_pj_adjust_axis($42,$44,0,$45,$46,$47,$48,$49)|0);
  $17 = $50;
  $51 = $17;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $17;
   $7 = $53;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  }
 }
 $54 = $8;
 $55 = ((($54)) + 264|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $56 != 1.0;
 $58 = $14;
 $59 = ($58|0)!=(0|0);
 $or$cond = $57 & $59;
 L9: do {
  if ($or$cond) {
   $15 = 0;
   while(1) {
    $60 = $15;
    $61 = $10;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break L9;
    }
    $63 = $8;
    $64 = ((($63)) + 264|0);
    $65 = +HEAPF64[$64>>3];
    $66 = $11;
    $67 = $15;
    $68 = Math_imul($66, $67)|0;
    $69 = $14;
    $70 = (($69) + ($68<<3)|0);
    $71 = +HEAPF64[$70>>3];
    $72 = $71 * $65;
    HEAPF64[$70>>3] = $72;
    $73 = $15;
    $74 = (($73) + 1)|0;
    $15 = $74;
   }
  }
 } while(0);
 $75 = $8;
 $76 = ((($75)) + 48|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0);
 L15: do {
  if ($78) {
   $79 = $14;
   $80 = ($79|0)==(0|0);
   $81 = $8;
   if ($80) {
    $82 = (_pj_get_ctx($81)|0);
    _pj_ctx_set_errno($82,-45);
    $7 = -45;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   }
   $83 = ((($81)) + 160|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $84 != 1.0;
   L21: do {
    if ($85) {
     $15 = 0;
     while(1) {
      $86 = $15;
      $87 = $10;
      $88 = ($86|0)<($87|0);
      if (!($88)) {
       break L21;
      }
      $89 = $11;
      $90 = $15;
      $91 = Math_imul($89, $90)|0;
      $92 = $12;
      $93 = (($92) + ($91<<3)|0);
      $94 = +HEAPF64[$93>>3];
      $95 = $94 != inf;
      if ($95) {
       $96 = $8;
       $97 = ((($96)) + 160|0);
       $98 = +HEAPF64[$97>>3];
       $99 = $11;
       $100 = $15;
       $101 = Math_imul($99, $100)|0;
       $102 = $12;
       $103 = (($102) + ($101<<3)|0);
       $104 = +HEAPF64[$103>>3];
       $105 = $104 * $98;
       HEAPF64[$103>>3] = $105;
       $106 = $8;
       $107 = ((($106)) + 160|0);
       $108 = +HEAPF64[$107>>3];
       $109 = $11;
       $110 = $15;
       $111 = Math_imul($109, $110)|0;
       $112 = $13;
       $113 = (($112) + ($111<<3)|0);
       $114 = +HEAPF64[$113>>3];
       $115 = $114 * $108;
       HEAPF64[$113>>3] = $115;
      }
      $116 = $15;
      $117 = (($116) + 1)|0;
      $15 = $117;
     }
    }
   } while(0);
   $118 = $8;
   $119 = ((($118)) + 64|0);
   $120 = +HEAPF64[$119>>3];
   $121 = $8;
   $122 = ((($121)) + 80|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $10;
   $125 = $11;
   $126 = $12;
   $127 = $13;
   $128 = $14;
   $129 = (_pj_geocentric_to_geodetic($120,$123,$124,$125,$126,$127,$128)|0);
   $16 = $129;
   $130 = $16;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = $16;
    $7 = $132;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   }
  } else {
   $133 = $8;
   $134 = ((($133)) + 44|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)!=(0);
   if (!($136)) {
    $137 = $8;
    $138 = ((($137)) + 16|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)==(0|0);
    if ($140) {
     $141 = $8;
     $142 = ((($141)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==(0|0);
     if ($144) {
      $145 = $8;
      $146 = (_pj_get_ctx($145)|0);
      _pj_ctx_set_errno($146,-17);
      $147 = $8;
      $148 = (_pj_get_ctx($147)|0);
      _pj_log($148,1,20695,$vararg_buffer);
      $7 = -17;
      $723 = $7;
      STACKTOP = sp;return ($723|0);
     }
    }
    $149 = $8;
    $150 = ((($149)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)!=(0|0);
    if (!($152)) {
     $15 = 0;
     while(1) {
      $239 = $15;
      $240 = $10;
      $241 = ($239|0)<($240|0);
      if (!($241)) {
       break L15;
      }
      $242 = $11;
      $243 = $15;
      $244 = Math_imul($242, $243)|0;
      $245 = $12;
      $246 = (($245) + ($244<<3)|0);
      $247 = +HEAPF64[$246>>3];
      HEAPF64[$21>>3] = $247;
      $248 = $11;
      $249 = $15;
      $250 = Math_imul($248, $249)|0;
      $251 = $13;
      $252 = (($251) + ($250<<3)|0);
      $253 = +HEAPF64[$252>>3];
      $254 = ((($21)) + 8|0);
      HEAPF64[$254>>3] = $253;
      $255 = +HEAPF64[$21>>3];
      $256 = $255 == inf;
      if (!($256)) {
       $257 = $8;
       ;HEAP32[$$byval_copy16>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$21+12>>2]|0;
       _pj_inv($23,$$byval_copy16,$257);
       ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$23+12>>2]|0;
       $258 = $8;
       $259 = HEAP32[$258>>2]|0;
       $260 = HEAP32[$259>>2]|0;
       $261 = ($260|0)!=(0);
       if ($261) {
        $262 = $8;
        $263 = HEAP32[$262>>2]|0;
        $264 = HEAP32[$263>>2]|0;
        $265 = ($264|0)!=(33);
        if ($265) {
         $266 = $8;
         $267 = HEAP32[$266>>2]|0;
         $268 = HEAP32[$267>>2]|0;
         $269 = ($268|0)!=(34);
         if ($269) {
          $270 = $8;
          $271 = HEAP32[$270>>2]|0;
          $272 = HEAP32[$271>>2]|0;
          $273 = ($272|0)>(0);
          if ($273) {
           break;
          }
          $274 = $8;
          $275 = HEAP32[$274>>2]|0;
          $276 = HEAP32[$275>>2]|0;
          $277 = ($276|0)<(-44);
          $278 = $10;
          $279 = ($278|0)==(1);
          $or$cond5 = $277 | $279;
          if ($or$cond5) {
           break;
          }
          $280 = $8;
          $281 = HEAP32[$280>>2]|0;
          $282 = HEAP32[$281>>2]|0;
          $283 = (0 - ($282))|0;
          $284 = (8460 + ($283<<2)|0);
          $285 = HEAP32[$284>>2]|0;
          $286 = ($285|0)==(0);
          if ($286) {
           break;
          }
         }
        }
        HEAPF64[$22>>3] = inf;
        $290 = ((($22)) + 8|0);
        HEAPF64[$290>>3] = inf;
       }
       $291 = +HEAPF64[$22>>3];
       $292 = $11;
       $293 = $15;
       $294 = Math_imul($292, $293)|0;
       $295 = $12;
       $296 = (($295) + ($294<<3)|0);
       HEAPF64[$296>>3] = $291;
       $297 = ((($22)) + 8|0);
       $298 = +HEAPF64[$297>>3];
       $299 = $11;
       $300 = $15;
       $301 = Math_imul($299, $300)|0;
       $302 = $13;
       $303 = (($302) + ($301<<3)|0);
       HEAPF64[$303>>3] = $298;
      }
      $304 = $15;
      $305 = (($304) + 1)|0;
      $15 = $305;
     }
     $287 = $8;
     $288 = HEAP32[$287>>2]|0;
     $289 = HEAP32[$288>>2]|0;
     $7 = $289;
     $723 = $7;
     STACKTOP = sp;return ($723|0);
    }
    $153 = $14;
    $154 = ($153|0)==(0|0);
    if ($154) {
     $155 = $8;
     $156 = (_pj_get_ctx($155)|0);
     _pj_ctx_set_errno($156,-45);
     $7 = -45;
     $723 = $7;
     STACKTOP = sp;return ($723|0);
    }
    $15 = 0;
    while(1) {
     $157 = $15;
     $158 = $10;
     $159 = ($157|0)<($158|0);
     if (!($159)) {
      break L15;
     }
     $160 = $11;
     $161 = $15;
     $162 = Math_imul($160, $161)|0;
     $163 = $12;
     $164 = (($163) + ($162<<3)|0);
     $165 = +HEAPF64[$164>>3];
     HEAPF64[$18>>3] = $165;
     $166 = $11;
     $167 = $15;
     $168 = Math_imul($166, $167)|0;
     $169 = $13;
     $170 = (($169) + ($168<<3)|0);
     $171 = +HEAPF64[$170>>3];
     $172 = ((($18)) + 8|0);
     HEAPF64[$172>>3] = $171;
     $173 = $11;
     $174 = $15;
     $175 = Math_imul($173, $174)|0;
     $176 = $14;
     $177 = (($176) + ($175<<3)|0);
     $178 = +HEAPF64[$177>>3];
     $179 = ((($18)) + 16|0);
     HEAPF64[$179>>3] = $178;
     $180 = +HEAPF64[$18>>3];
     $181 = $180 == inf;
     if (!($181)) {
      $182 = $8;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$18+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$18+20>>2]|0;
      _pj_inv3d($20,$$byval_copy,$182);
      ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$20+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$20+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[$20+20>>2]|0;
      $183 = $8;
      $184 = HEAP32[$183>>2]|0;
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)!=(0);
      if ($186) {
       $187 = $8;
       $188 = HEAP32[$187>>2]|0;
       $189 = HEAP32[$188>>2]|0;
       $190 = ($189|0)!=(33);
       if ($190) {
        $191 = $8;
        $192 = HEAP32[$191>>2]|0;
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)!=(34);
        if ($194) {
         $195 = $8;
         $196 = HEAP32[$195>>2]|0;
         $197 = HEAP32[$196>>2]|0;
         $198 = ($197|0)>(0);
         if ($198) {
          break;
         }
         $199 = $8;
         $200 = HEAP32[$199>>2]|0;
         $201 = HEAP32[$200>>2]|0;
         $202 = ($201|0)<(-44);
         $203 = $10;
         $204 = ($203|0)==(1);
         $or$cond3 = $202 | $204;
         if ($or$cond3) {
          break;
         }
         $205 = $8;
         $206 = HEAP32[$205>>2]|0;
         $207 = HEAP32[$206>>2]|0;
         $208 = (0 - ($207))|0;
         $209 = (8460 + ($208<<2)|0);
         $210 = HEAP32[$209>>2]|0;
         $211 = ($210|0)==(0);
         if ($211) {
          break;
         }
        }
       }
       HEAPF64[$19>>3] = inf;
       $215 = ((($19)) + 8|0);
       HEAPF64[$215>>3] = inf;
       $216 = ((($19)) + 16|0);
       HEAPF64[$216>>3] = inf;
      }
      $217 = +HEAPF64[$19>>3];
      $218 = $11;
      $219 = $15;
      $220 = Math_imul($218, $219)|0;
      $221 = $12;
      $222 = (($221) + ($220<<3)|0);
      HEAPF64[$222>>3] = $217;
      $223 = ((($19)) + 8|0);
      $224 = +HEAPF64[$223>>3];
      $225 = $11;
      $226 = $15;
      $227 = Math_imul($225, $226)|0;
      $228 = $13;
      $229 = (($228) + ($227<<3)|0);
      HEAPF64[$229>>3] = $224;
      $230 = ((($19)) + 16|0);
      $231 = +HEAPF64[$230>>3];
      $232 = $11;
      $233 = $15;
      $234 = Math_imul($232, $233)|0;
      $235 = $14;
      $236 = (($235) + ($234<<3)|0);
      HEAPF64[$236>>3] = $231;
     }
     $237 = $15;
     $238 = (($237) + 1)|0;
     $15 = $238;
    }
    $212 = $8;
    $213 = HEAP32[$212>>2]|0;
    $214 = HEAP32[$213>>2]|0;
    $7 = $214;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   }
  }
 } while(0);
 $306 = $8;
 $307 = ((($306)) + 280|0);
 $308 = +HEAPF64[$307>>3];
 $309 = $308 != 0.0;
 L81: do {
  if ($309) {
   $15 = 0;
   while(1) {
    $310 = $15;
    $311 = $10;
    $312 = ($310|0)<($311|0);
    if (!($312)) {
     break L81;
    }
    $313 = $11;
    $314 = $15;
    $315 = Math_imul($313, $314)|0;
    $316 = $12;
    $317 = (($316) + ($315<<3)|0);
    $318 = +HEAPF64[$317>>3];
    $319 = $318 != inf;
    if ($319) {
     $320 = $8;
     $321 = ((($320)) + 280|0);
     $322 = +HEAPF64[$321>>3];
     $323 = $11;
     $324 = $15;
     $325 = Math_imul($323, $324)|0;
     $326 = $12;
     $327 = (($326) + ($325<<3)|0);
     $328 = +HEAPF64[$327>>3];
     $329 = $328 + $322;
     HEAPF64[$327>>3] = $329;
    }
    $330 = $15;
    $331 = (($330) + 1)|0;
    $15 = $331;
   }
  }
 } while(0);
 $332 = $8;
 $333 = ((($332)) + 248|0);
 $334 = HEAP32[$333>>2]|0;
 $335 = ($334|0)!=(0);
 $336 = $14;
 $337 = ($336|0)!=(0|0);
 $or$cond7 = $335 & $337;
 if ($or$cond7) {
  $338 = $8;
  $339 = $8;
  $340 = ((($339)) + 252|0);
  $341 = $8;
  $342 = ((($341)) + 256|0);
  $343 = $10;
  $344 = $11;
  $345 = $12;
  $346 = $13;
  $347 = $14;
  $348 = (_pj_apply_vgridshift($338,20744,$340,$342,0,$343,$344,$345,$346,$347)|0);
  $349 = ($348|0)!=(0);
  if ($349) {
   $350 = $8;
   $351 = HEAP32[$350>>2]|0;
   $352 = (_pj_ctx_get_errno($351)|0);
   $7 = $352;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  }
 }
 $353 = $8;
 $354 = $9;
 $355 = $10;
 $356 = $11;
 $357 = $12;
 $358 = $13;
 $359 = $14;
 $360 = (_pj_datum_transform($353,$354,$355,$356,$357,$358,$359)|0);
 $361 = ($360|0)!=(0);
 if ($361) {
  $362 = $8;
  $363 = HEAP32[$362>>2]|0;
  $364 = HEAP32[$363>>2]|0;
  $365 = ($364|0)!=(0);
  if ($365) {
   $366 = $8;
   $367 = HEAP32[$366>>2]|0;
   $368 = HEAP32[$367>>2]|0;
   $7 = $368;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  } else {
   $369 = $9;
   $370 = HEAP32[$369>>2]|0;
   $371 = HEAP32[$370>>2]|0;
   $7 = $371;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  }
 }
 $372 = $9;
 $373 = ((($372)) + 248|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = ($374|0)!=(0);
 $376 = $14;
 $377 = ($376|0)!=(0|0);
 $or$cond9 = $375 & $377;
 if ($or$cond9) {
  $378 = $9;
  $379 = $9;
  $380 = ((($379)) + 252|0);
  $381 = $9;
  $382 = ((($381)) + 256|0);
  $383 = $10;
  $384 = $11;
  $385 = $12;
  $386 = $13;
  $387 = $14;
  $388 = (_pj_apply_vgridshift($378,20744,$380,$382,1,$383,$384,$385,$386,$387)|0);
  $389 = ($388|0)!=(0);
  if ($389) {
   $390 = $9;
   $391 = HEAP32[$390>>2]|0;
   $392 = HEAP32[$391>>2]|0;
   $7 = $392;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  }
 }
 $393 = $9;
 $394 = ((($393)) + 280|0);
 $395 = +HEAPF64[$394>>3];
 $396 = $395 != 0.0;
 L108: do {
  if ($396) {
   $15 = 0;
   while(1) {
    $397 = $15;
    $398 = $10;
    $399 = ($397|0)<($398|0);
    if (!($399)) {
     break L108;
    }
    $400 = $11;
    $401 = $15;
    $402 = Math_imul($400, $401)|0;
    $403 = $12;
    $404 = (($403) + ($402<<3)|0);
    $405 = +HEAPF64[$404>>3];
    $406 = $405 != inf;
    if ($406) {
     $407 = $9;
     $408 = ((($407)) + 280|0);
     $409 = +HEAPF64[$408>>3];
     $410 = $11;
     $411 = $15;
     $412 = Math_imul($410, $411)|0;
     $413 = $12;
     $414 = (($413) + ($412<<3)|0);
     $415 = +HEAPF64[$414>>3];
     $416 = $415 - $409;
     HEAPF64[$414>>3] = $416;
    }
    $417 = $15;
    $418 = (($417) + 1)|0;
    $15 = $418;
   }
  }
 } while(0);
 $419 = $9;
 $420 = ((($419)) + 48|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = ($421|0)!=(0);
 L117: do {
  if ($422) {
   $423 = $14;
   $424 = ($423|0)==(0|0);
   $425 = $9;
   if ($424) {
    $426 = HEAP32[$425>>2]|0;
    _pj_ctx_set_errno($426,-45);
    $7 = -45;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   }
   $427 = ((($425)) + 64|0);
   $428 = +HEAPF64[$427>>3];
   $429 = $9;
   $430 = ((($429)) + 80|0);
   $431 = +HEAPF64[$430>>3];
   $432 = $10;
   $433 = $11;
   $434 = $12;
   $435 = $13;
   $436 = $14;
   (_pj_geodetic_to_geocentric($428,$431,$432,$433,$434,$435,$436)|0);
   $437 = $9;
   $438 = ((($437)) + 168|0);
   $439 = +HEAPF64[$438>>3];
   $440 = $439 != 1.0;
   if ($440) {
    $15 = 0;
    while(1) {
     $441 = $15;
     $442 = $10;
     $443 = ($441|0)<($442|0);
     if (!($443)) {
      break L117;
     }
     $444 = $11;
     $445 = $15;
     $446 = Math_imul($444, $445)|0;
     $447 = $12;
     $448 = (($447) + ($446<<3)|0);
     $449 = +HEAPF64[$448>>3];
     $450 = $449 != inf;
     if ($450) {
      $451 = $9;
      $452 = ((($451)) + 168|0);
      $453 = +HEAPF64[$452>>3];
      $454 = $11;
      $455 = $15;
      $456 = Math_imul($454, $455)|0;
      $457 = $12;
      $458 = (($457) + ($456<<3)|0);
      $459 = +HEAPF64[$458>>3];
      $460 = $459 * $453;
      HEAPF64[$458>>3] = $460;
      $461 = $9;
      $462 = ((($461)) + 168|0);
      $463 = +HEAPF64[$462>>3];
      $464 = $11;
      $465 = $15;
      $466 = Math_imul($464, $465)|0;
      $467 = $13;
      $468 = (($467) + ($466<<3)|0);
      $469 = +HEAPF64[$468>>3];
      $470 = $469 * $463;
      HEAPF64[$468>>3] = $470;
     }
     $471 = $15;
     $472 = (($471) + 1)|0;
     $15 = $472;
    }
   }
  } else {
   $473 = $9;
   $474 = ((($473)) + 44|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = ($475|0)!=(0);
   $477 = $9;
   if ($476) {
    $630 = ((($477)) + 44|0);
    $631 = HEAP32[$630>>2]|0;
    $632 = ($631|0)!=(0);
    if (!($632)) {
     break;
    }
    $633 = $9;
    $634 = ((($633)) + 296|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = ($635|0)!=(0);
    if (!($636)) {
     break;
    }
    $15 = 0;
    while(1) {
     $637 = $15;
     $638 = $10;
     $639 = ($637|0)<($638|0);
     if (!($639)) {
      break L117;
     }
     $640 = $11;
     $641 = $15;
     $642 = Math_imul($640, $641)|0;
     $643 = $12;
     $644 = (($643) + ($642<<3)|0);
     $645 = +HEAPF64[$644>>3];
     $646 = $645 == inf;
     L138: do {
      if (!($646)) {
       while(1) {
        $647 = $11;
        $648 = $15;
        $649 = Math_imul($647, $648)|0;
        $650 = $12;
        $651 = (($650) + ($649<<3)|0);
        $652 = +HEAPF64[$651>>3];
        $653 = $9;
        $654 = ((($653)) + 288|0);
        $655 = +HEAPF64[$654>>3];
        $656 = $655 - 3.1415926535897931;
        $657 = $652 < $656;
        if (!($657)) {
         break;
        }
        $658 = $11;
        $659 = $15;
        $660 = Math_imul($658, $659)|0;
        $661 = $12;
        $662 = (($661) + ($660<<3)|0);
        $663 = +HEAPF64[$662>>3];
        $664 = $663 + 6.2831853071795862;
        HEAPF64[$662>>3] = $664;
       }
       while(1) {
        $665 = $11;
        $666 = $15;
        $667 = Math_imul($665, $666)|0;
        $668 = $12;
        $669 = (($668) + ($667<<3)|0);
        $670 = +HEAPF64[$669>>3];
        $671 = $9;
        $672 = ((($671)) + 288|0);
        $673 = +HEAPF64[$672>>3];
        $674 = $673 + 3.1415926535897931;
        $675 = $670 > $674;
        if (!($675)) {
         break L138;
        }
        $676 = $11;
        $677 = $15;
        $678 = Math_imul($676, $677)|0;
        $679 = $12;
        $680 = (($679) + ($678<<3)|0);
        $681 = +HEAPF64[$680>>3];
        $682 = $681 - 6.2831853071795862;
        HEAPF64[$680>>3] = $682;
       }
      }
     } while(0);
     $683 = $15;
     $684 = (($683) + 1)|0;
     $15 = $684;
    }
   }
   $478 = ((($477)) + 12|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = ($479|0)!=(0|0);
   $15 = 0;
   if ($480) {
    L148: while(1) {
     $481 = $15;
     $482 = $10;
     $483 = ($481|0)<($482|0);
     if (!($483)) {
      break L117;
     }
     $484 = $11;
     $485 = $15;
     $486 = Math_imul($484, $485)|0;
     $487 = $12;
     $488 = (($487) + ($486<<3)|0);
     $489 = +HEAPF64[$488>>3];
     HEAPF64[$25>>3] = $489;
     $490 = $11;
     $491 = $15;
     $492 = Math_imul($490, $491)|0;
     $493 = $13;
     $494 = (($493) + ($492<<3)|0);
     $495 = +HEAPF64[$494>>3];
     $496 = ((($25)) + 8|0);
     HEAPF64[$496>>3] = $495;
     $497 = $11;
     $498 = $15;
     $499 = Math_imul($497, $498)|0;
     $500 = $14;
     $501 = (($500) + ($499<<3)|0);
     $502 = +HEAPF64[$501>>3];
     $503 = ((($25)) + 16|0);
     HEAPF64[$503>>3] = $502;
     $504 = +HEAPF64[$25>>3];
     $505 = $504 == inf;
     if (!($505)) {
      $506 = $9;
      ;HEAP32[$$byval_copy17>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy17+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy17+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$$byval_copy17+16>>2]=HEAP32[$25+16>>2]|0;HEAP32[$$byval_copy17+20>>2]=HEAP32[$25+20>>2]|0;
      _pj_fwd3d($26,$$byval_copy17,$506);
      ;HEAP32[$24>>2]=HEAP32[$26>>2]|0;HEAP32[$24+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$26+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$26+16>>2]|0;HEAP32[$24+20>>2]=HEAP32[$26+20>>2]|0;
      $507 = $9;
      $508 = HEAP32[$507>>2]|0;
      $509 = HEAP32[$508>>2]|0;
      $510 = ($509|0)!=(0);
      if ($510) {
       $511 = $9;
       $512 = HEAP32[$511>>2]|0;
       $513 = HEAP32[$512>>2]|0;
       $514 = ($513|0)!=(33);
       do {
        if ($514) {
         $515 = $9;
         $516 = HEAP32[$515>>2]|0;
         $517 = HEAP32[$516>>2]|0;
         $518 = ($517|0)!=(34);
         if (!($518)) {
          break;
         }
         $519 = $9;
         $520 = HEAP32[$519>>2]|0;
         $521 = HEAP32[$520>>2]|0;
         $522 = ($521|0)>(0);
         if ($522) {
          break L148;
         }
         $523 = $9;
         $524 = HEAP32[$523>>2]|0;
         $525 = HEAP32[$524>>2]|0;
         $526 = ($525|0)<(-44);
         $527 = $10;
         $528 = ($527|0)==(1);
         $or$cond11 = $526 | $528;
         if ($or$cond11) {
          break L148;
         }
         $529 = $9;
         $530 = HEAP32[$529>>2]|0;
         $531 = HEAP32[$530>>2]|0;
         $532 = (0 - ($531))|0;
         $533 = (8460 + ($532<<2)|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = ($534|0)==(0);
         if ($535) {
          break L148;
         }
        }
       } while(0);
       HEAPF64[$24>>3] = inf;
       $539 = ((($24)) + 8|0);
       HEAPF64[$539>>3] = inf;
       $540 = ((($24)) + 16|0);
       HEAPF64[$540>>3] = inf;
      }
      $541 = +HEAPF64[$24>>3];
      $542 = $11;
      $543 = $15;
      $544 = Math_imul($542, $543)|0;
      $545 = $12;
      $546 = (($545) + ($544<<3)|0);
      HEAPF64[$546>>3] = $541;
      $547 = ((($24)) + 8|0);
      $548 = +HEAPF64[$547>>3];
      $549 = $11;
      $550 = $15;
      $551 = Math_imul($549, $550)|0;
      $552 = $13;
      $553 = (($552) + ($551<<3)|0);
      HEAPF64[$553>>3] = $548;
      $554 = ((($24)) + 16|0);
      $555 = +HEAPF64[$554>>3];
      $556 = $11;
      $557 = $15;
      $558 = Math_imul($556, $557)|0;
      $559 = $14;
      $560 = (($559) + ($558<<3)|0);
      HEAPF64[$560>>3] = $555;
     }
     $561 = $15;
     $562 = (($561) + 1)|0;
     $15 = $562;
    }
    $536 = $9;
    $537 = HEAP32[$536>>2]|0;
    $538 = HEAP32[$537>>2]|0;
    $7 = $538;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   } else {
    L165: while(1) {
     $563 = $15;
     $564 = $10;
     $565 = ($563|0)<($564|0);
     if (!($565)) {
      break L117;
     }
     $566 = $11;
     $567 = $15;
     $568 = Math_imul($566, $567)|0;
     $569 = $12;
     $570 = (($569) + ($568<<3)|0);
     $571 = +HEAPF64[$570>>3];
     HEAPF64[$28>>3] = $571;
     $572 = $11;
     $573 = $15;
     $574 = Math_imul($572, $573)|0;
     $575 = $13;
     $576 = (($575) + ($574<<3)|0);
     $577 = +HEAPF64[$576>>3];
     $578 = ((($28)) + 8|0);
     HEAPF64[$578>>3] = $577;
     $579 = +HEAPF64[$28>>3];
     $580 = $579 == inf;
     if (!($580)) {
      $581 = $9;
      ;HEAP32[$$byval_copy18>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[$28+12>>2]|0;
      _pj_fwd($29,$$byval_copy18,$581);
      ;HEAP32[$27>>2]=HEAP32[$29>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$27+12>>2]=HEAP32[$29+12>>2]|0;
      $582 = $9;
      $583 = HEAP32[$582>>2]|0;
      $584 = HEAP32[$583>>2]|0;
      $585 = ($584|0)!=(0);
      if ($585) {
       $586 = $9;
       $587 = HEAP32[$586>>2]|0;
       $588 = HEAP32[$587>>2]|0;
       $589 = ($588|0)!=(33);
       do {
        if ($589) {
         $590 = $9;
         $591 = HEAP32[$590>>2]|0;
         $592 = HEAP32[$591>>2]|0;
         $593 = ($592|0)!=(34);
         if (!($593)) {
          break;
         }
         $594 = $9;
         $595 = HEAP32[$594>>2]|0;
         $596 = HEAP32[$595>>2]|0;
         $597 = ($596|0)>(0);
         if ($597) {
          break L165;
         }
         $598 = $9;
         $599 = HEAP32[$598>>2]|0;
         $600 = HEAP32[$599>>2]|0;
         $601 = ($600|0)<(-44);
         $602 = $10;
         $603 = ($602|0)==(1);
         $or$cond13 = $601 | $603;
         if ($or$cond13) {
          break L165;
         }
         $604 = $9;
         $605 = HEAP32[$604>>2]|0;
         $606 = HEAP32[$605>>2]|0;
         $607 = (0 - ($606))|0;
         $608 = (8460 + ($607<<2)|0);
         $609 = HEAP32[$608>>2]|0;
         $610 = ($609|0)==(0);
         if ($610) {
          break L165;
         }
        }
       } while(0);
       HEAPF64[$27>>3] = inf;
       $614 = ((($27)) + 8|0);
       HEAPF64[$614>>3] = inf;
      }
      $615 = +HEAPF64[$27>>3];
      $616 = $11;
      $617 = $15;
      $618 = Math_imul($616, $617)|0;
      $619 = $12;
      $620 = (($619) + ($618<<3)|0);
      HEAPF64[$620>>3] = $615;
      $621 = ((($27)) + 8|0);
      $622 = +HEAPF64[$621>>3];
      $623 = $11;
      $624 = $15;
      $625 = Math_imul($623, $624)|0;
      $626 = $13;
      $627 = (($626) + ($625<<3)|0);
      HEAPF64[$627>>3] = $622;
     }
     $628 = $15;
     $629 = (($628) + 1)|0;
     $15 = $629;
    }
    $611 = $9;
    $612 = HEAP32[$611>>2]|0;
    $613 = HEAP32[$612>>2]|0;
    $7 = $613;
    $723 = $7;
    STACKTOP = sp;return ($723|0);
   }
  }
 } while(0);
 $685 = $9;
 $686 = ((($685)) + 264|0);
 $687 = +HEAPF64[$686>>3];
 $688 = $687 != 1.0;
 $689 = $14;
 $690 = ($689|0)!=(0|0);
 $or$cond15 = $688 & $690;
 L183: do {
  if ($or$cond15) {
   $15 = 0;
   while(1) {
    $691 = $15;
    $692 = $10;
    $693 = ($691|0)<($692|0);
    if (!($693)) {
     break L183;
    }
    $694 = $9;
    $695 = ((($694)) + 272|0);
    $696 = +HEAPF64[$695>>3];
    $697 = $11;
    $698 = $15;
    $699 = Math_imul($697, $698)|0;
    $700 = $14;
    $701 = (($700) + ($699<<3)|0);
    $702 = +HEAPF64[$701>>3];
    $703 = $702 * $696;
    HEAPF64[$701>>3] = $703;
    $704 = $15;
    $705 = (($704) + 1)|0;
    $15 = $705;
   }
  }
 } while(0);
 $706 = $9;
 $707 = ((($706)) + 300|0);
 $708 = (_strcmp($707,20691)|0);
 $709 = ($708|0)!=(0);
 if ($709) {
  $710 = $9;
  $711 = HEAP32[$710>>2]|0;
  $712 = $9;
  $713 = ((($712)) + 300|0);
  $714 = $10;
  $715 = $11;
  $716 = $12;
  $717 = $13;
  $718 = $14;
  $719 = (_pj_adjust_axis($711,$713,1,$714,$715,$716,$717,$718)|0);
  $30 = $719;
  $720 = $30;
  $721 = ($720|0)!=(0);
  if ($721) {
   $722 = $30;
   $7 = $722;
   $723 = $7;
   STACKTOP = sp;return ($723|0);
  }
 }
 $7 = 0;
 $723 = $7;
 STACKTOP = sp;return ($723|0);
}
function _pj_adjust_axis($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $19 = 0.0;
 $24 = $11;
 $25 = ($24|0)!=(0);
 $20 = 0;
 L1: do {
  if ($25) {
   L2: while(1) {
    $111 = $20;
    $112 = $12;
    $113 = ($111|0)<($112|0);
    if (!($113)) {
     break L1;
    }
    $114 = $13;
    $115 = $20;
    $116 = Math_imul($114, $115)|0;
    $117 = $14;
    $118 = (($117) + ($116<<3)|0);
    $119 = +HEAPF64[$118>>3];
    $17 = $119;
    $120 = $13;
    $121 = $20;
    $122 = Math_imul($120, $121)|0;
    $123 = $15;
    $124 = (($123) + ($122<<3)|0);
    $125 = +HEAPF64[$124>>3];
    $18 = $125;
    $126 = $16;
    $127 = ($126|0)!=(0|0);
    if ($127) {
     $128 = $13;
     $129 = $20;
     $130 = Math_imul($128, $129)|0;
     $131 = $16;
     $132 = (($131) + ($130<<3)|0);
     $133 = +HEAPF64[$132>>3];
     $19 = $133;
    }
    $21 = 0;
    while(1) {
     $134 = $21;
     $135 = ($134|0)<(3);
     if (!($135)) {
      break;
     }
     $136 = $21;
     $137 = ($136|0)==(2);
     $138 = $16;
     $139 = ($138|0)==(0|0);
     $or$cond = $137 & $139;
     L11: do {
      if (!($or$cond)) {
       $140 = $21;
       $141 = ($140|0)==(0);
       do {
        if ($141) {
         $142 = $14;
         $23 = $142;
        } else {
         $143 = $21;
         $144 = ($143|0)==(1);
         if ($144) {
          $145 = $15;
          $23 = $145;
          break;
         } else {
          $146 = $16;
          $23 = $146;
          break;
         }
        }
       } while(0);
       $147 = $21;
       $148 = $10;
       $149 = (($148) + ($147)|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150 << 24 >> 24;
       switch ($151|0) {
       case 101:  {
        $152 = $17;
        $153 = $13;
        $154 = $20;
        $155 = Math_imul($153, $154)|0;
        $156 = $23;
        $157 = (($156) + ($155<<3)|0);
        HEAPF64[$157>>3] = $152;
        break L11;
        break;
       }
       case 119:  {
        $158 = $17;
        $159 = -$158;
        $160 = $13;
        $161 = $20;
        $162 = Math_imul($160, $161)|0;
        $163 = $23;
        $164 = (($163) + ($162<<3)|0);
        HEAPF64[$164>>3] = $159;
        break L11;
        break;
       }
       case 110:  {
        $165 = $18;
        $166 = $13;
        $167 = $20;
        $168 = Math_imul($166, $167)|0;
        $169 = $23;
        $170 = (($169) + ($168<<3)|0);
        HEAPF64[$170>>3] = $165;
        break L11;
        break;
       }
       case 115:  {
        $171 = $18;
        $172 = -$171;
        $173 = $13;
        $174 = $20;
        $175 = Math_imul($173, $174)|0;
        $176 = $23;
        $177 = (($176) + ($175<<3)|0);
        HEAPF64[$177>>3] = $172;
        break L11;
        break;
       }
       case 117:  {
        $178 = $19;
        $179 = $13;
        $180 = $20;
        $181 = Math_imul($179, $180)|0;
        $182 = $23;
        $183 = (($182) + ($181<<3)|0);
        HEAPF64[$183>>3] = $178;
        break L11;
        break;
       }
       case 100:  {
        $184 = $19;
        $185 = -$184;
        $186 = $13;
        $187 = $20;
        $188 = Math_imul($186, $187)|0;
        $189 = $23;
        $190 = (($189) + ($188<<3)|0);
        HEAPF64[$190>>3] = $185;
        break L11;
        break;
       }
       default: {
        break L2;
       }
       }
      }
     } while(0);
     $192 = $21;
     $193 = (($192) + 1)|0;
     $21 = $193;
    }
    $194 = $20;
    $195 = (($194) + 1)|0;
    $20 = $195;
   }
   $191 = $9;
   _pj_ctx_set_errno($191,-47);
   $8 = -47;
   $196 = $8;
   STACKTOP = sp;return ($196|0);
  } else {
   L31: while(1) {
    $26 = $20;
    $27 = $12;
    $28 = ($26|0)<($27|0);
    if (!($28)) {
     break L1;
    }
    $29 = $13;
    $30 = $20;
    $31 = Math_imul($29, $30)|0;
    $32 = $14;
    $33 = (($32) + ($31<<3)|0);
    $34 = +HEAPF64[$33>>3];
    $17 = $34;
    $35 = $13;
    $36 = $20;
    $37 = Math_imul($35, $36)|0;
    $38 = $15;
    $39 = (($38) + ($37<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $18 = $40;
    $41 = $16;
    $42 = ($41|0)!=(0|0);
    if ($42) {
     $43 = $13;
     $44 = $20;
     $45 = Math_imul($43, $44)|0;
     $46 = $16;
     $47 = (($46) + ($45<<3)|0);
     $48 = +HEAPF64[$47>>3];
     $19 = $48;
    }
    $21 = 0;
    while(1) {
     $49 = $21;
     $50 = ($49|0)<(3);
     if (!($50)) {
      break;
     }
     $51 = $21;
     $52 = ($51|0)==(0);
     do {
      if ($52) {
       $53 = $17;
       $22 = $53;
      } else {
       $54 = $21;
       $55 = ($54|0)==(1);
       if ($55) {
        $56 = $18;
        $22 = $56;
        break;
       } else {
        $57 = $19;
        $22 = $57;
        break;
       }
      }
     } while(0);
     $58 = $21;
     $59 = $10;
     $60 = (($59) + ($58)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     switch ($62|0) {
     case 101:  {
      $63 = $22;
      $64 = $13;
      $65 = $20;
      $66 = Math_imul($64, $65)|0;
      $67 = $14;
      $68 = (($67) + ($66<<3)|0);
      HEAPF64[$68>>3] = $63;
      break;
     }
     case 119:  {
      $69 = $22;
      $70 = -$69;
      $71 = $13;
      $72 = $20;
      $73 = Math_imul($71, $72)|0;
      $74 = $14;
      $75 = (($74) + ($73<<3)|0);
      HEAPF64[$75>>3] = $70;
      break;
     }
     case 110:  {
      $76 = $22;
      $77 = $13;
      $78 = $20;
      $79 = Math_imul($77, $78)|0;
      $80 = $15;
      $81 = (($80) + ($79<<3)|0);
      HEAPF64[$81>>3] = $76;
      break;
     }
     case 115:  {
      $82 = $22;
      $83 = -$82;
      $84 = $13;
      $85 = $20;
      $86 = Math_imul($84, $85)|0;
      $87 = $15;
      $88 = (($87) + ($86<<3)|0);
      HEAPF64[$88>>3] = $83;
      break;
     }
     case 117:  {
      $89 = $16;
      $90 = ($89|0)!=(0|0);
      if ($90) {
       $91 = $22;
       $92 = $13;
       $93 = $20;
       $94 = Math_imul($92, $93)|0;
       $95 = $16;
       $96 = (($95) + ($94<<3)|0);
       HEAPF64[$96>>3] = $91;
      }
      break;
     }
     case 100:  {
      $97 = $16;
      $98 = ($97|0)!=(0|0);
      if ($98) {
       $99 = $22;
       $100 = -$99;
       $101 = $13;
       $102 = $20;
       $103 = Math_imul($101, $102)|0;
       $104 = $16;
       $105 = (($104) + ($103<<3)|0);
       HEAPF64[$105>>3] = $100;
      }
      break;
     }
     default: {
      break L31;
     }
     }
     $107 = $21;
     $108 = (($107) + 1)|0;
     $21 = $108;
    }
    $109 = $20;
    $110 = (($109) + 1)|0;
    $20 = $110;
   }
   $106 = $9;
   _pj_ctx_set_errno($106,-47);
   $8 = -47;
   $196 = $8;
   STACKTOP = sp;return ($196|0);
  }
 } while(0);
 $8 = 0;
 $196 = $8;
 STACKTOP = sp;return ($196|0);
}
function _pj_geocentric_to_geodetic($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $19 = $9;
 $20 = $19 == 0.0;
 $21 = $8;
 if ($20) {
  $15 = $21;
 } else {
  $22 = $9;
  $23 = 1.0 - $22;
  $24 = (+Math_sqrt((+$23)));
  $25 = $21 * $24;
  $15 = $25;
 }
 $26 = $8;
 $27 = $15;
 $28 = (_pj_Set_Geocentric_Parameters($17,$26,$27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $7 = -45;
  $64 = $7;
  STACKTOP = sp;return ($64|0);
 }
 $16 = 0;
 while(1) {
  $30 = $16;
  $31 = $10;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $16;
  $34 = $11;
  $35 = Math_imul($33, $34)|0;
  $18 = $35;
  $36 = $18;
  $37 = $12;
  $38 = (($37) + ($36<<3)|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $39 == inf;
  if (!($40)) {
   $41 = $18;
   $42 = $12;
   $43 = (($42) + ($41<<3)|0);
   $44 = +HEAPF64[$43>>3];
   $45 = $18;
   $46 = $13;
   $47 = (($46) + ($45<<3)|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $18;
   $50 = $14;
   $51 = (($50) + ($49<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $13;
   $54 = $18;
   $55 = (($53) + ($54<<3)|0);
   $56 = $12;
   $57 = $18;
   $58 = (($56) + ($57<<3)|0);
   $59 = $14;
   $60 = $18;
   $61 = (($59) + ($60<<3)|0);
   _pj_Convert_Geocentric_To_Geodetic($17,$44,$48,$52,$55,$58,$61);
  }
  $62 = $16;
  $63 = (($62) + 1)|0;
  $16 = $63;
 }
 $7 = 0;
 $64 = $7;
 STACKTOP = sp;return ($64|0);
}
function _pj_datum_transform($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $19 = 0;
 $21 = $8;
 $22 = ((($21)) + 176|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = $9;
  $26 = ((($25)) + 176|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = $8;
   $30 = $9;
   $31 = (_pj_compare_datums($29,$30)|0);
   $32 = ($31|0)!=(0);
   if ($32) {
    $7 = 0;
    $278 = $7;
    STACKTOP = sp;return ($278|0);
   }
   $33 = $8;
   $34 = ((($33)) + 64|0);
   $35 = +HEAPF64[$34>>3];
   $15 = $35;
   $36 = $8;
   $37 = ((($36)) + 80|0);
   $38 = +HEAPF64[$37>>3];
   $16 = $38;
   $39 = $9;
   $40 = ((($39)) + 64|0);
   $41 = +HEAPF64[$40>>3];
   $17 = $41;
   $42 = $9;
   $43 = ((($42)) + 80|0);
   $44 = +HEAPF64[$43>>3];
   $18 = $44;
   $45 = $14;
   $46 = ($45|0)==(0|0);
   if ($46) {
    $47 = $10;
    $48 = $47<<3;
    $49 = $11;
    $50 = Math_imul($48, $49)|0;
    $20 = $50;
    $51 = $20;
    $52 = (_pj_malloc($51)|0);
    $14 = $52;
    $53 = $14;
    $54 = $20;
    _memset(($53|0),0,($54|0))|0;
    $19 = 1;
   }
   $55 = $8;
   $56 = ((($55)) + 176|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(3);
   if ($58) {
    $59 = $8;
    $60 = $10;
    $61 = $11;
    $62 = $12;
    $63 = $13;
    $64 = $14;
    (_pj_apply_gridshift_2($59,0,$60,$61,$62,$63,$64)|0);
    $65 = $8;
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)!=(0);
    do {
     if ($68) {
      $69 = $8;
      $70 = HEAP32[$69>>2]|0;
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)>(0);
      if (!($72)) {
       $73 = $8;
       $74 = HEAP32[$73>>2]|0;
       $75 = HEAP32[$74>>2]|0;
       $76 = (0 - ($75))|0;
       $77 = (8460 + ($76<<2)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==(0);
       if (!($79)) {
        break;
       }
      }
      $80 = $19;
      $81 = ($80|0)!=(0);
      if ($81) {
       $82 = $14;
       _pj_dalloc($82);
      }
      $83 = $8;
      $84 = HEAP32[$83>>2]|0;
      $85 = HEAP32[$84>>2]|0;
      $7 = $85;
      $278 = $7;
      STACKTOP = sp;return ($278|0);
     }
    } while(0);
    $15 = 6378137.0;
    $16 = 0.0066943799901413165;
   }
   $86 = $9;
   $87 = ((($86)) + 176|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(3);
   if ($89) {
    $17 = 6378137.0;
    $18 = 0.0066943799901413165;
   }
   $90 = $16;
   $91 = $18;
   $92 = $90 != $91;
   if ($92) {
    label = 24;
   } else {
    $93 = $15;
    $94 = $17;
    $95 = $93 != $94;
    if ($95) {
     label = 24;
    } else {
     $96 = $8;
     $97 = ((($96)) + 176|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(1);
     if ($99) {
      label = 24;
     } else {
      $100 = $8;
      $101 = ((($100)) + 176|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==(2);
      if ($103) {
       label = 24;
      } else {
       $104 = $9;
       $105 = ((($104)) + 176|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($106|0)==(1);
       if ($107) {
        label = 24;
       } else {
        $108 = $9;
        $109 = ((($108)) + 176|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)==(2);
        if ($111) {
         label = 24;
        }
       }
      }
     }
    }
   }
   do {
    if ((label|0) == 24) {
     $112 = $15;
     $113 = $16;
     $114 = $10;
     $115 = $11;
     $116 = $12;
     $117 = $13;
     $118 = $14;
     $119 = (_pj_geodetic_to_geocentric($112,$113,$114,$115,$116,$117,$118)|0);
     $120 = $8;
     $121 = HEAP32[$120>>2]|0;
     HEAP32[$121>>2] = $119;
     $122 = $8;
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)!=(0);
     do {
      if ($125) {
       $126 = $8;
       $127 = HEAP32[$126>>2]|0;
       $128 = HEAP32[$127>>2]|0;
       $129 = ($128|0)>(0);
       if (!($129)) {
        $130 = $8;
        $131 = HEAP32[$130>>2]|0;
        $132 = HEAP32[$131>>2]|0;
        $133 = (0 - ($132))|0;
        $134 = (8460 + ($133<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0);
        if (!($136)) {
         break;
        }
       }
       $137 = $19;
       $138 = ($137|0)!=(0);
       if ($138) {
        $139 = $14;
        _pj_dalloc($139);
       }
       $140 = $8;
       $141 = HEAP32[$140>>2]|0;
       $142 = HEAP32[$141>>2]|0;
       $7 = $142;
       $278 = $7;
       STACKTOP = sp;return ($278|0);
      }
     } while(0);
     $143 = $8;
     $144 = ((($143)) + 176|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)==(1);
     if ($146) {
      label = 32;
     } else {
      $147 = $8;
      $148 = ((($147)) + 176|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)==(2);
      if ($150) {
       label = 32;
      }
     }
     do {
      if ((label|0) == 32) {
       $151 = $8;
       $152 = $10;
       $153 = $11;
       $154 = $12;
       $155 = $13;
       $156 = $14;
       (_pj_geocentric_to_wgs84($151,$152,$153,$154,$155,$156)|0);
       $157 = $8;
       $158 = HEAP32[$157>>2]|0;
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159|0)!=(0);
       if ($160) {
        $161 = $8;
        $162 = HEAP32[$161>>2]|0;
        $163 = HEAP32[$162>>2]|0;
        $164 = ($163|0)>(0);
        if (!($164)) {
         $165 = $8;
         $166 = HEAP32[$165>>2]|0;
         $167 = HEAP32[$166>>2]|0;
         $168 = (0 - ($167))|0;
         $169 = (8460 + ($168<<2)|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = ($170|0)==(0);
         if (!($171)) {
          break;
         }
        }
        $172 = $19;
        $173 = ($172|0)!=(0);
        if ($173) {
         $174 = $14;
         _pj_dalloc($174);
        }
        $175 = $8;
        $176 = HEAP32[$175>>2]|0;
        $177 = HEAP32[$176>>2]|0;
        $7 = $177;
        $278 = $7;
        STACKTOP = sp;return ($278|0);
       }
      }
     } while(0);
     $178 = $9;
     $179 = ((($178)) + 176|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180|0)==(1);
     if ($181) {
      label = 40;
     } else {
      $182 = $9;
      $183 = ((($182)) + 176|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ($184|0)==(2);
      if ($185) {
       label = 40;
      }
     }
     do {
      if ((label|0) == 40) {
       $186 = $9;
       $187 = $10;
       $188 = $11;
       $189 = $12;
       $190 = $13;
       $191 = $14;
       (_pj_geocentric_from_wgs84($186,$187,$188,$189,$190,$191)|0);
       $192 = $9;
       $193 = HEAP32[$192>>2]|0;
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)!=(0);
       if ($195) {
        $196 = $9;
        $197 = HEAP32[$196>>2]|0;
        $198 = HEAP32[$197>>2]|0;
        $199 = ($198|0)>(0);
        if (!($199)) {
         $200 = $9;
         $201 = HEAP32[$200>>2]|0;
         $202 = HEAP32[$201>>2]|0;
         $203 = (0 - ($202))|0;
         $204 = (8460 + ($203<<2)|0);
         $205 = HEAP32[$204>>2]|0;
         $206 = ($205|0)==(0);
         if (!($206)) {
          break;
         }
        }
        $207 = $19;
        $208 = ($207|0)!=(0);
        if ($208) {
         $209 = $14;
         _pj_dalloc($209);
        }
        $210 = $9;
        $211 = HEAP32[$210>>2]|0;
        $212 = HEAP32[$211>>2]|0;
        $7 = $212;
        $278 = $7;
        STACKTOP = sp;return ($278|0);
       }
      }
     } while(0);
     $213 = $17;
     $214 = $18;
     $215 = $10;
     $216 = $11;
     $217 = $12;
     $218 = $13;
     $219 = $14;
     $220 = (_pj_geocentric_to_geodetic($213,$214,$215,$216,$217,$218,$219)|0);
     $221 = $9;
     $222 = HEAP32[$221>>2]|0;
     HEAP32[$222>>2] = $220;
     $223 = $9;
     $224 = HEAP32[$223>>2]|0;
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)!=(0);
     if ($226) {
      $227 = $9;
      $228 = HEAP32[$227>>2]|0;
      $229 = HEAP32[$228>>2]|0;
      $230 = ($229|0)>(0);
      if (!($230)) {
       $231 = $9;
       $232 = HEAP32[$231>>2]|0;
       $233 = HEAP32[$232>>2]|0;
       $234 = (0 - ($233))|0;
       $235 = (8460 + ($234<<2)|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = ($236|0)==(0);
       if (!($237)) {
        break;
       }
      }
      $238 = $19;
      $239 = ($238|0)!=(0);
      if ($239) {
       $240 = $14;
       _pj_dalloc($240);
      }
      $241 = $9;
      $242 = HEAP32[$241>>2]|0;
      $243 = HEAP32[$242>>2]|0;
      $7 = $243;
      $278 = $7;
      STACKTOP = sp;return ($278|0);
     }
    }
   } while(0);
   $244 = $9;
   $245 = ((($244)) + 176|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = ($246|0)==(3);
   do {
    if ($247) {
     $248 = $9;
     $249 = $10;
     $250 = $11;
     $251 = $12;
     $252 = $13;
     $253 = $14;
     (_pj_apply_gridshift_2($248,1,$249,$250,$251,$252,$253)|0);
     $254 = $9;
     $255 = HEAP32[$254>>2]|0;
     $256 = HEAP32[$255>>2]|0;
     $257 = ($256|0)!=(0);
     if ($257) {
      $258 = $9;
      $259 = HEAP32[$258>>2]|0;
      $260 = HEAP32[$259>>2]|0;
      $261 = ($260|0)>(0);
      if (!($261)) {
       $262 = $9;
       $263 = HEAP32[$262>>2]|0;
       $264 = HEAP32[$263>>2]|0;
       $265 = (0 - ($264))|0;
       $266 = (8460 + ($265<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if (!($268)) {
        break;
       }
      }
      $269 = $19;
      $270 = ($269|0)!=(0);
      if ($270) {
       $271 = $14;
       _pj_dalloc($271);
      }
      $272 = $9;
      $273 = HEAP32[$272>>2]|0;
      $274 = HEAP32[$273>>2]|0;
      $7 = $274;
      $278 = $7;
      STACKTOP = sp;return ($278|0);
     }
    }
   } while(0);
   $275 = $19;
   $276 = ($275|0)!=(0);
   if ($276) {
    $277 = $14;
    _pj_dalloc($277);
   }
   $7 = 0;
   $278 = $7;
   STACKTOP = sp;return ($278|0);
  }
 }
 $7 = 0;
 $278 = $7;
 STACKTOP = sp;return ($278|0);
}
function _pj_geodetic_to_geocentric($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = 0;
 $20 = $9;
 $21 = $20 == 0.0;
 $22 = $8;
 if ($21) {
  $15 = $22;
 } else {
  $23 = $9;
  $24 = 1.0 - $23;
  $25 = (+Math_sqrt((+$24)));
  $26 = $22 * $25;
  $15 = $26;
 }
 $27 = $8;
 $28 = $15;
 $29 = (_pj_Set_Geocentric_Parameters($17,$27,$28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $7 = -45;
  $74 = $7;
  STACKTOP = sp;return ($74|0);
 }
 $16 = 0;
 while(1) {
  $31 = $16;
  $32 = $10;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $16;
  $35 = $11;
  $36 = Math_imul($34, $35)|0;
  $19 = $36;
  $37 = $19;
  $38 = $12;
  $39 = (($38) + ($37<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 == inf;
  if (!($41)) {
   $42 = $19;
   $43 = $13;
   $44 = (($43) + ($42<<3)|0);
   $45 = +HEAPF64[$44>>3];
   $46 = $19;
   $47 = $12;
   $48 = (($47) + ($46<<3)|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $19;
   $51 = $14;
   $52 = (($51) + ($50<<3)|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $12;
   $55 = $19;
   $56 = (($54) + ($55<<3)|0);
   $57 = $13;
   $58 = $19;
   $59 = (($57) + ($58<<3)|0);
   $60 = $14;
   $61 = $19;
   $62 = (($60) + ($61<<3)|0);
   $63 = (_pj_Convert_Geodetic_To_Geocentric($17,$45,$49,$53,$56,$59,$62)|0);
   $64 = ($63|0)!=(0);
   if ($64) {
    $18 = -14;
    $65 = $19;
    $66 = $13;
    $67 = (($66) + ($65<<3)|0);
    HEAPF64[$67>>3] = inf;
    $68 = $19;
    $69 = $12;
    $70 = (($69) + ($68<<3)|0);
    HEAPF64[$70>>3] = inf;
   }
  }
  $71 = $16;
  $72 = (($71) + 1)|0;
  $16 = $72;
 }
 $73 = $18;
 $7 = $73;
 $74 = $7;
 STACKTOP = sp;return ($74|0);
}
function _pj_compare_datums($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0;
 var $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 176|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = ((($10)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)!=($12|0);
 if ($13) {
  $2 = 0;
  $154 = $2;
  STACKTOP = sp;return ($154|0);
 }
 $14 = $3;
 $15 = ((($14)) + 64|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $4;
 $18 = ((($17)) + 64|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 != $19;
 if (!($20)) {
  $21 = $3;
  $22 = ((($21)) + 80|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $4;
  $25 = ((($24)) + 80|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $23 - $26;
  $28 = $27 < 0.0;
  $29 = $3;
  $30 = ((($29)) + 80|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $4;
  $33 = ((($32)) + 80|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $31 - $34;
  $36 = -1.0 * $35;
  $37 = $28 ? $36 : $35;
  $38 = $37 > 5.0000000000000002E-11;
  if (!($38)) {
   $39 = $3;
   $40 = ((($39)) + 176|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(1);
   $43 = $3;
   if ($42) {
    $44 = ((($43)) + 184|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $4;
    $47 = ((($46)) + 184|0);
    $48 = +HEAPF64[$47>>3];
    $49 = $45 == $48;
    if ($49) {
     $50 = $3;
     $51 = ((($50)) + 184|0);
     $52 = ((($51)) + 8|0);
     $53 = +HEAPF64[$52>>3];
     $54 = $4;
     $55 = ((($54)) + 184|0);
     $56 = ((($55)) + 8|0);
     $57 = +HEAPF64[$56>>3];
     $58 = $53 == $57;
     if ($58) {
      $59 = $3;
      $60 = ((($59)) + 184|0);
      $61 = ((($60)) + 16|0);
      $62 = +HEAPF64[$61>>3];
      $63 = $4;
      $64 = ((($63)) + 184|0);
      $65 = ((($64)) + 16|0);
      $66 = +HEAPF64[$65>>3];
      $67 = $62 == $66;
      $69 = $67;
     } else {
      $69 = 0;
     }
    } else {
     $69 = 0;
    }
    $68 = $69&1;
    $2 = $68;
    $154 = $2;
    STACKTOP = sp;return ($154|0);
   }
   $70 = ((($43)) + 176|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(2);
   $73 = $3;
   if (!($72)) {
    $136 = ((($73)) + 176|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(3);
    if ($138) {
     $139 = $3;
     $140 = HEAP32[$139>>2]|0;
     $141 = $3;
     $142 = ((($141)) + 32|0);
     $143 = HEAP32[$142>>2]|0;
     _pj_param($5,$140,$143,20756);
     $144 = HEAP32[$5>>2]|0;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = $4;
     $148 = ((($147)) + 32|0);
     $149 = HEAP32[$148>>2]|0;
     _pj_param($6,$146,$149,20756);
     $150 = HEAP32[$6>>2]|0;
     $151 = (_strcmp($144,$150)|0);
     $152 = ($151|0)==(0);
     $153 = $152&1;
     $2 = $153;
     $154 = $2;
     STACKTOP = sp;return ($154|0);
    } else {
     $2 = 1;
     $154 = $2;
     STACKTOP = sp;return ($154|0);
    }
   }
   $74 = ((($73)) + 184|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $4;
   $77 = ((($76)) + 184|0);
   $78 = +HEAPF64[$77>>3];
   $79 = $75 == $78;
   if ($79) {
    $80 = $3;
    $81 = ((($80)) + 184|0);
    $82 = ((($81)) + 8|0);
    $83 = +HEAPF64[$82>>3];
    $84 = $4;
    $85 = ((($84)) + 184|0);
    $86 = ((($85)) + 8|0);
    $87 = +HEAPF64[$86>>3];
    $88 = $83 == $87;
    if ($88) {
     $89 = $3;
     $90 = ((($89)) + 184|0);
     $91 = ((($90)) + 16|0);
     $92 = +HEAPF64[$91>>3];
     $93 = $4;
     $94 = ((($93)) + 184|0);
     $95 = ((($94)) + 16|0);
     $96 = +HEAPF64[$95>>3];
     $97 = $92 == $96;
     if ($97) {
      $98 = $3;
      $99 = ((($98)) + 184|0);
      $100 = ((($99)) + 24|0);
      $101 = +HEAPF64[$100>>3];
      $102 = $4;
      $103 = ((($102)) + 184|0);
      $104 = ((($103)) + 24|0);
      $105 = +HEAPF64[$104>>3];
      $106 = $101 == $105;
      if ($106) {
       $107 = $3;
       $108 = ((($107)) + 184|0);
       $109 = ((($108)) + 32|0);
       $110 = +HEAPF64[$109>>3];
       $111 = $4;
       $112 = ((($111)) + 184|0);
       $113 = ((($112)) + 32|0);
       $114 = +HEAPF64[$113>>3];
       $115 = $110 == $114;
       if ($115) {
        $116 = $3;
        $117 = ((($116)) + 184|0);
        $118 = ((($117)) + 40|0);
        $119 = +HEAPF64[$118>>3];
        $120 = $4;
        $121 = ((($120)) + 184|0);
        $122 = ((($121)) + 40|0);
        $123 = +HEAPF64[$122>>3];
        $124 = $119 == $123;
        if ($124) {
         $125 = $3;
         $126 = ((($125)) + 184|0);
         $127 = ((($126)) + 48|0);
         $128 = +HEAPF64[$127>>3];
         $129 = $4;
         $130 = ((($129)) + 184|0);
         $131 = ((($130)) + 48|0);
         $132 = +HEAPF64[$131>>3];
         $133 = $128 == $132;
         $135 = $133;
        } else {
         $135 = 0;
        }
       } else {
        $135 = 0;
       }
      } else {
       $135 = 0;
      }
     } else {
      $135 = 0;
     }
    } else {
     $135 = 0;
    }
   } else {
    $135 = 0;
   }
   $134 = $135&1;
   $2 = $134;
   $154 = $2;
   STACKTOP = sp;return ($154|0);
  }
 }
 $2 = 0;
 $154 = $2;
 STACKTOP = sp;return ($154|0);
}
function _pj_geocentric_to_wgs84($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = $6;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 if ($21) {
  $12 = 0;
  while(1) {
   $22 = $12;
   $23 = $7;
   $24 = ($22|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $12;
   $26 = $8;
   $27 = Math_imul($25, $26)|0;
   $13 = $27;
   $28 = $13;
   $29 = $9;
   $30 = (($29) + ($28<<3)|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $31 == inf;
   if (!($32)) {
    $33 = $13;
    $34 = $9;
    $35 = (($34) + ($33<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $6;
    $38 = ((($37)) + 184|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $36 + $39;
    $41 = $13;
    $42 = $9;
    $43 = (($42) + ($41<<3)|0);
    HEAPF64[$43>>3] = $40;
    $44 = $13;
    $45 = $10;
    $46 = (($45) + ($44<<3)|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $6;
    $49 = ((($48)) + 184|0);
    $50 = ((($49)) + 8|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $47 + $51;
    $53 = $13;
    $54 = $10;
    $55 = (($54) + ($53<<3)|0);
    HEAPF64[$55>>3] = $52;
    $56 = $13;
    $57 = $11;
    $58 = (($57) + ($56<<3)|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $6;
    $61 = ((($60)) + 184|0);
    $62 = ((($61)) + 16|0);
    $63 = +HEAPF64[$62>>3];
    $64 = $59 + $63;
    $65 = $13;
    $66 = $11;
    $67 = (($66) + ($65<<3)|0);
    HEAPF64[$67>>3] = $64;
   }
   $68 = $12;
   $69 = (($68) + 1)|0;
   $12 = $69;
  }
  STACKTOP = sp;return 0;
 }
 $70 = $6;
 $71 = ((($70)) + 176|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(2);
 if (!($73)) {
  STACKTOP = sp;return 0;
 }
 $12 = 0;
 while(1) {
  $74 = $12;
  $75 = $7;
  $76 = ($74|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $12;
  $78 = $8;
  $79 = Math_imul($77, $78)|0;
  $14 = $79;
  $80 = $14;
  $81 = $9;
  $82 = (($81) + ($80<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $83 == inf;
  if (!($84)) {
   $85 = $6;
   $86 = ((($85)) + 184|0);
   $87 = ((($86)) + 48|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $14;
   $90 = $9;
   $91 = (($90) + ($89<<3)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $6;
   $94 = ((($93)) + 184|0);
   $95 = ((($94)) + 40|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $14;
   $98 = $10;
   $99 = (($98) + ($97<<3)|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $96 * $100;
   $102 = $92 - $101;
   $103 = $6;
   $104 = ((($103)) + 184|0);
   $105 = ((($104)) + 32|0);
   $106 = +HEAPF64[$105>>3];
   $107 = $14;
   $108 = $11;
   $109 = (($108) + ($107<<3)|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $106 * $110;
   $112 = $102 + $111;
   $113 = $88 * $112;
   $114 = $6;
   $115 = ((($114)) + 184|0);
   $116 = +HEAPF64[$115>>3];
   $117 = $113 + $116;
   $15 = $117;
   $118 = $6;
   $119 = ((($118)) + 184|0);
   $120 = ((($119)) + 48|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $6;
   $123 = ((($122)) + 184|0);
   $124 = ((($123)) + 40|0);
   $125 = +HEAPF64[$124>>3];
   $126 = $14;
   $127 = $9;
   $128 = (($127) + ($126<<3)|0);
   $129 = +HEAPF64[$128>>3];
   $130 = $125 * $129;
   $131 = $14;
   $132 = $10;
   $133 = (($132) + ($131<<3)|0);
   $134 = +HEAPF64[$133>>3];
   $135 = $130 + $134;
   $136 = $6;
   $137 = ((($136)) + 184|0);
   $138 = ((($137)) + 24|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $14;
   $141 = $11;
   $142 = (($141) + ($140<<3)|0);
   $143 = +HEAPF64[$142>>3];
   $144 = $139 * $143;
   $145 = $135 - $144;
   $146 = $121 * $145;
   $147 = $6;
   $148 = ((($147)) + 184|0);
   $149 = ((($148)) + 8|0);
   $150 = +HEAPF64[$149>>3];
   $151 = $146 + $150;
   $16 = $151;
   $152 = $6;
   $153 = ((($152)) + 184|0);
   $154 = ((($153)) + 48|0);
   $155 = +HEAPF64[$154>>3];
   $156 = $6;
   $157 = ((($156)) + 184|0);
   $158 = ((($157)) + 32|0);
   $159 = +HEAPF64[$158>>3];
   $160 = -$159;
   $161 = $14;
   $162 = $9;
   $163 = (($162) + ($161<<3)|0);
   $164 = +HEAPF64[$163>>3];
   $165 = $160 * $164;
   $166 = $6;
   $167 = ((($166)) + 184|0);
   $168 = ((($167)) + 24|0);
   $169 = +HEAPF64[$168>>3];
   $170 = $14;
   $171 = $10;
   $172 = (($171) + ($170<<3)|0);
   $173 = +HEAPF64[$172>>3];
   $174 = $169 * $173;
   $175 = $165 + $174;
   $176 = $14;
   $177 = $11;
   $178 = (($177) + ($176<<3)|0);
   $179 = +HEAPF64[$178>>3];
   $180 = $175 + $179;
   $181 = $155 * $180;
   $182 = $6;
   $183 = ((($182)) + 184|0);
   $184 = ((($183)) + 16|0);
   $185 = +HEAPF64[$184>>3];
   $186 = $181 + $185;
   $17 = $186;
   $187 = $15;
   $188 = $14;
   $189 = $9;
   $190 = (($189) + ($188<<3)|0);
   HEAPF64[$190>>3] = $187;
   $191 = $16;
   $192 = $14;
   $193 = $10;
   $194 = (($193) + ($192<<3)|0);
   HEAPF64[$194>>3] = $191;
   $195 = $17;
   $196 = $14;
   $197 = $11;
   $198 = (($197) + ($196<<3)|0);
   HEAPF64[$198>>3] = $195;
  }
  $199 = $12;
  $200 = (($199) + 1)|0;
  $12 = $200;
 }
 STACKTOP = sp;return 0;
}
function _pj_geocentric_from_wgs84($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = $6;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 if ($21) {
  $12 = 0;
  while(1) {
   $22 = $12;
   $23 = $7;
   $24 = ($22|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $12;
   $26 = $8;
   $27 = Math_imul($25, $26)|0;
   $13 = $27;
   $28 = $13;
   $29 = $9;
   $30 = (($29) + ($28<<3)|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $31 == inf;
   if (!($32)) {
    $33 = $13;
    $34 = $9;
    $35 = (($34) + ($33<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $6;
    $38 = ((($37)) + 184|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $36 - $39;
    $41 = $13;
    $42 = $9;
    $43 = (($42) + ($41<<3)|0);
    HEAPF64[$43>>3] = $40;
    $44 = $13;
    $45 = $10;
    $46 = (($45) + ($44<<3)|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $6;
    $49 = ((($48)) + 184|0);
    $50 = ((($49)) + 8|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $47 - $51;
    $53 = $13;
    $54 = $10;
    $55 = (($54) + ($53<<3)|0);
    HEAPF64[$55>>3] = $52;
    $56 = $13;
    $57 = $11;
    $58 = (($57) + ($56<<3)|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $6;
    $61 = ((($60)) + 184|0);
    $62 = ((($61)) + 16|0);
    $63 = +HEAPF64[$62>>3];
    $64 = $59 - $63;
    $65 = $13;
    $66 = $11;
    $67 = (($66) + ($65<<3)|0);
    HEAPF64[$67>>3] = $64;
   }
   $68 = $12;
   $69 = (($68) + 1)|0;
   $12 = $69;
  }
  STACKTOP = sp;return 0;
 }
 $70 = $6;
 $71 = ((($70)) + 176|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(2);
 if (!($73)) {
  STACKTOP = sp;return 0;
 }
 $12 = 0;
 while(1) {
  $74 = $12;
  $75 = $7;
  $76 = ($74|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $12;
  $78 = $8;
  $79 = Math_imul($77, $78)|0;
  $14 = $79;
  $80 = $14;
  $81 = $9;
  $82 = (($81) + ($80<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $83 == inf;
  if (!($84)) {
   $85 = $14;
   $86 = $9;
   $87 = (($86) + ($85<<3)|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $6;
   $90 = ((($89)) + 184|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $88 - $91;
   $93 = $6;
   $94 = ((($93)) + 184|0);
   $95 = ((($94)) + 48|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $92 / $96;
   $15 = $97;
   $98 = $14;
   $99 = $10;
   $100 = (($99) + ($98<<3)|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $6;
   $103 = ((($102)) + 184|0);
   $104 = ((($103)) + 8|0);
   $105 = +HEAPF64[$104>>3];
   $106 = $101 - $105;
   $107 = $6;
   $108 = ((($107)) + 184|0);
   $109 = ((($108)) + 48|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $106 / $110;
   $16 = $111;
   $112 = $14;
   $113 = $11;
   $114 = (($113) + ($112<<3)|0);
   $115 = +HEAPF64[$114>>3];
   $116 = $6;
   $117 = ((($116)) + 184|0);
   $118 = ((($117)) + 16|0);
   $119 = +HEAPF64[$118>>3];
   $120 = $115 - $119;
   $121 = $6;
   $122 = ((($121)) + 184|0);
   $123 = ((($122)) + 48|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $120 / $124;
   $17 = $125;
   $126 = $15;
   $127 = $6;
   $128 = ((($127)) + 184|0);
   $129 = ((($128)) + 40|0);
   $130 = +HEAPF64[$129>>3];
   $131 = $16;
   $132 = $130 * $131;
   $133 = $126 + $132;
   $134 = $6;
   $135 = ((($134)) + 184|0);
   $136 = ((($135)) + 32|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $17;
   $139 = $137 * $138;
   $140 = $133 - $139;
   $141 = $14;
   $142 = $9;
   $143 = (($142) + ($141<<3)|0);
   HEAPF64[$143>>3] = $140;
   $144 = $6;
   $145 = ((($144)) + 184|0);
   $146 = ((($145)) + 40|0);
   $147 = +HEAPF64[$146>>3];
   $148 = -$147;
   $149 = $15;
   $150 = $148 * $149;
   $151 = $16;
   $152 = $150 + $151;
   $153 = $6;
   $154 = ((($153)) + 184|0);
   $155 = ((($154)) + 24|0);
   $156 = +HEAPF64[$155>>3];
   $157 = $17;
   $158 = $156 * $157;
   $159 = $152 + $158;
   $160 = $14;
   $161 = $10;
   $162 = (($161) + ($160<<3)|0);
   HEAPF64[$162>>3] = $159;
   $163 = $6;
   $164 = ((($163)) + 184|0);
   $165 = ((($164)) + 32|0);
   $166 = +HEAPF64[$165>>3];
   $167 = $15;
   $168 = $166 * $167;
   $169 = $6;
   $170 = ((($169)) + 184|0);
   $171 = ((($170)) + 24|0);
   $172 = +HEAPF64[$171>>3];
   $173 = $16;
   $174 = $172 * $173;
   $175 = $168 - $174;
   $176 = $17;
   $177 = $175 + $176;
   $178 = $14;
   $179 = $11;
   $180 = (($179) + ($178<<3)|0);
   HEAPF64[$180>>3] = $177;
  }
  $181 = $12;
  $182 = (($181) + 1)|0;
  $12 = $182;
 }
 STACKTOP = sp;return 0;
}
function _pj_Set_Geocentric_Parameters($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = $4;
 $8 = $7 <= 0.0;
 if ($8) {
  $9 = $6;
  $10 = $9 | 4;
  $6 = $10;
 }
 $11 = $5;
 $12 = $11 <= 0.0;
 if ($12) {
  $13 = $6;
  $14 = $13 | 8;
  $6 = $14;
 }
 $15 = $4;
 $16 = $5;
 $17 = $15 < $16;
 if ($17) {
  $18 = $6;
  $19 = $18 | 16;
  $6 = $19;
 }
 $20 = $6;
 $21 = ($20|0)!=(0);
 if ($21) {
  $63 = $6;
  STACKTOP = sp;return ($63|0);
 }
 $22 = $4;
 $23 = $3;
 HEAPF64[$23>>3] = $22;
 $24 = $5;
 $25 = $3;
 $26 = ((($25)) + 8|0);
 HEAPF64[$26>>3] = $24;
 $27 = $4;
 $28 = $4;
 $29 = $27 * $28;
 $30 = $3;
 $31 = ((($30)) + 16|0);
 HEAPF64[$31>>3] = $29;
 $32 = $5;
 $33 = $5;
 $34 = $32 * $33;
 $35 = $3;
 $36 = ((($35)) + 24|0);
 HEAPF64[$36>>3] = $34;
 $37 = $3;
 $38 = ((($37)) + 16|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $3;
 $41 = ((($40)) + 24|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $39 - $42;
 $44 = $3;
 $45 = ((($44)) + 16|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $43 / $46;
 $48 = $3;
 $49 = ((($48)) + 32|0);
 HEAPF64[$49>>3] = $47;
 $50 = $3;
 $51 = ((($50)) + 16|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $3;
 $54 = ((($53)) + 24|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $52 - $55;
 $57 = $3;
 $58 = ((($57)) + 24|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $56 / $59;
 $61 = $3;
 $62 = ((($61)) + 40|0);
 HEAPF64[$62>>3] = $60;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _pj_Convert_Geodetic_To_Geocentric($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $9 = 0.0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 $19 = $8;
 $20 = $19 < -1.5707963267948966;
 $21 = $8;
 $22 = $21 > -1.5723671231216914;
 $or$cond = $20 & $22;
 do {
  if ($or$cond) {
   $8 = -1.5707963267948966;
  } else {
   $23 = $8;
   $24 = $23 > 1.5707963267948966;
   $25 = $8;
   $26 = $25 < 1.5723671231216914;
   $or$cond3 = $24 & $26;
   if ($or$cond3) {
    $8 = 1.5707963267948966;
    break;
   }
   $27 = $8;
   $28 = $27 < -1.5707963267948966;
   $29 = $8;
   $30 = $29 > 1.5707963267948966;
   $or$cond5 = $28 | $30;
   if ($or$cond5) {
    $31 = $14;
    $32 = $31 | 1;
    $14 = $32;
   }
  }
 } while(0);
 $33 = $14;
 $34 = ($33|0)!=(0);
 if ($34) {
  $85 = $14;
  STACKTOP = sp;return ($85|0);
 }
 $35 = $9;
 $36 = $35 > 3.1415926535897931;
 if ($36) {
  $37 = $9;
  $38 = $37 - 6.2831853071795862;
  $9 = $38;
 }
 $39 = $8;
 $40 = (+Math_sin((+$39)));
 $16 = $40;
 $41 = $8;
 $42 = (+Math_cos((+$41)));
 $18 = $42;
 $43 = $16;
 $44 = $16;
 $45 = $43 * $44;
 $17 = $45;
 $46 = $7;
 $47 = +HEAPF64[$46>>3];
 $48 = $7;
 $49 = ((($48)) + 32|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $17;
 $52 = $50 * $51;
 $53 = 1.0 - $52;
 $54 = (+Math_sqrt((+$53)));
 $55 = $47 / $54;
 $15 = $55;
 $56 = $15;
 $57 = $10;
 $58 = $56 + $57;
 $59 = $18;
 $60 = $58 * $59;
 $61 = $9;
 $62 = (+Math_cos((+$61)));
 $63 = $60 * $62;
 $64 = $11;
 HEAPF64[$64>>3] = $63;
 $65 = $15;
 $66 = $10;
 $67 = $65 + $66;
 $68 = $18;
 $69 = $67 * $68;
 $70 = $9;
 $71 = (+Math_sin((+$70)));
 $72 = $69 * $71;
 $73 = $12;
 HEAPF64[$73>>3] = $72;
 $74 = $15;
 $75 = $7;
 $76 = ((($75)) + 32|0);
 $77 = +HEAPF64[$76>>3];
 $78 = 1.0 - $77;
 $79 = $74 * $78;
 $80 = $10;
 $81 = $79 + $80;
 $82 = $16;
 $83 = $81 * $82;
 $84 = $13;
 HEAPF64[$84>>3] = $83;
 $85 = $14;
 STACKTOP = sp;return ($85|0);
}
function _pj_Convert_Geocentric_To_Geodetic($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $27 = $8;
 $28 = $8;
 $29 = $27 * $28;
 $30 = $9;
 $31 = $9;
 $32 = $30 * $31;
 $33 = $29 + $32;
 $34 = (+Math_sqrt((+$33)));
 $14 = $34;
 $35 = $8;
 $36 = $8;
 $37 = $35 * $36;
 $38 = $9;
 $39 = $9;
 $40 = $38 * $39;
 $41 = $37 + $40;
 $42 = $10;
 $43 = $10;
 $44 = $42 * $43;
 $45 = $41 + $44;
 $46 = (+Math_sqrt((+$45)));
 $15 = $46;
 $47 = $14;
 $48 = $7;
 $49 = +HEAPF64[$48>>3];
 $50 = $47 / $49;
 $51 = $50 < 9.9999999999999998E-13;
 if ($51) {
  $52 = $12;
  HEAPF64[$52>>3] = 0.0;
  $53 = $15;
  $54 = $7;
  $55 = +HEAPF64[$54>>3];
  $56 = $53 / $55;
  $57 = $56 < 9.9999999999999998E-13;
  if ($57) {
   $58 = $11;
   HEAPF64[$58>>3] = 1.5707963267948966;
   $59 = $7;
   $60 = ((($59)) + 8|0);
   $61 = +HEAPF64[$60>>3];
   $62 = -$61;
   $63 = $13;
   HEAPF64[$63>>3] = $62;
   STACKTOP = sp;return;
  }
 } else {
  $64 = $9;
  $65 = $8;
  $66 = (+Math_atan2((+$64),(+$65)));
  $67 = $12;
  HEAPF64[$67>>3] = $66;
 }
 $68 = $10;
 $69 = $15;
 $70 = $68 / $69;
 $16 = $70;
 $71 = $14;
 $72 = $15;
 $73 = $71 / $72;
 $17 = $73;
 $74 = $7;
 $75 = ((($74)) + 32|0);
 $76 = +HEAPF64[$75>>3];
 $77 = $7;
 $78 = ((($77)) + 32|0);
 $79 = +HEAPF64[$78>>3];
 $80 = 2.0 - $79;
 $81 = $76 * $80;
 $82 = $17;
 $83 = $81 * $82;
 $84 = $17;
 $85 = $83 * $84;
 $86 = 1.0 - $85;
 $87 = (+Math_sqrt((+$86)));
 $88 = 1.0 / $87;
 $18 = $88;
 $89 = $17;
 $90 = $7;
 $91 = ((($90)) + 32|0);
 $92 = +HEAPF64[$91>>3];
 $93 = 1.0 - $92;
 $94 = $89 * $93;
 $95 = $18;
 $96 = $94 * $95;
 $21 = $96;
 $97 = $16;
 $98 = $18;
 $99 = $97 * $98;
 $22 = $99;
 $26 = 0;
 while(1) {
  $100 = $26;
  $101 = (($100) + 1)|0;
  $26 = $101;
  $102 = $7;
  $103 = +HEAPF64[$102>>3];
  $104 = $7;
  $105 = ((($104)) + 32|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $22;
  $108 = $106 * $107;
  $109 = $22;
  $110 = $108 * $109;
  $111 = 1.0 - $110;
  $112 = (+Math_sqrt((+$111)));
  $113 = $103 / $112;
  $20 = $113;
  $114 = $14;
  $115 = $21;
  $116 = $114 * $115;
  $117 = $10;
  $118 = $22;
  $119 = $117 * $118;
  $120 = $116 + $119;
  $121 = $20;
  $122 = $7;
  $123 = ((($122)) + 32|0);
  $124 = +HEAPF64[$123>>3];
  $125 = $22;
  $126 = $124 * $125;
  $127 = $22;
  $128 = $126 * $127;
  $129 = 1.0 - $128;
  $130 = $121 * $129;
  $131 = $120 - $130;
  $132 = $13;
  HEAPF64[$132>>3] = $131;
  $133 = $7;
  $134 = ((($133)) + 32|0);
  $135 = +HEAPF64[$134>>3];
  $136 = $20;
  $137 = $135 * $136;
  $138 = $20;
  $139 = $13;
  $140 = +HEAPF64[$139>>3];
  $141 = $138 + $140;
  $142 = $137 / $141;
  $19 = $142;
  $143 = $19;
  $144 = $19;
  $145 = 2.0 - $144;
  $146 = $143 * $145;
  $147 = $17;
  $148 = $146 * $147;
  $149 = $17;
  $150 = $148 * $149;
  $151 = 1.0 - $150;
  $152 = (+Math_sqrt((+$151)));
  $153 = 1.0 / $152;
  $18 = $153;
  $154 = $17;
  $155 = $19;
  $156 = 1.0 - $155;
  $157 = $154 * $156;
  $158 = $18;
  $159 = $157 * $158;
  $23 = $159;
  $160 = $16;
  $161 = $18;
  $162 = $160 * $161;
  $24 = $162;
  $163 = $24;
  $164 = $21;
  $165 = $163 * $164;
  $166 = $23;
  $167 = $22;
  $168 = $166 * $167;
  $169 = $165 - $168;
  $25 = $169;
  $170 = $23;
  $21 = $170;
  $171 = $24;
  $22 = $171;
  $172 = $25;
  $173 = $25;
  $174 = $172 * $173;
  $175 = $174 > 9.9999999999999992E-25;
  $176 = $26;
  $177 = ($176|0)<(30);
  $178 = $175 ? $177 : 0;
  if (!($178)) {
   break;
  }
 }
 $179 = $24;
 $180 = $23;
 $181 = (+Math_abs((+$180)));
 $182 = $179 / $181;
 $183 = (+Math_atan((+$182)));
 $184 = $11;
 HEAPF64[$184>>3] = $183;
 STACKTOP = sp;return;
}
function _pj_gridinfo_load($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp + 128|0;
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $24 = $4;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  $26 = $4;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if (!($29)) {
   _pj_acquire_lock();
   $30 = $4;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 120|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    _pj_release_lock();
    $2 = 1;
    $432 = $2;
    STACKTOP = sp;return ($432|0);
   }
   $36 = $4;
   $37 = ((($36)) + 20|0);
   $38 = HEAP32[$37>>2]|0;
   dest=$5; src=$38; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $39 = $4;
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_strcmp($41,20766)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $3;
    $45 = $4;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_pj_open_lib($44,$47,20773)|0);
    $6 = $48;
    $49 = $6;
    $50 = ($49|0)==(0|0);
    $51 = $3;
    if ($50) {
     _pj_ctx_set_errno($51,-38);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    } else {
     $52 = $6;
     $53 = (_nad_ctable_load($51,$5,$52)|0);
     $7 = $53;
     $54 = $3;
     $55 = $6;
     _pj_ctx_fclose($54,$55);
     $56 = ((($5)) + 120|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $4;
     $59 = ((($58)) + 20|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($60)) + 120|0);
     HEAP32[$61>>2] = $57;
     _pj_release_lock();
     $62 = $7;
     $2 = $62;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
   }
   $63 = $4;
   $64 = ((($63)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_strcmp($65,20776)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = $3;
    $69 = $4;
    $70 = ((($69)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (_pj_open_lib($68,$71,20773)|0);
    $8 = $72;
    $73 = $8;
    $74 = ($73|0)==(0|0);
    $75 = $3;
    if ($74) {
     _pj_ctx_set_errno($75,-38);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    } else {
     $76 = $8;
     $77 = (_nad_ctable2_load($75,$5,$76)|0);
     $9 = $77;
     $78 = $3;
     $79 = $8;
     _pj_ctx_fclose($78,$79);
     $80 = ((($5)) + 120|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $4;
     $83 = ((($82)) + 20|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ((($84)) + 120|0);
     HEAP32[$85>>2] = $81;
     _pj_release_lock();
     $86 = $9;
     $2 = $86;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
   }
   $87 = $4;
   $88 = ((($87)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_strcmp($89,20784)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = $3;
    $93 = $4;
    $94 = ((($93)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (_pj_open_lib($92,$95,20773)|0);
    $12 = $96;
    $97 = $12;
    $98 = ($97|0)==(0|0);
    $99 = $3;
    if ($98) {
     _pj_ctx_set_errno($99,-38);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
    $100 = $12;
    $101 = $4;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    (_pj_ctx_fseek($99,$100,$103,0)|0);
    $104 = $4;
    $105 = ((($104)) + 20|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($106)) + 112|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $108<<3;
    $110 = $109<<1;
    $111 = (_pj_malloc($110)|0);
    $10 = $111;
    $112 = $4;
    $113 = ((($112)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 112|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $4;
    $118 = ((($117)) + 20|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ((($119)) + 112|0);
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = Math_imul($116, $122)|0;
    $124 = $123<<3;
    $125 = (_pj_malloc($124)|0);
    $126 = ((($5)) + 120|0);
    HEAP32[$126>>2] = $125;
    $127 = $10;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($5)) + 120|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     if (!($131)) {
      $11 = 0;
      while(1) {
       $133 = $11;
       $134 = $4;
       $135 = ((($134)) + 20|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = ((($136)) + 112|0);
       $138 = ((($137)) + 4|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($133|0)<($139|0);
       if (!($140)) {
        label = 30;
        break;
       }
       $141 = $3;
       $142 = $10;
       $143 = $4;
       $144 = ((($143)) + 20|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ((($145)) + 112|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $147<<1;
       $149 = $12;
       $150 = (_pj_ctx_fread($141,$142,8,$148,$149)|0);
       $151 = $4;
       $152 = ((($151)) + 20|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ((($153)) + 112|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = $155<<1;
       $157 = ($150|0)!=($156|0);
       if ($157) {
        label = 23;
        break;
       }
       $162 = HEAP8[8660]|0;
       $163 = $162&255;
       $164 = (1)==($163|0);
       if ($164) {
        $165 = $10;
        $166 = $4;
        $167 = ((($166)) + 20|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ((($168)) + 112|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = $170<<1;
        _swap_words_1208($165,8,$171);
       }
       $172 = $10;
       $15 = $172;
       $13 = 0;
       while(1) {
        $173 = $13;
        $174 = $4;
        $175 = ((($174)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ((($176)) + 112|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($173|0)<($178|0);
        if (!($179)) {
         break;
        }
        $180 = ((($5)) + 120|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = $11;
        $183 = $4;
        $184 = ((($183)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ((($185)) + 112|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = Math_imul($182, $187)|0;
        $189 = (($181) + ($188<<3)|0);
        $190 = $4;
        $191 = ((($190)) + 20|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = ((($192)) + 112|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = $13;
        $196 = (($194) - ($195))|0;
        $197 = (($196) - 1)|0;
        $198 = (($189) + ($197<<3)|0);
        $14 = $198;
        $199 = $15;
        $200 = ((($199)) + 8|0);
        $15 = $200;
        $201 = +HEAPF64[$199>>3];
        $202 = $201 * 4.8481368110953598E-6;
        $203 = $202;
        $204 = $14;
        $205 = ((($204)) + 4|0);
        HEAPF32[$205>>2] = $203;
        $206 = $15;
        $207 = ((($206)) + 8|0);
        $15 = $207;
        $208 = +HEAPF64[$206>>3];
        $209 = $208 * 4.8481368110953598E-6;
        $210 = $209;
        $211 = $14;
        HEAPF32[$211>>2] = $210;
        $212 = $13;
        $213 = (($212) + 1)|0;
        $13 = $213;
       }
       $214 = $11;
       $215 = (($214) + 1)|0;
       $11 = $215;
      }
      if ((label|0) == 23) {
       $158 = $10;
       _pj_dalloc($158);
       $159 = ((($5)) + 120|0);
       $160 = HEAP32[$159>>2]|0;
       _pj_dalloc($160);
       $161 = $3;
       _pj_ctx_set_errno($161,-38);
       $2 = 0;
       $432 = $2;
       STACKTOP = sp;return ($432|0);
      }
      else if ((label|0) == 30) {
       $216 = $10;
       _pj_dalloc($216);
       $217 = $3;
       $218 = $12;
       _pj_ctx_fclose($217,$218);
       $219 = ((($5)) + 120|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = $4;
       $222 = ((($221)) + 20|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ((($223)) + 120|0);
       HEAP32[$224>>2] = $220;
       _pj_release_lock();
       $2 = 1;
       $432 = $2;
       STACKTOP = sp;return ($432|0);
      }
     }
    }
    $132 = $3;
    _pj_ctx_set_errno($132,-38);
    _pj_release_lock();
    $2 = 0;
    $432 = $2;
    STACKTOP = sp;return ($432|0);
   }
   $225 = $4;
   $226 = ((($225)) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (_strcmp($227,20789)|0);
   $229 = ($228|0)==(0);
   if (!($229)) {
    $372 = $4;
    $373 = ((($372)) + 8|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (_strcmp($374,20817)|0);
    $376 = ($375|0)==(0);
    if (!($376)) {
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
    $377 = $4;
    $378 = ((($377)) + 20|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = ((($379)) + 112|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = $4;
    $383 = ((($382)) + 20|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = ((($384)) + 112|0);
    $386 = ((($385)) + 4|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = Math_imul($381, $387)|0;
    $22 = $388;
    $389 = $3;
    $390 = $4;
    $391 = ((($390)) + 4|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = (_pj_open_lib($389,$392,20773)|0);
    $23 = $393;
    $394 = $23;
    $395 = ($394|0)==(0|0);
    $396 = $3;
    if ($395) {
     _pj_ctx_set_errno($396,-38);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
    $397 = $23;
    $398 = $4;
    $399 = ((($398)) + 12|0);
    $400 = HEAP32[$399>>2]|0;
    (_pj_ctx_fseek($396,$397,$400,0)|0);
    $401 = $22;
    $402 = $401<<2;
    $403 = (_pj_malloc($402)|0);
    $404 = ((($5)) + 120|0);
    HEAP32[$404>>2] = $403;
    $405 = ((($5)) + 120|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ($406|0)==(0|0);
    $408 = $3;
    if ($407) {
     _pj_ctx_set_errno($408,-38);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
    $409 = ((($5)) + 120|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = $22;
    $412 = $23;
    $413 = (_pj_ctx_fread($408,$410,4,$411,$412)|0);
    $414 = $22;
    $415 = ($413|0)!=($414|0);
    if ($415) {
     $416 = ((($5)) + 120|0);
     $417 = HEAP32[$416>>2]|0;
     _pj_dalloc($417);
     _pj_release_lock();
     $2 = 0;
     $432 = $2;
     STACKTOP = sp;return ($432|0);
    }
    $418 = HEAP8[8660]|0;
    $419 = $418&255;
    $420 = (1)==($419|0);
    if ($420) {
     $421 = ((($5)) + 120|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = $22;
     _swap_words_1208($422,4,$423);
    }
    $424 = $3;
    $425 = $23;
    _pj_ctx_fclose($424,$425);
    $426 = ((($5)) + 120|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = $4;
    $429 = ((($428)) + 20|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = ((($430)) + 120|0);
    HEAP32[$431>>2] = $427;
    _pj_release_lock();
    $2 = 1;
    $432 = $2;
    STACKTOP = sp;return ($432|0);
   }
   $230 = $3;
   $231 = $4;
   $232 = ((($231)) + 20|0);
   $233 = HEAP32[$232>>2]|0;
   HEAP32[$vararg_buffer>>2] = $233;
   _pj_log($230,3,20794,$vararg_buffer);
   $234 = $3;
   $235 = $4;
   $236 = ((($235)) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (_pj_open_lib($234,$237,20773)|0);
   $18 = $238;
   $239 = $18;
   $240 = ($239|0)==(0|0);
   $241 = $3;
   if ($240) {
    _pj_ctx_set_errno($241,-38);
    _pj_release_lock();
    $2 = 0;
    $432 = $2;
    STACKTOP = sp;return ($432|0);
   }
   $242 = $18;
   $243 = $4;
   $244 = ((($243)) + 12|0);
   $245 = HEAP32[$244>>2]|0;
   (_pj_ctx_fseek($241,$242,$245,0)|0);
   $246 = $4;
   $247 = ((($246)) + 20|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ((($248)) + 112|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = $250<<2;
   $252 = $251<<2;
   $253 = (_pj_malloc($252)|0);
   $16 = $253;
   $254 = $4;
   $255 = ((($254)) + 20|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = ((($256)) + 112|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $4;
   $260 = ((($259)) + 20|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = ((($261)) + 112|0);
   $263 = ((($262)) + 4|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = Math_imul($258, $264)|0;
   $266 = $265<<3;
   $267 = (_pj_malloc($266)|0);
   $268 = ((($5)) + 120|0);
   HEAP32[$268>>2] = $267;
   $269 = $16;
   $270 = ($269|0)==(0|0);
   if (!($270)) {
    $271 = ((($5)) + 120|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ($272|0)==(0|0);
    if (!($273)) {
     $17 = 0;
     while(1) {
      $275 = $17;
      $276 = $4;
      $277 = ((($276)) + 20|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ((($278)) + 112|0);
      $280 = ((($279)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ($275|0)<($281|0);
      if (!($282)) {
       label = 47;
       break;
      }
      $283 = $3;
      $284 = $16;
      $285 = $4;
      $286 = ((($285)) + 20|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ((($287)) + 112|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $289<<2;
      $291 = $18;
      $292 = (_pj_ctx_fread($283,$284,4,$290,$291)|0);
      $293 = $4;
      $294 = ((($293)) + 20|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = ((($295)) + 112|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = $297<<2;
      $299 = ($292|0)!=($298|0);
      if ($299) {
       label = 40;
       break;
      }
      $304 = $4;
      $305 = ((($304)) + 16|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ($306|0)!=(0);
      if ($307) {
       $308 = $16;
       $309 = $4;
       $310 = ((($309)) + 20|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = ((($311)) + 112|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = $313<<2;
       _swap_words_1208($308,4,$314);
      }
      $315 = $16;
      $21 = $315;
      $19 = 0;
      while(1) {
       $316 = $19;
       $317 = $4;
       $318 = ((($317)) + 20|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ((($319)) + 112|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = ($316|0)<($321|0);
       if (!($322)) {
        break;
       }
       $323 = ((($5)) + 120|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = $17;
       $326 = $4;
       $327 = ((($326)) + 20|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($328)) + 112|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = Math_imul($325, $330)|0;
       $332 = (($324) + ($331<<3)|0);
       $333 = $4;
       $334 = ((($333)) + 20|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ((($335)) + 112|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = $19;
       $339 = (($337) - ($338))|0;
       $340 = (($339) - 1)|0;
       $341 = (($332) + ($340<<3)|0);
       $20 = $341;
       $342 = $21;
       $343 = ((($342)) + 4|0);
       $21 = $343;
       $344 = +HEAPF32[$342>>2];
       $345 = $344;
       $346 = $345 * 4.8481368110953598E-6;
       $347 = $346;
       $348 = $20;
       $349 = ((($348)) + 4|0);
       HEAPF32[$349>>2] = $347;
       $350 = $21;
       $351 = ((($350)) + 4|0);
       $21 = $351;
       $352 = +HEAPF32[$350>>2];
       $353 = $352;
       $354 = $353 * 4.8481368110953598E-6;
       $355 = $354;
       $356 = $20;
       HEAPF32[$356>>2] = $355;
       $357 = $21;
       $358 = ((($357)) + 8|0);
       $21 = $358;
       $359 = $19;
       $360 = (($359) + 1)|0;
       $19 = $360;
      }
      $361 = $17;
      $362 = (($361) + 1)|0;
      $17 = $362;
     }
     if ((label|0) == 40) {
      $300 = $16;
      _pj_dalloc($300);
      $301 = ((($5)) + 120|0);
      $302 = HEAP32[$301>>2]|0;
      _pj_dalloc($302);
      $303 = $3;
      _pj_ctx_set_errno($303,-38);
      _pj_release_lock();
      $2 = 0;
      $432 = $2;
      STACKTOP = sp;return ($432|0);
     }
     else if ((label|0) == 47) {
      $363 = $16;
      _pj_dalloc($363);
      $364 = $3;
      $365 = $18;
      _pj_ctx_fclose($364,$365);
      $366 = ((($5)) + 120|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = $4;
      $369 = ((($368)) + 20|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = ((($370)) + 120|0);
      HEAP32[$371>>2] = $367;
      _pj_release_lock();
      $2 = 1;
      $432 = $2;
      STACKTOP = sp;return ($432|0);
     }
    }
   }
   $274 = $3;
   _pj_ctx_set_errno($274,-38);
   _pj_release_lock();
   $2 = 0;
   $432 = $2;
   STACKTOP = sp;return ($432|0);
  }
 }
 $2 = 0;
 $432 = $2;
 STACKTOP = sp;return ($432|0);
}
function _swap_words_1208($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $5;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $7 = 0;
  while(1) {
   $12 = $7;
   $13 = $4;
   $14 = (($13|0) / 2)&-1;
   $15 = ($12|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = $7;
   $17 = $3;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $8 = $20;
   $21 = $4;
   $22 = $7;
   $23 = (($21) - ($22))|0;
   $24 = (($23) - 1)|0;
   $25 = $3;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $7;
   $29 = $3;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = $27;
   $31 = $8;
   $32 = $31&255;
   $33 = $4;
   $34 = $7;
   $35 = (($33) - ($34))|0;
   $36 = (($35) - 1)|0;
   $37 = $3;
   $38 = (($37) + ($36)|0);
   HEAP8[$38>>0] = $32;
   $39 = $7;
   $40 = (($39) + 1)|0;
   $7 = $40;
  }
  $41 = $4;
  $42 = $3;
  $43 = (($42) + ($41)|0);
  $3 = $43;
  $44 = $6;
  $45 = (($44) + 1)|0;
  $6 = $45;
 }
 STACKTOP = sp;return;
}
function _pj_gridinfo_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $vararg_buffer9 = sp + 56|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer = sp;
 $5 = sp + 296|0;
 $8 = sp + 136|0;
 $3 = $0;
 $4 = $1;
 HEAP32[6054] = 0;
 $11 = (___errno_location()|0);
 HEAP32[$11>>2] = 0;
 $12 = $3;
 HEAP32[$12>>2] = 0;
 $13 = (_pj_malloc(32)|0);
 $6 = $13;
 $14 = $6;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;HEAP32[$14+24>>2]=0|0;HEAP32[$14+28>>2]=0|0;
 $15 = $4;
 $16 = (___strdup($15)|0);
 $17 = $6;
 HEAP32[$17>>2] = $16;
 $18 = $6;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = 20821;
 $22 = $6;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = 0;
 $24 = $6;
 $25 = ((($24)) + 20|0);
 HEAP32[$25>>2] = 0;
 $26 = $6;
 $27 = ((($26)) + 24|0);
 HEAP32[$27>>2] = 0;
 $28 = $4;
 (_strcpy($5,$28)|0);
 $29 = $3;
 $30 = (_pj_open_lib($29,$5,20773)|0);
 $7 = $30;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $32 = $3;
  HEAP32[$32>>2] = 0;
  $33 = $6;
  $2 = $33;
  $203 = $2;
  STACKTOP = sp;return ($203|0);
 }
 $34 = (___strdup($5)|0);
 $35 = $6;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = $34;
 $37 = $3;
 $38 = $7;
 $39 = (_pj_ctx_fread($37,$8,160,1,$38)|0);
 $40 = ($39|0)!=(1);
 if ($40) {
  $41 = $3;
  HEAP32[$41>>2] = 0;
 }
 $42 = $3;
 $43 = $7;
 (_pj_ctx_fseek($42,$43,0,0)|0);
 $44 = (_strncmp($8,20829,6)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = ((($8)) + 96|0);
  $47 = (_strncmp($46,20836,6)|0);
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = ((($8)) + 144|0);
   $50 = (_strncmp($49,20843,16)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = $3;
    $53 = $7;
    $54 = $6;
    (_pj_gridinfo_init_ntv1($52,$53,$54)|0);
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 L12: do {
  if ((label|0) == 9) {
   $55 = (_strncmp($8,20860,8)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = ((($8)) + 48|0);
    $58 = (_strncmp($57,20869,7)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = $3;
     $61 = $7;
     $62 = $6;
     (_pj_gridinfo_init_ntv2($60,$61,$62)|0);
     break;
    }
   }
   $63 = $4;
   $64 = (_strlen($63)|0);
   $65 = ($64>>>0)>(4);
   do {
    if ($65) {
     $66 = $4;
     $67 = $4;
     $68 = (_strlen($67)|0);
     $69 = (($66) + ($68)|0);
     $70 = ((($69)) + -3|0);
     $71 = (_strcmp($70,20817)|0);
     $72 = ($71|0)==(0);
     if (!($72)) {
      $73 = $4;
      $74 = $4;
      $75 = (_strlen($74)|0);
      $76 = (($73) + ($75)|0);
      $77 = ((($76)) + -3|0);
      $78 = (_strcmp($77,20877)|0);
      $79 = ($78|0)==(0);
      if (!($79)) {
       break;
      }
     }
     $80 = $3;
     $81 = $7;
     $82 = $6;
     (_pj_gridinfo_init_gtx($80,$81,$82)|0);
     break L12;
    }
   } while(0);
   $83 = (_strncmp($8,20881,9)|0);
   $84 = ($83|0)==(0);
   $85 = $3;
   $86 = $7;
   if ($84) {
    $87 = (_nad_ctable2_init($85,$86)|0);
    $9 = $87;
    $88 = $6;
    $89 = ((($88)) + 8|0);
    HEAP32[$89>>2] = 20776;
    $90 = $9;
    $91 = $6;
    $92 = ((($91)) + 20|0);
    HEAP32[$92>>2] = $90;
    $93 = $3;
    $94 = $9;
    $95 = $9;
    $96 = ((($95)) + 112|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $9;
    $99 = ((($98)) + 112|0);
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $9;
    $103 = ((($102)) + 80|0);
    $104 = +HEAPF64[$103>>3];
    $105 = $104 * 57.295779513082323;
    $106 = $9;
    $107 = ((($106)) + 80|0);
    $108 = ((($107)) + 8|0);
    $109 = +HEAPF64[$108>>3];
    $110 = $109 * 57.295779513082323;
    $111 = $9;
    $112 = ((($111)) + 80|0);
    $113 = +HEAPF64[$112>>3];
    $114 = $9;
    $115 = ((($114)) + 112|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) - 1)|0;
    $118 = (+($117|0));
    $119 = $9;
    $120 = ((($119)) + 96|0);
    $121 = +HEAPF64[$120>>3];
    $122 = $118 * $121;
    $123 = $113 + $122;
    $124 = $123 * 57.295779513082323;
    $125 = $9;
    $126 = ((($125)) + 80|0);
    $127 = ((($126)) + 8|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $9;
    $130 = ((($129)) + 112|0);
    $131 = ((($130)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) - 1)|0;
    $134 = (+($133|0));
    $135 = $9;
    $136 = ((($135)) + 96|0);
    $137 = ((($136)) + 8|0);
    $138 = +HEAPF64[$137>>3];
    $139 = $134 * $138;
    $140 = $128 + $139;
    $141 = $140 * 57.295779513082323;
    HEAP32[$vararg_buffer>>2] = $94;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $97;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $101;
    $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
    HEAPF64[$vararg_ptr3>>3] = $105;
    $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
    HEAPF64[$vararg_ptr4>>3] = $110;
    $vararg_ptr5 = ((($vararg_buffer)) + 32|0);
    HEAPF64[$vararg_ptr5>>3] = $124;
    $vararg_ptr6 = ((($vararg_buffer)) + 40|0);
    HEAPF64[$vararg_ptr6>>3] = $141;
    _pj_log($93,2,20891,$vararg_buffer);
    break;
   }
   $142 = (_nad_ctable_init($85,$86)|0);
   $10 = $142;
   $143 = $10;
   $144 = ($143|0)==(0|0);
   if ($144) {
    $145 = $3;
    _pj_log($145,2,20940,$vararg_buffer7);
    break;
   } else {
    $146 = $6;
    $147 = ((($146)) + 8|0);
    HEAP32[$147>>2] = 20766;
    $148 = $10;
    $149 = $6;
    $150 = ((($149)) + 20|0);
    HEAP32[$150>>2] = $148;
    $151 = $3;
    $152 = $10;
    $153 = $10;
    $154 = ((($153)) + 112|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $10;
    $157 = ((($156)) + 112|0);
    $158 = ((($157)) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $10;
    $161 = ((($160)) + 80|0);
    $162 = +HEAPF64[$161>>3];
    $163 = $162 * 57.295779513082323;
    $164 = $10;
    $165 = ((($164)) + 80|0);
    $166 = ((($165)) + 8|0);
    $167 = +HEAPF64[$166>>3];
    $168 = $167 * 57.295779513082323;
    $169 = $10;
    $170 = ((($169)) + 80|0);
    $171 = +HEAPF64[$170>>3];
    $172 = $10;
    $173 = ((($172)) + 112|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) - 1)|0;
    $176 = (+($175|0));
    $177 = $10;
    $178 = ((($177)) + 96|0);
    $179 = +HEAPF64[$178>>3];
    $180 = $176 * $179;
    $181 = $171 + $180;
    $182 = $181 * 57.295779513082323;
    $183 = $10;
    $184 = ((($183)) + 80|0);
    $185 = ((($184)) + 8|0);
    $186 = +HEAPF64[$185>>3];
    $187 = $10;
    $188 = ((($187)) + 112|0);
    $189 = ((($188)) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (($190) - 1)|0;
    $192 = (+($191|0));
    $193 = $10;
    $194 = ((($193)) + 96|0);
    $195 = ((($194)) + 8|0);
    $196 = +HEAPF64[$195>>3];
    $197 = $192 * $196;
    $198 = $186 + $197;
    $199 = $198 * 57.295779513082323;
    HEAP32[$vararg_buffer9>>2] = $152;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $155;
    $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
    HEAP32[$vararg_ptr13>>2] = $159;
    $vararg_ptr14 = ((($vararg_buffer9)) + 16|0);
    HEAPF64[$vararg_ptr14>>3] = $163;
    $vararg_ptr15 = ((($vararg_buffer9)) + 24|0);
    HEAPF64[$vararg_ptr15>>3] = $168;
    $vararg_ptr16 = ((($vararg_buffer9)) + 32|0);
    HEAPF64[$vararg_ptr16>>3] = $182;
    $vararg_ptr17 = ((($vararg_buffer9)) + 40|0);
    HEAPF64[$vararg_ptr17>>3] = $199;
    _pj_log($151,2,20959,$vararg_buffer9);
    break;
   }
  }
 } while(0);
 $200 = $3;
 $201 = $7;
 _pj_ctx_fclose($200,$201);
 $202 = $6;
 $2 = $202;
 $203 = $2;
 STACKTOP = sp;return ($203|0);
}
function _pj_gridinfo_init_ntv1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $7 = sp + 88|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $5;
 $12 = (_pj_ctx_fread($10,$7,176,1,$11)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $14 = $4;
  _pj_ctx_set_errno($14,-38);
  $3 = 0;
  $139 = $3;
  STACKTOP = sp;return ($139|0);
 }
 $15 = HEAP8[8660]|0;
 $16 = $15&255;
 $17 = (1)==($16|0);
 if ($17) {
  $18 = ((($7)) + 8|0);
  _swap_words_1208($18,4,1);
  $19 = ((($7)) + 24|0);
  _swap_words_1208($19,8,1);
  $20 = ((($7)) + 40|0);
  _swap_words_1208($20,8,1);
  $21 = ((($7)) + 56|0);
  _swap_words_1208($21,8,1);
  $22 = ((($7)) + 72|0);
  _swap_words_1208($22,8,1);
  $23 = ((($7)) + 88|0);
  _swap_words_1208($23,8,1);
  $24 = ((($7)) + 104|0);
  _swap_words_1208($24,8,1);
 }
 $25 = ((($7)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(12);
 if ($27) {
  $28 = $4;
  _pj_log($28,1,21356,$vararg_buffer);
  $29 = $4;
  _pj_ctx_set_errno($29,-38);
  $3 = 0;
  $139 = $3;
  STACKTOP = sp;return ($139|0);
 } else {
  $30 = (_pj_malloc(128)|0);
  $8 = $30;
  $31 = $8;
  (_strcpy($31,21410)|0);
  $32 = ((($7)) + 72|0);
  $33 = +HEAPF64[$32>>3];
  $34 = -$33;
  $35 = $8;
  $36 = ((($35)) + 80|0);
  HEAPF64[$36>>3] = $34;
  $37 = ((($7)) + 24|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $8;
  $40 = ((($39)) + 80|0);
  $41 = ((($40)) + 8|0);
  HEAPF64[$41>>3] = $38;
  $42 = ((($7)) + 56|0);
  $43 = +HEAPF64[$42>>3];
  $44 = -$43;
  HEAPF64[$9>>3] = $44;
  $45 = ((($7)) + 40|0);
  $46 = +HEAPF64[$45>>3];
  $47 = ((($9)) + 8|0);
  HEAPF64[$47>>3] = $46;
  $48 = ((($7)) + 104|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $8;
  $51 = ((($50)) + 96|0);
  HEAPF64[$51>>3] = $49;
  $52 = ((($7)) + 88|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $8;
  $55 = ((($54)) + 96|0);
  $56 = ((($55)) + 8|0);
  HEAPF64[$56>>3] = $53;
  $57 = +HEAPF64[$9>>3];
  $58 = $8;
  $59 = ((($58)) + 80|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $57 - $60;
  $62 = (+Math_abs((+$61)));
  $63 = $8;
  $64 = ((($63)) + 96|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $62 / $65;
  $67 = $66 + 0.5;
  $68 = (~~(($67)));
  $69 = (($68) + 1)|0;
  $70 = $8;
  $71 = ((($70)) + 112|0);
  HEAP32[$71>>2] = $69;
  $72 = ((($9)) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $8;
  $75 = ((($74)) + 80|0);
  $76 = ((($75)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $73 - $77;
  $79 = (+Math_abs((+$78)));
  $80 = $8;
  $81 = ((($80)) + 96|0);
  $82 = ((($81)) + 8|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $79 / $83;
  $85 = $84 + 0.5;
  $86 = (~~(($85)));
  $87 = (($86) + 1)|0;
  $88 = $8;
  $89 = ((($88)) + 112|0);
  $90 = ((($89)) + 4|0);
  HEAP32[$90>>2] = $87;
  $91 = $4;
  $92 = $8;
  $93 = ((($92)) + 112|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $8;
  $96 = ((($95)) + 112|0);
  $97 = ((($96)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $8;
  $100 = ((($99)) + 80|0);
  $101 = +HEAPF64[$100>>3];
  $102 = $8;
  $103 = ((($102)) + 80|0);
  $104 = ((($103)) + 8|0);
  $105 = +HEAPF64[$104>>3];
  $106 = +HEAPF64[$9>>3];
  $107 = ((($9)) + 8|0);
  $108 = +HEAPF64[$107>>3];
  HEAP32[$vararg_buffer1>>2] = $94;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $98;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr4>>3] = $101;
  $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
  HEAPF64[$vararg_ptr5>>3] = $105;
  $vararg_ptr6 = ((($vararg_buffer1)) + 24|0);
  HEAPF64[$vararg_ptr6>>3] = $106;
  $vararg_ptr7 = ((($vararg_buffer1)) + 32|0);
  HEAPF64[$vararg_ptr7>>3] = $108;
  _pj_log($91,3,21431,$vararg_buffer1);
  $109 = $8;
  $110 = ((($109)) + 80|0);
  $111 = +HEAPF64[$110>>3];
  $112 = $111 * 0.017453292519943295;
  HEAPF64[$110>>3] = $112;
  $113 = $8;
  $114 = ((($113)) + 80|0);
  $115 = ((($114)) + 8|0);
  $116 = +HEAPF64[$115>>3];
  $117 = $116 * 0.017453292519943295;
  HEAPF64[$115>>3] = $117;
  $118 = $8;
  $119 = ((($118)) + 96|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $120 * 0.017453292519943295;
  HEAPF64[$119>>3] = $121;
  $122 = $8;
  $123 = ((($122)) + 96|0);
  $124 = ((($123)) + 8|0);
  $125 = +HEAPF64[$124>>3];
  $126 = $125 * 0.017453292519943295;
  HEAPF64[$124>>3] = $126;
  $127 = $8;
  $128 = ((($127)) + 120|0);
  HEAP32[$128>>2] = 0;
  $129 = $8;
  $130 = $6;
  $131 = ((($130)) + 20|0);
  HEAP32[$131>>2] = $129;
  $132 = $4;
  $133 = $5;
  $134 = (_pj_ctx_ftell($132,$133)|0);
  $135 = $6;
  $136 = ((($135)) + 12|0);
  HEAP32[$136>>2] = $134;
  $137 = $6;
  $138 = ((($137)) + 8|0);
  HEAP32[$138>>2] = 20784;
  $3 = 1;
  $139 = $3;
  STACKTOP = sp;return ($139|0);
 }
 return (0)|0;
}
function _pj_gridinfo_init_ntv2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer13 = sp + 80|0;
 $vararg_buffer7 = sp + 64|0;
 $vararg_buffer = sp + 16|0;
 $7 = sp + 144|0;
 $8 = sp + 120|0;
 $12 = sp;
 $13 = sp + 104|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $18 = $4;
 $19 = $5;
 $20 = (_pj_ctx_fread($18,$7,176,1,$19)|0);
 $21 = ($20|0)!=(1);
 if ($21) {
  $22 = $4;
  _pj_ctx_set_errno($22,-38);
  $3 = 0;
  $314 = $3;
  STACKTOP = sp;return ($314|0);
 }
 $23 = ((($7)) + 8|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(11);
 $27 = HEAP8[8660]|0;
 $28 = $27&255;
 $29 = (1)==($28|0);
 if ($26) {
  $30 = $29 ^ 1;
  $31 = $30&1;
  $10 = $31;
 } else {
  $32 = $29&1;
  $10 = $32;
 }
 $33 = $10;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = ((($7)) + 8|0);
  _swap_words_1208($35,4,1);
  $36 = ((($7)) + 8|0);
  $37 = ((($36)) + 16|0);
  _swap_words_1208($37,4,1);
  $38 = ((($7)) + 8|0);
  $39 = ((($38)) + 32|0);
  _swap_words_1208($39,4,1);
  $40 = ((($7)) + 8|0);
  $41 = ((($40)) + 112|0);
  _swap_words_1208($41,8,1);
  $42 = ((($7)) + 8|0);
  $43 = ((($42)) + 128|0);
  _swap_words_1208($43,8,1);
  $44 = ((($7)) + 8|0);
  $45 = ((($44)) + 144|0);
  _swap_words_1208($45,8,1);
  $46 = ((($7)) + 8|0);
  $47 = ((($46)) + 160|0);
  _swap_words_1208($47,8,1);
 }
 $48 = ((($7)) + 8|0);
 $49 = ((($48)) + 32|0);
 ;HEAP8[$8>>0]=HEAP8[$49>>0]|0;HEAP8[$8+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$49+3>>0]|0;
 $9 = 0;
 while(1) {
  $50 = $9;
  $51 = HEAP32[$8>>2]|0;
  $52 = ($50|0)<($51|0);
  if (!($52)) {
   label = 39;
   break;
  }
  $53 = $4;
  $54 = $5;
  $55 = (_pj_ctx_fread($53,$7,176,1,$54)|0);
  $56 = ($55|0)!=(1);
  if ($56) {
   label = 11;
   break;
  }
  $58 = (_strncmp($7,21179,8)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   label = 13;
   break;
  }
  $61 = $10;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = ((($7)) + 8|0);
   $64 = ((($63)) + 64|0);
   _swap_words_1208($64,8,1);
   $65 = ((($7)) + 8|0);
   $66 = ((($65)) + 80|0);
   _swap_words_1208($66,8,1);
   $67 = ((($7)) + 8|0);
   $68 = ((($67)) + 96|0);
   _swap_words_1208($68,8,1);
   $69 = ((($7)) + 8|0);
   $70 = ((($69)) + 112|0);
   _swap_words_1208($70,8,1);
   $71 = ((($7)) + 8|0);
   $72 = ((($71)) + 128|0);
   _swap_words_1208($72,8,1);
   $73 = ((($7)) + 8|0);
   $74 = ((($73)) + 144|0);
   _swap_words_1208($74,8,1);
   $75 = ((($7)) + 8|0);
   $76 = ((($75)) + 160|0);
   _swap_words_1208($76,4,1);
  }
  $77 = (_pj_malloc(128)|0);
  $11 = $77;
  $78 = $11;
  $79 = ((($7)) + 8|0);
  (_strncpy($78,$79,8)|0);
  $80 = $11;
  $81 = ((($80)) + 8|0);
  HEAP8[$81>>0] = 0;
  $82 = ((($7)) + 112|0);
  $83 = ((($82)) + 8|0);
  $84 = +HEAPF64[$83>>3];
  $85 = -$84;
  $86 = $11;
  $87 = ((($86)) + 80|0);
  HEAPF64[$87>>3] = $85;
  $88 = ((($7)) + 64|0);
  $89 = ((($88)) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $11;
  $92 = ((($91)) + 80|0);
  $93 = ((($92)) + 8|0);
  HEAPF64[$93>>3] = $90;
  $94 = ((($7)) + 96|0);
  $95 = ((($94)) + 8|0);
  $96 = +HEAPF64[$95>>3];
  $97 = -$96;
  HEAPF64[$12>>3] = $97;
  $98 = ((($7)) + 80|0);
  $99 = ((($98)) + 8|0);
  $100 = +HEAPF64[$99>>3];
  $101 = ((($12)) + 8|0);
  HEAPF64[$101>>3] = $100;
  $102 = ((($7)) + 144|0);
  $103 = ((($102)) + 8|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $11;
  $106 = ((($105)) + 96|0);
  HEAPF64[$106>>3] = $104;
  $107 = ((($7)) + 128|0);
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF64[$108>>3];
  $110 = $11;
  $111 = ((($110)) + 96|0);
  $112 = ((($111)) + 8|0);
  HEAPF64[$112>>3] = $109;
  $113 = +HEAPF64[$12>>3];
  $114 = $11;
  $115 = ((($114)) + 80|0);
  $116 = +HEAPF64[$115>>3];
  $117 = $113 - $116;
  $118 = (+Math_abs((+$117)));
  $119 = $11;
  $120 = ((($119)) + 96|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $118 / $121;
  $123 = $122 + 0.5;
  $124 = (~~(($123)));
  $125 = (($124) + 1)|0;
  $126 = $11;
  $127 = ((($126)) + 112|0);
  HEAP32[$127>>2] = $125;
  $128 = ((($12)) + 8|0);
  $129 = +HEAPF64[$128>>3];
  $130 = $11;
  $131 = ((($130)) + 80|0);
  $132 = ((($131)) + 8|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $129 - $133;
  $135 = (+Math_abs((+$134)));
  $136 = $11;
  $137 = ((($136)) + 96|0);
  $138 = ((($137)) + 8|0);
  $139 = +HEAPF64[$138>>3];
  $140 = $135 / $139;
  $141 = $140 + 0.5;
  $142 = (~~(($141)));
  $143 = (($142) + 1)|0;
  $144 = $11;
  $145 = ((($144)) + 112|0);
  $146 = ((($145)) + 4|0);
  HEAP32[$146>>2] = $143;
  $147 = $4;
  $148 = $11;
  $149 = $11;
  $150 = ((($149)) + 112|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $11;
  $153 = ((($152)) + 112|0);
  $154 = ((($153)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $11;
  $157 = ((($156)) + 80|0);
  $158 = +HEAPF64[$157>>3];
  $159 = $158 / 3600.0;
  $160 = $11;
  $161 = ((($160)) + 80|0);
  $162 = ((($161)) + 8|0);
  $163 = +HEAPF64[$162>>3];
  $164 = $163 / 3600.0;
  $165 = +HEAPF64[$12>>3];
  $166 = $165 / 3600.0;
  $167 = ((($12)) + 8|0);
  $168 = +HEAPF64[$167>>3];
  $169 = $168 / 3600.0;
  HEAP32[$vararg_buffer>>2] = $148;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $151;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $155;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $159;
  $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
  HEAPF64[$vararg_ptr4>>3] = $164;
  $vararg_ptr5 = ((($vararg_buffer)) + 32|0);
  HEAPF64[$vararg_ptr5>>3] = $166;
  $vararg_ptr6 = ((($vararg_buffer)) + 40|0);
  HEAPF64[$vararg_ptr6>>3] = $169;
  _pj_log($147,3,21188,$vararg_buffer);
  $170 = $11;
  $171 = ((($170)) + 80|0);
  $172 = +HEAPF64[$171>>3];
  $173 = $172 * 4.8481368110953598E-6;
  HEAPF64[$171>>3] = $173;
  $174 = $11;
  $175 = ((($174)) + 80|0);
  $176 = ((($175)) + 8|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $177 * 4.8481368110953598E-6;
  HEAPF64[$176>>3] = $178;
  $179 = $11;
  $180 = ((($179)) + 96|0);
  $181 = +HEAPF64[$180>>3];
  $182 = $181 * 4.8481368110953598E-6;
  HEAPF64[$180>>3] = $182;
  $183 = $11;
  $184 = ((($183)) + 96|0);
  $185 = ((($184)) + 8|0);
  $186 = +HEAPF64[$185>>3];
  $187 = $186 * 4.8481368110953598E-6;
  HEAPF64[$185>>3] = $187;
  $188 = ((($7)) + 8|0);
  $189 = ((($188)) + 160|0);
  ;HEAP8[$13>>0]=HEAP8[$189>>0]|0;HEAP8[$13+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$189+3>>0]|0;
  $190 = HEAP32[$13>>2]|0;
  $191 = $11;
  $192 = ((($191)) + 112|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $11;
  $195 = ((($194)) + 112|0);
  $196 = ((($195)) + 4|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = Math_imul($193, $197)|0;
  $199 = ($190|0)!=($198|0);
  if ($199) {
   label = 17;
   break;
  }
  $218 = $11;
  $219 = ((($218)) + 120|0);
  HEAP32[$219>>2] = 0;
  $220 = $9;
  $221 = ($220|0)==(0);
  if ($221) {
   $222 = $6;
   $14 = $222;
  } else {
   $223 = (_pj_malloc(32)|0);
   $14 = $223;
   $224 = $14;
   ;HEAP32[$224>>2]=0|0;HEAP32[$224+4>>2]=0|0;HEAP32[$224+8>>2]=0|0;HEAP32[$224+12>>2]=0|0;HEAP32[$224+16>>2]=0|0;HEAP32[$224+20>>2]=0|0;HEAP32[$224+24>>2]=0|0;HEAP32[$224+28>>2]=0|0;
   $225 = $6;
   $226 = HEAP32[$225>>2]|0;
   $227 = (___strdup($226)|0);
   $228 = $14;
   HEAP32[$228>>2] = $227;
   $229 = $6;
   $230 = ((($229)) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (___strdup($231)|0);
   $233 = $14;
   $234 = ((($233)) + 4|0);
   HEAP32[$234>>2] = $232;
   $235 = $14;
   $236 = ((($235)) + 24|0);
   HEAP32[$236>>2] = 0;
  }
  $237 = $10;
  $238 = $14;
  $239 = ((($238)) + 16|0);
  HEAP32[$239>>2] = $237;
  $240 = $11;
  $241 = $14;
  $242 = ((($241)) + 20|0);
  HEAP32[$242>>2] = $240;
  $243 = $14;
  $244 = ((($243)) + 8|0);
  HEAP32[$244>>2] = 20789;
  $245 = $4;
  $246 = $5;
  $247 = (_pj_ctx_ftell($245,$246)|0);
  $248 = $14;
  $249 = ((($248)) + 12|0);
  HEAP32[$249>>2] = $247;
  $250 = ((($7)) + 24|0);
  $251 = (_strncmp($250,21289,4)|0);
  $252 = ($251|0)==(0);
  do {
   if ($252) {
    $253 = $14;
    $254 = $6;
    $255 = ($253|0)!=($254|0);
    if ($255) {
     $256 = $6;
     $15 = $256;
     while(1) {
      $257 = $15;
      $258 = ((($257)) + 24|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = ($259|0)!=(0|0);
      if (!($260)) {
       break;
      }
      $261 = $15;
      $262 = ((($261)) + 24|0);
      $263 = HEAP32[$262>>2]|0;
      $15 = $263;
     }
     $264 = $14;
     $265 = $15;
     $266 = ((($265)) + 24|0);
     HEAP32[$266>>2] = $264;
    }
   } else {
    $267 = $6;
    $268 = ((($7)) + 24|0);
    $269 = (_pj_gridinfo_parent($267,$268,8)|0);
    $17 = $269;
    $270 = $17;
    $271 = ($270|0)==(0|0);
    if ($271) {
     $272 = $4;
     $273 = ((($7)) + 24|0);
     $274 = $14;
     $275 = ((($274)) + 20|0);
     $276 = HEAP32[$275>>2]|0;
     HEAP32[$vararg_buffer13>>2] = $273;
     $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
     HEAP32[$vararg_ptr16>>2] = $276;
     _pj_log($272,1,21294,$vararg_buffer13);
     $277 = $6;
     $16 = $277;
     while(1) {
      $278 = $16;
      $279 = ((($278)) + 24|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = ($280|0)!=(0|0);
      if (!($281)) {
       break;
      }
      $282 = $16;
      $283 = ((($282)) + 24|0);
      $284 = HEAP32[$283>>2]|0;
      $16 = $284;
     }
     $285 = $14;
     $286 = $16;
     $287 = ((($286)) + 24|0);
     HEAP32[$287>>2] = $285;
     break;
    }
    $288 = $17;
    $289 = ((($288)) + 28|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = ($290|0)==(0|0);
    if ($291) {
     $292 = $14;
     $293 = $17;
     $294 = ((($293)) + 28|0);
     HEAP32[$294>>2] = $292;
     break;
    }
    $295 = $17;
    $296 = ((($295)) + 28|0);
    $297 = HEAP32[$296>>2]|0;
    $16 = $297;
    while(1) {
     $298 = $16;
     $299 = ((($298)) + 24|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ($300|0)!=(0|0);
     if (!($301)) {
      break;
     }
     $302 = $16;
     $303 = ((($302)) + 24|0);
     $304 = HEAP32[$303>>2]|0;
     $16 = $304;
    }
    $305 = $14;
    $306 = $16;
    $307 = ((($306)) + 24|0);
    HEAP32[$307>>2] = $305;
   }
  } while(0);
  $308 = $4;
  $309 = $5;
  $310 = HEAP32[$13>>2]|0;
  $311 = $310<<4;
  (_pj_ctx_fseek($308,$309,$311,1)|0);
  $312 = $9;
  $313 = (($312) + 1)|0;
  $9 = $313;
 }
 if ((label|0) == 11) {
  $57 = $4;
  _pj_ctx_set_errno($57,-38);
  $3 = 0;
  $314 = $3;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 13) {
  $60 = $4;
  _pj_ctx_set_errno($60,-38);
  $3 = 0;
  $314 = $3;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 17) {
  $200 = $4;
  $201 = HEAP32[$13>>2]|0;
  $202 = $11;
  $203 = ((($202)) + 112|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $11;
  $206 = ((($205)) + 112|0);
  $207 = ((($206)) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $11;
  $210 = ((($209)) + 112|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $11;
  $213 = ((($212)) + 112|0);
  $214 = ((($213)) + 4|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = Math_imul($211, $215)|0;
  HEAP32[$vararg_buffer7>>2] = $201;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $204;
  $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $208;
  $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
  HEAP32[$vararg_ptr12>>2] = $216;
  _pj_log($200,1,21234,$vararg_buffer7);
  $217 = $4;
  _pj_ctx_set_errno($217,-38);
  $3 = 0;
  $314 = $3;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 39) {
  $3 = 1;
  $314 = $3;
  STACKTOP = sp;return ($314|0);
 }
 return (0)|0;
}
function _pj_gridinfo_init_gtx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $7 = sp + 120|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = sp + 92|0;
 $14 = sp + 88|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $4;
 $16 = $5;
 $17 = (_pj_ctx_fread($15,$7,40,1,$16)|0);
 $18 = ($17|0)!=(1);
 if ($18) {
  $19 = $4;
  _pj_ctx_set_errno($19,-38);
  $3 = 0;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
 }
 $20 = HEAP8[8660]|0;
 $21 = $20&255;
 $22 = (1)==($21|0);
 if ($22) {
  _swap_words_1208($7,8,4);
  $23 = ((($7)) + 32|0);
  _swap_words_1208($23,4,2);
 }
 ;HEAP8[$10>>0]=HEAP8[$7>>0]|0;HEAP8[$10+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$7+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$7+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$7+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$7+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$7+7>>0]|0;
 $24 = ((($7)) + 8|0);
 ;HEAP8[$9>>0]=HEAP8[$24>>0]|0;HEAP8[$9+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$24+3>>0]|0;HEAP8[$9+4>>0]=HEAP8[$24+4>>0]|0;HEAP8[$9+5>>0]=HEAP8[$24+5>>0]|0;HEAP8[$9+6>>0]=HEAP8[$24+6>>0]|0;HEAP8[$9+7>>0]=HEAP8[$24+7>>0]|0;
 $25 = ((($7)) + 16|0);
 ;HEAP8[$12>>0]=HEAP8[$25>>0]|0;HEAP8[$12+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$25+3>>0]|0;HEAP8[$12+4>>0]=HEAP8[$25+4>>0]|0;HEAP8[$12+5>>0]=HEAP8[$25+5>>0]|0;HEAP8[$12+6>>0]=HEAP8[$25+6>>0]|0;HEAP8[$12+7>>0]=HEAP8[$25+7>>0]|0;
 $26 = ((($7)) + 24|0);
 ;HEAP8[$11>>0]=HEAP8[$26>>0]|0;HEAP8[$11+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$11+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$11+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$11+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$11+7>>0]=HEAP8[$26+7>>0]|0;
 $27 = ((($7)) + 32|0);
 ;HEAP8[$13>>0]=HEAP8[$27>>0]|0;HEAP8[$13+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$27+3>>0]|0;
 $28 = ((($7)) + 36|0);
 ;HEAP8[$14>>0]=HEAP8[$28>>0]|0;HEAP8[$14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$28+3>>0]|0;
 $29 = +HEAPF64[$9>>3];
 $30 = $29 < -360.0;
 $31 = +HEAPF64[$9>>3];
 $32 = $31 > 360.0;
 $or$cond = $30 | $32;
 $33 = +HEAPF64[$10>>3];
 $34 = $33 < -90.0;
 $or$cond3 = $or$cond | $34;
 $35 = +HEAPF64[$10>>3];
 $36 = $35 > 90.0;
 $or$cond5 = $or$cond3 | $36;
 if ($or$cond5) {
  $37 = $4;
  _pj_log($37,1,21007,$vararg_buffer);
  $38 = $4;
  _pj_ctx_set_errno($38,-38);
  $3 = 0;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
 }
 $39 = (_pj_malloc(128)|0);
 $8 = $39;
 $40 = $8;
 (_strcpy($40,21053)|0);
 $41 = +HEAPF64[$9>>3];
 $42 = $8;
 $43 = ((($42)) + 80|0);
 HEAPF64[$43>>3] = $41;
 $44 = +HEAPF64[$10>>3];
 $45 = $8;
 $46 = ((($45)) + 80|0);
 $47 = ((($46)) + 8|0);
 HEAPF64[$47>>3] = $44;
 $48 = +HEAPF64[$11>>3];
 $49 = $8;
 $50 = ((($49)) + 96|0);
 HEAPF64[$50>>3] = $48;
 $51 = +HEAPF64[$12>>3];
 $52 = $8;
 $53 = ((($52)) + 96|0);
 $54 = ((($53)) + 8|0);
 HEAPF64[$54>>3] = $51;
 $55 = HEAP32[$14>>2]|0;
 $56 = $8;
 $57 = ((($56)) + 112|0);
 HEAP32[$57>>2] = $55;
 $58 = HEAP32[$13>>2]|0;
 $59 = $8;
 $60 = ((($59)) + 112|0);
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = $58;
 $62 = $8;
 $63 = ((($62)) + 80|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $64 >= 180.0;
 if ($65) {
  $66 = $8;
  $67 = ((($66)) + 80|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $68 - 360.0;
  HEAPF64[$67>>3] = $69;
 }
 $70 = $8;
 $71 = ((($70)) + 80|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $72 >= 0.0;
 if ($73) {
  $74 = $8;
  $75 = ((($74)) + 80|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $8;
  $78 = ((($77)) + 96|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $8;
  $81 = ((($80)) + 112|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (+($82|0));
  $84 = $79 * $83;
  $85 = $76 + $84;
  $86 = $85 > 180.0;
  if ($86) {
   $87 = $4;
   _pj_log($87,2,21082,$vararg_buffer6);
  }
 }
 $88 = $4;
 $89 = $8;
 $90 = ((($89)) + 112|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $8;
 $93 = ((($92)) + 112|0);
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $8;
 $97 = ((($96)) + 80|0);
 $98 = +HEAPF64[$97>>3];
 $99 = $8;
 $100 = ((($99)) + 80|0);
 $101 = ((($100)) + 8|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $8;
 $104 = ((($103)) + 80|0);
 $105 = +HEAPF64[$104>>3];
 $106 = HEAP32[$14>>2]|0;
 $107 = (($106) - 1)|0;
 $108 = (+($107|0));
 $109 = +HEAPF64[$11>>3];
 $110 = $108 * $109;
 $111 = $105 + $110;
 $112 = $8;
 $113 = ((($112)) + 80|0);
 $114 = ((($113)) + 8|0);
 $115 = +HEAPF64[$114>>3];
 $116 = HEAP32[$13>>2]|0;
 $117 = (($116) - 1)|0;
 $118 = (+($117|0));
 $119 = +HEAPF64[$12>>3];
 $120 = $118 * $119;
 $121 = $115 + $120;
 HEAP32[$vararg_buffer8>>2] = $91;
 $vararg_ptr10 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $95;
 $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
 HEAPF64[$vararg_ptr11>>3] = $98;
 $vararg_ptr12 = ((($vararg_buffer8)) + 16|0);
 HEAPF64[$vararg_ptr12>>3] = $102;
 $vararg_ptr13 = ((($vararg_buffer8)) + 24|0);
 HEAPF64[$vararg_ptr13>>3] = $111;
 $vararg_ptr14 = ((($vararg_buffer8)) + 32|0);
 HEAPF64[$vararg_ptr14>>3] = $121;
 _pj_log($88,3,21138,$vararg_buffer8);
 $122 = $8;
 $123 = ((($122)) + 80|0);
 $124 = +HEAPF64[$123>>3];
 $125 = $124 * 0.017453292519943295;
 HEAPF64[$123>>3] = $125;
 $126 = $8;
 $127 = ((($126)) + 80|0);
 $128 = ((($127)) + 8|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $129 * 0.017453292519943295;
 HEAPF64[$128>>3] = $130;
 $131 = $8;
 $132 = ((($131)) + 96|0);
 $133 = +HEAPF64[$132>>3];
 $134 = $133 * 0.017453292519943295;
 HEAPF64[$132>>3] = $134;
 $135 = $8;
 $136 = ((($135)) + 96|0);
 $137 = ((($136)) + 8|0);
 $138 = +HEAPF64[$137>>3];
 $139 = $138 * 0.017453292519943295;
 HEAPF64[$137>>3] = $139;
 $140 = $8;
 $141 = ((($140)) + 120|0);
 HEAP32[$141>>2] = 0;
 $142 = $8;
 $143 = $6;
 $144 = ((($143)) + 20|0);
 HEAP32[$144>>2] = $142;
 $145 = $6;
 $146 = ((($145)) + 12|0);
 HEAP32[$146>>2] = 40;
 $147 = $6;
 $148 = ((($147)) + 8|0);
 HEAP32[$148>>2] = 20817;
 $3 = 1;
 $149 = $3;
 STACKTOP = sp;return ($149|0);
}
function _pj_gridinfo_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $8 = $4;
  $9 = ($8|0)!=(0|0);
  $10 = $4;
  if (!($9)) {
   label = 9;
   break;
  }
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $5;
  $14 = $6;
  $15 = (_strncmp($12,$13,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $4;
  if ($16) {
   label = 4;
   break;
  }
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $6;
   $26 = (_pj_gridinfo_parent($23,$24,$25)|0);
   $7 = $26;
   $27 = $7;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    label = 7;
    break;
   }
  }
  $30 = $4;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $4 = $32;
 }
 if ((label|0) == 4) {
  $3 = $17;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 7) {
  $29 = $7;
  $3 = $29;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 9) {
  $3 = $10;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _pj_gridlist_from_nadgrids($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $12 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$8>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[6054] = 0;
 $13 = $6;
 HEAP32[$13>>2] = 0;
 _pj_acquire_lock();
 $14 = $5;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   label = 16;
   break;
  }
  $11 = 1;
  $19 = $7;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(64);
  if ($22) {
   $11 = 0;
   $23 = $7;
   $24 = ((($23)) + 1|0);
   $7 = $24;
  }
  $10 = 0;
  while(1) {
   $25 = $10;
   $26 = $7;
   $27 = (($26) + ($25)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(0);
   if (!($30)) {
    break;
   }
   $31 = $10;
   $32 = $7;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)!=(44);
   if (!($36)) {
    break;
   }
   $37 = $10;
   $38 = (($37) + 1)|0;
   $10 = $38;
  }
  $39 = $10;
  $40 = ($39>>>0)>=(1024);
  if ($40) {
   label = 10;
   break;
  }
  $42 = $7;
  $43 = $10;
  (_strncpy($12,$42,$43)|0);
  $44 = $10;
  $45 = (($12) + ($44)|0);
  HEAP8[$45>>0] = 0;
  $46 = $10;
  $47 = $7;
  $48 = (($47) + ($46)|0);
  $7 = $48;
  $49 = $7;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)==(44);
  if ($52) {
   $53 = $7;
   $54 = ((($53)) + 1|0);
   $7 = $54;
  }
  $55 = $4;
  $56 = $6;
  $57 = (_pj_gridlist_merge_gridfile($55,$12,$8,$56,$9)|0);
  $58 = ($57|0)==(0);
  $59 = $11;
  $60 = ($59|0)!=(0);
  $or$cond = $58 & $60;
  if ($or$cond) {
   label = 14;
   break;
  }
  HEAP32[6054] = 0;
 }
 if ((label|0) == 10) {
  $41 = $4;
  _pj_ctx_set_errno($41,-38);
  _pj_release_lock();
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 14) {
  $61 = $4;
  _pj_ctx_set_errno($61,-38);
  _pj_release_lock();
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 16) {
  _pj_release_lock();
  $62 = HEAP32[$8>>2]|0;
  $3 = $62;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _pj_gridlist_merge_gridfile($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $13 = 0;
 $16 = HEAP32[6066]|0;
 $12 = $16;
 while(1) {
  $17 = $12;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $12;
  $20 = HEAP32[$19>>2]|0;
  $21 = $7;
  $22 = (_strcmp($20,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $11 = 1;
   $24 = $12;
   $25 = ((($24)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    label = 5;
    break;
   }
   $28 = $9;
   $29 = HEAP32[$28>>2]|0;
   $30 = $10;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) - 2)|0;
   $33 = ($29|0)>=($32|0);
   if ($33) {
    $34 = $10;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 20)|0;
    $15 = $36;
    $37 = $15;
    $38 = $37<<2;
    $39 = (_pj_malloc($38)|0);
    $14 = $39;
    $40 = $8;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)!=(0|0);
    if ($42) {
     $43 = $14;
     $44 = $8;
     $45 = HEAP32[$44>>2]|0;
     $46 = $10;
     $47 = HEAP32[$46>>2]|0;
     $48 = $47<<2;
     _memcpy(($43|0),($45|0),($48|0))|0;
     $49 = $8;
     $50 = HEAP32[$49>>2]|0;
     _pj_dalloc($50);
    }
    $51 = $14;
    $52 = $8;
    HEAP32[$52>>2] = $51;
    $53 = $15;
    $54 = $10;
    HEAP32[$54>>2] = $53;
   }
   $55 = $12;
   $56 = $9;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[$56>>2] = $58;
   $59 = $8;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<2)|0);
   HEAP32[$61>>2] = $55;
   $62 = $9;
   $63 = HEAP32[$62>>2]|0;
   $64 = $8;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($63<<2)|0);
   HEAP32[$66>>2] = 0;
  }
  $67 = $12;
  $13 = $67;
  $68 = $12;
  $69 = ((($68)) + 24|0);
  $70 = HEAP32[$69>>2]|0;
  $12 = $70;
 }
 if ((label|0) == 5) {
  $5 = 0;
  $89 = $5;
  STACKTOP = sp;return ($89|0);
 }
 $71 = $11;
 $72 = ($71|0)!=(0);
 if ($72) {
  $5 = 1;
  $89 = $5;
  STACKTOP = sp;return ($89|0);
 }
 $73 = $6;
 $74 = $7;
 $75 = (_pj_gridinfo_init($73,$74)|0);
 $12 = $75;
 $76 = $12;
 $77 = ($76|0)==(0|0);
 if ($77) {
  ___assert_fail((21473|0),(21479|0),136,(21493|0));
  // unreachable;
 }
 $78 = $13;
 $79 = ($78|0)!=(0|0);
 $80 = $12;
 if ($79) {
  $81 = $13;
  $82 = ((($81)) + 24|0);
  HEAP32[$82>>2] = $80;
 } else {
  HEAP32[6066] = $80;
 }
 $83 = $6;
 $84 = $7;
 $85 = $8;
 $86 = $9;
 $87 = $10;
 $88 = (_pj_gridlist_merge_gridfile($83,$84,$85,$86,$87)|0);
 $5 = $88;
 $89 = $5;
 STACKTOP = sp;return ($89|0);
}
function _pj_acquire_lock() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = HEAP32[6067]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  (_pthread_mutex_lock((24300|0))|0);
  STACKTOP = sp;return;
 }
 (_pthread_mutex_lock((24272|0))|0);
 (_pthread_mutexattr_init(($0|0))|0);
 (_pthread_mutexattr_settype(($0|0),1)|0);
 (_pthread_mutex_init((24300|0),($0|0))|0);
 HEAP32[6067] = 1;
 (_pthread_mutex_unlock((24272|0))|0);
 (_pthread_mutex_lock((24300|0))|0);
 STACKTOP = sp;return;
}
function _pj_release_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_unlock((24300|0))|0);
 return;
}
function _pj_clone_paralist($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 5|0);
  $9 = (_strlen($8)|0);
  $10 = (8 + ($9))|0;
  $11 = (_pj_malloc($10)|0);
  $4 = $11;
  $12 = $4;
  $13 = ((($12)) + 4|0);
  HEAP8[$13>>0] = 0;
  $14 = $4;
  HEAP32[$14>>2] = 0;
  $15 = $4;
  $16 = ((($15)) + 5|0);
  $17 = $1;
  $18 = ((($17)) + 5|0);
  (_strcpy($16,$18)|0);
  $19 = $2;
  $20 = ($19|0)==(0|0);
  $21 = $4;
  if ($20) {
   $2 = $21;
  } else {
   $22 = $3;
   HEAP32[$22>>2] = $21;
  }
  $23 = $4;
  $3 = $23;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $1 = $25;
 }
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _pj_search_initcache($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 _pj_acquire_lock();
 $2 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $2;
  $7 = HEAP32[6083]|0;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $1;
  $10 = $2;
  $11 = HEAP32[6085]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strcmp($9,$13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $2;
   $17 = HEAP32[6084]|0;
   $18 = (($17) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_pj_clone_paralist($19)|0);
   $3 = $20;
  }
  $21 = $2;
  $22 = (($21) + 1)|0;
  $2 = $22;
 }
 if ((label|0) == 7) {
  _pj_release_lock();
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _pj_insert_initcache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 _pj_acquire_lock();
 $6 = HEAP32[6083]|0;
 $7 = HEAP32[6082]|0;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = HEAP32[6082]|0;
  $10 = $9<<1;
  $11 = (($10) + 15)|0;
  HEAP32[6082] = $11;
  $12 = HEAP32[6082]|0;
  $13 = $12<<2;
  $14 = (_pj_malloc($13)|0);
  $4 = $14;
  $15 = $4;
  $16 = HEAP32[6085]|0;
  $17 = HEAP32[6083]|0;
  $18 = $17<<2;
  _memcpy(($15|0),($16|0),($18|0))|0;
  $19 = HEAP32[6085]|0;
  _pj_dalloc($19);
  $20 = $4;
  HEAP32[6085] = $20;
  $21 = HEAP32[6082]|0;
  $22 = $21<<2;
  $23 = (_pj_malloc($22)|0);
  $5 = $23;
  $24 = $5;
  $25 = HEAP32[6084]|0;
  $26 = HEAP32[6083]|0;
  $27 = $26<<2;
  _memcpy(($24|0),($25|0),($27|0))|0;
  $28 = HEAP32[6084]|0;
  _pj_dalloc($28);
  $29 = $5;
  HEAP32[6084] = $29;
 }
 $30 = $2;
 $31 = (_strlen($30)|0);
 $32 = (($31) + 1)|0;
 $33 = (_pj_malloc($32)|0);
 $34 = HEAP32[6083]|0;
 $35 = HEAP32[6085]|0;
 $36 = (($35) + ($34<<2)|0);
 HEAP32[$36>>2] = $33;
 $37 = HEAP32[6083]|0;
 $38 = HEAP32[6085]|0;
 $39 = (($38) + ($37<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 (_strcpy($40,$41)|0);
 $42 = $3;
 $43 = (_pj_clone_paralist($42)|0);
 $44 = HEAP32[6083]|0;
 $45 = HEAP32[6084]|0;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = $43;
 $47 = HEAP32[6083]|0;
 $48 = (($47) + 1)|0;
 HEAP32[6083] = $48;
 _pj_release_lock();
 STACKTOP = sp;return;
}
function _pj_apply_vgridshift($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3184|0);
 $vararg_buffer14 = sp + 88|0;
 $vararg_buffer11 = sp + 80|0;
 $vararg_buffer8 = sp + 72|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $23 = sp + 40|0;
 $25 = sp + 24|0;
 $37 = sp + 184|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 do {
  if ($41) {
   $42 = $11;
   $43 = (_pj_get_ctx($42)|0);
   $44 = $11;
   $45 = HEAP32[$44>>2]|0;
   $46 = $11;
   $47 = ((($46)) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $12;
   _pj_param($23,$45,$48,$49);
   $50 = HEAP32[$23>>2]|0;
   $51 = $14;
   $52 = (_pj_gridlist_from_nadgrids($43,$50,$51)|0);
   $53 = $13;
   HEAP32[$53>>2] = $52;
   $54 = $13;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if (!($56)) {
    $57 = $14;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(0);
    if (!($59)) {
     break;
    }
   }
   $60 = $11;
   $61 = HEAP32[$60>>2]|0;
   $62 = HEAP32[$61>>2]|0;
   $10 = $62;
   $400 = $10;
   STACKTOP = sp;return ($400|0);
  }
 } while(0);
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0);
 if ($65) {
  $66 = $11;
  $67 = HEAP32[$66>>2]|0;
  _pj_ctx_set_errno($67,-38);
  $10 = -38;
  $400 = $10;
  STACKTOP = sp;return ($400|0);
 }
 $68 = $13;
 $69 = HEAP32[$68>>2]|0;
 $22 = $69;
 $70 = $11;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$71>>2] = 0;
 $21 = 0;
 L12: while(1) {
  $72 = $21;
  $73 = $16;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   label = 48;
   break;
  }
  $75 = $21;
  $76 = $17;
  $77 = Math_imul($75, $76)|0;
  $24 = $77;
  $27 = inf;
  $78 = $24;
  $79 = $19;
  $80 = (($79) + ($78<<3)|0);
  $81 = +HEAPF64[$80>>3];
  $82 = ((($25)) + 8|0);
  HEAPF64[$82>>3] = $81;
  $83 = $24;
  $84 = $18;
  $85 = (($84) + ($83<<3)|0);
  $86 = +HEAPF64[$85>>3];
  HEAPF64[$25>>3] = $86;
  $26 = 0;
  while(1) {
   $87 = $26;
   $88 = $14;
   $89 = HEAP32[$88>>2]|0;
   $90 = ($87|0)<($89|0);
   if (!($90)) {
    break;
   }
   $91 = $26;
   $92 = $22;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $28 = $94;
   $95 = $28;
   $96 = ((($95)) + 20|0);
   $97 = HEAP32[$96>>2]|0;
   $29 = $97;
   $98 = $29;
   $99 = ((($98)) + 80|0);
   $100 = ((($99)) + 8|0);
   $101 = +HEAPF64[$100>>3];
   $102 = ((($25)) + 8|0);
   $103 = +HEAPF64[$102>>3];
   $104 = $101 > $103;
   if (!($104)) {
    $105 = $29;
    $106 = ((($105)) + 80|0);
    $107 = +HEAPF64[$106>>3];
    $108 = +HEAPF64[$25>>3];
    $109 = $107 > $108;
    if (!($109)) {
     $110 = $29;
     $111 = ((($110)) + 80|0);
     $112 = ((($111)) + 8|0);
     $113 = +HEAPF64[$112>>3];
     $114 = $29;
     $115 = ((($114)) + 112|0);
     $116 = ((($115)) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) - 1)|0;
     $119 = (+($118|0));
     $120 = $29;
     $121 = ((($120)) + 96|0);
     $122 = ((($121)) + 8|0);
     $123 = +HEAPF64[$122>>3];
     $124 = $119 * $123;
     $125 = $113 + $124;
     $126 = ((($25)) + 8|0);
     $127 = +HEAPF64[$126>>3];
     $128 = $125 < $127;
     if (!($128)) {
      $129 = $29;
      $130 = ((($129)) + 80|0);
      $131 = +HEAPF64[$130>>3];
      $132 = $29;
      $133 = ((($132)) + 112|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (($134) - 1)|0;
      $136 = (+($135|0));
      $137 = $29;
      $138 = ((($137)) + 96|0);
      $139 = +HEAPF64[$138>>3];
      $140 = $136 * $139;
      $141 = $131 + $140;
      $142 = +HEAPF64[$25>>3];
      $143 = $141 < $142;
      if (!($143)) {
       while(1) {
        $144 = $28;
        $145 = ((($144)) + 28|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = ($146|0)!=(0|0);
        if (!($147)) {
         break;
        }
        $148 = $28;
        $149 = ((($148)) + 28|0);
        $150 = HEAP32[$149>>2]|0;
        $35 = $150;
        while(1) {
         $151 = $35;
         $152 = ($151|0)!=(0|0);
         if (!($152)) {
          break;
         }
         $153 = $35;
         $154 = ((($153)) + 20|0);
         $155 = HEAP32[$154>>2]|0;
         $36 = $155;
         $156 = $36;
         $157 = ((($156)) + 80|0);
         $158 = ((($157)) + 8|0);
         $159 = +HEAPF64[$158>>3];
         $160 = ((($25)) + 8|0);
         $161 = +HEAPF64[$160>>3];
         $162 = $159 > $161;
         if (!($162)) {
          $163 = $36;
          $164 = ((($163)) + 80|0);
          $165 = +HEAPF64[$164>>3];
          $166 = +HEAPF64[$25>>3];
          $167 = $165 > $166;
          if (!($167)) {
           $168 = $36;
           $169 = ((($168)) + 80|0);
           $170 = ((($169)) + 8|0);
           $171 = +HEAPF64[$170>>3];
           $172 = $36;
           $173 = ((($172)) + 112|0);
           $174 = ((($173)) + 4|0);
           $175 = HEAP32[$174>>2]|0;
           $176 = (($175) - 1)|0;
           $177 = (+($176|0));
           $178 = $36;
           $179 = ((($178)) + 96|0);
           $180 = ((($179)) + 8|0);
           $181 = +HEAPF64[$180>>3];
           $182 = $177 * $181;
           $183 = $171 + $182;
           $184 = ((($25)) + 8|0);
           $185 = +HEAPF64[$184>>3];
           $186 = $183 < $185;
           if (!($186)) {
            $187 = $36;
            $188 = ((($187)) + 80|0);
            $189 = +HEAPF64[$188>>3];
            $190 = $36;
            $191 = ((($190)) + 112|0);
            $192 = HEAP32[$191>>2]|0;
            $193 = (($192) - 1)|0;
            $194 = (+($193|0));
            $195 = $36;
            $196 = ((($195)) + 96|0);
            $197 = +HEAPF64[$196>>3];
            $198 = $194 * $197;
            $199 = $189 + $198;
            $200 = +HEAPF64[$25>>3];
            $201 = $199 < $200;
            if (!($201)) {
             break;
            }
           }
          }
         }
         $202 = $35;
         $203 = ((($202)) + 24|0);
         $204 = HEAP32[$203>>2]|0;
         $35 = $204;
        }
        $205 = $35;
        $206 = ($205|0)==(0|0);
        if ($206) {
         break;
        }
        $207 = $35;
        $28 = $207;
        $208 = $35;
        $209 = ((($208)) + 20|0);
        $210 = HEAP32[$209>>2]|0;
        $29 = $210;
       }
       $211 = $29;
       $212 = ((($211)) + 120|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($213|0)==(0|0);
       if ($214) {
        $215 = $11;
        $216 = (_pj_get_ctx($215)|0);
        $217 = $28;
        $218 = (_pj_gridinfo_load($216,$217)|0);
        $219 = ($218|0)!=(0);
        if (!($219)) {
         label = 27;
         break L12;
        }
       }
       $222 = +HEAPF64[$25>>3];
       $223 = $29;
       $224 = ((($223)) + 80|0);
       $225 = +HEAPF64[$224>>3];
       $226 = $222 - $225;
       $227 = $29;
       $228 = ((($227)) + 96|0);
       $229 = +HEAPF64[$228>>3];
       $230 = $226 / $229;
       $30 = $230;
       $231 = ((($25)) + 8|0);
       $232 = +HEAPF64[$231>>3];
       $233 = $29;
       $234 = ((($233)) + 80|0);
       $235 = ((($234)) + 8|0);
       $236 = +HEAPF64[$235>>3];
       $237 = $232 - $236;
       $238 = $29;
       $239 = ((($238)) + 96|0);
       $240 = ((($239)) + 8|0);
       $241 = +HEAPF64[$240>>3];
       $242 = $237 / $241;
       $31 = $242;
       $243 = $30;
       $244 = (+Math_floor((+$243)));
       $245 = (~~(($244)));
       $32 = $245;
       $246 = $31;
       $247 = (+Math_floor((+$246)));
       $248 = (~~(($247)));
       $33 = $248;
       $249 = $32;
       $250 = (+($249|0));
       $251 = $30;
       $252 = $251 - $250;
       $30 = $252;
       $253 = $33;
       $254 = (+($253|0));
       $255 = $31;
       $256 = $255 - $254;
       $31 = $256;
       $257 = $29;
       $258 = ((($257)) + 120|0);
       $259 = HEAP32[$258>>2]|0;
       $34 = $259;
       $260 = $32;
       $261 = $33;
       $262 = $29;
       $263 = ((($262)) + 112|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = Math_imul($261, $264)|0;
       $266 = (($260) + ($265))|0;
       $267 = $34;
       $268 = (($267) + ($266<<2)|0);
       $269 = +HEAPF32[$268>>2];
       $270 = $269;
       $271 = $30;
       $272 = 1.0 - $271;
       $273 = $270 * $272;
       $274 = $31;
       $275 = 1.0 - $274;
       $276 = $273 * $275;
       $277 = $32;
       $278 = (($277) + 1)|0;
       $279 = $33;
       $280 = $29;
       $281 = ((($280)) + 112|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = Math_imul($279, $282)|0;
       $284 = (($278) + ($283))|0;
       $285 = $34;
       $286 = (($285) + ($284<<2)|0);
       $287 = +HEAPF32[$286>>2];
       $288 = $287;
       $289 = $30;
       $290 = $288 * $289;
       $291 = $31;
       $292 = 1.0 - $291;
       $293 = $290 * $292;
       $294 = $276 + $293;
       $295 = $32;
       $296 = $33;
       $297 = (($296) + 1)|0;
       $298 = $29;
       $299 = ((($298)) + 112|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = Math_imul($297, $300)|0;
       $302 = (($295) + ($301))|0;
       $303 = $34;
       $304 = (($303) + ($302<<2)|0);
       $305 = +HEAPF32[$304>>2];
       $306 = $305;
       $307 = $30;
       $308 = 1.0 - $307;
       $309 = $306 * $308;
       $310 = $31;
       $311 = $309 * $310;
       $312 = $294 + $311;
       $313 = $32;
       $314 = (($313) + 1)|0;
       $315 = $33;
       $316 = (($315) + 1)|0;
       $317 = $29;
       $318 = ((($317)) + 112|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = Math_imul($316, $319)|0;
       $321 = (($314) + ($320))|0;
       $322 = $34;
       $323 = (($322) + ($321<<2)|0);
       $324 = +HEAPF32[$323>>2];
       $325 = $324;
       $326 = $30;
       $327 = $325 * $326;
       $328 = $31;
       $329 = $327 * $328;
       $330 = $312 + $329;
       $27 = $330;
       $331 = $27;
       $332 = $331 > 1000.0;
       $333 = $27;
       $334 = $333 < -1000.0;
       $or$cond = $332 | $334;
       $335 = $27;
       $336 = $335 == -88.888801574707031;
       $or$cond3 = $or$cond | $336;
       do {
        if ($or$cond3) {
         $27 = inf;
        } else {
         $337 = $15;
         $338 = ($337|0)!=(0);
         $339 = $27;
         $340 = $24;
         $341 = $20;
         $342 = (($341) + ($340<<3)|0);
         $343 = +HEAPF64[$342>>3];
         if ($338) {
          $344 = $343 - $339;
          HEAPF64[$342>>3] = $344;
          break;
         } else {
          $345 = $343 + $339;
          HEAPF64[$342>>3] = $345;
          break;
         }
        }
       } while(0);
       $346 = $27;
       $347 = $346 != inf;
       if ($347) {
        label = 34;
        break;
       }
      }
     }
    }
   }
   $354 = $26;
   $355 = (($354) + 1)|0;
   $26 = $355;
  }
  if ((label|0) == 34) {
   label = 0;
   $348 = HEAP32[6086]|0;
   $349 = (($348) + 1)|0;
   HEAP32[6086] = $349;
   $350 = ($348|0)<(20);
   if ($350) {
    $351 = $11;
    $352 = HEAP32[$351>>2]|0;
    $353 = $29;
    HEAP32[$vararg_buffer>>2] = $353;
    _pj_log($352,3,21520,$vararg_buffer);
   }
  }
  $356 = $27;
  $357 = $356 == inf;
  if ($357) {
   label = 38;
   break;
  }
  $398 = $21;
  $399 = (($398) + 1)|0;
  $21 = $399;
 }
 if ((label|0) == 27) {
  $220 = $11;
  $221 = HEAP32[$220>>2]|0;
  _pj_ctx_set_errno($221,-38);
  $10 = -38;
  $400 = $10;
  STACKTOP = sp;return ($400|0);
 }
 else if ((label|0) == 38) {
  $358 = $11;
  $359 = HEAP32[$358>>2]|0;
  $360 = $24;
  $361 = $18;
  $362 = (($361) + ($360<<3)|0);
  $363 = +HEAPF64[$362>>3];
  $364 = $363 * 57.295779513082323;
  $365 = $24;
  $366 = $19;
  $367 = (($366) + ($365<<3)|0);
  $368 = +HEAPF64[$367>>3];
  $369 = $368 * 57.295779513082323;
  HEAPF64[$vararg_buffer4>>3] = $364;
  $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
  HEAPF64[$vararg_ptr7>>3] = $369;
  _pj_log($359,2,21550,$vararg_buffer4);
  HEAP8[$37>>0] = 0;
  $26 = 0;
  while(1) {
   $370 = $26;
   $371 = $14;
   $372 = HEAP32[$371>>2]|0;
   $373 = ($370|0)<($372|0);
   if (!($373)) {
    break;
   }
   $374 = $26;
   $375 = $22;
   $376 = (($375) + ($374<<2)|0);
   $377 = HEAP32[$376>>2]|0;
   $38 = $377;
   $378 = (_strlen($37)|0);
   $379 = $38;
   $380 = HEAP32[$379>>2]|0;
   $381 = (_strlen($380)|0);
   $382 = (($378) + ($381))|0;
   $383 = ($382>>>0)>(2900);
   if ($383) {
    label = 41;
    break;
   }
   $384 = $26;
   $385 = ($384|0)==(0);
   if ($385) {
    $386 = $38;
    $387 = HEAP32[$386>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $387;
    (_sprintf($37,21663,$vararg_buffer8)|0);
   } else {
    $388 = (_strlen($37)|0);
    $389 = (($37) + ($388)|0);
    $390 = $38;
    $391 = HEAP32[$390>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $391;
    (_sprintf($389,21676,$vararg_buffer11)|0);
   }
   $392 = $26;
   $393 = (($392) + 1)|0;
   $26 = $393;
  }
  if ((label|0) == 41) {
   (_strcat($37,21659)|0);
  }
  $394 = $11;
  $395 = HEAP32[$394>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $37;
  _pj_log($395,2,21680,$vararg_buffer14);
  $396 = $11;
  $397 = HEAP32[$396>>2]|0;
  _pj_ctx_set_errno($397,-48);
  $10 = -48;
  $400 = $10;
  STACKTOP = sp;return ($400|0);
 }
 else if ((label|0) == 48) {
  $10 = 0;
  $400 = $10;
  STACKTOP = sp;return ($400|0);
 }
 return (0)|0;
}
function _geod_init($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[6087]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  _Init();
 }
 $8 = $4;
 $9 = $3;
 HEAPF64[$9>>3] = $8;
 $10 = $5;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 HEAPF64[$12>>3] = $10;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = 1.0 - $15;
 $17 = $3;
 $18 = ((($17)) + 16|0);
 HEAPF64[$18>>3] = $16;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $3;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = 2.0 - $24;
 $26 = $21 * $25;
 $27 = $3;
 $28 = ((($27)) + 24|0);
 HEAPF64[$28>>3] = $26;
 $29 = $3;
 $30 = ((($29)) + 24|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $3;
 $33 = ((($32)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = (+_sq($34));
 $36 = $31 / $35;
 $37 = $3;
 $38 = ((($37)) + 32|0);
 HEAPF64[$38>>3] = $36;
 $39 = $3;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $3;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = 2.0 - $44;
 $46 = $41 / $45;
 $47 = $3;
 $48 = ((($47)) + 40|0);
 HEAPF64[$48>>3] = $46;
 $49 = $3;
 $50 = +HEAPF64[$49>>3];
 $51 = $3;
 $52 = ((($51)) + 16|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $50 * $53;
 $55 = $3;
 $56 = ((($55)) + 48|0);
 HEAPF64[$56>>3] = $54;
 $57 = $3;
 $58 = +HEAPF64[$57>>3];
 $59 = (+_sq($58));
 $60 = $3;
 $61 = ((($60)) + 48|0);
 $62 = +HEAPF64[$61>>3];
 $63 = (+_sq($62));
 $64 = $3;
 $65 = ((($64)) + 24|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $66 == 0.0;
 if ($67) {
  $88 = 1.0;
 } else {
  $68 = $3;
  $69 = ((($68)) + 24|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $70 > 0.0;
  $72 = $3;
  $73 = ((($72)) + 24|0);
  $74 = +HEAPF64[$73>>3];
  if ($71) {
   $75 = (+Math_sqrt((+$74)));
   $76 = (+_atanhx($75));
   $86 = $76;
  } else {
   $77 = -$74;
   $78 = (+Math_sqrt((+$77)));
   $79 = (+Math_atan((+$78)));
   $86 = $79;
  }
  $80 = $3;
  $81 = ((($80)) + 24|0);
  $82 = +HEAPF64[$81>>3];
  $83 = (+Math_abs((+$82)));
  $84 = (+Math_sqrt((+$83)));
  $85 = $86 / $84;
  $88 = $85;
 }
 $87 = $63 * $88;
 $89 = $59 + $87;
 $90 = $89 / 2.0;
 $91 = $3;
 $92 = ((($91)) + 56|0);
 HEAPF64[$92>>3] = $90;
 $93 = +HEAPF64[3016];
 $94 = 0.10000000000000001 * $93;
 $95 = $3;
 $96 = ((($95)) + 8|0);
 $97 = +HEAPF64[$96>>3];
 $98 = (+Math_abs((+$97)));
 $99 = (+_maxx(0.001,$98));
 $100 = $3;
 $101 = ((($100)) + 8|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $102 / 2.0;
 $104 = 1.0 - $103;
 $105 = (+_minx(1.0,$104));
 $106 = $99 * $105;
 $107 = $106 / 2.0;
 $108 = (+Math_sqrt((+$107)));
 $109 = $94 / $108;
 $110 = $3;
 $111 = ((($110)) + 64|0);
 HEAPF64[$111>>3] = $109;
 $112 = $3;
 _A3coeff($112);
 $113 = $3;
 _C3coeff($113);
 $114 = $3;
 _C4coeff($114);
 STACKTOP = sp;return;
}
function _Init() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6087]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 HEAP32[6088] = 53;
 HEAPF64[3017] = 2.2204460492503131E-16;
 HEAPF64[3018] = 2.2250738585072014E-308;
 HEAPF64[3019] = 3.1415926535897931;
 HEAP32[6089] = 20;
 $2 = HEAP32[6089]|0;
 $3 = HEAP32[6088]|0;
 $4 = (($2) + ($3))|0;
 $5 = (($4) + 10)|0;
 HEAP32[6090] = $5;
 $6 = +HEAPF64[3018];
 $7 = (+Math_sqrt((+$6)));
 HEAPF64[3020] = $7;
 $8 = +HEAPF64[3017];
 HEAPF64[3021] = $8;
 $9 = +HEAPF64[3021];
 $10 = 200.0 * $9;
 HEAPF64[3022] = $10;
 $11 = +HEAPF64[3021];
 $12 = (+Math_sqrt((+$11)));
 HEAPF64[3016] = $12;
 $13 = +HEAPF64[3021];
 $14 = +HEAPF64[3016];
 $15 = $13 * $14;
 HEAPF64[3023] = $15;
 $16 = +HEAPF64[3016];
 $17 = 1000.0 * $16;
 HEAPF64[3024] = $17;
 $18 = +HEAPF64[3019];
 $19 = $18 / 180.0;
 HEAPF64[3025] = $19;
 $20 = (+Math_sqrt(-1.0));
 HEAPF64[3026] = $20;
 HEAP32[6087] = 1;
 return;
}
function _sq($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $2 * $3;
 STACKTOP = sp;return (+$4);
}
function _atanhx($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+Math_abs((+$3)));
 $2 = $4;
 $5 = $2;
 $6 = 2.0 * $5;
 $7 = $2;
 $8 = 1.0 - $7;
 $9 = $6 / $8;
 $10 = (+_log1px($9));
 $11 = $10 / 2.0;
 $2 = $11;
 $12 = $1;
 $13 = $12 < 0.0;
 $14 = $2;
 $15 = -$14;
 $16 = $13 ? $15 : $14;
 STACKTOP = sp;return (+$16);
}
function _maxx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4 < $5;
 $7 = $3;
 $8 = $2;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return (+$9);
}
function _minx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $4 < $5;
 $7 = $3;
 $8 = $2;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return (+$9);
}
function _A3coeff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 5;
 while(1) {
  $6 = $4;
  $7 = ($6|0)>=(0);
  if (!($7)) {
   break;
  }
  $8 = $4;
  $9 = (6 - ($8))|0;
  $10 = (($9) - 1)|0;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  $13 = $4;
  $14 = (6 - ($13))|0;
  $15 = (($14) - 1)|0;
  $16 = $12 ? $15 : $13;
  $5 = $16;
  $17 = $5;
  $18 = $2;
  $19 = (3520 + ($18<<3)|0);
  $20 = $1;
  $21 = ((($20)) + 40|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+_polyval($17,$19,$22));
  $24 = $2;
  $25 = $5;
  $26 = (($24) + ($25))|0;
  $27 = (($26) + 1)|0;
  $28 = (3520 + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $23 / $29;
  $31 = $3;
  $32 = (($31) + 1)|0;
  $3 = $32;
  $33 = $1;
  $34 = ((($33)) + 72|0);
  $35 = (($34) + ($31<<3)|0);
  HEAPF64[$35>>3] = $30;
  $36 = $5;
  $37 = (($36) + 2)|0;
  $38 = $2;
  $39 = (($38) + ($37))|0;
  $2 = $39;
  $40 = $4;
  $41 = (($40) + -1)|0;
  $4 = $41;
 }
 STACKTOP = sp;return;
}
function _C3coeff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 1;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(6);
  if (!($8)) {
   break;
  }
  $5 = 5;
  while(1) {
   $9 = $5;
   $10 = $4;
   $11 = ($9|0)>=($10|0);
   if (!($11)) {
    break;
   }
   $12 = $5;
   $13 = (6 - ($12))|0;
   $14 = (($13) - 1)|0;
   $15 = $5;
   $16 = ($14|0)<($15|0);
   $17 = $5;
   $18 = (6 - ($17))|0;
   $19 = (($18) - 1)|0;
   $20 = $16 ? $19 : $17;
   $6 = $20;
   $21 = $6;
   $22 = $2;
   $23 = (3160 + ($22<<3)|0);
   $24 = $1;
   $25 = ((($24)) + 40|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (+_polyval($21,$23,$26));
   $28 = $2;
   $29 = $6;
   $30 = (($28) + ($29))|0;
   $31 = (($30) + 1)|0;
   $32 = (3160 + ($31<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $27 / $33;
   $35 = $3;
   $36 = (($35) + 1)|0;
   $3 = $36;
   $37 = $1;
   $38 = ((($37)) + 120|0);
   $39 = (($38) + ($35<<3)|0);
   HEAPF64[$39>>3] = $34;
   $40 = $6;
   $41 = (($40) + 2)|0;
   $42 = $2;
   $43 = (($42) + ($41))|0;
   $2 = $43;
   $44 = $5;
   $45 = (($44) + -1)|0;
   $5 = $45;
  }
  $46 = $4;
  $47 = (($46) + 1)|0;
  $4 = $47;
 }
 STACKTOP = sp;return;
}
function _C4coeff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(6);
  if (!($8)) {
   break;
  }
  $5 = 5;
  while(1) {
   $9 = $5;
   $10 = $4;
   $11 = ($9|0)>=($10|0);
   if (!($11)) {
    break;
   }
   $12 = $5;
   $13 = (6 - ($12))|0;
   $14 = (($13) - 1)|0;
   $6 = $14;
   $15 = $6;
   $16 = $2;
   $17 = (2544 + ($16<<3)|0);
   $18 = $1;
   $19 = ((($18)) + 40|0);
   $20 = +HEAPF64[$19>>3];
   $21 = (+_polyval($15,$17,$20));
   $22 = $2;
   $23 = $6;
   $24 = (($22) + ($23))|0;
   $25 = (($24) + 1)|0;
   $26 = (2544 + ($25<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $21 / $27;
   $29 = $3;
   $30 = (($29) + 1)|0;
   $3 = $30;
   $31 = $1;
   $32 = ((($31)) + 240|0);
   $33 = (($32) + ($29<<3)|0);
   HEAPF64[$33>>3] = $28;
   $34 = $6;
   $35 = (($34) + 2)|0;
   $36 = $2;
   $37 = (($36) + ($35))|0;
   $2 = $37;
   $38 = $5;
   $39 = (($38) + -1)|0;
   $5 = $39;
  }
  $40 = $4;
  $41 = (($40) + 1)|0;
  $4 = $41;
 }
 STACKTOP = sp;return;
}
function _polyval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)<(0);
 if ($8) {
  $12 = 0.0;
 } else {
  $9 = $4;
  $10 = ((($9)) + 8|0);
  $4 = $10;
  $11 = +HEAPF64[$9>>3];
  $12 = $11;
 }
 $6 = $12;
 while(1) {
  $13 = $3;
  $14 = (($13) + -1)|0;
  $3 = $14;
  $15 = ($14|0)>=(0);
  $16 = $6;
  if (!($15)) {
   break;
  }
  $17 = $5;
  $18 = $16 * $17;
  $19 = $4;
  $20 = ((($19)) + 8|0);
  $4 = $20;
  $21 = +HEAPF64[$19>>3];
  $22 = $18 + $21;
  $6 = $22;
 }
 STACKTOP = sp;return (+$16);
}
function _log1px($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = 1.0 + $4;
 $2 = $5;
 $6 = $2;
 $7 = $6 - 1.0;
 $3 = $7;
 $8 = $3;
 $9 = $8 == 0.0;
 $10 = $1;
 if ($9) {
  $16 = $10;
  STACKTOP = sp;return (+$16);
 }
 $11 = $2;
 $12 = (+Math_log((+$11)));
 $13 = $10 * $12;
 $14 = $3;
 $15 = $13 / $14;
 $16 = $15;
 STACKTOP = sp;return (+$16);
}
function _geod_lineinit($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 8|0;
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $10;
 $15 = (+_AngNormalize($14));
 $10 = $15;
 $16 = $10;
 $17 = (+_AngRound($16));
 _sincosdx($17,$12,$13);
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = +HEAPF64[$12>>3];
 $24 = +HEAPF64[$13>>3];
 $25 = $11;
 _geod_lineinit_int($18,$19,$20,$21,$22,$23,$24,$25);
 STACKTOP = sp;return;
}
function _AngNormalize($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_fmod($2,360.0));
 $1 = $3;
 $4 = $1;
 $5 = $4 < -180.0;
 $6 = $1;
 if ($5) {
  $7 = $6 + 360.0;
  $12 = $7;
  STACKTOP = sp;return (+$12);
 } else {
  $8 = $6 < 180.0;
  $9 = $1;
  $10 = $9 - 360.0;
  $11 = $8 ? $9 : $10;
  $12 = $11;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AngRound($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0.0625;
 $5 = $2;
 $6 = $5 == 0.0;
 if ($6) {
  $1 = 0.0;
  $20 = $1;
  STACKTOP = sp;return (+$20);
 } else {
  $7 = $2;
  $8 = (+Math_abs((+$7)));
  $4 = $8;
  $9 = $4;
  $10 = $9 < 0.0625;
  $11 = $4;
  $12 = 0.0625 - $11;
  $13 = 0.0625 - $12;
  $14 = $10 ? $13 : $11;
  $4 = $14;
  $15 = $2;
  $16 = $15 < 0.0;
  $17 = $4;
  $18 = -$17;
  $19 = $16 ? $18 : $17;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return (+$20);
 }
 return +(0.0);
}
function _sincosdx($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = (+_fmod($10,360.0));
 $6 = $11;
 $12 = $6;
 $13 = $12 / 90.0;
 $14 = $13 + 0.5;
 $15 = (+Math_floor((+$14)));
 $16 = (~~(($15)));
 $9 = $16;
 $17 = $9;
 $18 = ($17*90)|0;
 $19 = (+($18|0));
 $20 = $6;
 $21 = $20 - $19;
 $6 = $21;
 $22 = +HEAPF64[3025];
 $23 = $6;
 $24 = $23 * $22;
 $6 = $24;
 $25 = $6;
 $26 = (+Math_sin((+$25)));
 $7 = $26;
 $27 = $6;
 $28 = (+Math_cos((+$27)));
 $8 = $28;
 $29 = $9;
 $30 = $29 & 3;
 switch ($30|0) {
 case 0:  {
  $31 = $7;
  $32 = $4;
  HEAPF64[$32>>3] = $31;
  $33 = $8;
  $34 = $5;
  HEAPF64[$34>>3] = $33;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $35 = $8;
  $36 = $4;
  HEAPF64[$36>>3] = $35;
  $37 = $7;
  $38 = 0.0 - $37;
  $39 = $5;
  HEAPF64[$39>>3] = $38;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $40 = $7;
  $41 = 0.0 - $40;
  $42 = $4;
  HEAPF64[$42>>3] = $41;
  $43 = $8;
  $44 = 0.0 - $43;
  $45 = $5;
  HEAPF64[$45>>3] = $44;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $46 = $8;
  $47 = 0.0 - $46;
  $48 = $4;
  HEAPF64[$48>>3] = $47;
  $49 = $7;
  $50 = $5;
  HEAPF64[$50>>3] = $49;
  STACKTOP = sp;return;
 }
 }
}
function _geod_lineinit_int($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0.0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $16 = sp + 32|0;
 $17 = sp + 24|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $21 = $9;
 $22 = +HEAPF64[$21>>3];
 $23 = $8;
 $24 = ((($23)) + 24|0);
 HEAPF64[$24>>3] = $22;
 $25 = $9;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $8;
 $29 = ((($28)) + 32|0);
 HEAPF64[$29>>3] = $27;
 $30 = $9;
 $31 = ((($30)) + 48|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $8;
 $34 = ((($33)) + 72|0);
 HEAPF64[$34>>3] = $32;
 $35 = $9;
 $36 = ((($35)) + 56|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $8;
 $39 = ((($38)) + 80|0);
 HEAPF64[$39>>3] = $37;
 $40 = $9;
 $41 = ((($40)) + 16|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $8;
 $44 = ((($43)) + 88|0);
 HEAPF64[$44>>3] = $42;
 $45 = $15;
 $46 = ($45|0)!=(0);
 $47 = $15;
 $48 = $46 ? $47 : 2315;
 $49 = $48 | 128;
 $50 = $49 | 512;
 $51 = $50 | 32768;
 $52 = $8;
 $53 = ((($52)) + 504|0);
 HEAP32[$53>>2] = $51;
 $54 = $10;
 $55 = (+_LatFix($54));
 $56 = $8;
 HEAPF64[$56>>3] = $55;
 $57 = $11;
 $58 = $8;
 $59 = ((($58)) + 8|0);
 HEAPF64[$59>>3] = $57;
 $60 = $12;
 $61 = $8;
 $62 = ((($61)) + 16|0);
 HEAPF64[$62>>3] = $60;
 $63 = $13;
 $64 = $8;
 $65 = ((($64)) + 40|0);
 HEAPF64[$65>>3] = $63;
 $66 = $14;
 $67 = $8;
 $68 = ((($67)) + 48|0);
 HEAPF64[$68>>3] = $66;
 $69 = $8;
 $70 = +HEAPF64[$69>>3];
 $71 = (+_AngRound($70));
 _sincosdx($71,$17,$16);
 $72 = $8;
 $73 = ((($72)) + 88|0);
 $74 = +HEAPF64[$73>>3];
 $75 = +HEAPF64[$17>>3];
 $76 = $75 * $74;
 HEAPF64[$17>>3] = $76;
 _norm2($17,$16);
 $77 = +HEAPF64[3020];
 $78 = +HEAPF64[$16>>3];
 $79 = (+_maxx($77,$78));
 HEAPF64[$16>>3] = $79;
 $80 = $9;
 $81 = ((($80)) + 32|0);
 $82 = +HEAPF64[$81>>3];
 $83 = +HEAPF64[$17>>3];
 $84 = (+_sq($83));
 $85 = $82 * $84;
 $86 = 1.0 + $85;
 $87 = (+Math_sqrt((+$86)));
 $88 = $8;
 $89 = ((($88)) + 136|0);
 HEAPF64[$89>>3] = $87;
 $90 = $8;
 $91 = ((($90)) + 40|0);
 $92 = +HEAPF64[$91>>3];
 $93 = +HEAPF64[$16>>3];
 $94 = $92 * $93;
 $95 = $8;
 $96 = ((($95)) + 96|0);
 HEAPF64[$96>>3] = $94;
 $97 = $8;
 $98 = ((($97)) + 48|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $8;
 $101 = ((($100)) + 40|0);
 $102 = +HEAPF64[$101>>3];
 $103 = +HEAPF64[$17>>3];
 $104 = $102 * $103;
 $105 = (+_hypotx($99,$104));
 $106 = $8;
 $107 = ((($106)) + 104|0);
 HEAPF64[$107>>3] = $105;
 $108 = +HEAPF64[$17>>3];
 $109 = $8;
 $110 = ((($109)) + 120|0);
 HEAPF64[$110>>3] = $108;
 $111 = $8;
 $112 = ((($111)) + 96|0);
 $113 = +HEAPF64[$112>>3];
 $114 = +HEAPF64[$17>>3];
 $115 = $113 * $114;
 $116 = $8;
 $117 = ((($116)) + 160|0);
 HEAPF64[$117>>3] = $115;
 $118 = +HEAPF64[$17>>3];
 $119 = $118 != 0.0;
 if ($119) {
  label = 3;
 } else {
  $120 = $8;
  $121 = ((($120)) + 48|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $122 != 0.0;
  if ($123) {
   label = 3;
  } else {
   $131 = 1.0;
  }
 }
 if ((label|0) == 3) {
  $124 = +HEAPF64[$16>>3];
  $125 = $8;
  $126 = ((($125)) + 48|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $124 * $127;
  $131 = $128;
 }
 $129 = $8;
 $130 = ((($129)) + 168|0);
 HEAPF64[$130>>3] = $131;
 $132 = $8;
 $133 = ((($132)) + 128|0);
 HEAPF64[$133>>3] = $131;
 $134 = $8;
 $135 = ((($134)) + 120|0);
 $136 = $8;
 $137 = ((($136)) + 128|0);
 _norm2($135,$137);
 $138 = $8;
 $139 = ((($138)) + 104|0);
 $140 = +HEAPF64[$139>>3];
 $141 = (+_sq($140));
 $142 = $9;
 $143 = ((($142)) + 32|0);
 $144 = +HEAPF64[$143>>3];
 $145 = $141 * $144;
 $146 = $8;
 $147 = ((($146)) + 112|0);
 HEAPF64[$147>>3] = $145;
 $148 = $8;
 $149 = ((($148)) + 112|0);
 $150 = +HEAPF64[$149>>3];
 $151 = $8;
 $152 = ((($151)) + 112|0);
 $153 = +HEAPF64[$152>>3];
 $154 = 1.0 + $153;
 $155 = (+Math_sqrt((+$154)));
 $156 = 1.0 + $155;
 $157 = 2.0 * $156;
 $158 = $8;
 $159 = ((($158)) + 112|0);
 $160 = +HEAPF64[$159>>3];
 $161 = $157 + $160;
 $162 = $150 / $161;
 $18 = $162;
 $163 = $8;
 $164 = ((($163)) + 504|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = $165 & 1;
 $167 = ($166|0)!=(0);
 if ($167) {
  $168 = $18;
  $169 = (+_A1m1f($168));
  $170 = $8;
  $171 = ((($170)) + 176|0);
  HEAPF64[$171>>3] = $169;
  $172 = $18;
  $173 = $8;
  $174 = ((($173)) + 240|0);
  _C1f($172,$174);
  $175 = $8;
  $176 = ((($175)) + 120|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $8;
  $179 = ((($178)) + 128|0);
  $180 = +HEAPF64[$179>>3];
  $181 = $8;
  $182 = ((($181)) + 240|0);
  $183 = (+_SinCosSeries(1,$177,$180,$182,6));
  $184 = $8;
  $185 = ((($184)) + 200|0);
  HEAPF64[$185>>3] = $183;
  $186 = $8;
  $187 = ((($186)) + 200|0);
  $188 = +HEAPF64[$187>>3];
  $189 = (+Math_sin((+$188)));
  $19 = $189;
  $190 = $8;
  $191 = ((($190)) + 200|0);
  $192 = +HEAPF64[$191>>3];
  $193 = (+Math_cos((+$192)));
  $20 = $193;
  $194 = $8;
  $195 = ((($194)) + 120|0);
  $196 = +HEAPF64[$195>>3];
  $197 = $20;
  $198 = $196 * $197;
  $199 = $8;
  $200 = ((($199)) + 128|0);
  $201 = +HEAPF64[$200>>3];
  $202 = $19;
  $203 = $201 * $202;
  $204 = $198 + $203;
  $205 = $8;
  $206 = ((($205)) + 144|0);
  HEAPF64[$206>>3] = $204;
  $207 = $8;
  $208 = ((($207)) + 128|0);
  $209 = +HEAPF64[$208>>3];
  $210 = $20;
  $211 = $209 * $210;
  $212 = $8;
  $213 = ((($212)) + 120|0);
  $214 = +HEAPF64[$213>>3];
  $215 = $19;
  $216 = $214 * $215;
  $217 = $211 - $216;
  $218 = $8;
  $219 = ((($218)) + 152|0);
  HEAPF64[$219>>3] = $217;
 }
 $220 = $8;
 $221 = ((($220)) + 504|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = $222 & 2;
 $224 = ($223|0)!=(0);
 if ($224) {
  $225 = $18;
  $226 = $8;
  $227 = ((($226)) + 296|0);
  _C1pf($225,$227);
 }
 $228 = $8;
 $229 = ((($228)) + 504|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $230 & 4;
 $232 = ($231|0)!=(0);
 if ($232) {
  $233 = $18;
  $234 = (+_A2m1f($233));
  $235 = $8;
  $236 = ((($235)) + 184|0);
  HEAPF64[$236>>3] = $234;
  $237 = $18;
  $238 = $8;
  $239 = ((($238)) + 352|0);
  _C2f($237,$239);
  $240 = $8;
  $241 = ((($240)) + 120|0);
  $242 = +HEAPF64[$241>>3];
  $243 = $8;
  $244 = ((($243)) + 128|0);
  $245 = +HEAPF64[$244>>3];
  $246 = $8;
  $247 = ((($246)) + 352|0);
  $248 = (+_SinCosSeries(1,$242,$245,$247,6));
  $249 = $8;
  $250 = ((($249)) + 208|0);
  HEAPF64[$250>>3] = $248;
 }
 $251 = $8;
 $252 = ((($251)) + 504|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $253 & 8;
 $255 = ($254|0)!=(0);
 if ($255) {
  $256 = $9;
  $257 = $18;
  $258 = $8;
  $259 = ((($258)) + 408|0);
  _C3f($256,$257,$259);
  $260 = $8;
  $261 = ((($260)) + 32|0);
  $262 = +HEAPF64[$261>>3];
  $263 = -$262;
  $264 = $8;
  $265 = ((($264)) + 96|0);
  $266 = +HEAPF64[$265>>3];
  $267 = $263 * $266;
  $268 = $9;
  $269 = $18;
  $270 = (+_A3f($268,$269));
  $271 = $267 * $270;
  $272 = $8;
  $273 = ((($272)) + 192|0);
  HEAPF64[$273>>3] = $271;
  $274 = $8;
  $275 = ((($274)) + 120|0);
  $276 = +HEAPF64[$275>>3];
  $277 = $8;
  $278 = ((($277)) + 128|0);
  $279 = +HEAPF64[$278>>3];
  $280 = $8;
  $281 = ((($280)) + 408|0);
  $282 = (+_SinCosSeries(1,$276,$279,$281,5));
  $283 = $8;
  $284 = ((($283)) + 216|0);
  HEAPF64[$284>>3] = $282;
 }
 $285 = $8;
 $286 = ((($285)) + 504|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = $287 & 16;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  $323 = +HEAPF64[3026];
  $324 = $8;
  $325 = ((($324)) + 64|0);
  HEAPF64[$325>>3] = $323;
  $326 = $8;
  $327 = ((($326)) + 56|0);
  HEAPF64[$327>>3] = $323;
  STACKTOP = sp;return;
 }
 $290 = $9;
 $291 = $18;
 $292 = $8;
 $293 = ((($292)) + 456|0);
 _C4f($290,$291,$293);
 $294 = $8;
 $295 = ((($294)) + 24|0);
 $296 = +HEAPF64[$295>>3];
 $297 = (+_sq($296));
 $298 = $8;
 $299 = ((($298)) + 104|0);
 $300 = +HEAPF64[$299>>3];
 $301 = $297 * $300;
 $302 = $8;
 $303 = ((($302)) + 96|0);
 $304 = +HEAPF64[$303>>3];
 $305 = $301 * $304;
 $306 = $9;
 $307 = ((($306)) + 24|0);
 $308 = +HEAPF64[$307>>3];
 $309 = $305 * $308;
 $310 = $8;
 $311 = ((($310)) + 224|0);
 HEAPF64[$311>>3] = $309;
 $312 = $8;
 $313 = ((($312)) + 120|0);
 $314 = +HEAPF64[$313>>3];
 $315 = $8;
 $316 = ((($315)) + 128|0);
 $317 = +HEAPF64[$316>>3];
 $318 = $8;
 $319 = ((($318)) + 456|0);
 $320 = (+_SinCosSeries(0,$314,$317,$319,6));
 $321 = $8;
 $322 = ((($321)) + 232|0);
 HEAPF64[$322>>3] = $320;
 $323 = +HEAPF64[3026];
 $324 = $8;
 $325 = ((($324)) + 64|0);
 HEAPF64[$325>>3] = $323;
 $326 = $8;
 $327 = ((($326)) + 56|0);
 HEAPF64[$327>>3] = $323;
 STACKTOP = sp;return;
}
function _LatFix($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+Math_abs((+$2)));
 $4 = $3 > 90.0;
 $5 = +HEAPF64[3026];
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return (+$7);
}
function _norm2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = +HEAPF64[$7>>3];
 $9 = (+_hypotx($6,$8));
 $4 = $9;
 $10 = $4;
 $11 = $2;
 $12 = +HEAPF64[$11>>3];
 $13 = $12 / $10;
 HEAPF64[$11>>3] = $13;
 $14 = $4;
 $15 = $3;
 $16 = +HEAPF64[$15>>3];
 $17 = $16 / $14;
 HEAPF64[$15>>3] = $17;
 STACKTOP = sp;return;
}
function _hypotx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $2;
 $6 = $4 * $5;
 $7 = $3;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $6 + $9;
 $11 = (+Math_sqrt((+$10)));
 STACKTOP = sp;return (+$11);
}
function _A1m1f($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 3;
 $4 = $2;
 $5 = $1;
 $6 = (+_sq($5));
 $7 = (+_polyval($4,4136,$6));
 $8 = $2;
 $9 = (($8) + 1)|0;
 $10 = (4136 + ($9<<3)|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $7 / $11;
 $3 = $12;
 $13 = $3;
 $14 = $1;
 $15 = $13 + $14;
 $16 = $1;
 $17 = 1.0 - $16;
 $18 = $15 / $17;
 STACKTOP = sp;return (+$18);
}
function _C1f($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (+_sq($9));
 $4 = $10;
 $11 = $2;
 $5 = $11;
 $6 = 0;
 $7 = 1;
 while(1) {
  $12 = $7;
  $13 = ($12|0)<=(6);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = (6 - ($14))|0;
  $16 = (($15|0) / 2)&-1;
  $8 = $16;
  $17 = $5;
  $18 = $8;
  $19 = $6;
  $20 = (3992 + ($19<<3)|0);
  $21 = $4;
  $22 = (+_polyval($18,$20,$21));
  $23 = $17 * $22;
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25))|0;
  $27 = (($26) + 1)|0;
  $28 = (3992 + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $23 / $29;
  $31 = $7;
  $32 = $3;
  $33 = (($32) + ($31<<3)|0);
  HEAPF64[$33>>3] = $30;
  $34 = $8;
  $35 = (($34) + 2)|0;
  $36 = $6;
  $37 = (($36) + ($35))|0;
  $6 = $37;
  $38 = $2;
  $39 = $5;
  $40 = $39 * $38;
  $5 = $40;
  $41 = $7;
  $42 = (($41) + 1)|0;
  $7 = $42;
 }
 STACKTOP = sp;return;
}
function _SinCosSeries($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $9;
 $14 = $5;
 $15 = (($13) + ($14))|0;
 $16 = $8;
 $17 = (($16) + ($15<<3)|0);
 $8 = $17;
 $18 = $7;
 $19 = $6;
 $20 = $18 - $19;
 $21 = 2.0 * $20;
 $22 = $7;
 $23 = $6;
 $24 = $22 + $23;
 $25 = $21 * $24;
 $10 = $25;
 $26 = $9;
 $27 = $26 & 1;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $8;
  $30 = ((($29)) + -8|0);
  $8 = $30;
  $31 = +HEAPF64[$30>>3];
  $32 = $31;
 } else {
  $32 = 0.0;
 }
 $11 = $32;
 $12 = 0.0;
 $33 = $9;
 $34 = (($33|0) / 2)&-1;
 $9 = $34;
 while(1) {
  $35 = $9;
  $36 = (($35) + -1)|0;
  $9 = $36;
  $37 = ($35|0)!=(0);
  if (!($37)) {
   break;
  }
  $38 = $10;
  $39 = $11;
  $40 = $38 * $39;
  $41 = $12;
  $42 = $40 - $41;
  $43 = $8;
  $44 = ((($43)) + -8|0);
  $8 = $44;
  $45 = +HEAPF64[$44>>3];
  $46 = $42 + $45;
  $12 = $46;
  $47 = $10;
  $48 = $12;
  $49 = $47 * $48;
  $50 = $11;
  $51 = $49 - $50;
  $52 = $8;
  $53 = ((($52)) + -8|0);
  $8 = $53;
  $54 = +HEAPF64[$53>>3];
  $55 = $51 + $54;
  $11 = $55;
 }
 $56 = $5;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $6;
  $59 = 2.0 * $58;
  $60 = $7;
  $61 = $59 * $60;
  $62 = $11;
  $63 = $61 * $62;
  $69 = $63;
  STACKTOP = sp;return (+$69);
 } else {
  $64 = $7;
  $65 = $11;
  $66 = $12;
  $67 = $65 - $66;
  $68 = $64 * $67;
  $69 = $68;
  STACKTOP = sp;return (+$69);
 }
 return +(0.0);
}
function _C1pf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (+_sq($9));
 $4 = $10;
 $11 = $2;
 $5 = $11;
 $6 = 0;
 $7 = 1;
 while(1) {
  $12 = $7;
  $13 = ($12|0)<=(6);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = (6 - ($14))|0;
  $16 = (($15|0) / 2)&-1;
  $8 = $16;
  $17 = $5;
  $18 = $8;
  $19 = $6;
  $20 = (3848 + ($19<<3)|0);
  $21 = $4;
  $22 = (+_polyval($18,$20,$21));
  $23 = $17 * $22;
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25))|0;
  $27 = (($26) + 1)|0;
  $28 = (3848 + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $23 / $29;
  $31 = $7;
  $32 = $3;
  $33 = (($32) + ($31<<3)|0);
  HEAPF64[$33>>3] = $30;
  $34 = $8;
  $35 = (($34) + 2)|0;
  $36 = $6;
  $37 = (($36) + ($35))|0;
  $6 = $37;
  $38 = $2;
  $39 = $5;
  $40 = $39 * $38;
  $5 = $40;
  $41 = $7;
  $42 = (($41) + 1)|0;
  $7 = $42;
 }
 STACKTOP = sp;return;
}
function _A2m1f($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 3;
 $4 = $2;
 $5 = $1;
 $6 = (+_sq($5));
 $7 = (+_polyval($4,3808,$6));
 $8 = $2;
 $9 = (($8) + 1)|0;
 $10 = (3808 + ($9<<3)|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $7 / $11;
 $3 = $12;
 $13 = $3;
 $14 = $1;
 $15 = $13 - $14;
 $16 = $1;
 $17 = 1.0 + $16;
 $18 = $15 / $17;
 STACKTOP = sp;return (+$18);
}
function _C2f($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (+_sq($9));
 $4 = $10;
 $11 = $2;
 $5 = $11;
 $6 = 0;
 $7 = 1;
 while(1) {
  $12 = $7;
  $13 = ($12|0)<=(6);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = (6 - ($14))|0;
  $16 = (($15|0) / 2)&-1;
  $8 = $16;
  $17 = $5;
  $18 = $8;
  $19 = $6;
  $20 = (3664 + ($19<<3)|0);
  $21 = $4;
  $22 = (+_polyval($18,$20,$21));
  $23 = $17 * $22;
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25))|0;
  $27 = (($26) + 1)|0;
  $28 = (3664 + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $23 / $29;
  $31 = $7;
  $32 = $3;
  $33 = (($32) + ($31<<3)|0);
  HEAPF64[$33>>3] = $30;
  $34 = $8;
  $35 = (($34) + 2)|0;
  $36 = $6;
  $37 = (($36) + ($35))|0;
  $6 = $37;
  $38 = $2;
  $39 = $5;
  $40 = $39 * $38;
  $5 = $40;
  $41 = $7;
  $42 = (($41) + 1)|0;
  $7 = $42;
 }
 STACKTOP = sp;return;
}
function _C3f($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1.0;
 $7 = 0;
 $8 = 1;
 while(1) {
  $10 = $8;
  $11 = ($10|0)<(6);
  if (!($11)) {
   break;
  }
  $12 = $8;
  $13 = (6 - ($12))|0;
  $14 = (($13) - 1)|0;
  $9 = $14;
  $15 = $4;
  $16 = $6;
  $17 = $16 * $15;
  $6 = $17;
  $18 = $6;
  $19 = $9;
  $20 = $3;
  $21 = ((($20)) + 120|0);
  $22 = $7;
  $23 = (($21) + ($22<<3)|0);
  $24 = $4;
  $25 = (+_polyval($19,$23,$24));
  $26 = $18 * $25;
  $27 = $8;
  $28 = $5;
  $29 = (($28) + ($27<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $9;
  $31 = (($30) + 1)|0;
  $32 = $7;
  $33 = (($32) + ($31))|0;
  $7 = $33;
  $34 = $8;
  $35 = (($34) + 1)|0;
  $8 = $35;
 }
 STACKTOP = sp;return;
}
function _A3f($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 72|0);
 $6 = $3;
 $7 = (+_polyval(5,$5,$6));
 STACKTOP = sp;return (+$7);
}
function _C4f($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1.0;
 $7 = 0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = ($10|0)<(6);
  if (!($11)) {
   break;
  }
  $12 = $8;
  $13 = (6 - ($12))|0;
  $14 = (($13) - 1)|0;
  $9 = $14;
  $15 = $6;
  $16 = $9;
  $17 = $3;
  $18 = ((($17)) + 240|0);
  $19 = $7;
  $20 = (($18) + ($19<<3)|0);
  $21 = $4;
  $22 = (+_polyval($16,$20,$21));
  $23 = $15 * $22;
  $24 = $8;
  $25 = $5;
  $26 = (($25) + ($24<<3)|0);
  HEAPF64[$26>>3] = $23;
  $27 = $9;
  $28 = (($27) + 1)|0;
  $29 = $7;
  $30 = (($29) + ($28))|0;
  $7 = $30;
  $31 = $4;
  $32 = $6;
  $33 = $32 * $31;
  $6 = $33;
  $34 = $8;
  $35 = (($34) + 1)|0;
  $8 = $35;
 }
 STACKTOP = sp;return;
}
function _geod_genposition($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0.0;
 var $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0;
 var $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0;
 var $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0;
 var $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0;
 var $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0;
 var $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0;
 var $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0;
 var $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0;
 var $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0;
 var $337 = 0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0;
 var $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0;
 var $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0.0, $390 = 0;
 var $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0;
 var $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0;
 var $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0;
 var $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0, $499 = 0, $50 = 0.0;
 var $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0.0;
 var $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0.0, $554 = 0.0;
 var $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0.0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0.0, $589 = 0, $59 = 0.0, $590 = 0;
 var $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $60 = 0.0, $600 = 0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0.0, $608 = 0.0, $609 = 0.0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0;
 var $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0;
 var $646 = 0.0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0;
 var $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $32 = sp + 216|0;
 $33 = sp + 208|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0.0;
 $24 = 0.0;
 $25 = 0.0;
 $26 = 0.0;
 $27 = 0.0;
 $28 = 0.0;
 $29 = 0.0;
 $30 = 0.0;
 $34 = 0.0;
 $35 = 0.0;
 $61 = $15;
 $62 = ($61|0)!=(0|0);
 $63 = $62 ? 128 : 0;
 $64 = $16;
 $65 = ($64|0)!=(0|0);
 $66 = $65 ? 264 : 0;
 $67 = $63 | $66;
 $68 = $17;
 $69 = ($68|0)!=(0|0);
 $70 = $69 ? 512 : 0;
 $71 = $67 | $70;
 $72 = $18;
 $73 = ($72|0)!=(0|0);
 $74 = $73 ? 1025 : 0;
 $75 = $71 | $74;
 $76 = $19;
 $77 = ($76|0)!=(0|0);
 $78 = $77 ? 4101 : 0;
 $79 = $75 | $78;
 $80 = $20;
 $81 = ($80|0)!=(0|0);
 $82 = $21;
 $83 = ($82|0)!=(0|0);
 $84 = $81 ? 1 : $83;
 $85 = $84 ? 8197 : 0;
 $86 = $79 | $85;
 $87 = $22;
 $88 = ($87|0)!=(0|0);
 $89 = $88 ? 16400 : 0;
 $90 = $86 | $89;
 $48 = $90;
 $91 = $12;
 $92 = ((($91)) + 504|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 & 32640;
 $95 = $48;
 $96 = $95 & $94;
 $48 = $96;
 $97 = $13;
 $98 = $97 & 1;
 $99 = ($98|0)!=(0);
 if (!($99)) {
  $100 = $12;
  $101 = ((($100)) + 504|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 2048;
  $104 = ($103|0)!=(0);
  if (!($104)) {
   $105 = +HEAPF64[3026];
   $11 = $105;
   $728 = $11;
   STACKTOP = sp;return (+$728);
  }
 }
 $106 = $13;
 $107 = $106 & 1;
 $108 = ($107|0)!=(0);
 $109 = $14;
 if ($108) {
  $110 = +HEAPF64[3025];
  $111 = $109 * $110;
  $31 = $111;
  $112 = $14;
  _sincosdx($112,$32,$33);
 } else {
  $113 = $12;
  $114 = ((($113)) + 72|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $12;
  $117 = ((($116)) + 176|0);
  $118 = +HEAPF64[$117>>3];
  $119 = 1.0 + $118;
  $120 = $115 * $119;
  $121 = $109 / $120;
  $49 = $121;
  $122 = $49;
  $123 = (+Math_sin((+$122)));
  $50 = $123;
  $124 = $49;
  $125 = (+Math_cos((+$124)));
  $51 = $125;
  $126 = $12;
  $127 = ((($126)) + 144|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $51;
  $130 = $128 * $129;
  $131 = $12;
  $132 = ((($131)) + 152|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $50;
  $135 = $133 * $134;
  $136 = $130 + $135;
  $137 = $12;
  $138 = ((($137)) + 152|0);
  $139 = +HEAPF64[$138>>3];
  $140 = $51;
  $141 = $139 * $140;
  $142 = $12;
  $143 = ((($142)) + 144|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $50;
  $146 = $144 * $145;
  $147 = $141 - $146;
  $148 = $12;
  $149 = ((($148)) + 296|0);
  $150 = (+_SinCosSeries(1,$136,$147,$149,6));
  $151 = -$150;
  $34 = $151;
  $152 = $49;
  $153 = $34;
  $154 = $12;
  $155 = ((($154)) + 200|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $153 - $156;
  $158 = $152 - $157;
  $31 = $158;
  $159 = $31;
  $160 = (+Math_sin((+$159)));
  HEAPF64[$32>>3] = $160;
  $161 = $31;
  $162 = (+Math_cos((+$161)));
  HEAPF64[$33>>3] = $162;
  $163 = $12;
  $164 = ((($163)) + 32|0);
  $165 = +HEAPF64[$164>>3];
  $166 = (+Math_abs((+$165)));
  $167 = $166 > 0.01;
  if ($167) {
   $168 = $12;
   $169 = ((($168)) + 120|0);
   $170 = +HEAPF64[$169>>3];
   $171 = +HEAPF64[$33>>3];
   $172 = $170 * $171;
   $173 = $12;
   $174 = ((($173)) + 128|0);
   $175 = +HEAPF64[$174>>3];
   $176 = +HEAPF64[$32>>3];
   $177 = $175 * $176;
   $178 = $172 + $177;
   $39 = $178;
   $179 = $12;
   $180 = ((($179)) + 128|0);
   $181 = +HEAPF64[$180>>3];
   $182 = +HEAPF64[$33>>3];
   $183 = $181 * $182;
   $184 = $12;
   $185 = ((($184)) + 120|0);
   $186 = +HEAPF64[$185>>3];
   $187 = +HEAPF64[$32>>3];
   $188 = $186 * $187;
   $189 = $183 - $188;
   $40 = $189;
   $190 = $39;
   $191 = $40;
   $192 = $12;
   $193 = ((($192)) + 240|0);
   $194 = (+_SinCosSeries(1,$190,$191,$193,6));
   $34 = $194;
   $195 = $12;
   $196 = ((($195)) + 176|0);
   $197 = +HEAPF64[$196>>3];
   $198 = 1.0 + $197;
   $199 = $31;
   $200 = $34;
   $201 = $12;
   $202 = ((($201)) + 200|0);
   $203 = +HEAPF64[$202>>3];
   $204 = $200 - $203;
   $205 = $199 + $204;
   $206 = $198 * $205;
   $207 = $14;
   $208 = $12;
   $209 = ((($208)) + 72|0);
   $210 = +HEAPF64[$209>>3];
   $211 = $207 / $210;
   $212 = $206 - $211;
   $52 = $212;
   $213 = $31;
   $214 = $52;
   $215 = $12;
   $216 = ((($215)) + 112|0);
   $217 = +HEAPF64[$216>>3];
   $218 = $39;
   $219 = (+_sq($218));
   $220 = $217 * $219;
   $221 = 1.0 + $220;
   $222 = (+Math_sqrt((+$221)));
   $223 = $214 / $222;
   $224 = $213 - $223;
   $31 = $224;
   $225 = $31;
   $226 = (+Math_sin((+$225)));
   HEAPF64[$32>>3] = $226;
   $227 = $31;
   $228 = (+Math_cos((+$227)));
   HEAPF64[$33>>3] = $228;
  }
 }
 $229 = $12;
 $230 = ((($229)) + 120|0);
 $231 = +HEAPF64[$230>>3];
 $232 = +HEAPF64[$33>>3];
 $233 = $231 * $232;
 $234 = $12;
 $235 = ((($234)) + 128|0);
 $236 = +HEAPF64[$235>>3];
 $237 = +HEAPF64[$32>>3];
 $238 = $236 * $237;
 $239 = $233 + $238;
 $39 = $239;
 $240 = $12;
 $241 = ((($240)) + 128|0);
 $242 = +HEAPF64[$241>>3];
 $243 = +HEAPF64[$33>>3];
 $244 = $242 * $243;
 $245 = $12;
 $246 = ((($245)) + 120|0);
 $247 = +HEAPF64[$246>>3];
 $248 = +HEAPF64[$32>>3];
 $249 = $247 * $248;
 $250 = $244 - $249;
 $40 = $250;
 $251 = $12;
 $252 = ((($251)) + 112|0);
 $253 = +HEAPF64[$252>>3];
 $254 = $39;
 $255 = (+_sq($254));
 $256 = $253 * $255;
 $257 = 1.0 + $256;
 $258 = (+Math_sqrt((+$257)));
 $47 = $258;
 $259 = $48;
 $260 = $259 & 13317;
 $261 = ($260|0)!=(0);
 if ($261) {
  $262 = $13;
  $263 = $262 & 1;
  $264 = ($263|0)!=(0);
  if ($264) {
   label = 11;
  } else {
   $265 = $12;
   $266 = ((($265)) + 32|0);
   $267 = +HEAPF64[$266>>3];
   $268 = (+Math_abs((+$267)));
   $269 = $268 > 0.01;
   if ($269) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   $270 = $39;
   $271 = $40;
   $272 = $12;
   $273 = ((($272)) + 240|0);
   $274 = (+_SinCosSeries(1,$270,$271,$273,6));
   $34 = $274;
  }
  $275 = $12;
  $276 = ((($275)) + 176|0);
  $277 = +HEAPF64[$276>>3];
  $278 = 1.0 + $277;
  $279 = $34;
  $280 = $12;
  $281 = ((($280)) + 200|0);
  $282 = +HEAPF64[$281>>3];
  $283 = $279 - $282;
  $284 = $278 * $283;
  $35 = $284;
 }
 $285 = $12;
 $286 = ((($285)) + 104|0);
 $287 = +HEAPF64[$286>>3];
 $288 = $39;
 $289 = $287 * $288;
 $41 = $289;
 $290 = $12;
 $291 = ((($290)) + 96|0);
 $292 = +HEAPF64[$291>>3];
 $293 = $12;
 $294 = ((($293)) + 104|0);
 $295 = +HEAPF64[$294>>3];
 $296 = $40;
 $297 = $295 * $296;
 $298 = (+_hypotx($292,$297));
 $42 = $298;
 $299 = $42;
 $300 = $299 == 0.0;
 if ($300) {
  $301 = +HEAPF64[3020];
  $40 = $301;
  $42 = $301;
 }
 $302 = $12;
 $303 = ((($302)) + 96|0);
 $304 = +HEAPF64[$303>>3];
 $45 = $304;
 $305 = $12;
 $306 = ((($305)) + 104|0);
 $307 = +HEAPF64[$306>>3];
 $308 = $40;
 $309 = $307 * $308;
 $46 = $309;
 $310 = $48;
 $311 = $310 & 1025;
 $312 = ($311|0)!=(0);
 if ($312) {
  $313 = $13;
  $314 = $313 & 1;
  $315 = ($314|0)!=(0);
  if ($315) {
   $316 = $12;
   $317 = ((($316)) + 72|0);
   $318 = +HEAPF64[$317>>3];
   $319 = $12;
   $320 = ((($319)) + 176|0);
   $321 = +HEAPF64[$320>>3];
   $322 = 1.0 + $321;
   $323 = $31;
   $324 = $322 * $323;
   $325 = $35;
   $326 = $324 + $325;
   $327 = $318 * $326;
   $329 = $327;
  } else {
   $328 = $14;
   $329 = $328;
  }
  $26 = $329;
 }
 $330 = $48;
 $331 = $330 & 264;
 $332 = ($331|0)!=(0);
 if ($332) {
  $333 = $12;
  $334 = ((($333)) + 96|0);
  $335 = +HEAPF64[$334>>3];
  $336 = (+_copysignx(1.0,$335));
  $53 = $336;
  $337 = $12;
  $338 = ((($337)) + 96|0);
  $339 = +HEAPF64[$338>>3];
  $340 = $39;
  $341 = $339 * $340;
  $43 = $341;
  $342 = $40;
  $44 = $342;
  $343 = $13;
  $344 = $343 & 32768;
  $345 = ($344|0)!=(0);
  if ($345) {
   $346 = $53;
   $347 = $31;
   $348 = $39;
   $349 = $40;
   $350 = (+Math_atan2((+$348),(+$349)));
   $351 = $12;
   $352 = ((($351)) + 120|0);
   $353 = +HEAPF64[$352>>3];
   $354 = $12;
   $355 = ((($354)) + 128|0);
   $356 = +HEAPF64[$355>>3];
   $357 = (+Math_atan2((+$353),(+$356)));
   $358 = $350 - $357;
   $359 = $347 - $358;
   $360 = $53;
   $361 = $43;
   $362 = $360 * $361;
   $363 = $44;
   $364 = (+Math_atan2((+$362),(+$363)));
   $365 = $53;
   $366 = $12;
   $367 = ((($366)) + 160|0);
   $368 = +HEAPF64[$367>>3];
   $369 = $365 * $368;
   $370 = $12;
   $371 = ((($370)) + 168|0);
   $372 = +HEAPF64[$371>>3];
   $373 = (+Math_atan2((+$369),(+$372)));
   $374 = $364 - $373;
   $375 = $359 + $374;
   $376 = $346 * $375;
   $400 = $376;
  } else {
   $377 = $43;
   $378 = $12;
   $379 = ((($378)) + 168|0);
   $380 = +HEAPF64[$379>>3];
   $381 = $377 * $380;
   $382 = $44;
   $383 = $12;
   $384 = ((($383)) + 160|0);
   $385 = +HEAPF64[$384>>3];
   $386 = $382 * $385;
   $387 = $381 - $386;
   $388 = $44;
   $389 = $12;
   $390 = ((($389)) + 168|0);
   $391 = +HEAPF64[$390>>3];
   $392 = $388 * $391;
   $393 = $43;
   $394 = $12;
   $395 = ((($394)) + 160|0);
   $396 = +HEAPF64[$395>>3];
   $397 = $393 * $396;
   $398 = $392 + $397;
   $399 = (+Math_atan2((+$387),(+$398)));
   $400 = $399;
  }
  $36 = $400;
  $401 = $36;
  $402 = $12;
  $403 = ((($402)) + 192|0);
  $404 = +HEAPF64[$403>>3];
  $405 = $31;
  $406 = $39;
  $407 = $40;
  $408 = $12;
  $409 = ((($408)) + 408|0);
  $410 = (+_SinCosSeries(1,$406,$407,$409,5));
  $411 = $12;
  $412 = ((($411)) + 216|0);
  $413 = +HEAPF64[$412>>3];
  $414 = $410 - $413;
  $415 = $405 + $414;
  $416 = $404 * $415;
  $417 = $401 + $416;
  $37 = $417;
  $418 = $37;
  $419 = +HEAPF64[3025];
  $420 = $418 / $419;
  $38 = $420;
  $421 = $13;
  $422 = $421 & 32768;
  $423 = ($422|0)!=(0);
  $424 = $12;
  $425 = ((($424)) + 8|0);
  $426 = +HEAPF64[$425>>3];
  if ($423) {
   $427 = $38;
   $428 = $426 + $427;
   $434 = $428;
  } else {
   $429 = (+_AngNormalize($426));
   $430 = $38;
   $431 = (+_AngNormalize($430));
   $432 = $429 + $431;
   $433 = (+_AngNormalize($432));
   $434 = $433;
  }
  $24 = $434;
 }
 $435 = $48;
 $436 = $435 & 128;
 $437 = ($436|0)!=(0);
 if ($437) {
  $438 = $41;
  $439 = $12;
  $440 = ((($439)) + 88|0);
  $441 = +HEAPF64[$440>>3];
  $442 = $42;
  $443 = $441 * $442;
  $444 = (+_atan2dx($438,$443));
  $23 = $444;
 }
 $445 = $48;
 $446 = $445 & 512;
 $447 = ($446|0)!=(0);
 if ($447) {
  $448 = $45;
  $449 = $46;
  $450 = (+_atan2dx($448,$449));
  $25 = $450;
 }
 $451 = $48;
 $452 = $451 & 12293;
 $453 = ($452|0)!=(0);
 if ($453) {
  $454 = $39;
  $455 = $40;
  $456 = $12;
  $457 = ((($456)) + 352|0);
  $458 = (+_SinCosSeries(1,$454,$455,$457,6));
  $54 = $458;
  $459 = $12;
  $460 = ((($459)) + 184|0);
  $461 = +HEAPF64[$460>>3];
  $462 = 1.0 + $461;
  $463 = $54;
  $464 = $12;
  $465 = ((($464)) + 208|0);
  $466 = +HEAPF64[$465>>3];
  $467 = $463 - $466;
  $468 = $462 * $467;
  $55 = $468;
  $469 = $12;
  $470 = ((($469)) + 176|0);
  $471 = +HEAPF64[$470>>3];
  $472 = $12;
  $473 = ((($472)) + 184|0);
  $474 = +HEAPF64[$473>>3];
  $475 = $471 - $474;
  $476 = $31;
  $477 = $475 * $476;
  $478 = $35;
  $479 = $55;
  $480 = $478 - $479;
  $481 = $477 + $480;
  $56 = $481;
  $482 = $48;
  $483 = $482 & 4101;
  $484 = ($483|0)!=(0);
  if ($484) {
   $485 = $12;
   $486 = ((($485)) + 72|0);
   $487 = +HEAPF64[$486>>3];
   $488 = $47;
   $489 = $12;
   $490 = ((($489)) + 128|0);
   $491 = +HEAPF64[$490>>3];
   $492 = $39;
   $493 = $491 * $492;
   $494 = $488 * $493;
   $495 = $12;
   $496 = ((($495)) + 136|0);
   $497 = +HEAPF64[$496>>3];
   $498 = $12;
   $499 = ((($498)) + 120|0);
   $500 = +HEAPF64[$499>>3];
   $501 = $40;
   $502 = $500 * $501;
   $503 = $497 * $502;
   $504 = $494 - $503;
   $505 = $12;
   $506 = ((($505)) + 128|0);
   $507 = +HEAPF64[$506>>3];
   $508 = $40;
   $509 = $507 * $508;
   $510 = $56;
   $511 = $509 * $510;
   $512 = $504 - $511;
   $513 = $487 * $512;
   $27 = $513;
  }
  $514 = $48;
  $515 = $514 & 8197;
  $516 = ($515|0)!=(0);
  if ($516) {
   $517 = $12;
   $518 = ((($517)) + 112|0);
   $519 = +HEAPF64[$518>>3];
   $520 = $39;
   $521 = $12;
   $522 = ((($521)) + 120|0);
   $523 = +HEAPF64[$522>>3];
   $524 = $520 - $523;
   $525 = $519 * $524;
   $526 = $39;
   $527 = $12;
   $528 = ((($527)) + 120|0);
   $529 = +HEAPF64[$528>>3];
   $530 = $526 + $529;
   $531 = $525 * $530;
   $532 = $12;
   $533 = ((($532)) + 136|0);
   $534 = +HEAPF64[$533>>3];
   $535 = $47;
   $536 = $534 + $535;
   $537 = $531 / $536;
   $57 = $537;
   $538 = +HEAPF64[$33>>3];
   $539 = $57;
   $540 = $39;
   $541 = $539 * $540;
   $542 = $40;
   $543 = $56;
   $544 = $542 * $543;
   $545 = $541 - $544;
   $546 = $12;
   $547 = ((($546)) + 120|0);
   $548 = +HEAPF64[$547>>3];
   $549 = $545 * $548;
   $550 = $12;
   $551 = ((($550)) + 136|0);
   $552 = +HEAPF64[$551>>3];
   $553 = $549 / $552;
   $554 = $538 + $553;
   $28 = $554;
   $555 = +HEAPF64[$33>>3];
   $556 = $57;
   $557 = $12;
   $558 = ((($557)) + 120|0);
   $559 = +HEAPF64[$558>>3];
   $560 = $556 * $559;
   $561 = $12;
   $562 = ((($561)) + 128|0);
   $563 = +HEAPF64[$562>>3];
   $564 = $56;
   $565 = $563 * $564;
   $566 = $560 - $565;
   $567 = $39;
   $568 = $566 * $567;
   $569 = $47;
   $570 = $568 / $569;
   $571 = $555 - $570;
   $29 = $571;
  }
 }
 $572 = $48;
 $573 = $572 & 16400;
 $574 = ($573|0)!=(0);
 if ($574) {
  $575 = $39;
  $576 = $40;
  $577 = $12;
  $578 = ((($577)) + 456|0);
  $579 = (+_SinCosSeries(0,$575,$576,$578,6));
  $58 = $579;
  $580 = $12;
  $581 = ((($580)) + 104|0);
  $582 = +HEAPF64[$581>>3];
  $583 = $582 == 0.0;
  if ($583) {
   label = 40;
  } else {
   $584 = $12;
   $585 = ((($584)) + 96|0);
   $586 = +HEAPF64[$585>>3];
   $587 = $586 == 0.0;
   if ($587) {
    label = 40;
   } else {
    $610 = $12;
    $611 = ((($610)) + 104|0);
    $612 = +HEAPF64[$611>>3];
    $613 = $12;
    $614 = ((($613)) + 96|0);
    $615 = +HEAPF64[$614>>3];
    $616 = $612 * $615;
    $617 = +HEAPF64[$33>>3];
    $618 = $617 <= 0.0;
    if ($618) {
     $619 = $12;
     $620 = ((($619)) + 128|0);
     $621 = +HEAPF64[$620>>3];
     $622 = +HEAPF64[$33>>3];
     $623 = 1.0 - $622;
     $624 = $621 * $623;
     $625 = +HEAPF64[$32>>3];
     $626 = $12;
     $627 = ((($626)) + 120|0);
     $628 = +HEAPF64[$627>>3];
     $629 = $625 * $628;
     $630 = $624 + $629;
     $646 = $630;
    } else {
     $631 = +HEAPF64[$32>>3];
     $632 = $12;
     $633 = ((($632)) + 128|0);
     $634 = +HEAPF64[$633>>3];
     $635 = +HEAPF64[$32>>3];
     $636 = $634 * $635;
     $637 = +HEAPF64[$33>>3];
     $638 = 1.0 + $637;
     $639 = $636 / $638;
     $640 = $12;
     $641 = ((($640)) + 120|0);
     $642 = +HEAPF64[$641>>3];
     $643 = $639 + $642;
     $644 = $631 * $643;
     $646 = $644;
    }
    $645 = $616 * $646;
    $59 = $645;
    $647 = $12;
    $648 = ((($647)) + 96|0);
    $649 = +HEAPF64[$648>>3];
    $650 = (+_sq($649));
    $651 = $12;
    $652 = ((($651)) + 104|0);
    $653 = +HEAPF64[$652>>3];
    $654 = (+_sq($653));
    $655 = $12;
    $656 = ((($655)) + 128|0);
    $657 = +HEAPF64[$656>>3];
    $658 = $654 * $657;
    $659 = $40;
    $660 = $658 * $659;
    $661 = $650 + $660;
    $60 = $661;
   }
  }
  if ((label|0) == 40) {
   $588 = $45;
   $589 = $12;
   $590 = ((($589)) + 48|0);
   $591 = +HEAPF64[$590>>3];
   $592 = $588 * $591;
   $593 = $46;
   $594 = $12;
   $595 = ((($594)) + 40|0);
   $596 = +HEAPF64[$595>>3];
   $597 = $593 * $596;
   $598 = $592 - $597;
   $59 = $598;
   $599 = $46;
   $600 = $12;
   $601 = ((($600)) + 48|0);
   $602 = +HEAPF64[$601>>3];
   $603 = $599 * $602;
   $604 = $45;
   $605 = $12;
   $606 = ((($605)) + 40|0);
   $607 = +HEAPF64[$606>>3];
   $608 = $604 * $607;
   $609 = $603 + $608;
   $60 = $609;
  }
  $662 = $12;
  $663 = ((($662)) + 80|0);
  $664 = +HEAPF64[$663>>3];
  $665 = $59;
  $666 = $60;
  $667 = (+Math_atan2((+$665),(+$666)));
  $668 = $664 * $667;
  $669 = $12;
  $670 = ((($669)) + 224|0);
  $671 = +HEAPF64[$670>>3];
  $672 = $58;
  $673 = $12;
  $674 = ((($673)) + 232|0);
  $675 = +HEAPF64[$674>>3];
  $676 = $672 - $675;
  $677 = $671 * $676;
  $678 = $668 + $677;
  $30 = $678;
 }
 $679 = $48;
 $680 = $679 & 128;
 $681 = ($680|0)!=(0);
 if ($681) {
  $682 = $23;
  $683 = $15;
  HEAPF64[$683>>3] = $682;
 }
 $684 = $48;
 $685 = $684 & 264;
 $686 = ($685|0)!=(0);
 if ($686) {
  $687 = $24;
  $688 = $16;
  HEAPF64[$688>>3] = $687;
 }
 $689 = $48;
 $690 = $689 & 512;
 $691 = ($690|0)!=(0);
 if ($691) {
  $692 = $25;
  $693 = $17;
  HEAPF64[$693>>3] = $692;
 }
 $694 = $48;
 $695 = $694 & 1025;
 $696 = ($695|0)!=(0);
 if ($696) {
  $697 = $26;
  $698 = $18;
  HEAPF64[$698>>3] = $697;
 }
 $699 = $48;
 $700 = $699 & 4101;
 $701 = ($700|0)!=(0);
 if ($701) {
  $702 = $27;
  $703 = $19;
  HEAPF64[$703>>3] = $702;
 }
 $704 = $48;
 $705 = $704 & 8197;
 $706 = ($705|0)!=(0);
 if ($706) {
  $707 = $20;
  $708 = ($707|0)!=(0|0);
  if ($708) {
   $709 = $28;
   $710 = $20;
   HEAPF64[$710>>3] = $709;
  }
  $711 = $21;
  $712 = ($711|0)!=(0|0);
  if ($712) {
   $713 = $29;
   $714 = $21;
   HEAPF64[$714>>3] = $713;
  }
 }
 $715 = $48;
 $716 = $715 & 16400;
 $717 = ($716|0)!=(0);
 if ($717) {
  $718 = $30;
  $719 = $22;
  HEAPF64[$719>>3] = $718;
 }
 $720 = $13;
 $721 = $720 & 1;
 $722 = ($721|0)!=(0);
 if ($722) {
  $723 = $14;
  $727 = $723;
 } else {
  $724 = $31;
  $725 = +HEAPF64[3025];
  $726 = $724 / $725;
  $727 = $726;
 }
 $11 = $727;
 $728 = $11;
 STACKTOP = sp;return (+$728);
}
function _copysignx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_abs((+$4)));
 $6 = $3;
 $7 = $6 < 0.0;
 if ($7) {
  $13 = 1;
 } else {
  $8 = $3;
  $9 = $8 == 0.0;
  if ($9) {
   $10 = $3;
   $11 = 1.0 / $10;
   $12 = $11 < 0.0;
   $13 = $12;
  } else {
   $13 = 0;
  }
 }
 $14 = $13 ? -1 : 1;
 $15 = (+($14|0));
 $16 = $5 * $15;
 STACKTOP = sp;return (+$16);
}
function _atan2dx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 HEAPF64[$2>>3] = $0;
 HEAPF64[$3>>3] = $1;
 $4 = 0;
 $6 = +HEAPF64[$2>>3];
 $7 = (+Math_abs((+$6)));
 $8 = +HEAPF64[$3>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $7 > $9;
 if ($10) {
  _swapx($3,$2);
  $4 = 2;
 }
 $11 = +HEAPF64[$3>>3];
 $12 = $11 < 0.0;
 if ($12) {
  $13 = +HEAPF64[$3>>3];
  $14 = -$13;
  HEAPF64[$3>>3] = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = +HEAPF64[$2>>3];
 $18 = +HEAPF64[$3>>3];
 $19 = (+Math_atan2((+$17),(+$18)));
 $20 = +HEAPF64[3025];
 $21 = $19 / $20;
 $5 = $21;
 $22 = $4;
 switch ($22|0) {
 case 1:  {
  $23 = +HEAPF64[$2>>3];
  $24 = $23 > 0.0;
  $25 = $24 ? 180 : -180;
  $26 = (+($25|0));
  $27 = $5;
  $28 = $26 - $27;
  $5 = $28;
  $33 = $5;
  STACKTOP = sp;return (+$33);
  break;
 }
 case 2:  {
  $29 = $5;
  $30 = 90.0 - $29;
  $5 = $30;
  $33 = $5;
  STACKTOP = sp;return (+$33);
  break;
 }
 case 3:  {
  $31 = $5;
  $32 = -90.0 + $31;
  $5 = $32;
  $33 = $5;
  STACKTOP = sp;return (+$33);
  break;
 }
 default: {
  $33 = $5;
  STACKTOP = sp;return (+$33);
 }
 }
 return +(0.0);
}
function _swapx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $4 = $6;
 $7 = $3;
 $8 = +HEAPF64[$7>>3];
 $9 = $2;
 HEAPF64[$9>>3] = $8;
 $10 = $4;
 $11 = $3;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _geod_gendirect($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $28 = sp;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $30 = $20;
 $31 = ($30|0)!=(0|0);
 $32 = $31 ? 128 : 0;
 $33 = $21;
 $34 = ($33|0)!=(0|0);
 $35 = $34 ? 264 : 0;
 $36 = $32 | $35;
 $37 = $22;
 $38 = ($37|0)!=(0|0);
 $39 = $38 ? 512 : 0;
 $40 = $36 | $39;
 $41 = $23;
 $42 = ($41|0)!=(0|0);
 $43 = $42 ? 1025 : 0;
 $44 = $40 | $43;
 $45 = $24;
 $46 = ($45|0)!=(0|0);
 $47 = $46 ? 4101 : 0;
 $48 = $44 | $47;
 $49 = $25;
 $50 = ($49|0)!=(0|0);
 $51 = $26;
 $52 = ($51|0)!=(0|0);
 $53 = $50 ? 1 : $52;
 $54 = $53 ? 8197 : 0;
 $55 = $48 | $54;
 $56 = $27;
 $57 = ($56|0)!=(0|0);
 $58 = $57 ? 16400 : 0;
 $59 = $55 | $58;
 $29 = $59;
 $60 = $14;
 $61 = $15;
 $62 = $16;
 $63 = $17;
 $64 = $29;
 $65 = $18;
 $66 = $65 & 1;
 $67 = ($66|0)!=(0);
 $68 = $67 ? 0 : 2051;
 $69 = $64 | $68;
 _geod_lineinit($28,$60,$61,$62,$63,$69);
 $70 = $18;
 $71 = $19;
 $72 = $20;
 $73 = $21;
 $74 = $22;
 $75 = $23;
 $76 = $24;
 $77 = $25;
 $78 = $26;
 $79 = $27;
 $80 = (+_geod_genposition($28,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79));
 STACKTOP = sp;return (+$80);
}
function _geod_direct($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 (+_geod_gendirect($16,$17,$18,$19,0,$20,$21,$22,$23,0,0,0,0,0));
 STACKTOP = sp;return;
}
function _geod_geninverse($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $24 = sp + 32|0;
 $25 = sp + 24|0;
 $26 = sp + 16|0;
 $27 = sp + 8|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $34 = $17;
 $35 = $20;
 $36 = $21;
 $37 = $22;
 $38 = $23;
 $39 = (+_geod_geninverse_int($29,$30,$31,$32,$33,$34,$24,$25,$26,$27,$35,$36,$37,$38));
 $28 = $39;
 $40 = $18;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = +HEAPF64[$24>>3];
  $43 = +HEAPF64[$25>>3];
  $44 = (+_atan2dx($42,$43));
  $45 = $18;
  HEAPF64[$45>>3] = $44;
 }
 $46 = $19;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  $52 = $28;
  STACKTOP = sp;return (+$52);
 }
 $48 = +HEAPF64[$26>>3];
 $49 = +HEAPF64[$27>>3];
 $50 = (+_atan2dx($48,$49));
 $51 = $19;
 HEAPF64[$51>>3] = $50;
 $52 = $28;
 STACKTOP = sp;return (+$52);
}
function _geod_geninverse_int($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$6 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0;
 var $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0;
 var $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0;
 var $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0;
 var $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0;
 var $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0;
 var $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0;
 var $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0.0;
 var $283 = 0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0;
 var $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0;
 var $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0;
 var $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0;
 var $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0;
 var $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0;
 var $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0;
 var $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0;
 var $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $50 = 0, $500 = 0.0;
 var $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0;
 var $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $60 = 0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0;
 var $610 = 0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0;
 var $629 = 0.0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0;
 var $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0;
 var $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0;
 var $683 = 0.0, $684 = 0, $685 = 0.0, $686 = 0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0, $719 = 0.0;
 var $72 = 0.0, $720 = 0.0, $721 = 0, $722 = 0, $723 = 0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0, $734 = 0, $735 = 0, $736 = 0.0, $737 = 0.0;
 var $738 = 0.0, $739 = 0, $74 = 0.0, $740 = 0, $741 = 0.0, $742 = 0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0.0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0.0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(672|0);
 $15 = sp + 592|0;
 $17 = sp + 576|0;
 $30 = sp + 544|0;
 $31 = sp + 536|0;
 $34 = sp + 512|0;
 $38 = sp + 504|0;
 $39 = sp + 496|0;
 $40 = sp + 488|0;
 $41 = sp + 480|0;
 $42 = sp + 472|0;
 $43 = sp + 464|0;
 $47 = sp + 432|0;
 $48 = sp + 424|0;
 $50 = sp + 408|0;
 $51 = sp + 400|0;
 $52 = sp + 392|0;
 $53 = sp + 384|0;
 $54 = sp + 376|0;
 $55 = sp + 320|0;
 $58 = sp + 304|0;
 $59 = sp + 296|0;
 $65 = sp + 256|0;
 $66 = sp + 248|0;
 $67 = sp + 240|0;
 $68 = sp + 232|0;
 $69 = sp + 224|0;
 $70 = sp + 216|0;
 $78 = sp + 176|0;
 $87 = sp + 104|0;
 $88 = sp + 96|0;
 $89 = sp + 88|0;
 $90 = sp + 80|0;
 $14 = $0;
 HEAPF64[$15>>3] = $1;
 $16 = $2;
 HEAPF64[$17>>3] = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = 0.0;
 $29 = 0.0;
 HEAPF64[$30>>3] = 0.0;
 HEAPF64[$31>>3] = 0.0;
 $32 = 0.0;
 HEAPF64[$42>>3] = 0.0;
 HEAPF64[$43>>3] = 0.0;
 $49 = 0.0;
 HEAPF64[$51>>3] = 0.0;
 HEAPF64[$52>>3] = 0.0;
 HEAPF64[$53>>3] = 0.0;
 HEAPF64[$54>>3] = 0.0;
 $57 = 0.0;
 HEAPF64[$58>>3] = 2.0;
 HEAPF64[$59>>3] = 0.0;
 $101 = $19;
 $102 = ($101|0)!=(0|0);
 $103 = $102 ? 1025 : 0;
 $104 = $24;
 $105 = ($104|0)!=(0|0);
 $106 = $105 ? 4101 : 0;
 $107 = $103 | $106;
 $108 = $25;
 $109 = ($108|0)!=(0|0);
 $110 = $26;
 $111 = ($110|0)!=(0|0);
 $112 = $109 ? 1 : $111;
 $113 = $112 ? 8197 : 0;
 $114 = $107 | $113;
 $115 = $27;
 $116 = ($115|0)!=(0|0);
 $117 = $116 ? 16400 : 0;
 $118 = $114 | $117;
 $60 = $118;
 $119 = $60;
 $120 = $119 & 32640;
 $60 = $120;
 $121 = $16;
 $122 = $18;
 $123 = (+_AngDiff($121,$122,$34));
 $33 = $123;
 $124 = $33;
 $125 = $124 >= 0.0;
 $126 = $125 ? 1 : -1;
 $36 = $126;
 $127 = $36;
 $128 = (+($127|0));
 $129 = $33;
 $130 = (+_AngRound($129));
 $131 = $128 * $130;
 $33 = $131;
 $132 = $33;
 $133 = 180.0 - $132;
 $134 = $36;
 $135 = (+($134|0));
 $136 = +HEAPF64[$34>>3];
 $137 = $135 * $136;
 $138 = $133 - $137;
 $139 = (+_AngRound($138));
 HEAPF64[$34>>3] = $139;
 $140 = $33;
 $141 = +HEAPF64[3025];
 $142 = $140 * $141;
 $46 = $142;
 $143 = $33;
 $144 = $143 > 90.0;
 if ($144) {
  $145 = +HEAPF64[$34>>3];
  _sincosdx($145,$47,$48);
  $146 = +HEAPF64[$48>>3];
  $147 = -$146;
  HEAPF64[$48>>3] = $147;
 } else {
  $148 = $33;
  _sincosdx($148,$47,$48);
 }
 $149 = +HEAPF64[$15>>3];
 $150 = (+_LatFix($149));
 $151 = (+_AngRound($150));
 HEAPF64[$15>>3] = $151;
 $152 = +HEAPF64[$17>>3];
 $153 = (+_LatFix($152));
 $154 = (+_AngRound($153));
 HEAPF64[$17>>3] = $154;
 $155 = +HEAPF64[$15>>3];
 $156 = (+Math_abs((+$155)));
 $157 = +HEAPF64[$17>>3];
 $158 = (+Math_abs((+$157)));
 $159 = $156 < $158;
 $160 = $159 ? -1 : 1;
 $37 = $160;
 $161 = $37;
 $162 = ($161|0)<(0);
 if ($162) {
  $163 = $36;
  $164 = Math_imul($163, -1)|0;
  $36 = $164;
  _swapx($15,$17);
 }
 $165 = +HEAPF64[$15>>3];
 $166 = $165 < 0.0;
 $167 = $166 ? 1 : -1;
 $35 = $167;
 $168 = $35;
 $169 = (+($168|0));
 $170 = +HEAPF64[$15>>3];
 $171 = $170 * $169;
 HEAPF64[$15>>3] = $171;
 $172 = $35;
 $173 = (+($172|0));
 $174 = +HEAPF64[$17>>3];
 $175 = $174 * $173;
 HEAPF64[$17>>3] = $175;
 $176 = +HEAPF64[$15>>3];
 _sincosdx($176,$38,$39);
 $177 = $14;
 $178 = ((($177)) + 16|0);
 $179 = +HEAPF64[$178>>3];
 $180 = +HEAPF64[$38>>3];
 $181 = $180 * $179;
 HEAPF64[$38>>3] = $181;
 _norm2($38,$39);
 $182 = +HEAPF64[3020];
 $183 = +HEAPF64[$39>>3];
 $184 = (+_maxx($182,$183));
 HEAPF64[$39>>3] = $184;
 $185 = +HEAPF64[$17>>3];
 _sincosdx($185,$40,$41);
 $186 = $14;
 $187 = ((($186)) + 16|0);
 $188 = +HEAPF64[$187>>3];
 $189 = +HEAPF64[$40>>3];
 $190 = $189 * $188;
 HEAPF64[$40>>3] = $190;
 _norm2($40,$41);
 $191 = +HEAPF64[3020];
 $192 = +HEAPF64[$41>>3];
 $193 = (+_maxx($191,$192));
 HEAPF64[$41>>3] = $193;
 $194 = +HEAPF64[$39>>3];
 $195 = +HEAPF64[$38>>3];
 $196 = -$195;
 $197 = $194 < $196;
 if ($197) {
  $198 = +HEAPF64[$41>>3];
  $199 = +HEAPF64[$39>>3];
  $200 = $198 == $199;
  if ($200) {
   $201 = +HEAPF64[$40>>3];
   $202 = $201 < 0.0;
   $203 = +HEAPF64[$38>>3];
   $204 = -$203;
   $205 = $202 ? $203 : $204;
   HEAPF64[$40>>3] = $205;
  }
 } else {
  $206 = +HEAPF64[$40>>3];
  $207 = (+Math_abs((+$206)));
  $208 = +HEAPF64[$38>>3];
  $209 = -$208;
  $210 = $207 == $209;
  if ($210) {
   $211 = +HEAPF64[$39>>3];
   HEAPF64[$41>>3] = $211;
  }
 }
 $212 = $14;
 $213 = ((($212)) + 32|0);
 $214 = +HEAPF64[$213>>3];
 $215 = +HEAPF64[$38>>3];
 $216 = (+_sq($215));
 $217 = $214 * $216;
 $218 = 1.0 + $217;
 $219 = (+Math_sqrt((+$218)));
 $44 = $219;
 $220 = $14;
 $221 = ((($220)) + 32|0);
 $222 = +HEAPF64[$221>>3];
 $223 = +HEAPF64[$40>>3];
 $224 = (+_sq($223));
 $225 = $222 * $224;
 $226 = 1.0 + $225;
 $227 = (+Math_sqrt((+$226)));
 $45 = $227;
 $228 = +HEAPF64[$15>>3];
 $229 = $228 == -90.0;
 $230 = +HEAPF64[$47>>3];
 $231 = $230 == 0.0;
 $232 = $229 ? 1 : $231;
 $233 = $232&1;
 $56 = $233;
 $234 = $56;
 $235 = ($234|0)!=(0);
 do {
  if ($235) {
   $236 = +HEAPF64[$48>>3];
   HEAPF64[$51>>3] = $236;
   $237 = +HEAPF64[$47>>3];
   HEAPF64[$52>>3] = $237;
   HEAPF64[$53>>3] = 1.0;
   HEAPF64[$54>>3] = 0.0;
   $238 = +HEAPF64[$38>>3];
   $61 = $238;
   $239 = +HEAPF64[$51>>3];
   $240 = +HEAPF64[$39>>3];
   $241 = $239 * $240;
   $62 = $241;
   $242 = +HEAPF64[$40>>3];
   $63 = $242;
   $243 = +HEAPF64[$53>>3];
   $244 = +HEAPF64[$41>>3];
   $245 = $243 * $244;
   $64 = $245;
   $246 = $62;
   $247 = $63;
   $248 = $246 * $247;
   $249 = $61;
   $250 = $64;
   $251 = $249 * $250;
   $252 = $248 - $251;
   $253 = (+_maxx(0.0,$252));
   $254 = $62;
   $255 = $64;
   $256 = $254 * $255;
   $257 = $61;
   $258 = $63;
   $259 = $257 * $258;
   $260 = $256 + $259;
   $261 = (+Math_atan2((+$253),(+$260)));
   HEAPF64[$50>>3] = $261;
   $262 = $14;
   $263 = $14;
   $264 = ((($263)) + 40|0);
   $265 = +HEAPF64[$264>>3];
   $266 = +HEAPF64[$50>>3];
   $267 = $61;
   $268 = $62;
   $269 = $44;
   $270 = $63;
   $271 = $64;
   $272 = $45;
   $273 = +HEAPF64[$39>>3];
   $274 = +HEAPF64[$41>>3];
   $275 = $60;
   $276 = $275 & 8197;
   $277 = ($276|0)!=(0);
   $$ = $277 ? $30 : 0;
   $278 = $60;
   $279 = $278 & 8197;
   $280 = ($279|0)!=(0);
   $281 = $280 ? $31 : 0;
   _Lengths($262,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$42,$43,0,$$,$281,$55);
   $282 = +HEAPF64[$50>>3];
   $283 = $282 < 1.0;
   $284 = +HEAPF64[$43>>3];
   $285 = $284 >= 0.0;
   $or$cond = $283 | $285;
   if (!($or$cond)) {
    $56 = 0;
    break;
   }
   $286 = +HEAPF64[$50>>3];
   $287 = +HEAPF64[3020];
   $288 = 3.0 * $287;
   $289 = $286 < $288;
   if ($289) {
    HEAPF64[$42>>3] = 0.0;
    HEAPF64[$43>>3] = 0.0;
    HEAPF64[$50>>3] = 0.0;
   }
   $290 = $14;
   $291 = ((($290)) + 48|0);
   $292 = +HEAPF64[$291>>3];
   $293 = +HEAPF64[$43>>3];
   $294 = $293 * $292;
   HEAPF64[$43>>3] = $294;
   $295 = $14;
   $296 = ((($295)) + 48|0);
   $297 = +HEAPF64[$296>>3];
   $298 = +HEAPF64[$42>>3];
   $299 = $298 * $297;
   HEAPF64[$42>>3] = $299;
   $300 = +HEAPF64[$50>>3];
   $301 = +HEAPF64[3025];
   $302 = $300 / $301;
   $49 = $302;
  }
 } while(0);
 $303 = $56;
 $304 = ($303|0)==(0);
 $305 = +HEAPF64[$38>>3];
 $306 = $305 == 0.0;
 $or$cond3 = $304 & $306;
 do {
  if ($or$cond3) {
   $307 = $14;
   $308 = ((($307)) + 8|0);
   $309 = +HEAPF64[$308>>3];
   $310 = $309 <= 0.0;
   if (!($310)) {
    $311 = +HEAPF64[$34>>3];
    $312 = $14;
    $313 = ((($312)) + 8|0);
    $314 = +HEAPF64[$313>>3];
    $315 = $314 * 180.0;
    $316 = $311 >= $315;
    if (!($316)) {
     label = 23;
     break;
    }
   }
   HEAPF64[$53>>3] = 0.0;
   HEAPF64[$51>>3] = 0.0;
   HEAPF64[$54>>3] = 1.0;
   HEAPF64[$52>>3] = 1.0;
   $317 = $14;
   $318 = +HEAPF64[$317>>3];
   $319 = $46;
   $320 = $318 * $319;
   HEAPF64[$42>>3] = $320;
   $321 = $46;
   $322 = $14;
   $323 = ((($322)) + 16|0);
   $324 = +HEAPF64[$323>>3];
   $325 = $321 / $324;
   $57 = $325;
   HEAPF64[$50>>3] = $325;
   $326 = $14;
   $327 = ((($326)) + 48|0);
   $328 = +HEAPF64[$327>>3];
   $329 = +HEAPF64[$50>>3];
   $330 = (+Math_sin((+$329)));
   $331 = $328 * $330;
   HEAPF64[$43>>3] = $331;
   $332 = $60;
   $333 = $332 & 8197;
   $334 = ($333|0)!=(0);
   if ($334) {
    $335 = +HEAPF64[$50>>3];
    $336 = (+Math_cos((+$335)));
    HEAPF64[$31>>3] = $336;
    HEAPF64[$30>>3] = $336;
   }
   $337 = $33;
   $338 = $14;
   $339 = ((($338)) + 16|0);
   $340 = +HEAPF64[$339>>3];
   $341 = $337 / $340;
   $49 = $341;
  } else {
   label = 23;
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $342 = $56;
   $343 = ($342|0)!=(0);
   if (!($343)) {
    HEAPF64[$65>>3] = 0.0;
    $344 = $14;
    $345 = +HEAPF64[$38>>3];
    $346 = +HEAPF64[$39>>3];
    $347 = $44;
    $348 = +HEAPF64[$40>>3];
    $349 = +HEAPF64[$41>>3];
    $350 = $45;
    $351 = $46;
    $352 = +HEAPF64[$47>>3];
    $353 = +HEAPF64[$48>>3];
    $354 = (+_InverseStart($344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$52,$51,$54,$53,$65,$55));
    HEAPF64[$50>>3] = $354;
    $355 = +HEAPF64[$50>>3];
    $356 = $355 >= 0.0;
    if ($356) {
     $357 = +HEAPF64[$50>>3];
     $358 = $14;
     $359 = ((($358)) + 48|0);
     $360 = +HEAPF64[$359>>3];
     $361 = $357 * $360;
     $362 = +HEAPF64[$65>>3];
     $363 = $361 * $362;
     HEAPF64[$42>>3] = $363;
     $364 = +HEAPF64[$65>>3];
     $365 = (+_sq($364));
     $366 = $14;
     $367 = ((($366)) + 48|0);
     $368 = +HEAPF64[$367>>3];
     $369 = $365 * $368;
     $370 = +HEAPF64[$50>>3];
     $371 = +HEAPF64[$65>>3];
     $372 = $370 / $371;
     $373 = (+Math_sin((+$372)));
     $374 = $369 * $373;
     HEAPF64[$43>>3] = $374;
     $375 = $60;
     $376 = $375 & 8197;
     $377 = ($376|0)!=(0);
     if ($377) {
      $378 = +HEAPF64[$50>>3];
      $379 = +HEAPF64[$65>>3];
      $380 = $378 / $379;
      $381 = (+Math_cos((+$380)));
      HEAPF64[$31>>3] = $381;
      HEAPF64[$30>>3] = $381;
     }
     $382 = +HEAPF64[$50>>3];
     $383 = +HEAPF64[3025];
     $384 = $382 / $383;
     $49 = $384;
     $385 = $46;
     $386 = $14;
     $387 = ((($386)) + 16|0);
     $388 = +HEAPF64[$387>>3];
     $389 = +HEAPF64[$65>>3];
     $390 = $388 * $389;
     $391 = $385 / $390;
     $57 = $391;
     break;
    }
    HEAPF64[$66>>3] = 0.0;
    HEAPF64[$67>>3] = 0.0;
    HEAPF64[$68>>3] = 0.0;
    HEAPF64[$69>>3] = 0.0;
    HEAPF64[$70>>3] = 0.0;
    $71 = 0;
    $392 = +HEAPF64[3020];
    $72 = $392;
    $73 = 1.0;
    $393 = +HEAPF64[3020];
    $74 = $393;
    $75 = -1.0;
    $76 = 0;
    $77 = 0;
    while(1) {
     $394 = $71;
     $395 = HEAP32[6090]|0;
     $396 = ($394>>>0)<($395>>>0);
     if (!($396)) {
      break;
     }
     HEAPF64[$78>>3] = 0.0;
     $397 = $14;
     $398 = +HEAPF64[$38>>3];
     $399 = +HEAPF64[$39>>3];
     $400 = $44;
     $401 = +HEAPF64[$40>>3];
     $402 = +HEAPF64[$41>>3];
     $403 = $45;
     $404 = +HEAPF64[$52>>3];
     $405 = +HEAPF64[$51>>3];
     $406 = +HEAPF64[$47>>3];
     $407 = +HEAPF64[$48>>3];
     $408 = $71;
     $409 = HEAP32[6089]|0;
     $410 = ($408>>>0)<($409>>>0);
     $411 = $410&1;
     $412 = (+_Lambda12($397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$54,$53,$50,$66,$67,$68,$69,$70,$58,$59,$411,$78,$55));
     $79 = $412;
     $413 = $77;
     $414 = ($413|0)!=(0);
     if ($414) {
      break;
     }
     $415 = $79;
     $416 = (+Math_abs((+$415)));
     $417 = $76;
     $418 = ($417|0)!=(0);
     $419 = $418 ? 8 : 1;
     $420 = (+($419|0));
     $421 = +HEAPF64[3021];
     $422 = $420 * $421;
     $423 = $416 >= $422;
     if (!($423)) {
      break;
     }
     $424 = $79;
     $425 = $424 > 0.0;
     do {
      if ($425) {
       $426 = $71;
       $427 = HEAP32[6089]|0;
       $428 = ($426>>>0)>($427>>>0);
       if (!($428)) {
        $429 = +HEAPF64[$51>>3];
        $430 = +HEAPF64[$52>>3];
        $431 = $429 / $430;
        $432 = $75;
        $433 = $74;
        $434 = $432 / $433;
        $435 = $431 > $434;
        if (!($435)) {
         label = 36;
         break;
        }
       }
       $436 = +HEAPF64[$52>>3];
       $74 = $436;
       $437 = +HEAPF64[$51>>3];
       $75 = $437;
      } else {
       label = 36;
      }
     } while(0);
     do {
      if ((label|0) == 36) {
       label = 0;
       $438 = $79;
       $439 = $438 < 0.0;
       if ($439) {
        $440 = $71;
        $441 = HEAP32[6089]|0;
        $442 = ($440>>>0)>($441>>>0);
        if (!($442)) {
         $443 = +HEAPF64[$51>>3];
         $444 = +HEAPF64[$52>>3];
         $445 = $443 / $444;
         $446 = $73;
         $447 = $72;
         $448 = $446 / $447;
         $449 = $445 < $448;
         if (!($449)) {
          break;
         }
        }
        $450 = +HEAPF64[$52>>3];
        $72 = $450;
        $451 = +HEAPF64[$51>>3];
        $73 = $451;
       }
      }
     } while(0);
     $452 = $71;
     $453 = HEAP32[6089]|0;
     $454 = ($452>>>0)<($453>>>0);
     $455 = +HEAPF64[$78>>3];
     $456 = $455 > 0.0;
     $or$cond5 = $454 & $456;
     if ($or$cond5) {
      $457 = $79;
      $458 = -$457;
      $459 = +HEAPF64[$78>>3];
      $460 = $458 / $459;
      $80 = $460;
      $461 = $80;
      $462 = (+Math_sin((+$461)));
      $81 = $462;
      $463 = $80;
      $464 = (+Math_cos((+$463)));
      $82 = $464;
      $465 = +HEAPF64[$52>>3];
      $466 = $82;
      $467 = $465 * $466;
      $468 = +HEAPF64[$51>>3];
      $469 = $81;
      $470 = $468 * $469;
      $471 = $467 + $470;
      $83 = $471;
      $472 = $83;
      $473 = $472 > 0.0;
      if ($473) {
       $474 = $80;
       $475 = (+Math_abs((+$474)));
       $476 = +HEAPF64[3019];
       $477 = $475 < $476;
       if ($477) {
        $478 = +HEAPF64[$51>>3];
        $479 = $82;
        $480 = $478 * $479;
        $481 = +HEAPF64[$52>>3];
        $482 = $81;
        $483 = $481 * $482;
        $484 = $480 - $483;
        HEAPF64[$51>>3] = $484;
        $485 = $83;
        HEAPF64[$52>>3] = $485;
        _norm2($52,$51);
        $486 = $79;
        $487 = (+Math_abs((+$486)));
        $488 = +HEAPF64[3021];
        $489 = 16.0 * $488;
        $490 = $487 <= $489;
        $491 = $490&1;
        $76 = $491;
       } else {
        label = 44;
       }
      } else {
       label = 44;
      }
     } else {
      label = 44;
     }
     if ((label|0) == 44) {
      label = 0;
      $492 = $72;
      $493 = $74;
      $494 = $492 + $493;
      $495 = $494 / 2.0;
      HEAPF64[$52>>3] = $495;
      $496 = $73;
      $497 = $75;
      $498 = $496 + $497;
      $499 = $498 / 2.0;
      HEAPF64[$51>>3] = $499;
      _norm2($52,$51);
      $76 = 0;
      $500 = $72;
      $501 = +HEAPF64[$52>>3];
      $502 = $500 - $501;
      $503 = (+Math_abs((+$502)));
      $504 = $73;
      $505 = +HEAPF64[$51>>3];
      $506 = $504 - $505;
      $507 = $503 + $506;
      $508 = +HEAPF64[3023];
      $509 = $507 < $508;
      if ($509) {
       $521 = 1;
      } else {
       $510 = +HEAPF64[$52>>3];
       $511 = $74;
       $512 = $510 - $511;
       $513 = (+Math_abs((+$512)));
       $514 = +HEAPF64[$51>>3];
       $515 = $75;
       $516 = $514 - $515;
       $517 = $513 + $516;
       $518 = +HEAPF64[3023];
       $519 = $517 < $518;
       $521 = $519;
      }
      $520 = $521&1;
      $77 = $520;
     }
     $522 = $71;
     $523 = (($522) + 1)|0;
     $71 = $523;
    }
    $524 = $14;
    $525 = +HEAPF64[$70>>3];
    $526 = +HEAPF64[$50>>3];
    $527 = +HEAPF64[$66>>3];
    $528 = +HEAPF64[$67>>3];
    $529 = $44;
    $530 = +HEAPF64[$68>>3];
    $531 = +HEAPF64[$69>>3];
    $532 = $45;
    $533 = +HEAPF64[$39>>3];
    $534 = +HEAPF64[$41>>3];
    $535 = $60;
    $536 = $535 & 8197;
    $537 = ($536|0)!=(0);
    $$6 = $537 ? $30 : 0;
    $538 = $60;
    $539 = $538 & 8197;
    $540 = ($539|0)!=(0);
    $541 = $540 ? $31 : 0;
    _Lengths($524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$42,$43,0,$$6,$541,$55);
    $542 = $14;
    $543 = ((($542)) + 48|0);
    $544 = +HEAPF64[$543>>3];
    $545 = +HEAPF64[$43>>3];
    $546 = $545 * $544;
    HEAPF64[$43>>3] = $546;
    $547 = $14;
    $548 = ((($547)) + 48|0);
    $549 = +HEAPF64[$548>>3];
    $550 = +HEAPF64[$42>>3];
    $551 = $550 * $549;
    HEAPF64[$42>>3] = $551;
    $552 = +HEAPF64[$50>>3];
    $553 = +HEAPF64[3025];
    $554 = $552 / $553;
    $49 = $554;
   }
  }
 } while(0);
 $555 = $60;
 $556 = $555 & 1025;
 $557 = ($556|0)!=(0);
 if ($557) {
  $558 = +HEAPF64[$42>>3];
  $559 = 0.0 + $558;
  $28 = $559;
 }
 $560 = $60;
 $561 = $560 & 4101;
 $562 = ($561|0)!=(0);
 if ($562) {
  $563 = +HEAPF64[$43>>3];
  $564 = 0.0 + $563;
  $29 = $564;
 }
 $565 = $60;
 $566 = $565 & 16400;
 $567 = ($566|0)!=(0);
 if ($567) {
  $568 = +HEAPF64[$52>>3];
  $569 = +HEAPF64[$39>>3];
  $570 = $568 * $569;
  $84 = $570;
  $571 = +HEAPF64[$51>>3];
  $572 = +HEAPF64[$52>>3];
  $573 = +HEAPF64[$38>>3];
  $574 = $572 * $573;
  $575 = (+_hypotx($571,$574));
  $85 = $575;
  $576 = $85;
  $577 = $576 != 0.0;
  $578 = $84;
  $579 = $578 != 0.0;
  $or$cond8 = $577 & $579;
  if ($or$cond8) {
   $580 = +HEAPF64[$38>>3];
   HEAPF64[$87>>3] = $580;
   $581 = +HEAPF64[$51>>3];
   $582 = +HEAPF64[$39>>3];
   $583 = $581 * $582;
   HEAPF64[$88>>3] = $583;
   $584 = +HEAPF64[$40>>3];
   HEAPF64[$89>>3] = $584;
   $585 = +HEAPF64[$53>>3];
   $586 = +HEAPF64[$41>>3];
   $587 = $585 * $586;
   HEAPF64[$90>>3] = $587;
   $588 = $85;
   $589 = (+_sq($588));
   $590 = $14;
   $591 = ((($590)) + 32|0);
   $592 = +HEAPF64[$591>>3];
   $593 = $589 * $592;
   $91 = $593;
   $594 = $91;
   $595 = $91;
   $596 = 1.0 + $595;
   $597 = (+Math_sqrt((+$596)));
   $598 = 1.0 + $597;
   $599 = 2.0 * $598;
   $600 = $91;
   $601 = $599 + $600;
   $602 = $594 / $601;
   $92 = $602;
   $603 = $14;
   $604 = +HEAPF64[$603>>3];
   $605 = (+_sq($604));
   $606 = $85;
   $607 = $605 * $606;
   $608 = $84;
   $609 = $607 * $608;
   $610 = $14;
   $611 = ((($610)) + 24|0);
   $612 = +HEAPF64[$611>>3];
   $613 = $609 * $612;
   $93 = $613;
   _norm2($87,$88);
   _norm2($89,$90);
   $614 = $14;
   $615 = $92;
   _C4f($614,$615,$55);
   $616 = +HEAPF64[$87>>3];
   $617 = +HEAPF64[$88>>3];
   $618 = (+_SinCosSeries(0,$616,$617,$55,6));
   $94 = $618;
   $619 = +HEAPF64[$89>>3];
   $620 = +HEAPF64[$90>>3];
   $621 = (+_SinCosSeries(0,$619,$620,$55,6));
   $95 = $621;
   $622 = $93;
   $623 = $95;
   $624 = $94;
   $625 = $623 - $624;
   $626 = $622 * $625;
   $32 = $626;
  } else {
   $32 = 0.0;
  }
  $627 = $56;
  $628 = ($627|0)!=(0);
  do {
   if (!($628)) {
    $629 = +HEAPF64[$58>>3];
    $630 = $629 > 1.0;
    if ($630) {
     $631 = $57;
     $632 = (+Math_sin((+$631)));
     HEAPF64[$58>>3] = $632;
     $633 = $57;
     $634 = (+Math_cos((+$633)));
     HEAPF64[$59>>3] = $634;
     break;
    } else {
     _norm2($58,$59);
     break;
    }
   }
  } while(0);
  $635 = $56;
  $636 = ($635|0)==(0);
  $637 = +HEAPF64[$59>>3];
  $638 = $637 > -0.70709999999999995;
  $or$cond10 = $636 & $638;
  if ($or$cond10) {
   $639 = +HEAPF64[$40>>3];
   $640 = +HEAPF64[$38>>3];
   $641 = $639 - $640;
   $642 = $641 < 1.75;
   if ($642) {
    $643 = +HEAPF64[$59>>3];
    $644 = 1.0 + $643;
    $96 = $644;
    $645 = +HEAPF64[$39>>3];
    $646 = 1.0 + $645;
    $97 = $646;
    $647 = +HEAPF64[$41>>3];
    $648 = 1.0 + $647;
    $98 = $648;
    $649 = +HEAPF64[$58>>3];
    $650 = +HEAPF64[$38>>3];
    $651 = $98;
    $652 = $650 * $651;
    $653 = +HEAPF64[$40>>3];
    $654 = $97;
    $655 = $653 * $654;
    $656 = $652 + $655;
    $657 = $649 * $656;
    $658 = $96;
    $659 = +HEAPF64[$38>>3];
    $660 = +HEAPF64[$40>>3];
    $661 = $659 * $660;
    $662 = $97;
    $663 = $98;
    $664 = $662 * $663;
    $665 = $661 + $664;
    $666 = $658 * $665;
    $667 = (+Math_atan2((+$657),(+$666)));
    $668 = 2.0 * $667;
    $86 = $668;
   } else {
    label = 64;
   }
  } else {
   label = 64;
  }
  if ((label|0) == 64) {
   $669 = +HEAPF64[$54>>3];
   $670 = +HEAPF64[$51>>3];
   $671 = $669 * $670;
   $672 = +HEAPF64[$53>>3];
   $673 = +HEAPF64[$52>>3];
   $674 = $672 * $673;
   $675 = $671 - $674;
   $99 = $675;
   $676 = +HEAPF64[$53>>3];
   $677 = +HEAPF64[$51>>3];
   $678 = $676 * $677;
   $679 = +HEAPF64[$54>>3];
   $680 = +HEAPF64[$52>>3];
   $681 = $679 * $680;
   $682 = $678 + $681;
   $100 = $682;
   $683 = $99;
   $684 = $683 == 0.0;
   $685 = $100;
   $686 = $685 < 0.0;
   $or$cond12 = $684 & $686;
   if ($or$cond12) {
    $687 = +HEAPF64[3020];
    $688 = +HEAPF64[$51>>3];
    $689 = $687 * $688;
    $99 = $689;
    $100 = -1.0;
   }
   $690 = $99;
   $691 = $100;
   $692 = (+Math_atan2((+$690),(+$691)));
   $86 = $692;
  }
  $693 = $14;
  $694 = ((($693)) + 56|0);
  $695 = +HEAPF64[$694>>3];
  $696 = $86;
  $697 = $695 * $696;
  $698 = $32;
  $699 = $698 + $697;
  $32 = $699;
  $700 = $37;
  $701 = $36;
  $702 = Math_imul($700, $701)|0;
  $703 = $35;
  $704 = Math_imul($702, $703)|0;
  $705 = (+($704|0));
  $706 = $32;
  $707 = $706 * $705;
  $32 = $707;
  $708 = $32;
  $709 = $708 + 0.0;
  $32 = $709;
 }
 $710 = $37;
 $711 = ($710|0)<(0);
 if ($711) {
  _swapx($52,$54);
  _swapx($51,$53);
  $712 = $60;
  $713 = $712 & 8197;
  $714 = ($713|0)!=(0);
  if ($714) {
   _swapx($30,$31);
  }
 }
 $715 = $37;
 $716 = $36;
 $717 = Math_imul($715, $716)|0;
 $718 = (+($717|0));
 $719 = +HEAPF64[$52>>3];
 $720 = $719 * $718;
 HEAPF64[$52>>3] = $720;
 $721 = $37;
 $722 = $35;
 $723 = Math_imul($721, $722)|0;
 $724 = (+($723|0));
 $725 = +HEAPF64[$51>>3];
 $726 = $725 * $724;
 HEAPF64[$51>>3] = $726;
 $727 = $37;
 $728 = $36;
 $729 = Math_imul($727, $728)|0;
 $730 = (+($729|0));
 $731 = +HEAPF64[$54>>3];
 $732 = $731 * $730;
 HEAPF64[$54>>3] = $732;
 $733 = $37;
 $734 = $35;
 $735 = Math_imul($733, $734)|0;
 $736 = (+($735|0));
 $737 = +HEAPF64[$53>>3];
 $738 = $737 * $736;
 HEAPF64[$53>>3] = $738;
 $739 = $20;
 $740 = ($739|0)!=(0|0);
 if ($740) {
  $741 = +HEAPF64[$52>>3];
  $742 = $20;
  HEAPF64[$742>>3] = $741;
 }
 $743 = $21;
 $744 = ($743|0)!=(0|0);
 if ($744) {
  $745 = +HEAPF64[$51>>3];
  $746 = $21;
  HEAPF64[$746>>3] = $745;
 }
 $747 = $22;
 $748 = ($747|0)!=(0|0);
 if ($748) {
  $749 = +HEAPF64[$54>>3];
  $750 = $22;
  HEAPF64[$750>>3] = $749;
 }
 $751 = $23;
 $752 = ($751|0)!=(0|0);
 if ($752) {
  $753 = +HEAPF64[$53>>3];
  $754 = $23;
  HEAPF64[$754>>3] = $753;
 }
 $755 = $60;
 $756 = $755 & 1025;
 $757 = ($756|0)!=(0);
 if ($757) {
  $758 = $28;
  $759 = $19;
  HEAPF64[$759>>3] = $758;
 }
 $760 = $60;
 $761 = $760 & 4101;
 $762 = ($761|0)!=(0);
 if ($762) {
  $763 = $29;
  $764 = $24;
  HEAPF64[$764>>3] = $763;
 }
 $765 = $60;
 $766 = $765 & 8197;
 $767 = ($766|0)!=(0);
 if ($767) {
  $768 = $25;
  $769 = ($768|0)!=(0|0);
  if ($769) {
   $770 = +HEAPF64[$30>>3];
   $771 = $25;
   HEAPF64[$771>>3] = $770;
  }
  $772 = $26;
  $773 = ($772|0)!=(0|0);
  if ($773) {
   $774 = +HEAPF64[$31>>3];
   $775 = $26;
   HEAPF64[$775>>3] = $774;
  }
 }
 $776 = $60;
 $777 = $776 & 16400;
 $778 = ($777|0)!=(0);
 if (!($778)) {
  $781 = $49;
  STACKTOP = sp;return (+$781);
 }
 $779 = $32;
 $780 = $27;
 HEAPF64[$780>>3] = $779;
 $781 = $49;
 STACKTOP = sp;return (+$781);
}
function _AngDiff($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (+_AngNormalize($8));
 $10 = $4;
 $11 = -$10;
 $12 = (+_AngNormalize($11));
 $13 = (+_sumx($9,$12,$6));
 $14 = (+_AngNormalize($13));
 $15 = -$14;
 $7 = $15;
 $16 = $7;
 $17 = $16 == 180.0;
 $18 = +HEAPF64[$6>>3];
 $19 = $18 < 0.0;
 $or$cond = $17 & $19;
 $20 = $7;
 $21 = $or$cond ? -180.0 : $20;
 $22 = +HEAPF64[$6>>3];
 $23 = -$22;
 $24 = $5;
 $25 = (+_sumx($21,$23,$24));
 STACKTOP = sp;return (+$25);
}
function _Lengths($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0;
 var $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0;
 var $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0;
 var $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0;
 var $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $38 = sp + 32|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $34 = 0.0;
 $35 = 0.0;
 $36 = 0.0;
 $37 = 0.0;
 $45 = $29;
 $46 = ($45|0)!=(0|0);
 $47 = $30;
 $48 = ($47|0)!=(0|0);
 $or$cond = $46 | $48;
 $49 = $31;
 $50 = ($49|0)!=(0|0);
 $or$cond3 = $or$cond | $50;
 if ($or$cond3) {
  $54 = 1;
 } else {
  $51 = $32;
  $52 = ($51|0)!=(0|0);
  $54 = $52;
 }
 $53 = $54&1;
 $39 = $53;
 $55 = $28;
 $56 = ($55|0)!=(0|0);
 $57 = $39;
 $58 = ($57|0)!=(0);
 $or$cond5 = $56 | $58;
 if ($or$cond5) {
  $59 = $18;
  $60 = (+_A1m1f($59));
  $36 = $60;
  $61 = $18;
  $62 = $33;
  _C1f($61,$62);
  $63 = $39;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = $18;
   $66 = (+_A2m1f($65));
   $37 = $66;
   $67 = $18;
   _C2f($67,$38);
   $68 = $36;
   $69 = $37;
   $70 = $68 - $69;
   $34 = $70;
   $71 = $37;
   $72 = 1.0 + $71;
   $37 = $72;
  }
  $73 = $36;
  $74 = 1.0 + $73;
  $36 = $74;
 }
 $75 = $28;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = $23;
  $78 = $24;
  $79 = $33;
  $80 = (+_SinCosSeries(1,$77,$78,$79,6));
  $81 = $20;
  $82 = $21;
  $83 = $33;
  $84 = (+_SinCosSeries(1,$81,$82,$83,6));
  $85 = $80 - $84;
  $40 = $85;
  $86 = $36;
  $87 = $19;
  $88 = $40;
  $89 = $87 + $88;
  $90 = $86 * $89;
  $91 = $28;
  HEAPF64[$91>>3] = $90;
  $92 = $39;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $23;
   $95 = $24;
   $96 = (+_SinCosSeries(1,$94,$95,$38,6));
   $97 = $20;
   $98 = $21;
   $99 = (+_SinCosSeries(1,$97,$98,$38,6));
   $100 = $96 - $99;
   $41 = $100;
   $101 = $34;
   $102 = $19;
   $103 = $101 * $102;
   $104 = $36;
   $105 = $40;
   $106 = $104 * $105;
   $107 = $37;
   $108 = $41;
   $109 = $107 * $108;
   $110 = $106 - $109;
   $111 = $103 + $110;
   $35 = $111;
  }
 } else {
  $112 = $39;
  $113 = ($112|0)!=(0);
  if ($113) {
   $42 = 1;
   while(1) {
    $114 = $42;
    $115 = ($114|0)<=(6);
    if (!($115)) {
     break;
    }
    $116 = $36;
    $117 = $42;
    $118 = $33;
    $119 = (($118) + ($117<<3)|0);
    $120 = +HEAPF64[$119>>3];
    $121 = $116 * $120;
    $122 = $37;
    $123 = $42;
    $124 = (($38) + ($123<<3)|0);
    $125 = +HEAPF64[$124>>3];
    $126 = $122 * $125;
    $127 = $121 - $126;
    $128 = $42;
    $129 = (($38) + ($128<<3)|0);
    HEAPF64[$129>>3] = $127;
    $130 = $42;
    $131 = (($130) + 1)|0;
    $42 = $131;
   }
   $132 = $34;
   $133 = $19;
   $134 = $132 * $133;
   $135 = $23;
   $136 = $24;
   $137 = (+_SinCosSeries(1,$135,$136,$38,6));
   $138 = $20;
   $139 = $21;
   $140 = (+_SinCosSeries(1,$138,$139,$38,6));
   $141 = $137 - $140;
   $142 = $134 + $141;
   $35 = $142;
  }
 }
 $143 = $30;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = $34;
  $146 = $30;
  HEAPF64[$146>>3] = $145;
 }
 $147 = $29;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = $25;
  $150 = $21;
  $151 = $23;
  $152 = $150 * $151;
  $153 = $149 * $152;
  $154 = $22;
  $155 = $20;
  $156 = $24;
  $157 = $155 * $156;
  $158 = $154 * $157;
  $159 = $153 - $158;
  $160 = $21;
  $161 = $24;
  $162 = $160 * $161;
  $163 = $35;
  $164 = $162 * $163;
  $165 = $159 - $164;
  $166 = $29;
  HEAPF64[$166>>3] = $165;
 }
 $167 = $31;
 $168 = ($167|0)!=(0|0);
 $169 = $32;
 $170 = ($169|0)!=(0|0);
 $or$cond7 = $168 | $170;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $171 = $21;
 $172 = $24;
 $173 = $171 * $172;
 $174 = $20;
 $175 = $23;
 $176 = $174 * $175;
 $177 = $173 + $176;
 $43 = $177;
 $178 = $17;
 $179 = ((($178)) + 32|0);
 $180 = +HEAPF64[$179>>3];
 $181 = $26;
 $182 = $27;
 $183 = $181 - $182;
 $184 = $180 * $183;
 $185 = $26;
 $186 = $27;
 $187 = $185 + $186;
 $188 = $184 * $187;
 $189 = $22;
 $190 = $25;
 $191 = $189 + $190;
 $192 = $188 / $191;
 $44 = $192;
 $193 = $31;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = $43;
  $196 = $44;
  $197 = $23;
  $198 = $196 * $197;
  $199 = $24;
  $200 = $35;
  $201 = $199 * $200;
  $202 = $198 - $201;
  $203 = $20;
  $204 = $202 * $203;
  $205 = $22;
  $206 = $204 / $205;
  $207 = $195 + $206;
  $208 = $31;
  HEAPF64[$208>>3] = $207;
 }
 $209 = $32;
 $210 = ($209|0)!=(0|0);
 if (!($210)) {
  STACKTOP = sp;return;
 }
 $211 = $43;
 $212 = $44;
 $213 = $20;
 $214 = $212 * $213;
 $215 = $21;
 $216 = $35;
 $217 = $215 * $216;
 $218 = $214 - $217;
 $219 = $23;
 $220 = $218 * $219;
 $221 = $25;
 $222 = $220 / $221;
 $223 = $211 - $222;
 $224 = $32;
 HEAPF64[$224>>3] = $223;
 STACKTOP = sp;return;
}
function _InverseStart($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0;
 var $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0;
 var $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0;
 var $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0;
 var $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0;
 var $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0;
 var $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0;
 var $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0;
 var $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0;
 var $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0;
 var $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0;
 var $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0;
 var $341 = 0.0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0;
 var $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0;
 var $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0;
 var $396 = 0.0, $397 = 0, $398 = 0.0, $399 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $32 = sp + 232|0;
 $33 = sp + 224|0;
 $34 = sp + 216|0;
 $35 = sp + 208|0;
 $59 = sp + 24|0;
 $60 = sp + 16|0;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 HEAPF64[$32>>3] = 0.0;
 HEAPF64[$33>>3] = 0.0;
 HEAPF64[$34>>3] = 0.0;
 HEAPF64[$35>>3] = 0.0;
 $36 = 0.0;
 $37 = -1.0;
 $63 = $20;
 $64 = $18;
 $65 = $63 * $64;
 $66 = $21;
 $67 = $17;
 $68 = $66 * $67;
 $69 = $65 - $68;
 $38 = $69;
 $70 = $21;
 $71 = $18;
 $72 = $70 * $71;
 $73 = $20;
 $74 = $17;
 $75 = $73 * $74;
 $76 = $72 + $75;
 $39 = $76;
 $77 = $39;
 $78 = $77 >= 0.0;
 $79 = $38;
 $80 = $79 < 0.5;
 $or$cond = $78 & $80;
 if ($or$cond) {
  $81 = $21;
  $82 = $23;
  $83 = $81 * $82;
  $84 = $83 < 0.5;
  $86 = $84;
 } else {
  $86 = 0;
 }
 $85 = $86&1;
 $41 = $85;
 $87 = $20;
 $88 = $18;
 $89 = $87 * $88;
 $46 = $89;
 $90 = $21;
 $91 = $17;
 $92 = $90 * $91;
 $47 = $92;
 $93 = $46;
 $94 = $47;
 $95 = $93 + $94;
 $40 = $95;
 $96 = $41;
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = $17;
  $99 = $20;
  $100 = $98 + $99;
  $101 = (+_sq($100));
  $48 = $101;
  $102 = $48;
  $103 = $18;
  $104 = $21;
  $105 = $103 + $104;
  $106 = (+_sq($105));
  $107 = $102 + $106;
  $108 = $48;
  $109 = $108 / $107;
  $48 = $109;
  $110 = $16;
  $111 = ((($110)) + 32|0);
  $112 = +HEAPF64[$111>>3];
  $113 = $48;
  $114 = $112 * $113;
  $115 = 1.0 + $114;
  $116 = (+Math_sqrt((+$115)));
  $36 = $116;
  $117 = $23;
  $118 = $16;
  $119 = ((($118)) + 16|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $36;
  $122 = $120 * $121;
  $123 = $117 / $122;
  $49 = $123;
  $124 = $49;
  $125 = (+Math_sin((+$124)));
  $42 = $125;
  $126 = $49;
  $127 = (+Math_cos((+$126)));
  $43 = $127;
 } else {
  $128 = $24;
  $42 = $128;
  $129 = $25;
  $43 = $129;
 }
 $130 = $21;
 $131 = $42;
 $132 = $130 * $131;
 HEAPF64[$32>>3] = $132;
 $133 = $43;
 $134 = $133 >= 0.0;
 if ($134) {
  $135 = $38;
  $136 = $21;
  $137 = $17;
  $138 = $136 * $137;
  $139 = $42;
  $140 = (+_sq($139));
  $141 = $138 * $140;
  $142 = $43;
  $143 = 1.0 + $142;
  $144 = $141 / $143;
  $145 = $135 + $144;
  $157 = $145;
 } else {
  $146 = $40;
  $147 = $21;
  $148 = $17;
  $149 = $147 * $148;
  $150 = $42;
  $151 = (+_sq($150));
  $152 = $149 * $151;
  $153 = $43;
  $154 = 1.0 - $153;
  $155 = $152 / $154;
  $156 = $146 - $155;
  $157 = $156;
 }
 HEAPF64[$33>>3] = $157;
 $158 = +HEAPF64[$32>>3];
 $159 = +HEAPF64[$33>>3];
 $160 = (+_hypotx($158,$159));
 $44 = $160;
 $161 = $17;
 $162 = $20;
 $163 = $161 * $162;
 $164 = $18;
 $165 = $21;
 $166 = $164 * $165;
 $167 = $43;
 $168 = $166 * $167;
 $169 = $163 + $168;
 $45 = $169;
 $170 = $41;
 $171 = ($170|0)!=(0);
 if ($171) {
  $172 = $44;
  $173 = $16;
  $174 = ((($173)) + 64|0);
  $175 = +HEAPF64[$174>>3];
  $176 = $172 < $175;
  if ($176) {
   $177 = $18;
   $178 = $42;
   $179 = $177 * $178;
   HEAPF64[$34>>3] = $179;
   $180 = $38;
   $181 = $18;
   $182 = $20;
   $183 = $181 * $182;
   $184 = $43;
   $185 = $184 >= 0.0;
   if ($185) {
    $186 = $42;
    $187 = (+_sq($186));
    $188 = $43;
    $189 = 1.0 + $188;
    $190 = $187 / $189;
    $194 = $190;
   } else {
    $191 = $43;
    $192 = 1.0 - $191;
    $194 = $192;
   }
   $193 = $183 * $194;
   $195 = $180 - $193;
   HEAPF64[$35>>3] = $195;
   _norm2($34,$35);
   $196 = $44;
   $197 = $45;
   $198 = (+Math_atan2((+$196),(+$197)));
   $37 = $198;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 do {
  if ((label|0) == 15) {
   $199 = $16;
   $200 = ((($199)) + 40|0);
   $201 = +HEAPF64[$200>>3];
   $202 = (+Math_abs((+$201)));
   $203 = $202 > 0.10000000000000001;
   $204 = $45;
   $205 = $204 >= 0.0;
   $or$cond3 = $203 | $205;
   if (!($or$cond3)) {
    $206 = $44;
    $207 = $16;
    $208 = ((($207)) + 40|0);
    $209 = +HEAPF64[$208>>3];
    $210 = (+Math_abs((+$209)));
    $211 = 6.0 * $210;
    $212 = +HEAPF64[3019];
    $213 = $211 * $212;
    $214 = $18;
    $215 = (+_sq($214));
    $216 = $213 * $215;
    $217 = $206 >= $216;
    if (!($217)) {
     $218 = $24;
     $219 = -$218;
     $220 = $25;
     $221 = -$220;
     $222 = (+Math_atan2((+$219),(+$221)));
     $54 = $222;
     $223 = $16;
     $224 = ((($223)) + 8|0);
     $225 = +HEAPF64[$224>>3];
     $226 = $225 >= 0.0;
     if ($226) {
      $227 = $17;
      $228 = (+_sq($227));
      $229 = $16;
      $230 = ((($229)) + 32|0);
      $231 = +HEAPF64[$230>>3];
      $232 = $228 * $231;
      $55 = $232;
      $233 = $55;
      $234 = $55;
      $235 = 1.0 + $234;
      $236 = (+Math_sqrt((+$235)));
      $237 = 1.0 + $236;
      $238 = 2.0 * $237;
      $239 = $55;
      $240 = $238 + $239;
      $241 = $233 / $240;
      $56 = $241;
      $242 = $16;
      $243 = ((($242)) + 8|0);
      $244 = +HEAPF64[$243>>3];
      $245 = $18;
      $246 = $244 * $245;
      $247 = $16;
      $248 = $56;
      $249 = (+_A3f($247,$248));
      $250 = $246 * $249;
      $251 = +HEAPF64[3019];
      $252 = $250 * $251;
      $51 = $252;
      $253 = $51;
      $254 = $18;
      $255 = $253 * $254;
      $52 = $255;
      $256 = $54;
      $257 = $51;
      $258 = $256 / $257;
      $53 = $258;
      $259 = $40;
      $260 = $52;
      $261 = $259 / $260;
      $50 = $261;
     } else {
      $262 = $21;
      $263 = $18;
      $264 = $262 * $263;
      $265 = $20;
      $266 = $17;
      $267 = $265 * $266;
      $268 = $264 - $267;
      $57 = $268;
      $269 = $40;
      $270 = $57;
      $271 = (+Math_atan2((+$269),(+$270)));
      $58 = $271;
      $272 = $16;
      $273 = $16;
      $274 = ((($273)) + 40|0);
      $275 = +HEAPF64[$274>>3];
      $276 = +HEAPF64[3019];
      $277 = $58;
      $278 = $276 + $277;
      $279 = $17;
      $280 = $18;
      $281 = -$280;
      $282 = $19;
      $283 = $20;
      $284 = $21;
      $285 = $22;
      $286 = $18;
      $287 = $21;
      $288 = $31;
      _Lengths($272,$275,$278,$279,$281,$282,$283,$284,$285,$286,$287,0,$59,$60,0,0,$288);
      $289 = +HEAPF64[$59>>3];
      $290 = $18;
      $291 = $21;
      $292 = $290 * $291;
      $293 = +HEAPF64[$60>>3];
      $294 = $292 * $293;
      $295 = +HEAPF64[3019];
      $296 = $294 * $295;
      $297 = $289 / $296;
      $298 = -1.0 + $297;
      $53 = $298;
      $299 = $53;
      $300 = $299 < -0.01;
      if ($300) {
       $301 = $40;
       $302 = $53;
       $303 = $301 / $302;
       $313 = $303;
      } else {
       $304 = $16;
       $305 = ((($304)) + 8|0);
       $306 = +HEAPF64[$305>>3];
       $307 = -$306;
       $308 = $18;
       $309 = (+_sq($308));
       $310 = $307 * $309;
       $311 = +HEAPF64[3019];
       $312 = $310 * $311;
       $313 = $312;
      }
      $52 = $313;
      $314 = $52;
      $315 = $18;
      $316 = $314 / $315;
      $51 = $316;
      $317 = $54;
      $318 = $51;
      $319 = $317 / $318;
      $50 = $319;
     }
     $320 = $50;
     $321 = +HEAPF64[3022];
     $322 = -$321;
     $323 = $320 > $322;
     if ($323) {
      $324 = $53;
      $325 = +HEAPF64[3024];
      $326 = -1.0 - $325;
      $327 = $324 > $326;
      if ($327) {
       $328 = $16;
       $329 = ((($328)) + 8|0);
       $330 = +HEAPF64[$329>>3];
       $331 = $330 >= 0.0;
       $332 = $53;
       if ($331) {
        $333 = -$332;
        $334 = (+_minx(1.0,$333));
        HEAPF64[$32>>3] = $334;
        $335 = +HEAPF64[$32>>3];
        $336 = (+_sq($335));
        $337 = 1.0 - $336;
        $338 = (+Math_sqrt((+$337)));
        $339 = -$338;
        HEAPF64[$33>>3] = $339;
        break;
       } else {
        $340 = +HEAPF64[3022];
        $341 = -$340;
        $342 = $332 > $341;
        $343 = $342 ? 0 : -1;
        $344 = (+($343|0));
        $345 = $53;
        $346 = (+_maxx($344,$345));
        HEAPF64[$33>>3] = $346;
        $347 = +HEAPF64[$33>>3];
        $348 = (+_sq($347));
        $349 = 1.0 - $348;
        $350 = (+Math_sqrt((+$349)));
        HEAPF64[$32>>3] = $350;
        break;
       }
      }
     }
     $351 = $53;
     $352 = $50;
     $353 = (+_Astroid($351,$352));
     $61 = $353;
     $354 = $51;
     $355 = $16;
     $356 = ((($355)) + 8|0);
     $357 = +HEAPF64[$356>>3];
     $358 = $357 >= 0.0;
     if ($358) {
      $359 = $53;
      $360 = -$359;
      $361 = $61;
      $362 = $360 * $361;
      $363 = $61;
      $364 = 1.0 + $363;
      $365 = $362 / $364;
      $374 = $365;
     } else {
      $366 = $50;
      $367 = -$366;
      $368 = $61;
      $369 = 1.0 + $368;
      $370 = $367 * $369;
      $371 = $61;
      $372 = $370 / $371;
      $374 = $372;
     }
     $373 = $354 * $374;
     $62 = $373;
     $375 = $62;
     $376 = (+Math_sin((+$375)));
     $42 = $376;
     $377 = $62;
     $378 = (+Math_cos((+$377)));
     $379 = -$378;
     $43 = $379;
     $380 = $21;
     $381 = $42;
     $382 = $380 * $381;
     HEAPF64[$32>>3] = $382;
     $383 = $40;
     $384 = $21;
     $385 = $17;
     $386 = $384 * $385;
     $387 = $42;
     $388 = (+_sq($387));
     $389 = $386 * $388;
     $390 = $43;
     $391 = 1.0 - $390;
     $392 = $389 / $391;
     $393 = $383 - $392;
     HEAPF64[$33>>3] = $393;
    }
   }
  }
 } while(0);
 $394 = +HEAPF64[$32>>3];
 $395 = $394 <= 0.0;
 if ($395) {
  HEAPF64[$32>>3] = 1.0;
  HEAPF64[$33>>3] = 0.0;
 } else {
  _norm2($32,$33);
 }
 $396 = +HEAPF64[$32>>3];
 $397 = $26;
 HEAPF64[$397>>3] = $396;
 $398 = +HEAPF64[$33>>3];
 $399 = $27;
 HEAPF64[$399>>3] = $398;
 $400 = $41;
 $401 = ($400|0)!=(0);
 if ($401) {
  $402 = $36;
  $403 = $30;
  HEAPF64[$403>>3] = $402;
 }
 $404 = $37;
 $405 = $404 >= 0.0;
 if (!($405)) {
  $410 = $37;
  STACKTOP = sp;return (+$410);
 }
 $406 = +HEAPF64[$34>>3];
 $407 = $28;
 HEAPF64[$407>>3] = $406;
 $408 = +HEAPF64[$35>>3];
 $409 = $29;
 HEAPF64[$409>>3] = $408;
 $410 = $37;
 STACKTOP = sp;return (+$410);
}
function _Lambda12($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 var $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0;
 var $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0;
 var $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0;
 var $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0;
 var $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0;
 var $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0;
 var $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0;
 var $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0.0;
 var $276 = 0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $51 = sp + 136|0;
 $52 = sp + 128|0;
 $53 = sp + 120|0;
 $54 = sp + 112|0;
 $58 = sp + 80|0;
 $24 = $0;
 $25 = $1;
 $26 = $2;
 $27 = $3;
 $28 = $4;
 $29 = $5;
 $30 = $6;
 $31 = $7;
 $32 = $8;
 $33 = $9;
 $34 = $10;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 $38 = $14;
 $39 = $15;
 $40 = $16;
 $41 = $17;
 $42 = $18;
 $43 = $19;
 $44 = $20;
 $45 = $21;
 $46 = $22;
 $47 = $23;
 $48 = 0.0;
 $49 = 0.0;
 $50 = 0.0;
 HEAPF64[$51>>3] = 0.0;
 HEAPF64[$52>>3] = 0.0;
 HEAPF64[$53>>3] = 0.0;
 HEAPF64[$54>>3] = 0.0;
 $55 = 0.0;
 $56 = 0.0;
 $57 = 0.0;
 HEAPF64[$58>>3] = 0.0;
 $69 = $25;
 $70 = $69 == 0.0;
 $71 = $32;
 $72 = $71 == 0.0;
 $or$cond = $70 & $72;
 if ($or$cond) {
  $73 = +HEAPF64[3020];
  $74 = -$73;
  $32 = $74;
 }
 $75 = $31;
 $76 = $26;
 $77 = $75 * $76;
 $59 = $77;
 $78 = $32;
 $79 = $31;
 $80 = $25;
 $81 = $79 * $80;
 $82 = (+_hypotx($78,$81));
 $60 = $82;
 $83 = $25;
 HEAPF64[$51>>3] = $83;
 $84 = $59;
 $85 = $25;
 $86 = $84 * $85;
 $61 = $86;
 $87 = $32;
 $88 = $26;
 $89 = $87 * $88;
 $62 = $89;
 HEAPF64[$52>>3] = $89;
 _norm2($51,$52);
 $90 = $29;
 $91 = $26;
 $92 = $90 != $91;
 if ($92) {
  $93 = $59;
  $94 = $29;
  $95 = $93 / $94;
  $97 = $95;
 } else {
  $96 = $31;
  $97 = $96;
 }
 $48 = $97;
 $98 = $29;
 $99 = $26;
 $100 = $98 != $99;
 if ($100) {
  label = 8;
 } else {
  $101 = $28;
  $102 = (+Math_abs((+$101)));
  $103 = $25;
  $104 = -$103;
  $105 = $102 != $104;
  if ($105) {
   label = 8;
  } else {
   $133 = $32;
   $134 = (+Math_abs((+$133)));
   $135 = $134;
  }
 }
 if ((label|0) == 8) {
  $106 = $32;
  $107 = $26;
  $108 = $106 * $107;
  $109 = (+_sq($108));
  $110 = $26;
  $111 = $25;
  $112 = -$111;
  $113 = $110 < $112;
  if ($113) {
   $114 = $29;
   $115 = $26;
   $116 = $114 - $115;
   $117 = $26;
   $118 = $29;
   $119 = $117 + $118;
   $120 = $116 * $119;
   $129 = $120;
  } else {
   $121 = $25;
   $122 = $28;
   $123 = $121 - $122;
   $124 = $25;
   $125 = $28;
   $126 = $124 + $125;
   $127 = $123 * $126;
   $129 = $127;
  }
  $128 = $109 + $129;
  $130 = (+Math_sqrt((+$128)));
  $131 = $29;
  $132 = $130 / $131;
  $135 = $132;
 }
 $49 = $135;
 $136 = $28;
 HEAPF64[$53>>3] = $136;
 $137 = $59;
 $138 = $28;
 $139 = $137 * $138;
 $63 = $139;
 $140 = $49;
 $141 = $29;
 $142 = $140 * $141;
 $64 = $142;
 HEAPF64[$54>>3] = $142;
 _norm2($53,$54);
 $143 = +HEAPF64[$52>>3];
 $144 = +HEAPF64[$53>>3];
 $145 = $143 * $144;
 $146 = +HEAPF64[$51>>3];
 $147 = +HEAPF64[$54>>3];
 $148 = $146 * $147;
 $149 = $145 - $148;
 $150 = (+_maxx(0.0,$149));
 $151 = +HEAPF64[$52>>3];
 $152 = +HEAPF64[$54>>3];
 $153 = $151 * $152;
 $154 = +HEAPF64[$51>>3];
 $155 = +HEAPF64[$53>>3];
 $156 = $154 * $155;
 $157 = $153 + $156;
 $158 = (+Math_atan2((+$150),(+$157)));
 $50 = $158;
 $159 = $62;
 $160 = $63;
 $161 = $159 * $160;
 $162 = $61;
 $163 = $64;
 $164 = $162 * $163;
 $165 = $161 - $164;
 $166 = (+_maxx(0.0,$165));
 $56 = $166;
 $167 = $62;
 $168 = $64;
 $169 = $167 * $168;
 $170 = $61;
 $171 = $63;
 $172 = $170 * $171;
 $173 = $169 + $172;
 $57 = $173;
 $174 = $56;
 $175 = $34;
 $176 = $174 * $175;
 $177 = $57;
 $178 = $33;
 $179 = $177 * $178;
 $180 = $176 - $179;
 $181 = $57;
 $182 = $34;
 $183 = $181 * $182;
 $184 = $56;
 $185 = $33;
 $186 = $184 * $185;
 $187 = $183 + $186;
 $188 = (+Math_atan2((+$180),(+$187)));
 $67 = $188;
 $189 = $60;
 $190 = (+_sq($189));
 $191 = $24;
 $192 = ((($191)) + 32|0);
 $193 = +HEAPF64[$192>>3];
 $194 = $190 * $193;
 $68 = $194;
 $195 = $68;
 $196 = $68;
 $197 = 1.0 + $196;
 $198 = (+Math_sqrt((+$197)));
 $199 = 1.0 + $198;
 $200 = 2.0 * $199;
 $201 = $68;
 $202 = $200 + $201;
 $203 = $195 / $202;
 $55 = $203;
 $204 = $24;
 $205 = $55;
 $206 = $47;
 _C3f($204,$205,$206);
 $207 = +HEAPF64[$53>>3];
 $208 = +HEAPF64[$54>>3];
 $209 = $47;
 $210 = (+_SinCosSeries(1,$207,$208,$209,5));
 $211 = +HEAPF64[$51>>3];
 $212 = +HEAPF64[$52>>3];
 $213 = $47;
 $214 = (+_SinCosSeries(1,$211,$212,$213,5));
 $215 = $210 - $214;
 $66 = $215;
 $216 = $67;
 $217 = $24;
 $218 = ((($217)) + 8|0);
 $219 = +HEAPF64[$218>>3];
 $220 = $24;
 $221 = $55;
 $222 = (+_A3f($220,$221));
 $223 = $219 * $222;
 $224 = $59;
 $225 = $223 * $224;
 $226 = $50;
 $227 = $66;
 $228 = $226 + $227;
 $229 = $225 * $228;
 $230 = $216 - $229;
 $65 = $230;
 $231 = $45;
 $232 = ($231|0)!=(0);
 do {
  if ($232) {
   $233 = $49;
   $234 = $233 == 0.0;
   $235 = $24;
   if ($234) {
    $236 = ((($235)) + 16|0);
    $237 = +HEAPF64[$236>>3];
    $238 = -2.0 * $237;
    $239 = $27;
    $240 = $238 * $239;
    $241 = $25;
    $242 = $240 / $241;
    HEAPF64[$58>>3] = $242;
    break;
   } else {
    $243 = $55;
    $244 = $50;
    $245 = +HEAPF64[$51>>3];
    $246 = +HEAPF64[$52>>3];
    $247 = $27;
    $248 = +HEAPF64[$53>>3];
    $249 = +HEAPF64[$54>>3];
    $250 = $30;
    $251 = $26;
    $252 = $29;
    $253 = $47;
    _Lengths($235,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,0,$58,0,0,0,$253);
    $254 = $24;
    $255 = ((($254)) + 16|0);
    $256 = +HEAPF64[$255>>3];
    $257 = $49;
    $258 = $29;
    $259 = $257 * $258;
    $260 = $256 / $259;
    $261 = +HEAPF64[$58>>3];
    $262 = $261 * $260;
    HEAPF64[$58>>3] = $262;
    break;
   }
  }
 } while(0);
 $263 = $48;
 $264 = $35;
 HEAPF64[$264>>3] = $263;
 $265 = $49;
 $266 = $36;
 HEAPF64[$266>>3] = $265;
 $267 = $50;
 $268 = $37;
 HEAPF64[$268>>3] = $267;
 $269 = +HEAPF64[$51>>3];
 $270 = $38;
 HEAPF64[$270>>3] = $269;
 $271 = +HEAPF64[$52>>3];
 $272 = $39;
 HEAPF64[$272>>3] = $271;
 $273 = +HEAPF64[$53>>3];
 $274 = $40;
 HEAPF64[$274>>3] = $273;
 $275 = +HEAPF64[$54>>3];
 $276 = $41;
 HEAPF64[$276>>3] = $275;
 $277 = $55;
 $278 = $42;
 HEAPF64[$278>>3] = $277;
 $279 = $56;
 $280 = $43;
 HEAPF64[$280>>3] = $279;
 $281 = $57;
 $282 = $44;
 HEAPF64[$282>>3] = $281;
 $283 = $45;
 $284 = ($283|0)!=(0);
 if (!($284)) {
  $287 = $65;
  STACKTOP = sp;return (+$287);
 }
 $285 = +HEAPF64[$58>>3];
 $286 = $46;
 HEAPF64[$286>>3] = $285;
 $287 = $65;
 STACKTOP = sp;return (+$287);
}
function _Astroid($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = $0;
 $3 = $1;
 $19 = $2;
 $20 = (+_sq($19));
 $5 = $20;
 $21 = $3;
 $22 = (+_sq($21));
 $6 = $22;
 $23 = $5;
 $24 = $6;
 $25 = $23 + $24;
 $26 = $25 - 1.0;
 $27 = $26 / 6.0;
 $7 = $27;
 $28 = $6;
 $29 = $28 == 0.0;
 $30 = $7;
 $31 = $30 <= 0.0;
 $or$cond = $29 & $31;
 if ($or$cond) {
  $4 = 0.0;
  $120 = $4;
  STACKTOP = sp;return (+$120);
 }
 $32 = $5;
 $33 = $6;
 $34 = $32 * $33;
 $35 = $34 / 4.0;
 $8 = $35;
 $36 = $7;
 $37 = (+_sq($36));
 $9 = $37;
 $38 = $7;
 $39 = $9;
 $40 = $38 * $39;
 $10 = $40;
 $41 = $8;
 $42 = $8;
 $43 = $10;
 $44 = 2.0 * $43;
 $45 = $42 + $44;
 $46 = $41 * $45;
 $11 = $46;
 $47 = $7;
 $12 = $47;
 $48 = $11;
 $49 = $48 >= 0.0;
 if ($49) {
  $50 = $8;
  $51 = $10;
  $52 = $50 + $51;
  $16 = $52;
  $53 = $16;
  $54 = $53 < 0.0;
  $55 = $11;
  $56 = (+Math_sqrt((+$55)));
  $57 = -$56;
  $58 = $54 ? $57 : $56;
  $59 = $16;
  $60 = $59 + $58;
  $16 = $60;
  $61 = $16;
  $62 = (+_cbrtx($61));
  $17 = $62;
  $63 = $17;
  $64 = $17;
  $65 = $64 != 0.0;
  if ($65) {
   $66 = $9;
   $67 = $17;
   $68 = $66 / $67;
   $70 = $68;
  } else {
   $70 = 0.0;
  }
  $69 = $63 + $70;
  $71 = $12;
  $72 = $71 + $69;
  $12 = $72;
 } else {
  $73 = $11;
  $74 = -$73;
  $75 = (+Math_sqrt((+$74)));
  $76 = $8;
  $77 = $10;
  $78 = $76 + $77;
  $79 = -$78;
  $80 = (+Math_atan2((+$75),(+$79)));
  $18 = $80;
  $81 = $7;
  $82 = 2.0 * $81;
  $83 = $18;
  $84 = $83 / 3.0;
  $85 = (+Math_cos((+$84)));
  $86 = $82 * $85;
  $87 = $12;
  $88 = $87 + $86;
  $12 = $88;
 }
 $89 = $12;
 $90 = (+_sq($89));
 $91 = $6;
 $92 = $90 + $91;
 $93 = (+Math_sqrt((+$92)));
 $13 = $93;
 $94 = $12;
 $95 = $94 < 0.0;
 if ($95) {
  $96 = $6;
  $97 = $13;
  $98 = $12;
  $99 = $97 - $98;
  $100 = $96 / $99;
  $104 = $100;
 } else {
  $101 = $12;
  $102 = $13;
  $103 = $101 + $102;
  $104 = $103;
 }
 $14 = $104;
 $105 = $14;
 $106 = $6;
 $107 = $105 - $106;
 $108 = $13;
 $109 = 2.0 * $108;
 $110 = $107 / $109;
 $15 = $110;
 $111 = $14;
 $112 = $14;
 $113 = $15;
 $114 = (+_sq($113));
 $115 = $112 + $114;
 $116 = (+Math_sqrt((+$115)));
 $117 = $15;
 $118 = $116 + $117;
 $119 = $111 / $118;
 $4 = $119;
 $120 = $4;
 STACKTOP = sp;return (+$120);
}
function _cbrtx($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+Math_abs((+$3)));
 $5 = (+Math_pow((+$4),0.33333333333333331));
 $2 = $5;
 $6 = $1;
 $7 = $6 < 0.0;
 $8 = $2;
 $9 = -$8;
 $10 = $7 ? $9 : $8;
 STACKTOP = sp;return (+$10);
}
function _sumx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9 + $10;
 $6 = $11;
 $12 = $6;
 $13 = $4;
 $14 = $12 - $13;
 $7 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 - $16;
 $8 = $17;
 $18 = $3;
 $19 = $7;
 $20 = $19 - $18;
 $7 = $20;
 $21 = $4;
 $22 = $8;
 $23 = $22 - $21;
 $8 = $23;
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $31 = $6;
  STACKTOP = sp;return (+$31);
 }
 $26 = $7;
 $27 = $8;
 $28 = $26 + $27;
 $29 = -$28;
 $30 = $5;
 HEAPF64[$30>>3] = $29;
 $31 = $6;
 STACKTOP = sp;return (+$31);
}
function _geod_inverse($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 (+_geod_geninverse($16,$17,$18,$19,$20,$21,$22,$23,0,0,0,0));
 STACKTOP = sp;return;
}
function _pj_atof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_pj_strtod($2,0));
 STACKTOP = sp;return (+$3);
}
function _pj_strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_pj_replace_point_by_locale_point($8,46,$6)|0);
 $7 = $9;
 $10 = $7;
 $11 = $3;
 $12 = (+_strtod($10,$11));
 $4 = $12;
 $13 = (___errno_location()|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $7;
  $21 = $19;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = (($17) + ($23)|0);
  $25 = $3;
  HEAP32[$25>>2] = $24;
 }
 $26 = $7;
 $27 = $2;
 $28 = ($26|0)!=($27|0);
 if ($28) {
  $29 = $7;
  $30 = ($29|0)!=($6|0);
  if ($30) {
   $31 = $7;
   _free($31);
  }
 }
 $32 = $5;
 $33 = (___errno_location()|0);
 HEAP32[$33>>2] = $32;
 $34 = $4;
 STACKTOP = sp;return (+$34);
}
function _pj_replace_point_by_locale_point($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = (_localeconv()|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $7;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $7;
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $7;
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP8[$24>>0]|0;
    $8 = $25;
    $26 = $5;
    $27 = $26 << 24 >> 24;
    $28 = $8;
    $29 = $28 << 24 >> 24;
    $30 = ($27|0)!=($29|0);
    if ($30) {
     $31 = $4;
     $32 = $8;
     $33 = $32 << 24 >> 24;
     $34 = (_strchr($31,$33)|0);
     $9 = $34;
     $35 = $4;
     $36 = $5;
     $37 = $36 << 24 >> 24;
     $38 = (_strchr($35,$37)|0);
     $10 = $38;
     $39 = $10;
     $40 = ($39|0)!=(0|0);
     $41 = $9;
     $42 = ($41|0)!=(0|0);
     $or$cond = $40 | $42;
     if ($or$cond) {
      $43 = $4;
      $44 = (_strlen($43)|0);
      $45 = ($44>>>0)<(64);
      if ($45) {
       $46 = $6;
       $47 = $4;
       (_strcpy($46,$47)|0);
       $48 = $6;
       $11 = $48;
      } else {
       $49 = $4;
       $50 = (___strdup($49)|0);
       $11 = $50;
      }
      $51 = $9;
      $52 = ($51|0)!=(0|0);
      if ($52) {
       $53 = $9;
       $54 = $4;
       $55 = $53;
       $56 = $54;
       $57 = (($55) - ($56))|0;
       $58 = $11;
       $59 = (($58) + ($57)|0);
       HEAP8[$59>>0] = 32;
      }
      $60 = $10;
      $61 = ($60|0)!=(0|0);
      if ($61) {
       $62 = $8;
       $63 = $10;
       $64 = $4;
       $65 = $63;
       $66 = $64;
       $67 = (($65) - ($66))|0;
       $68 = $11;
       $69 = (($68) + ($67)|0);
       HEAP8[$69>>0] = $62;
      }
      $70 = $11;
      $3 = $70;
      $72 = $3;
      STACKTOP = sp;return ($72|0);
     }
    }
   }
  }
 }
 $71 = $4;
 $3 = $71;
 $72 = $3;
 STACKTOP = sp;return ($72|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 152;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6091]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 24408;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[6091]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((487|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[6091]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((488|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_87($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _localeconv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8896|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (21683 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 21771;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 21771;
  } else {
   $$01113 = 21771;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function _isgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -33)|0;
 $2 = ($1>>>0)<(94);
 $3 = $2&1;
 return ($3|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=8952; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 511]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((23575 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 24055;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 24055;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 24055;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 24055 : (24057);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (24056);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 24055;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 24055;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 24065;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 24072;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (24073) : (24078);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (24075);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (24039 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(24103,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(24103,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 24091 : 24095;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 24114 : 24099;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 24055;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (24039 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (24055 + ($255)|0);
    $$332 = $or$cond282 ? 24055 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 24055;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 511]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 511]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 511]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 511]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 511]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 511]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (24105 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (24114 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (9064 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (9064 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (9064 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (9096 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(24118,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 489;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 152;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 151;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 149;
   $37 = HEAP32[(24368)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((24392)|0));
   $40 = HEAP32[(24388)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(24388)>>2] = $7;
   ___unlock(((24392)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((24392)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(24388)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(24388)>>2] = $15;
  }
  ___unlock(((24392)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 255]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2194]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[2194]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((24392)|0));
   $$02325 = HEAP32[(24388)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((24392)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 511]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 511]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(24118,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $34 = $8;
 } else {
  $34 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 511]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $35 = ($34|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($34|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($0)|0);
 $4 = (($0) + ($3)|0);
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0$lcssa = $4;
  } else {
   $$01013 = $2;$$01112 = $1;$$014 = $4;
   while(1) {
    $6 = HEAP8[$$01112>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$014;
     break L1;
    }
    $8 = (($$01013) + -1)|0;
    $9 = ((($$01112)) + 1|0);
    $10 = ((($$014)) + 1|0);
    HEAP8[$$014>>0] = $6;
    $11 = ($8|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01013 = $8;$$01112 = $9;$$014 = $10;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($0|0);
}
function _hypot($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$036 = 0.0, $$037 = 0.0, $$038 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & 2147483647;
 $8 = ($6>>>0)<($7>>>0);
 $9 = ($2>>>0)<($4>>>0);
 $10 = ($6|0)==($7|0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 $13 = $12 ? $4 : $2;
 $14 = $12 ? $7 : $6;
 $15 = $12 ? $2 : $4;
 $16 = $12 ? $6 : $7;
 $17 = (_bitshift64Lshr(($13|0),($14|0),52)|0);
 $18 = tempRet0;
 $19 = (_bitshift64Lshr(($15|0),($16|0),52)|0);
 $20 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $13;HEAP32[tempDoublePtr+4>>2] = $14;$21 = +HEAPF64[tempDoublePtr>>3];
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$22 = +HEAPF64[tempDoublePtr>>3];
 $23 = ($19|0)==(2047);
 do {
  if ($23) {
   $$036 = $22;
  } else {
   $24 = ($17|0)==(2047);
   $25 = ($15|0)==(0);
   $26 = ($16|0)==(0);
   $27 = $25 & $26;
   $or$cond = $27 | $24;
   if ($or$cond) {
    $$036 = $21;
   } else {
    $28 = (($17) - ($19))|0;
    $29 = ($28|0)>(64);
    if ($29) {
     $30 = $21 + $22;
     $$036 = $30;
     break;
    }
    $31 = ($17>>>0)>(1533);
    if ($31) {
     $32 = $21 * 1.9010915662951598E-211;
     $33 = $22 * 1.9010915662951598E-211;
     $$0 = 5.2601359015483735E+210;$$037 = $32;$$038 = $33;
    } else {
     $34 = ($19>>>0)<(573);
     if ($34) {
      $35 = $21 * 5.2601359015483735E+210;
      $36 = $22 * 5.2601359015483735E+210;
      $$0 = 1.9010915662951598E-211;$$037 = $35;$$038 = $36;
     } else {
      $$0 = 1.0;$$037 = $21;$$038 = $22;
     }
    }
    $37 = $$037 * 134217729.0;
    $38 = $$037 - $37;
    $39 = $37 + $38;
    $40 = $$037 - $39;
    $41 = $$037 * $$037;
    $42 = $39 * $39;
    $43 = $42 - $41;
    $44 = $39 * 2.0;
    $45 = $44 * $40;
    $46 = $43 + $45;
    $47 = $40 * $40;
    $48 = $47 + $46;
    $49 = $$038 * 134217729.0;
    $50 = $$038 - $49;
    $51 = $49 + $50;
    $52 = $$038 - $51;
    $53 = $$038 * $$038;
    $54 = $51 * $51;
    $55 = $54 - $53;
    $56 = $51 * 2.0;
    $57 = $56 * $52;
    $58 = $55 + $57;
    $59 = $52 * $52;
    $60 = $59 + $58;
    $61 = $60 + $48;
    $62 = $53 + $61;
    $63 = $41 + $62;
    $64 = (+Math_sqrt((+$63)));
    $65 = $$0 * $64;
    $$036 = $65;
   }
  }
 } while(0);
 return (+$$036);
}
function _cosh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1072049730);
 do {
  if ($5) {
   $6 = ($3>>>0)<(1045430272);
   if ($6) {
    $$0 = 1.0;
   } else {
    $7 = (+_expm1($4));
    $8 = $7 * $7;
    $9 = $7 + 1.0;
    $10 = $9 * 2.0;
    $11 = $8 / $10;
    $12 = $11 + 1.0;
    $$0 = $12;
   }
  } else {
   $13 = ($3>>>0)<(1082535490);
   if ($13) {
    $14 = (+Math_exp((+$4)));
    $15 = 1.0 / $14;
    $16 = $14 + $15;
    $17 = $16 * 0.5;
    $$0 = $17;
    break;
   } else {
    $18 = (+___expo2($4));
    $$0 = $18;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _sinh($0) {
 $0 = +$0;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2|0)<(0);
 $$ = $3 ? -0.5 : 0.5;
 $4 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = ($4>>>0)<(1082535490);
 do {
  if ($6) {
   $7 = (+_expm1($5));
   $8 = ($4>>>0)<(1072693248);
   if (!($8)) {
    $16 = $7 + 1.0;
    $17 = $7 / $16;
    $18 = $7 + $17;
    $19 = $$ * $18;
    $$0 = $19;
    break;
   }
   $9 = ($4>>>0)<(1045430272);
   if ($9) {
    $$0 = $0;
   } else {
    $10 = $7 * 2.0;
    $11 = $7 * $7;
    $12 = $7 + 1.0;
    $13 = $11 / $12;
    $14 = $10 - $13;
    $15 = $$ * $14;
    $$0 = $15;
   }
  } else {
   $20 = $$ * 2.0;
   $21 = (+___expo2($5));
   $22 = $20 * $21;
   $$0 = $22;
  }
 } while(0);
 return (+$$0);
}
function _expm1($0) {
 $0 = +$0;
 var $$0 = 0.0, $$0105 = 0, $$0106 = 0.0, $$0107 = 0.0, $$0109 = 0.0, $$0110 = 0.0, $$0111 = 0.0, $$1 = 0, $$1108 = 0.0, $$pn = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $5 = tempRet0;
 $6 = ($3>>>0)>(1078159481);
 do {
  if ($6) {
   $7 = $2 & 2147483647;
   $8 = ($7>>>0)>(2146435072);
   $9 = ($1>>>0)>(0);
   $10 = ($7|0)==(2146435072);
   $11 = $10 & $9;
   $12 = $8 | $11;
   if ($12) {
    $$0 = $0;
   } else {
    $13 = ($4|0)==(0);
    if ($13) {
     $14 = $0 > 709.78271289338397;
     if ($14) {
      $15 = $0 * 8.9884656743115795E+307;
      $$0 = $15;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $16 = ($3>>>0)>(1071001154);
   if (!($16)) {
    $33 = ($3>>>0)<(1016070144);
    if ($33) {
     $$0 = $0;
     break;
    } else {
     $$0106 = $0;$$0111 = 0.0;$$1 = 0;
     label = 14;
     break;
    }
   }
   $17 = ($3>>>0)<(1072734898);
   if ($17) {
    $18 = ($4|0)==(0);
    if ($18) {
     $19 = $0 + -0.69314718036912382;
     $$0105 = 1;$$0109 = $19;$$0110 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $20 = $0 + 0.69314718036912382;
     $$0105 = -1;$$0109 = $20;$$0110 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $21 = $0 * 1.4426950408889634;
  $22 = ($4|0)!=(0);
  $23 = $22 ? -0.5 : 0.5;
  $24 = $21 + $23;
  $25 = (~~(($24)));
  $26 = (+($25|0));
  $27 = $26 * 0.69314718036912382;
  $28 = $0 - $27;
  $29 = $26 * 1.9082149292705877E-10;
  $$0105 = $25;$$0109 = $28;$$0110 = $29;
  label = 12;
 }
 if ((label|0) == 12) {
  $30 = $$0109 - $$0110;
  $31 = $$0109 - $30;
  $32 = $31 - $$0110;
  $$0106 = $30;$$0111 = $32;$$1 = $$0105;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $34 = $$0106 * 0.5;
   $35 = $$0106 * $34;
   $36 = $35 * 2.0109921818362437E-7;
   $37 = 4.0082178273293624E-6 - $36;
   $38 = $35 * $37;
   $39 = $38 + -7.9365075786748794E-5;
   $40 = $35 * $39;
   $41 = $40 + 0.0015873015872548146;
   $42 = $35 * $41;
   $43 = $42 + -0.033333333333333132;
   $44 = $35 * $43;
   $45 = $44 + 1.0;
   $46 = $34 * $45;
   $47 = 3.0 - $46;
   $48 = $45 - $47;
   $49 = $$0106 * $47;
   $50 = 6.0 - $49;
   $51 = $48 / $50;
   $52 = $35 * $51;
   $53 = ($$1|0)==(0);
   if ($53) {
    $54 = $$0106 * $52;
    $55 = $54 - $35;
    $56 = $$0106 - $55;
    $$0 = $56;
    break;
   }
   $57 = $52 - $$0111;
   $58 = $$0106 * $57;
   $59 = $58 - $$0111;
   $60 = $59 - $35;
   switch ($$1|0) {
   case -1:  {
    $61 = $$0106 - $60;
    $62 = $61 * 0.5;
    $63 = $62 + -0.5;
    $$0 = $63;
    break L18;
    break;
   }
   case 1:  {
    $64 = $$0106 < -0.25;
    if ($64) {
     $65 = $$0106 + 0.5;
     $66 = $60 - $65;
     $67 = $66 * -2.0;
     $$0 = $67;
     break L18;
    } else {
     $68 = $$0106 - $60;
     $69 = $68 * 2.0;
     $70 = $69 + 1.0;
     $$0 = $70;
     break L18;
    }
    break;
   }
   default: {
    $71 = (($$1) + 1023)|0;
    $72 = (_bitshift64Shl(($71|0),0,52)|0);
    $73 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $72;HEAP32[tempDoublePtr+4>>2] = $73;$74 = +HEAPF64[tempDoublePtr>>3];
    $75 = ($$1>>>0)>(56);
    if ($75) {
     $76 = $$0106 - $60;
     $77 = $76 + 1.0;
     $78 = ($$1|0)==(1024);
     $79 = $77 * 2.0;
     $80 = $79 * 8.9884656743115795E+307;
     $81 = $74 * $77;
     $$0107 = $78 ? $80 : $81;
     $82 = $$0107 + -1.0;
     $$0 = $82;
     break L18;
    }
    $83 = (1023 - ($$1))|0;
    $84 = (_bitshift64Shl(($83|0),0,52)|0);
    $85 = tempRet0;
    $86 = ($$1|0)<(20);
    if ($86) {
     $87 = $$0106 - $60;
     HEAP32[tempDoublePtr>>2] = $84;HEAP32[tempDoublePtr+4>>2] = $85;$88 = +HEAPF64[tempDoublePtr>>3];
     $89 = 1.0 - $88;
     $90 = $89 + $87;
     $$pn = $90;
    } else {
     HEAP32[tempDoublePtr>>2] = $84;HEAP32[tempDoublePtr+4>>2] = $85;$91 = +HEAPF64[tempDoublePtr>>3];
     $92 = $91 + $60;
     $93 = $$0106 - $92;
     $94 = $93 + 1.0;
     $$pn = $94;
    }
    $$1108 = $74 * $$pn;
    $$0 = $$1108;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function ___expo2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -1416.0996898839683;
 $2 = (+Math_exp((+$1)));
 $3 = $2 * 2.2471164185778949E+307;
 $4 = $3 * 2.2471164185778949E+307;
 return (+$4);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[6103]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (24452 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[6103] = $24;
     } else {
      $25 = HEAP32[(24428)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(24420)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (24452 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[6103] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(24428)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(24432)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (24452 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[6103] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(24428)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(24420)>>2] = $84;
     HEAP32[(24432)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(24416)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (24716 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(24428)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (24716 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(24416)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(24428)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(24428)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(24428)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(24432)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (24452 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[6103] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(24428)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(24420)>>2] = $$0191$i;
      HEAP32[(24432)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(24416)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (24716 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (24716 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(24420)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(24428)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (24716 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(24416)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(24428)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(24428)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(24428)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (24452 + ($425<<2)|0);
          $427 = HEAP32[6103]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[6103] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(24428)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (24716 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(24416)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(24428)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(24428)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(24420)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(24432)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(24432)>>2] = $511;
   HEAP32[(24420)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(24420)>>2] = 0;
   HEAP32[(24432)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(24424)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(24424)>>2] = $526;
  $527 = HEAP32[(24436)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(24436)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[6221]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(24892)>>2] = 4096;
  HEAP32[(24888)>>2] = 4096;
  HEAP32[(24896)>>2] = -1;
  HEAP32[(24900)>>2] = -1;
  HEAP32[(24904)>>2] = 0;
  HEAP32[(24856)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[6221] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(24892)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(24852)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(24844)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(24856)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(24436)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (24860);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(24888)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(24844)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(24852)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(24892)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(24856)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(24856)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(24844)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(24844)>>2] = $624;
  $625 = HEAP32[(24848)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(24848)>>2] = $624;
  }
  $627 = HEAP32[(24436)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(24428)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(24428)>>2] = $$748$i;
    }
    HEAP32[(24860)>>2] = $$748$i;
    HEAP32[(24864)>>2] = $$723947$i;
    HEAP32[(24872)>>2] = 0;
    $632 = HEAP32[6221]|0;
    HEAP32[(24448)>>2] = $632;
    HEAP32[(24444)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (24452 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(24436)>>2] = $646;
    HEAP32[(24424)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(24900)>>2]|0;
    HEAP32[(24440)>>2] = $652;
   } else {
    $$024370$i = (24860);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(24424)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(24436)>>2] = $676;
       HEAP32[(24424)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(24900)>>2]|0;
       HEAP32[(24440)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(24428)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(24428)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (24860);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (24860);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(24424)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(24424)>>2] = $724;
        HEAP32[(24436)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(24432)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(24420)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(24420)>>2] = $730;
         HEAP32[(24432)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (24452 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[6103]|0;
            $757 = $756 & $755;
            HEAP32[6103] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (24716 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(24416)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(24416)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(24428)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(24428)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(24428)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (24452 + ($834<<2)|0);
         $836 = HEAP32[6103]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[6103] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(24428)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (24716 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(24416)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(24416)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(24428)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(24428)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (24860);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(24436)>>2] = $944;
    HEAP32[(24424)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(24900)>>2]|0;
    HEAP32[(24440)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(24860)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(24860)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(24860)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(24860)+12>>2]|0;
    HEAP32[(24860)>>2] = $$748$i;
    HEAP32[(24864)>>2] = $$723947$i;
    HEAP32[(24872)>>2] = 0;
    HEAP32[(24868)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (24452 + ($965<<2)|0);
      $967 = HEAP32[6103]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[6103] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(24428)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (24716 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(24416)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(24416)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(24428)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(24428)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(24424)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(24424)>>2] = $1047;
   $1048 = HEAP32[(24436)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(24436)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(24428)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(24432)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(24420)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (24452 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[6103]|0;
     $38 = $37 & $36;
     HEAP32[6103] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (24716 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(24416)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(24416)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(24428)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(24428)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(24428)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(24436)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(24424)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(24424)>>2] = $123;
   HEAP32[(24436)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(24432)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(24432)>>2] = 0;
   HEAP32[(24420)>>2] = 0;
   return;
  }
  $128 = HEAP32[(24432)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(24420)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(24420)>>2] = $131;
   HEAP32[(24432)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (24452 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(24428)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[6103]|0;
     $155 = $154 & $153;
     HEAP32[6103] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(24428)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(24428)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(24428)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (24716 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(24416)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(24416)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(24428)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(24428)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(24428)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(24432)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(24420)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (24452 + ($236<<2)|0);
  $238 = HEAP32[6103]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[6103] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(24428)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (24716 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(24416)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(24416)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(24428)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(24428)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(24444)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(24444)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (24868);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(24444)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(24428)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(24892)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(24436)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(24424)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(24436)>>2] = $40;
  HEAP32[(24424)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(24432)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(24420)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(24420)>>2] = $storemerge1;
  HEAP32[(24432)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (24452 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[6103]|0;
    $93 = $92 & $91;
    HEAP32[6103] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (24716 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(24416)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(24416)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(24428)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(24428)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(24428)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(24428)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(24432)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(24420)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (24452 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[6103]|0;
     $34 = $33 & $32;
     HEAP32[6103] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (24716 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(24416)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(24416)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(24428)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(24428)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(24428)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(24428)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(24436)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(24424)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(24424)>>2] = $118;
   HEAP32[(24436)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(24432)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(24432)>>2] = 0;
   HEAP32[(24420)>>2] = 0;
   return;
  }
  $123 = HEAP32[(24432)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(24420)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(24420)>>2] = $126;
   HEAP32[(24432)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (24452 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[6103]|0;
     $149 = $148 & $147;
     HEAP32[6103] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (24716 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(24416)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(24416)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(24428)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(24428)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(24428)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(24432)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(24420)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (24452 + ($227<<2)|0);
  $229 = HEAP32[6103]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[6103] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(24428)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (24716 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(24416)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(24416)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(24428)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(24428)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,_pj_aea,_pj_aeqd,_pj_airy,_pj_aitoff,_pj_alsk,_pj_apian,_pj_august,_pj_bacon,_pj_bipc,_pj_boggs,_pj_bonne,_pj_calcofi,_pj_cass,_pj_cc,_pj_cea,_pj_chamb,_pj_collg,_pj_comill,_pj_crast,_pj_denoy,_pj_eck1,_pj_eck2,_pj_eck3,_pj_eck4,_pj_eck5,_pj_eck6,_pj_eqc,_pj_eqdc
,_pj_euler,_pj_etmerc,_pj_fahey,_pj_fouc,_pj_fouc_s,_pj_gall,_pj_geocent,_pj_geos,_pj_gins8,_pj_gn_sinu,_pj_gnom,_pj_goode,_pj_gs48,_pj_gs50,_pj_hammer,_pj_hatano,_pj_healpix,_pj_rhealpix,_pj_igh,_pj_imw_p,_pj_isea,_pj_kav5,_pj_kav7,_pj_krovak,_pj_labrd,_pj_laea,_pj_lagrng,_pj_larr,_pj_lask,_pj_lonlat
,_pj_latlon,_pj_latlong,_pj_longlat,_pj_lcc,_pj_lcca,_pj_leac,_pj_lee_os,_pj_loxim,_pj_lsat,_pj_mbt_s,_pj_mbt_fps,_pj_mbtfpp,_pj_mbtfpq,_pj_mbtfps,_pj_merc,_pj_mil_os,_pj_mill,_pj_misrsom,_pj_moll,_pj_murd1,_pj_murd2,_pj_murd3,_pj_natearth,_pj_natearth2,_pj_nell,_pj_nell_h,_pj_nicol,_pj_nsper,_pj_nzmg,_pj_ob_tran
,_pj_ocea,_pj_oea,_pj_omerc,_pj_ortel,_pj_ortho,_pj_pconic,_pj_patterson,_pj_poly,_pj_putp1,_pj_putp2,_pj_putp3,_pj_putp3p,_pj_putp4p,_pj_putp5,_pj_putp5p,_pj_putp6,_pj_putp6p,_pj_qua_aut,_pj_qsc,_pj_robin,_pj_rouss,_pj_rpoly,_pj_sch,_pj_sinu,_pj_somerc,_pj_stere,_pj_sterea,_pj_gstmerc,_pj_tcc,_pj_tcea
,_pj_times,_pj_tissot,_pj_tmerc,_pj_tpeqd,_pj_tpers,_pj_ups,_pj_urm5,_pj_urmfps,_pj_utm,_pj_vandg,_pj_vandg2,_pj_vandg3,_pj_vandg4,_pj_vitk1,_pj_wag1,_pj_wag2,_pj_wag3,_pj_wag4,_pj_wag5,_pj_wag6,_pj_wag7,_pj_weren,_pj_wink1,_pj_wink2,_pj_wintri,b0,b0,b0,_pj_stdio_ftell,b0
,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_pj_stdio_fopen,b1,_pj_stdio_fseek,b1,b1
,b1,___stdout_write,___stdio_seek,___stdio_write,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_pj_stdio_fread,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,_s_inverse,_s_forward,_e_guam_inv,_e_guam_fwd,_e_inverse,_e_forward,b3,_s_inverse_3,_s_forward_4,b3,_e_inverse_7,_e_forward_8,_s_inverse_9,_s_forward_10,b3,_e_inverse_13,_e_forward_14,b3,_s_inverse_18,_s_forward_19,b3,_e_inverse_24,_e_forward_25,b3
,_s_inverse_28,_s_forward_29,b3,_e_inverse_35,_e_forward_36,_s_inverse_37,_s_forward_38,b3,_e_inverse_42,_e_forward_43,b3,_e_inverse_49,_e_forward_50,b3,_s_inverse_55,_s_forward_56,b3,_e_inverse_60,_e_forward_61,_s_inverse_62,_s_forward_63,b3,_e_inverse_68,_e_forward_69,_special,b3,_s_forward_72,b3,_e_forward_80,_e_inverse_81
,b3,_e_inverse_92,_e_forward_93,b3,_e_inverse_100,_e_forward_101,_special_102,b3,_e_inverse_105,_e_forward_106,_s_inverse_107,_s_forward_108,b3,_s_forward_112,b3,_s_inverse_117,_s_forward_118,b3,_e_forward_125,_e_inverse_126,b3,_s_inverse_129,_s_forward_130,_e_inverse_131,_e_forward_132,b3,_s_inverse_135,_s_forward_136,b3,_e_inverse_141
,_e_forward_142,_s_inverse_143,_s_forward_144,b3,_s_inverse_148,_s_forward_149,b3,_s_inverse_152,_s_forward_153,b3,_e_inverse_158,_e_forward_159,b3,_e_inverse_164,_e_forward_165,b3,_e_inverse_170,_e_forward_171,b3,_e_inverse_175,_e_forward_176,_s_inverse_177,_s_forward_178,b3,_s_inverse_181,_s_forward_182,b3,_s_inverse_192,_s_forward_193,b3
,_e_inverse_210,_e_forward_211,b3,_e_inverse_214,_e_forward_215,b3,_s_forward_218,b3,_s_inverse_221,_s_forward_222,b3,_s_inverse_225,_s_forward_226,b3,_e_inverse_230,_e_forward_231,_s_inverse_232,_s_forward_233,b3,_s_forward_238,b3,_s_inverse_242,_s_forward_243,b3,_s_forward_249,b3,_s_forward_252,b3,_s_forward_257,b3
,_s_forward_264,_s_inverse_265,b3,_s_forward_270,b3,_s_forward_273,b3,_s_forward_276,b3,_s_forward_279,b3,_o_forward,_o_inverse,_t_forward,_t_inverse,b3,_s_forward_299,_s_inverse_300,b3,_s_inverse_307,_s_forward_308,b3,_s_inverse_311,_s_forward_312,b3,_s_forward_315,b3,_s_forward_318,b3,_s_forward_321
,b3,_e_inverse_325,_e_forward_326,b3,_e_inverse_331,_e_forward_332,_s_inverse_333,_s_forward_334,b3,_e_inverse_338,_e_forward_339,b3,_s_forward_345,b3,_s_inverse_348,_s_forward_349,b3,_s_inverse_352,_s_forward_353,b3,_s_inverse_356,_s_forward_357,b3,_s_forward_360,b3,_s_inverse_363,_s_forward_364,b3,_s_inverse_367,_s_forward_368
,b3,_s_inverse_372,_s_forward_373,b3,_s_inverse_376,_s_forward_377,b3,_s_inverse_380,_s_forward_381,b3,_s_inverse_384,_s_forward_385,b3,_s_inverse_389,_s_forward_390,b3,_s_forward_393,b3,_s_inverse_396,_s_forward_397,b3,_e_inverse_400,_e_forward_401,_s_inverse_403,_s_forward_404,b3,_s_forward_411,_s_inverse_412,b3,_s_inverse_415
,_s_forward_416,b3,_s_inverse_419,_s_forward_420,b3,_s_inverse_424,_s_forward_425,b3,_s_inverse_428,_s_forward_429,b3,_s_inverse_432,_s_forward_433,b3,_s_inverse_436,_s_forward_437,b3,_s_inverse_443,_s_forward_444,b3,_s_inverse_447,_s_forward_448,b3,_s_inverse_451,_s_forward_452,b3,_s_inverse_455,_s_forward_456,b3,_s_inverse_459
,_s_forward_460,b3,_s_inverse_463,_s_forward_464,b3,_s_inverse_467,_s_forward_468,b3,_s_inverse_471,_s_forward_472,b3,_s_inverse_475,_s_forward_476,b3,_e_inverse_479,_e_forward_480,b3,_s_inverse_483,_s_forward_484,b3,_forward3d,_inverse3d,b3,_s_inverse_499,_s_forward_500,b3,_s_forward_506,b3,_s_inverse_512,_s_forward_513
,b3,_s_inverse_516,_s_forward_517,b3,_s_inverse_521,_s_forward_522,b3,_s_inverse_526,_s_forward_527,b3,_s_forward_531,b3,_inverse,_forward,b3,_inverse_536,_forward_537,_pj_stderr_logger,b3,_e_healpix_forward,_e_healpix_inverse,_s_healpix_forward,_s_healpix_inverse,_e_rhealpix_forward,_e_rhealpix_inverse,_s_rhealpix_forward,_s_rhealpix_inverse,b3,_s_inverse_1010,_s_forward_1011
,b3,_s_inverse_1020,_s_forward_1021,b3,_e_inverse_1030,_e_forward_1031,_s_inverse_1032,_s_forward_1033,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_pj_stdio_fclose
,b4,b4,b4,b4,b4,_freeup,b4,b4,b4,b4,b4,b4,_freeup_1,b4,b4,_freeup_5,b4,b4,b4,b4,_freeup_11,b4,b4,_freeup_15,b4,b4,_freeup_22,b4,b4,_freeup_26
,b4,b4,_freeup_30,b4,b4,b4,b4,_freeup_40,b4,b4,_freeup_44,b4,b4,_freeup_52,b4,b4,_freeup_57,b4,b4,b4,b4,_freeup_64,b4,b4,b4,_freeup_70,b4,_freeup_76,b4,b4
,_freeup_86,b4,b4,_freeup_94,b4,b4,b4,_freeup_103,b4,b4,b4,b4,_freeup_109,b4,_freeup_113,b4,b4,_freeup_123,b4,b4,_freeup_127,b4,b4,b4,b4,_freeup_133,b4,b4,_freeup_137,b4
,b4,b4,b4,_freeup_145,b4,b4,_freeup_150,b4,b4,_freeup_154,b4,b4,_freeup_160,b4,b4,_freeup_166,b4,b4,_freeup_172,b4,b4,b4,b4,_freeup_179,b4,b4,_freeup_183,b4,b4,_freeup_194
,b4,b4,_freeup_212,b4,b4,_freeup_216,b4,_freeup_219,b4,b4,_freeup_223,b4,b4,_freeup_227,b4,b4,b4,b4,_freeup_234,b4,_freeup_239,b4,b4,_freeup_247,b4,_freeup_250,b4,_freeup_253,b4,_freeup_258
,b4,b4,_freeup_266,b4,_freeup_271,b4,_freeup_274,b4,_freeup_277,b4,_freeup_280,b4,b4,b4,b4,_freeup_294,b4,b4,_freeup_301,b4,b4,_freeup_309,b4,b4,_freeup_313,b4,_freeup_316,b4,_freeup_319,b4
,_freeup_322,b4,b4,_freeup_327,b4,b4,b4,b4,_freeup_335,b4,b4,_freeup_343,b4,_freeup_346,b4,b4,_freeup_350,b4,b4,_freeup_354,b4,b4,_freeup_358,b4,_freeup_361,b4,b4,_freeup_365,b4,b4
,_freeup_369,b4,b4,_freeup_374,b4,b4,_freeup_378,b4,b4,_freeup_382,b4,b4,_freeup_386,b4,b4,_freeup_391,b4,_freeup_394,b4,b4,_freeup_398,b4,b4,b4,b4,_freeup_409,b4,b4,_freeup_413,b4
,b4,_freeup_417,b4,b4,_freeup_421,b4,b4,_freeup_426,b4,b4,_freeup_430,b4,b4,_freeup_434,b4,b4,_freeup_440,b4,b4,_freeup_445,b4,b4,_freeup_449,b4,b4,_freeup_453,b4,b4,_freeup_457,b4
,b4,_freeup_461,b4,b4,_freeup_465,b4,b4,_freeup_469,b4,b4,_freeup_473,b4,b4,_freeup_477,b4,b4,_freeup_481,b4,b4,_freeup_485,b4,b4,_freeup_496,b4,b4,_freeup_501,b4,_freeup_507,b4,b4
,_freeup_514,b4,b4,_freeup_518,b4,b4,_freeup_523,b4,b4,_freeup_528,b4,_freeup_532,b4,b4,_freeup_534,b4,b4,b4,_freeup_994,b4,b4,b4,b4,b4,b4,b4,b4,_freeup_1008,b4,b4
,_freeup_1018,b4,b4,_freeup_1028,b4,b4,b4,b4,_cleanup,_cleanup_87,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];

  return { _memset: _memset, _pj_transform: _pj_transform, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_self: _pthread_self, _pthread_mutex_unlock: _pthread_mutex_unlock, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _free: _free, _memmove: _memmove, _pj_init_plus: _pj_init_plus, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__pj_transform = asm["_pj_transform"]; asm["_pj_transform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pj_transform.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__pj_init_plus = asm["_pj_init_plus"]; asm["_pj_init_plus"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pj_init_plus.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _pj_transform = Module["_pj_transform"] = asm["_pj_transform"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _pj_init_plus = Module["_pj_init_plus"] = asm["_pj_init_plus"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



